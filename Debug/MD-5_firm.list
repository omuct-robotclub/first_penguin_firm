
MD-5_firm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000574c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080058d4  080058d4  000158d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005920  08005920  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005920  08005920  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005920  08005920  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005920  08005920  00015920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005924  08005924  00015924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000022c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000238  20000238  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000101a3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fd5  00000000  00000000  000301df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de8  00000000  00000000  000321b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d30  00000000  00000000  00032fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af36  00000000  00000000  00033cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001054b  00000000  00000000  0004ec06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a31b1  00000000  00000000  0005f151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00102302  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b18  00000000  00000000  00102354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080058bc 	.word	0x080058bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080058bc 	.word	0x080058bc

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fe0d 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f885 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 fafb 	bl	80007d0 <MX_GPIO_Init>
  MX_CAN_Init();
 80001da:	f000 f8e1 	bl	80003a0 <MX_CAN_Init>
  MX_TIM1_Init();
 80001de:	f000 f917 	bl	8000410 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001e2:	f000 f9b1 	bl	8000548 <MX_TIM2_Init>
  MX_TIM3_Init();
 80001e6:	f000 fa2f 	bl	8000648 <MX_TIM3_Init>
  MX_DMA_Init();
 80001ea:	f000 fad3 	bl	8000794 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80001ee:	f000 faa1 	bl	8000734 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001f2:	2100      	movs	r1, #0
 80001f4:	4835      	ldr	r0, [pc, #212]	; (80002cc <main+0x104>)
 80001f6:	f003 f853 	bl	80032a0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80001fa:	2100      	movs	r1, #0
 80001fc:	4833      	ldr	r0, [pc, #204]	; (80002cc <main+0x104>)
 80001fe:	f004 fdb7 	bl	8004d70 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000202:	2104      	movs	r1, #4
 8000204:	4831      	ldr	r0, [pc, #196]	; (80002cc <main+0x104>)
 8000206:	f003 f84b 	bl	80032a0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800020a:	2104      	movs	r1, #4
 800020c:	482f      	ldr	r0, [pc, #188]	; (80002cc <main+0x104>)
 800020e:	f004 fdaf 	bl	8004d70 <HAL_TIMEx_PWMN_Start>

  uint8_t hello[5] = "hello";
 8000212:	4a2f      	ldr	r2, [pc, #188]	; (80002d0 <main+0x108>)
 8000214:	f107 0308 	add.w	r3, r7, #8
 8000218:	e892 0003 	ldmia.w	r2, {r0, r1}
 800021c:	6018      	str	r0, [r3, #0]
 800021e:	3304      	adds	r3, #4
 8000220:	7019      	strb	r1, [r3, #0]
  uint8_t world[5] = "world";
 8000222:	4a2c      	ldr	r2, [pc, #176]	; (80002d4 <main+0x10c>)
 8000224:	463b      	mov	r3, r7
 8000226:	e892 0003 	ldmia.w	r2, {r0, r1}
 800022a:	6018      	str	r0, [r3, #0]
 800022c:	3304      	adds	r3, #4
 800022e:	7019      	strb	r1, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart1, hello, 5, 1);
 8000230:	f107 0108 	add.w	r1, r7, #8
 8000234:	2301      	movs	r3, #1
 8000236:	2205      	movs	r2, #5
 8000238:	4827      	ldr	r0, [pc, #156]	; (80002d8 <main+0x110>)
 800023a:	f004 ff98 	bl	800516e <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800023e:	2120      	movs	r1, #32
 8000240:	4826      	ldr	r0, [pc, #152]	; (80002dc <main+0x114>)
 8000242:	f001 fbc9 	bl	80019d8 <HAL_GPIO_TogglePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1600);
 8000246:	4b21      	ldr	r3, [pc, #132]	; (80002cc <main+0x104>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800024e:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 300);
 8000250:	4b1e      	ldr	r3, [pc, #120]	; (80002cc <main+0x104>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000258:	639a      	str	r2, [r3, #56]	; 0x38
	  led_set_RGB(0, 128, 0, 0);
 800025a:	2300      	movs	r3, #0
 800025c:	2200      	movs	r2, #0
 800025e:	2180      	movs	r1, #128	; 0x80
 8000260:	2000      	movs	r0, #0
 8000262:	f000 faff 	bl	8000864 <led_set_RGB>
	  led_set_RGB(1, 0, 128, 0);
 8000266:	2300      	movs	r3, #0
 8000268:	2280      	movs	r2, #128	; 0x80
 800026a:	2100      	movs	r1, #0
 800026c:	2001      	movs	r0, #1
 800026e:	f000 faf9 	bl	8000864 <led_set_RGB>
	  led_render_all();
 8000272:	f000 fb25 	bl	80008c0 <led_render_all>
	  HAL_Delay(1000);
 8000276:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800027a:	f000 fe1d 	bl	8000eb8 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, world, 5, 1);
 800027e:	4639      	mov	r1, r7
 8000280:	2301      	movs	r3, #1
 8000282:	2205      	movs	r2, #5
 8000284:	4814      	ldr	r0, [pc, #80]	; (80002d8 <main+0x110>)
 8000286:	f004 ff72 	bl	800516e <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800028a:	2120      	movs	r1, #32
 800028c:	4813      	ldr	r0, [pc, #76]	; (80002dc <main+0x114>)
 800028e:	f001 fba3 	bl	80019d8 <HAL_GPIO_TogglePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 300);
 8000292:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <main+0x104>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800029a:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1600);
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <main+0x104>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80002a4:	639a      	str	r2, [r3, #56]	; 0x38
	  led_set_RGB(0, 0, 0, 128);
 80002a6:	2380      	movs	r3, #128	; 0x80
 80002a8:	2200      	movs	r2, #0
 80002aa:	2100      	movs	r1, #0
 80002ac:	2000      	movs	r0, #0
 80002ae:	f000 fad9 	bl	8000864 <led_set_RGB>
	  led_set_RGB(1, 64, 64, 64);
 80002b2:	2340      	movs	r3, #64	; 0x40
 80002b4:	2240      	movs	r2, #64	; 0x40
 80002b6:	2140      	movs	r1, #64	; 0x40
 80002b8:	2001      	movs	r0, #1
 80002ba:	f000 fad3 	bl	8000864 <led_set_RGB>
	  led_render_all();
 80002be:	f000 faff 	bl	80008c0 <led_render_all>
	  HAL_Delay(1000);
 80002c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c6:	f000 fdf7 	bl	8000eb8 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, hello, 5, 1);
 80002ca:	e7b1      	b.n	8000230 <main+0x68>
 80002cc:	20000050 	.word	0x20000050
 80002d0:	080058d4 	.word	0x080058d4
 80002d4:	080058dc 	.word	0x080058dc
 80002d8:	20000178 	.word	0x20000178
 80002dc:	48000400 	.word	0x48000400

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b096      	sub	sp, #88	; 0x58
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002ea:	2228      	movs	r2, #40	; 0x28
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f005 fadc 	bl	80058ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	f107 031c 	add.w	r3, r7, #28
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]
 8000312:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000314:	2301      	movs	r3, #1
 8000316:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800031c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800031e:	2301      	movs	r3, #1
 8000320:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000322:	2301      	movs	r3, #1
 8000324:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000326:	2302      	movs	r3, #2
 8000328:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800032a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000330:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000334:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000336:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800033a:	4618      	mov	r0, r3
 800033c:	f001 fb66 	bl	8001a0c <HAL_RCC_OscConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000346:	f000 fb05 	bl	8000954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034a:	230f      	movs	r3, #15
 800034c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034e:	2302      	movs	r3, #2
 8000350:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800035a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000360:	f107 031c 	add.w	r3, r7, #28
 8000364:	2102      	movs	r1, #2
 8000366:	4618      	mov	r0, r3
 8000368:	f002 fb8e 	bl	8002a88 <HAL_RCC_ClockConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000372:	f000 faef 	bl	8000954 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8000376:	f241 0301 	movw	r3, #4097	; 0x1001
 800037a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000380:	2300      	movs	r3, #0
 8000382:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	4618      	mov	r0, r3
 8000388:	f002 fdb6 	bl	8002ef8 <HAL_RCCEx_PeriphCLKConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000392:	f000 fadf 	bl	8000954 <Error_Handler>
  }
}
 8000396:	bf00      	nop
 8000398:	3758      	adds	r7, #88	; 0x58
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80003a4:	4b18      	ldr	r3, [pc, #96]	; (8000408 <MX_CAN_Init+0x68>)
 80003a6:	4a19      	ldr	r2, [pc, #100]	; (800040c <MX_CAN_Init+0x6c>)
 80003a8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80003aa:	4b17      	ldr	r3, [pc, #92]	; (8000408 <MX_CAN_Init+0x68>)
 80003ac:	2202      	movs	r2, #2
 80003ae:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80003b0:	4b15      	ldr	r3, [pc, #84]	; (8000408 <MX_CAN_Init+0x68>)
 80003b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003b6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003b8:	4b13      	ldr	r3, [pc, #76]	; (8000408 <MX_CAN_Init+0x68>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 80003be:	4b12      	ldr	r3, [pc, #72]	; (8000408 <MX_CAN_Init+0x68>)
 80003c0:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 80003c4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80003c6:	4b10      	ldr	r3, [pc, #64]	; (8000408 <MX_CAN_Init+0x68>)
 80003c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003cc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <MX_CAN_Init+0x68>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <MX_CAN_Init+0x68>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <MX_CAN_Init+0x68>)
 80003dc:	2200      	movs	r2, #0
 80003de:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_CAN_Init+0x68>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003e6:	4b08      	ldr	r3, [pc, #32]	; (8000408 <MX_CAN_Init+0x68>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <MX_CAN_Init+0x68>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <MX_CAN_Init+0x68>)
 80003f4:	f000 fd84 	bl	8000f00 <HAL_CAN_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80003fe:	f000 faa9 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	20000028 	.word	0x20000028
 800040c:	40006400 	.word	0x40006400

08000410 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b096      	sub	sp, #88	; 0x58
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000416:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000422:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]
 8000432:	615a      	str	r2, [r3, #20]
 8000434:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	222c      	movs	r2, #44	; 0x2c
 800043a:	2100      	movs	r1, #0
 800043c:	4618      	mov	r0, r3
 800043e:	f005 fa35 	bl	80058ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000442:	4b3f      	ldr	r3, [pc, #252]	; (8000540 <MX_TIM1_Init+0x130>)
 8000444:	4a3f      	ldr	r2, [pc, #252]	; (8000544 <MX_TIM1_Init+0x134>)
 8000446:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000448:	4b3d      	ldr	r3, [pc, #244]	; (8000540 <MX_TIM1_Init+0x130>)
 800044a:	2200      	movs	r2, #0
 800044c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800044e:	4b3c      	ldr	r3, [pc, #240]	; (8000540 <MX_TIM1_Init+0x130>)
 8000450:	2220      	movs	r2, #32
 8000452:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 8000454:	4b3a      	ldr	r3, [pc, #232]	; (8000540 <MX_TIM1_Init+0x130>)
 8000456:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800045a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800045c:	4b38      	ldr	r3, [pc, #224]	; (8000540 <MX_TIM1_Init+0x130>)
 800045e:	2200      	movs	r2, #0
 8000460:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000462:	4b37      	ldr	r3, [pc, #220]	; (8000540 <MX_TIM1_Init+0x130>)
 8000464:	2200      	movs	r2, #0
 8000466:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000468:	4b35      	ldr	r3, [pc, #212]	; (8000540 <MX_TIM1_Init+0x130>)
 800046a:	2200      	movs	r2, #0
 800046c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800046e:	4834      	ldr	r0, [pc, #208]	; (8000540 <MX_TIM1_Init+0x130>)
 8000470:	f002 febf 	bl	80031f2 <HAL_TIM_PWM_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800047a:	f000 fa6b 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800047e:	2300      	movs	r3, #0
 8000480:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000482:	2300      	movs	r3, #0
 8000484:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000486:	2300      	movs	r3, #0
 8000488:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800048a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800048e:	4619      	mov	r1, r3
 8000490:	482b      	ldr	r0, [pc, #172]	; (8000540 <MX_TIM1_Init+0x130>)
 8000492:	f004 fd13 	bl	8004ebc <HAL_TIMEx_MasterConfigSynchronization>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800049c:	f000 fa5a 	bl	8000954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004a0:	2360      	movs	r3, #96	; 0x60
 80004a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004a8:	2300      	movs	r3, #0
 80004aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004ac:	2300      	movs	r3, #0
 80004ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004b4:	2300      	movs	r3, #0
 80004b6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004b8:	2300      	movs	r3, #0
 80004ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004c0:	2200      	movs	r2, #0
 80004c2:	4619      	mov	r1, r3
 80004c4:	481e      	ldr	r0, [pc, #120]	; (8000540 <MX_TIM1_Init+0x130>)
 80004c6:	f003 fbc1 	bl	8003c4c <HAL_TIM_PWM_ConfigChannel>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80004d0:	f000 fa40 	bl	8000954 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004d8:	2204      	movs	r2, #4
 80004da:	4619      	mov	r1, r3
 80004dc:	4818      	ldr	r0, [pc, #96]	; (8000540 <MX_TIM1_Init+0x130>)
 80004de:	f003 fbb5 	bl	8003c4c <HAL_TIM_PWM_ConfigChannel>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80004e8:	f000 fa34 	bl	8000954 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004ec:	2300      	movs	r3, #0
 80004ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 16;
 80004f8:	2310      	movs	r3, #16
 80004fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000504:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800050a:	2300      	movs	r3, #0
 800050c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800050e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000512:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000518:	2300      	movs	r3, #0
 800051a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	4619      	mov	r1, r3
 8000520:	4807      	ldr	r0, [pc, #28]	; (8000540 <MX_TIM1_Init+0x130>)
 8000522:	f004 fd39 	bl	8004f98 <HAL_TIMEx_ConfigBreakDeadTime>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 800052c:	f000 fa12 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <MX_TIM1_Init+0x130>)
 8000532:	f000 fb2d 	bl	8000b90 <HAL_TIM_MspPostInit>

}
 8000536:	bf00      	nop
 8000538:	3758      	adds	r7, #88	; 0x58
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000050 	.word	0x20000050
 8000544:	40012c00 	.word	0x40012c00

08000548 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08c      	sub	sp, #48	; 0x30
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800054e:	f107 031c 	add.w	r3, r7, #28
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800056c:	463b      	mov	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000576:	4b33      	ldr	r3, [pc, #204]	; (8000644 <MX_TIM2_Init+0xfc>)
 8000578:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800057c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800057e:	4b31      	ldr	r3, [pc, #196]	; (8000644 <MX_TIM2_Init+0xfc>)
 8000580:	2200      	movs	r2, #0
 8000582:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000584:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <MX_TIM2_Init+0xfc>)
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800058a:	4b2e      	ldr	r3, [pc, #184]	; (8000644 <MX_TIM2_Init+0xfc>)
 800058c:	f04f 32ff 	mov.w	r2, #4294967295
 8000590:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000592:	4b2c      	ldr	r3, [pc, #176]	; (8000644 <MX_TIM2_Init+0xfc>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000598:	4b2a      	ldr	r3, [pc, #168]	; (8000644 <MX_TIM2_Init+0xfc>)
 800059a:	2200      	movs	r2, #0
 800059c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800059e:	4829      	ldr	r0, [pc, #164]	; (8000644 <MX_TIM2_Init+0xfc>)
 80005a0:	f003 fa60 	bl	8003a64 <HAL_TIM_IC_Init>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80005aa:	f000 f9d3 	bl	8000954 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80005ae:	2304      	movs	r3, #4
 80005b0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80005b2:	2350      	movs	r3, #80	; 0x50
 80005b4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80005b6:	2300      	movs	r3, #0
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	4619      	mov	r1, r3
 80005c8:	481e      	ldr	r0, [pc, #120]	; (8000644 <MX_TIM2_Init+0xfc>)
 80005ca:	f003 fd1c 	bl	8004006 <HAL_TIM_SlaveConfigSynchro>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80005d4:	f000 f9be 	bl	8000954 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80005dc:	2301      	movs	r3, #1
 80005de:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	4619      	mov	r1, r3
 80005f0:	4814      	ldr	r0, [pc, #80]	; (8000644 <MX_TIM2_Init+0xfc>)
 80005f2:	f003 fa8e 	bl	8003b12 <HAL_TIM_IC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80005fc:	f000 f9aa 	bl	8000954 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000600:	2302      	movs	r3, #2
 8000602:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000604:	2302      	movs	r3, #2
 8000606:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2204      	movs	r2, #4
 800060e:	4619      	mov	r1, r3
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <MX_TIM2_Init+0xfc>)
 8000612:	f003 fa7e 	bl	8003b12 <HAL_TIM_IC_ConfigChannel>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800061c:	f000 f99a 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000620:	2300      	movs	r3, #0
 8000622:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000628:	463b      	mov	r3, r7
 800062a:	4619      	mov	r1, r3
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_TIM2_Init+0xfc>)
 800062e:	f004 fc45 	bl	8004ebc <HAL_TIMEx_MasterConfigSynchronization>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8000638:	f000 f98c 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	3730      	adds	r7, #48	; 0x30
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000009c 	.word	0x2000009c

08000648 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08e      	sub	sp, #56	; 0x38
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000668:	463b      	mov	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
 8000676:	615a      	str	r2, [r3, #20]
 8000678:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800067a:	4b2c      	ldr	r3, [pc, #176]	; (800072c <MX_TIM3_Init+0xe4>)
 800067c:	4a2c      	ldr	r2, [pc, #176]	; (8000730 <MX_TIM3_Init+0xe8>)
 800067e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000680:	4b2a      	ldr	r3, [pc, #168]	; (800072c <MX_TIM3_Init+0xe4>)
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000686:	4b29      	ldr	r3, [pc, #164]	; (800072c <MX_TIM3_Init+0xe4>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <MX_TIM3_Init+0xe4>)
 800068e:	2259      	movs	r2, #89	; 0x59
 8000690:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <MX_TIM3_Init+0xe4>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <MX_TIM3_Init+0xe4>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800069e:	4823      	ldr	r0, [pc, #140]	; (800072c <MX_TIM3_Init+0xe4>)
 80006a0:	f002 fd50 	bl	8003144 <HAL_TIM_Base_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80006aa:	f000 f953 	bl	8000954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006b8:	4619      	mov	r1, r3
 80006ba:	481c      	ldr	r0, [pc, #112]	; (800072c <MX_TIM3_Init+0xe4>)
 80006bc:	f003 fbda 	bl	8003e74 <HAL_TIM_ConfigClockSource>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80006c6:	f000 f945 	bl	8000954 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006ca:	4818      	ldr	r0, [pc, #96]	; (800072c <MX_TIM3_Init+0xe4>)
 80006cc:	f002 fd91 	bl	80031f2 <HAL_TIM_PWM_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80006d6:	f000 f93d 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	4619      	mov	r1, r3
 80006e8:	4810      	ldr	r0, [pc, #64]	; (800072c <MX_TIM3_Init+0xe4>)
 80006ea:	f004 fbe7 	bl	8004ebc <HAL_TIMEx_MasterConfigSynchronization>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80006f4:	f000 f92e 	bl	8000954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f8:	2360      	movs	r3, #96	; 0x60
 80006fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	220c      	movs	r2, #12
 800070c:	4619      	mov	r1, r3
 800070e:	4807      	ldr	r0, [pc, #28]	; (800072c <MX_TIM3_Init+0xe4>)
 8000710:	f003 fa9c 	bl	8003c4c <HAL_TIM_PWM_ConfigChannel>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800071a:	f000 f91b 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800071e:	4803      	ldr	r0, [pc, #12]	; (800072c <MX_TIM3_Init+0xe4>)
 8000720:	f000 fa36 	bl	8000b90 <HAL_TIM_MspPostInit>

}
 8000724:	bf00      	nop
 8000726:	3738      	adds	r7, #56	; 0x38
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200000e8 	.word	0x200000e8
 8000730:	40000400 	.word	0x40000400

08000734 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_USART1_UART_Init+0x58>)
 800073a:	4a15      	ldr	r2, [pc, #84]	; (8000790 <MX_USART1_UART_Init+0x5c>)
 800073c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_USART1_UART_Init+0x58>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_USART1_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_USART1_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USART1_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_USART1_UART_Init+0x58>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_USART1_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_USART1_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_USART1_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_USART1_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_USART1_UART_Init+0x58>)
 8000778:	f004 fcab 	bl	80050d2 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000782:	f000 f8e7 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000178 	.word	0x20000178
 8000790:	40013800 	.word	0x40013800

08000794 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_DMA_Init+0x38>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <MX_DMA_Init+0x38>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6153      	str	r3, [r2, #20]
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_DMA_Init+0x38>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	200d      	movs	r0, #13
 80007b8:	f000 fd79 	bl	80012ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80007bc:	200d      	movs	r0, #13
 80007be:	f000 fd92 	bl	80012e6 <HAL_NVIC_EnableIRQ>

}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 030c 	add.w	r3, r7, #12
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <MX_GPIO_Init+0x8c>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <MX_GPIO_Init+0x8c>)
 80007ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007f0:	6153      	str	r3, [r2, #20]
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_GPIO_Init+0x8c>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_GPIO_Init+0x8c>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a16      	ldr	r2, [pc, #88]	; (800085c <MX_GPIO_Init+0x8c>)
 8000804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000808:	6153      	str	r3, [r2, #20]
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_GPIO_Init+0x8c>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_GPIO_Init+0x8c>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	4a10      	ldr	r2, [pc, #64]	; (800085c <MX_GPIO_Init+0x8c>)
 800081c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000820:	6153      	str	r3, [r2, #20]
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_GPIO_Init+0x8c>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISABLE_GPIO_Port, DISABLE_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2120      	movs	r1, #32
 8000832:	480b      	ldr	r0, [pc, #44]	; (8000860 <MX_GPIO_Init+0x90>)
 8000834:	f001 f8b8 	bl	80019a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISABLE_Pin */
  GPIO_InitStruct.Pin = DISABLE_Pin;
 8000838:	2320      	movs	r3, #32
 800083a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISABLE_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	4619      	mov	r1, r3
 800084e:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_GPIO_Init+0x90>)
 8000850:	f000 ff38 	bl	80016c4 <HAL_GPIO_Init>

}
 8000854:	bf00      	nop
 8000856:	3720      	adds	r7, #32
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40021000 	.word	0x40021000
 8000860:	48000400 	.word	0x48000400

08000864 <led_set_RGB>:

/* USER CODE BEGIN 4 */
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8000864:	b490      	push	{r4, r7}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	4604      	mov	r4, r0
 800086c:	4608      	mov	r0, r1
 800086e:	4611      	mov	r1, r2
 8000870:	461a      	mov	r2, r3
 8000872:	4623      	mov	r3, r4
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	4603      	mov	r3, r0
 8000878:	71bb      	strb	r3, [r7, #6]
 800087a:	460b      	mov	r3, r1
 800087c:	717b      	strb	r3, [r7, #5]
 800087e:	4613      	mov	r3, r2
 8000880:	713b      	strb	r3, [r7, #4]
  rgb_arr[3 * index    ] = g;
 8000882:	79fa      	ldrb	r2, [r7, #7]
 8000884:	4613      	mov	r3, r2
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	4413      	add	r3, r2
 800088a:	490c      	ldr	r1, [pc, #48]	; (80008bc <led_set_RGB+0x58>)
 800088c:	797a      	ldrb	r2, [r7, #5]
 800088e:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 1] = r;
 8000890:	79fa      	ldrb	r2, [r7, #7]
 8000892:	4613      	mov	r3, r2
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	4413      	add	r3, r2
 8000898:	3301      	adds	r3, #1
 800089a:	4908      	ldr	r1, [pc, #32]	; (80008bc <led_set_RGB+0x58>)
 800089c:	79ba      	ldrb	r2, [r7, #6]
 800089e:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = b;
 80008a0:	79fa      	ldrb	r2, [r7, #7]
 80008a2:	4613      	mov	r3, r2
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	4413      	add	r3, r2
 80008a8:	3302      	adds	r3, #2
 80008aa:	4904      	ldr	r1, [pc, #16]	; (80008bc <led_set_RGB+0x58>)
 80008ac:	793a      	ldrb	r2, [r7, #4]
 80008ae:	54ca      	strb	r2, [r1, r3]
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc90      	pop	{r4, r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	200001fc 	.word	0x200001fc

080008c0 <led_render_all>:

void led_set_all_RGB(uint8_t r, uint8_t g, uint8_t b) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; i++) led_set_RGB(i, r, g, b);
}

void led_render_all() {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
  if(hdma_tim3_ch4_up.State != HAL_DMA_STATE_READY) {
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <led_render_all+0x80>)
 80008c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d003      	beq.n	80008d8 <led_render_all+0x18>
    HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_4);
 80008d0:	210c      	movs	r1, #12
 80008d2:	481c      	ldr	r0, [pc, #112]	; (8000944 <led_render_all+0x84>)
 80008d4:	f002 ffd6 	bl	8003884 <HAL_TIM_PWM_Stop_DMA>
  }
  for(uint_fast8_t i = 0; i < NUM_BYTES; i++) {
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	e023      	b.n	8000926 <led_render_all+0x66>
	  for(uint_fast8_t j = 0; j < 8; j++){
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	e01a      	b.n	800091a <led_render_all+0x5a>
		wr_buf[i * 8 + j] = PIXEL_PWM_LEN[((rgb_arr[i] << j) & 0b10000000) > 0];
 80008e4:	4a18      	ldr	r2, [pc, #96]	; (8000948 <led_render_all+0x88>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	bfcc      	ite	gt
 80008fc:	2301      	movgt	r3, #1
 80008fe:	2300      	movle	r3, #0
 8000900:	b2db      	uxtb	r3, r3
 8000902:	4619      	mov	r1, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	00da      	lsls	r2, r3, #3
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	4413      	add	r3, r2
 800090c:	4a0f      	ldr	r2, [pc, #60]	; (800094c <led_render_all+0x8c>)
 800090e:	5c51      	ldrb	r1, [r2, r1]
 8000910:	4a0f      	ldr	r2, [pc, #60]	; (8000950 <led_render_all+0x90>)
 8000912:	54d1      	strb	r1, [r2, r3]
	  for(uint_fast8_t j = 0; j < 8; j++){
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	3301      	adds	r3, #1
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	2b07      	cmp	r3, #7
 800091e:	d9e1      	bls.n	80008e4 <led_render_all+0x24>
  for(uint_fast8_t i = 0; i < NUM_BYTES; i++) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3301      	adds	r3, #1
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b05      	cmp	r3, #5
 800092a:	d9d8      	bls.n	80008de <led_render_all+0x1e>
	  }
  }
  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t *)wr_buf, WRITE_BUF_LEN);
 800092c:	2330      	movs	r3, #48	; 0x30
 800092e:	4a08      	ldr	r2, [pc, #32]	; (8000950 <led_render_all+0x90>)
 8000930:	210c      	movs	r1, #12
 8000932:	4804      	ldr	r0, [pc, #16]	; (8000944 <led_render_all+0x84>)
 8000934:	f002 fda0 	bl	8003478 <HAL_TIM_PWM_Start_DMA>
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000134 	.word	0x20000134
 8000944:	200000e8 	.word	0x200000e8
 8000948:	200001fc 	.word	0x200001fc
 800094c:	080058e4 	.word	0x080058e4
 8000950:	20000204 	.word	0x20000204

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_MspInit+0x44>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_MspInit+0x44>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6193      	str	r3, [r2, #24]
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_MspInit+0x44>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x44>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x44>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	61d3      	str	r3, [r2, #28]
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x44>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a18      	ldr	r2, [pc, #96]	; (8000a28 <HAL_CAN_MspInit+0x80>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d129      	bne.n	8000a1e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_CAN_MspInit+0x84>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <HAL_CAN_MspInit+0x84>)
 80009d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009d4:	61d3      	str	r3, [r2, #28]
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_CAN_MspInit+0x84>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_CAN_MspInit+0x84>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	4a11      	ldr	r2, [pc, #68]	; (8000a2c <HAL_CAN_MspInit+0x84>)
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ec:	6153      	str	r3, [r2, #20]
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_CAN_MspInit+0x84>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000a0c:	2309      	movs	r3, #9
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1a:	f000 fe53 	bl	80016c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	; 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40006400 	.word	0x40006400
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <HAL_TIM_PWM_MspInit+0x38>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d10b      	bne.n	8000a5a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000a48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a4c:	6193      	str	r3, [r2, #24]
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40012c00 	.word	0x40012c00
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a90:	d128      	bne.n	8000ae4 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <HAL_TIM_IC_MspInit+0x7c>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a15      	ldr	r2, [pc, #84]	; (8000aec <HAL_TIM_IC_MspInit+0x7c>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <HAL_TIM_IC_MspInit+0x7c>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <HAL_TIM_IC_MspInit+0x7c>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a0f      	ldr	r2, [pc, #60]	; (8000aec <HAL_TIM_IC_MspInit+0x7c>)
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	6153      	str	r3, [r2, #20]
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <HAL_TIM_IC_MspInit+0x7c>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ac2:	2320      	movs	r3, #32
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae0:	f000 fdf0 	bl	80016c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	; 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <HAL_TIM_Base_MspInit+0x90>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d139      	bne.n	8000b76 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <HAL_TIM_Base_MspInit+0x94>)
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	4a1f      	ldr	r2, [pc, #124]	; (8000b84 <HAL_TIM_Base_MspInit+0x94>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	61d3      	str	r3, [r2, #28]
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <HAL_TIM_Base_MspInit+0x94>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <HAL_TIM_Base_MspInit+0x98>)
 8000b1c:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <HAL_TIM_Base_MspInit+0x9c>)
 8000b1e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <HAL_TIM_Base_MspInit+0x98>)
 8000b22:	2210      	movs	r2, #16
 8000b24:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_TIM_Base_MspInit+0x98>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <HAL_TIM_Base_MspInit+0x98>)
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_TIM_Base_MspInit+0x98>)
 8000b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b38:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <HAL_TIM_Base_MspInit+0x98>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_TIM_Base_MspInit+0x98>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <HAL_TIM_Base_MspInit+0x98>)
 8000b48:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000b4c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000b4e:	480e      	ldr	r0, [pc, #56]	; (8000b88 <HAL_TIM_Base_MspInit+0x98>)
 8000b50:	f000 fbe3 	bl	800131a <HAL_DMA_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000b5a:	f7ff fefb 	bl	8000954 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a09      	ldr	r2, [pc, #36]	; (8000b88 <HAL_TIM_Base_MspInit+0x98>)
 8000b62:	631a      	str	r2, [r3, #48]	; 0x30
 8000b64:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <HAL_TIM_Base_MspInit+0x98>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_TIM_Base_MspInit+0x98>)
 8000b6e:	621a      	str	r2, [r3, #32]
 8000b70:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <HAL_TIM_Base_MspInit+0x98>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b76:	bf00      	nop
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40000400 	.word	0x40000400
 8000b84:	40021000 	.word	0x40021000
 8000b88:	20000134 	.word	0x20000134
 8000b8c:	40020030 	.word	0x40020030

08000b90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a31      	ldr	r2, [pc, #196]	; (8000c74 <HAL_TIM_MspPostInit+0xe4>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d13a      	bne.n	8000c28 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b31      	ldr	r3, [pc, #196]	; (8000c78 <HAL_TIM_MspPostInit+0xe8>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4a30      	ldr	r2, [pc, #192]	; (8000c78 <HAL_TIM_MspPostInit+0xe8>)
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	6153      	str	r3, [r2, #20]
 8000bbe:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <HAL_TIM_MspPostInit+0xe8>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <HAL_TIM_MspPostInit+0xe8>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	4a2a      	ldr	r2, [pc, #168]	; (8000c78 <HAL_TIM_MspPostInit+0xe8>)
 8000bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd4:	6153      	str	r3, [r2, #20]
 8000bd6:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <HAL_TIM_MspPostInit+0xe8>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000be2:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000bf4:	2306      	movs	r3, #6
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c02:	f000 fd5f 	bl	80016c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c06:	2301      	movs	r3, #1
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000c16:	2306      	movs	r3, #6
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4816      	ldr	r0, [pc, #88]	; (8000c7c <HAL_TIM_MspPostInit+0xec>)
 8000c22:	f000 fd4f 	bl	80016c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c26:	e020      	b.n	8000c6a <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM3)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <HAL_TIM_MspPostInit+0xf0>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d11b      	bne.n	8000c6a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_TIM_MspPostInit+0xe8>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_TIM_MspPostInit+0xe8>)
 8000c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c3c:	6153      	str	r3, [r2, #20]
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_TIM_MspPostInit+0xe8>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <HAL_TIM_MspPostInit+0xec>)
 8000c66:	f000 fd2d 	bl	80016c4 <HAL_GPIO_Init>
}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40012c00 	.word	0x40012c00
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	48000400 	.word	0x48000400
 8000c80:	40000400 	.word	0x40000400

08000c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a17      	ldr	r2, [pc, #92]	; (8000d00 <HAL_UART_MspInit+0x7c>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d127      	bne.n	8000cf6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <HAL_UART_MspInit+0x80>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	4a16      	ldr	r2, [pc, #88]	; (8000d04 <HAL_UART_MspInit+0x80>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb0:	6193      	str	r3, [r2, #24]
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <HAL_UART_MspInit+0x80>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_UART_MspInit+0x80>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <HAL_UART_MspInit+0x80>)
 8000cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc8:	6153      	str	r3, [r2, #20]
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_UART_MspInit+0x80>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cd6:	23c0      	movs	r3, #192	; 0xc0
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ce6:	2307      	movs	r3, #7
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <HAL_UART_MspInit+0x84>)
 8000cf2:	f000 fce7 	bl	80016c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3728      	adds	r7, #40	; 0x28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40013800 	.word	0x40013800
 8000d04:	40021000 	.word	0x40021000
 8000d08:	48000400 	.word	0x48000400

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <NMI_Handler+0x4>

08000d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <MemManage_Handler+0x4>

08000d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d58:	f000 f88e 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <DMA1_Channel3_IRQHandler+0x10>)
 8000d66:	f000 fbbc 	bl	80014e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000134 	.word	0x20000134

08000d74 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <SystemInit+0x20>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <SystemInit+0x20>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d9e:	490e      	ldr	r1, [pc, #56]	; (8000dd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000da0:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <LoopForever+0xe>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000db4:	4c0b      	ldr	r4, [pc, #44]	; (8000de4 <LoopForever+0x16>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dc2:	f7ff ffd7 	bl	8000d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f004 fd4d 	bl	8005864 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dca:	f7ff f9fd 	bl	80001c8 <main>

08000dce <LoopForever>:

LoopForever:
    b LoopForever
 8000dce:	e7fe      	b.n	8000dce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dd0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ddc:	08005928 	.word	0x08005928
  ldr r2, =_sbss
 8000de0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000de4:	20000238 	.word	0x20000238

08000de8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC1_2_IRQHandler>
	...

08000dec <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_Init+0x28>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_Init+0x28>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 fa4b 	bl	8001298 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e02:	200f      	movs	r0, #15
 8000e04:	f000 f808 	bl	8000e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e08:	f7ff fdaa 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40022000 	.word	0x40022000

08000e18 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_InitTick+0x54>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_InitTick+0x58>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 fa63 	bl	8001302 <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00e      	b.n	8000e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	d80a      	bhi.n	8000e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f000 fa2b 	bl	80012ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <HAL_InitTick+0x5c>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e000      	b.n	8000e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000004 	.word	0x20000004

08000e78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000234 	.word	0x20000234

08000ea0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000234 	.word	0x20000234

08000eb8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec0:	f7ff ffee 	bl	8000ea0 <HAL_GetTick>
 8000ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed0:	d005      	beq.n	8000ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_Delay+0x44>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ede:	bf00      	nop
 8000ee0:	f7ff ffde 	bl	8000ea0 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d8f7      	bhi.n	8000ee0 <HAL_Delay+0x28>
  {
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008

08000f00 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d101      	bne.n	8000f12 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e0ed      	b.n	80010ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d102      	bne.n	8000f24 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff fd42 	bl	80009a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f042 0201 	orr.w	r2, r2, #1
 8000f32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f34:	f7ff ffb4 	bl	8000ea0 <HAL_GetTick>
 8000f38:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f3a:	e012      	b.n	8000f62 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f3c:	f7ff ffb0 	bl	8000ea0 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b0a      	cmp	r3, #10
 8000f48:	d90b      	bls.n	8000f62 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2205      	movs	r2, #5
 8000f5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e0c5      	b.n	80010ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0e5      	beq.n	8000f3c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 0202 	bic.w	r2, r2, #2
 8000f7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f80:	f7ff ff8e 	bl	8000ea0 <HAL_GetTick>
 8000f84:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f86:	e012      	b.n	8000fae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f88:	f7ff ff8a 	bl	8000ea0 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b0a      	cmp	r3, #10
 8000f94:	d90b      	bls.n	8000fae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2205      	movs	r2, #5
 8000fa6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e09f      	b.n	80010ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1e5      	bne.n	8000f88 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	7e1b      	ldrb	r3, [r3, #24]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d108      	bne.n	8000fd6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	e007      	b.n	8000fe6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7e5b      	ldrb	r3, [r3, #25]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d108      	bne.n	8001000 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	e007      	b.n	8001010 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800100e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	7e9b      	ldrb	r3, [r3, #26]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d108      	bne.n	800102a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0220 	orr.w	r2, r2, #32
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e007      	b.n	800103a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f022 0220 	bic.w	r2, r2, #32
 8001038:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7edb      	ldrb	r3, [r3, #27]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d108      	bne.n	8001054 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0210 	bic.w	r2, r2, #16
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	e007      	b.n	8001064 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 0210 	orr.w	r2, r2, #16
 8001062:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7f1b      	ldrb	r3, [r3, #28]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d108      	bne.n	800107e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0208 	orr.w	r2, r2, #8
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	e007      	b.n	800108e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 0208 	bic.w	r2, r2, #8
 800108c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7f5b      	ldrb	r3, [r3, #29]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d108      	bne.n	80010a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f042 0204 	orr.w	r2, r2, #4
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e007      	b.n	80010b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0204 	bic.w	r2, r2, #4
 80010b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	431a      	orrs	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	ea42 0103 	orr.w	r1, r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	1e5a      	subs	r2, r3, #1
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	430a      	orrs	r2, r1
 80010dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001114:	4013      	ands	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112a:	4a04      	ldr	r2, [pc, #16]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	60d3      	str	r3, [r2, #12]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <__NVIC_GetPriorityGrouping+0x18>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	f003 0307 	and.w	r3, r3, #7
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	2b00      	cmp	r3, #0
 800116c:	db0b      	blt.n	8001186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	f003 021f 	and.w	r2, r3, #31
 8001174:	4907      	ldr	r1, [pc, #28]	; (8001194 <__NVIC_EnableIRQ+0x38>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	095b      	lsrs	r3, r3, #5
 800117c:	2001      	movs	r0, #1
 800117e:	fa00 f202 	lsl.w	r2, r0, r2
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000e100 	.word	0xe000e100

08001198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db0a      	blt.n	80011c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	490c      	ldr	r1, [pc, #48]	; (80011e4 <__NVIC_SetPriority+0x4c>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	0112      	lsls	r2, r2, #4
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	440b      	add	r3, r1
 80011bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c0:	e00a      	b.n	80011d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4908      	ldr	r1, [pc, #32]	; (80011e8 <__NVIC_SetPriority+0x50>)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	3b04      	subs	r3, #4
 80011d0:	0112      	lsls	r2, r2, #4
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	761a      	strb	r2, [r3, #24]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000e100 	.word	0xe000e100
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f1c3 0307 	rsb	r3, r3, #7
 8001206:	2b04      	cmp	r3, #4
 8001208:	bf28      	it	cs
 800120a:	2304      	movcs	r3, #4
 800120c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3304      	adds	r3, #4
 8001212:	2b06      	cmp	r3, #6
 8001214:	d902      	bls.n	800121c <NVIC_EncodePriority+0x30>
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3b03      	subs	r3, #3
 800121a:	e000      	b.n	800121e <NVIC_EncodePriority+0x32>
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	401a      	ands	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43d9      	mvns	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4313      	orrs	r3, r2
         );
}
 8001246:	4618      	mov	r0, r3
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001264:	d301      	bcc.n	800126a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001266:	2301      	movs	r3, #1
 8001268:	e00f      	b.n	800128a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <SysTick_Config+0x40>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001272:	210f      	movs	r1, #15
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f7ff ff8e 	bl	8001198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <SysTick_Config+0x40>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <SysTick_Config+0x40>)
 8001284:	2207      	movs	r2, #7
 8001286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	e000e010 	.word	0xe000e010

08001298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff29 	bl	80010f8 <__NVIC_SetPriorityGrouping>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c0:	f7ff ff3e 	bl	8001140 <__NVIC_GetPriorityGrouping>
 80012c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	6978      	ldr	r0, [r7, #20]
 80012cc:	f7ff ff8e 	bl	80011ec <NVIC_EncodePriority>
 80012d0:	4602      	mov	r2, r0
 80012d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff5d 	bl	8001198 <__NVIC_SetPriority>
}
 80012de:	bf00      	nop
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff31 	bl	800115c <__NVIC_EnableIRQ>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ffa2 	bl	8001254 <SysTick_Config>
 8001310:	4603      	mov	r3, r0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e037      	b.n	80013a0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2202      	movs	r2, #2
 8001334:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001346:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800134a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001354:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001360:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	4313      	orrs	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f97e 	bl	8001684 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}  
 80013a0:	4618      	mov	r0, r3
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d101      	bne.n	80013c8 <HAL_DMA_Start_IT+0x20>
 80013c4:	2302      	movs	r3, #2
 80013c6:	e04a      	b.n	800145e <HAL_DMA_Start_IT+0xb6>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d13a      	bne.n	8001450 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2202      	movs	r2, #2
 80013de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2200      	movs	r2, #0
 80013e6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0201 	bic.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f000 f912 	bl	8001628 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001408:	2b00      	cmp	r3, #0
 800140a:	d008      	beq.n	800141e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 020e 	orr.w	r2, r2, #14
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	e00f      	b.n	800143e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f042 020a 	orr.w	r2, r2, #10
 800142c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0204 	bic.w	r2, r2, #4
 800143c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f042 0201 	orr.w	r2, r2, #1
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	e005      	b.n	800145c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001458:	2302      	movs	r3, #2
 800145a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800145c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001466:	b580      	push	{r7, lr}
 8001468:	b084      	sub	sp, #16
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001478:	2b02      	cmp	r3, #2
 800147a:	d005      	beq.n	8001488 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2204      	movs	r2, #4
 8001480:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
 8001486:	e027      	b.n	80014d8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 020e 	bic.w	r2, r2, #14
 8001496:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0201 	bic.w	r2, r2, #1
 80014a6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b0:	2101      	movs	r1, #1
 80014b2:	fa01 f202 	lsl.w	r2, r1, r2
 80014b6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	4798      	blx	r3
    } 
  }
  return status;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	2204      	movs	r2, #4
 8001500:	409a      	lsls	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4013      	ands	r3, r2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d024      	beq.n	8001554 <HAL_DMA_IRQHandler+0x72>
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	d01f      	beq.n	8001554 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0320 	and.w	r3, r3, #32
 800151e:	2b00      	cmp	r3, #0
 8001520:	d107      	bne.n	8001532 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0204 	bic.w	r2, r2, #4
 8001530:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800153a:	2104      	movs	r1, #4
 800153c:	fa01 f202 	lsl.w	r2, r1, r2
 8001540:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	2b00      	cmp	r3, #0
 8001548:	d06a      	beq.n	8001620 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001552:	e065      	b.n	8001620 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	2202      	movs	r2, #2
 800155a:	409a      	lsls	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4013      	ands	r3, r2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d02c      	beq.n	80015be <HAL_DMA_IRQHandler+0xdc>
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d027      	beq.n	80015be <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0320 	and.w	r3, r3, #32
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10b      	bne.n	8001594 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 020a 	bic.w	r2, r2, #10
 800158a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159c:	2102      	movs	r1, #2
 800159e:	fa01 f202 	lsl.w	r2, r1, r2
 80015a2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d035      	beq.n	8001620 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80015bc:	e030      	b.n	8001620 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	2208      	movs	r2, #8
 80015c4:	409a      	lsls	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d028      	beq.n	8001620 <HAL_DMA_IRQHandler+0x13e>
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d023      	beq.n	8001620 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 020e 	bic.w	r2, r2, #14
 80015e6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f0:	2101      	movs	r1, #1
 80015f2:	fa01 f202 	lsl.w	r2, r1, r2
 80015f6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	2b00      	cmp	r3, #0
 8001614:	d004      	beq.n	8001620 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	4798      	blx	r3
    }
  }
}  
 800161e:	e7ff      	b.n	8001620 <HAL_DMA_IRQHandler+0x13e>
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163e:	2101      	movs	r1, #1
 8001640:	fa01 f202 	lsl.w	r2, r1, r2
 8001644:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b10      	cmp	r3, #16
 8001654:	d108      	bne.n	8001668 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001666:	e007      	b.n	8001678 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	60da      	str	r2, [r3, #12]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <DMA_CalcBaseAndBitshift+0x34>)
 8001694:	4413      	add	r3, r2
 8001696:	4a09      	ldr	r2, [pc, #36]	; (80016bc <DMA_CalcBaseAndBitshift+0x38>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	009a      	lsls	r2, r3, #2
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <DMA_CalcBaseAndBitshift+0x3c>)
 80016a8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	bffdfff8 	.word	0xbffdfff8
 80016bc:	cccccccd 	.word	0xcccccccd
 80016c0:	40020000 	.word	0x40020000

080016c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b087      	sub	sp, #28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d2:	e14e      	b.n	8001972 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2101      	movs	r1, #1
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	4013      	ands	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8140 	beq.w	800196c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d005      	beq.n	8001704 <HAL_GPIO_Init+0x40>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d130      	bne.n	8001766 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800173a:	2201      	movs	r2, #1
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	091b      	lsrs	r3, r3, #4
 8001750:	f003 0201 	and.w	r2, r3, #1
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b03      	cmp	r3, #3
 8001770:	d017      	beq.n	80017a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d123      	bne.n	80017f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	08da      	lsrs	r2, r3, #3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3208      	adds	r2, #8
 80017b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	220f      	movs	r2, #15
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	691a      	ldr	r2, [r3, #16]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	08da      	lsrs	r2, r3, #3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3208      	adds	r2, #8
 80017f0:	6939      	ldr	r1, [r7, #16]
 80017f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	2203      	movs	r2, #3
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0203 	and.w	r2, r3, #3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 809a 	beq.w	800196c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001838:	4b55      	ldr	r3, [pc, #340]	; (8001990 <HAL_GPIO_Init+0x2cc>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a54      	ldr	r2, [pc, #336]	; (8001990 <HAL_GPIO_Init+0x2cc>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b52      	ldr	r3, [pc, #328]	; (8001990 <HAL_GPIO_Init+0x2cc>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001850:	4a50      	ldr	r2, [pc, #320]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	220f      	movs	r2, #15
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800187a:	d013      	beq.n	80018a4 <HAL_GPIO_Init+0x1e0>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a46      	ldr	r2, [pc, #280]	; (8001998 <HAL_GPIO_Init+0x2d4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d00d      	beq.n	80018a0 <HAL_GPIO_Init+0x1dc>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a45      	ldr	r2, [pc, #276]	; (800199c <HAL_GPIO_Init+0x2d8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d007      	beq.n	800189c <HAL_GPIO_Init+0x1d8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a44      	ldr	r2, [pc, #272]	; (80019a0 <HAL_GPIO_Init+0x2dc>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d101      	bne.n	8001898 <HAL_GPIO_Init+0x1d4>
 8001894:	2303      	movs	r3, #3
 8001896:	e006      	b.n	80018a6 <HAL_GPIO_Init+0x1e2>
 8001898:	2305      	movs	r3, #5
 800189a:	e004      	b.n	80018a6 <HAL_GPIO_Init+0x1e2>
 800189c:	2302      	movs	r3, #2
 800189e:	e002      	b.n	80018a6 <HAL_GPIO_Init+0x1e2>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <HAL_GPIO_Init+0x1e2>
 80018a4:	2300      	movs	r3, #0
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	f002 0203 	and.w	r2, r2, #3
 80018ac:	0092      	lsls	r2, r2, #2
 80018ae:	4093      	lsls	r3, r2
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018b6:	4937      	ldr	r1, [pc, #220]	; (8001994 <HAL_GPIO_Init+0x2d0>)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	089b      	lsrs	r3, r3, #2
 80018bc:	3302      	adds	r3, #2
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018c4:	4b37      	ldr	r3, [pc, #220]	; (80019a4 <HAL_GPIO_Init+0x2e0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018e8:	4a2e      	ldr	r2, [pc, #184]	; (80019a4 <HAL_GPIO_Init+0x2e0>)
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018ee:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <HAL_GPIO_Init+0x2e0>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001912:	4a24      	ldr	r2, [pc, #144]	; (80019a4 <HAL_GPIO_Init+0x2e0>)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001918:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <HAL_GPIO_Init+0x2e0>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	43db      	mvns	r3, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800193c:	4a19      	ldr	r2, [pc, #100]	; (80019a4 <HAL_GPIO_Init+0x2e0>)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_GPIO_Init+0x2e0>)
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	43db      	mvns	r3, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4313      	orrs	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001966:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <HAL_GPIO_Init+0x2e0>)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3301      	adds	r3, #1
 8001970:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	fa22 f303 	lsr.w	r3, r2, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	f47f aea9 	bne.w	80016d4 <HAL_GPIO_Init+0x10>
  }
}
 8001982:	bf00      	nop
 8001984:	bf00      	nop
 8001986:	371c      	adds	r7, #28
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	40021000 	.word	0x40021000
 8001994:	40010000 	.word	0x40010000
 8001998:	48000400 	.word	0x48000400
 800199c:	48000800 	.word	0x48000800
 80019a0:	48000c00 	.word	0x48000c00
 80019a4:	40010400 	.word	0x40010400

080019a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
 80019b4:	4613      	mov	r3, r2
 80019b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b8:	787b      	ldrb	r3, [r7, #1]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019be:	887a      	ldrh	r2, [r7, #2]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019c4:	e002      	b.n	80019cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019c6:	887a      	ldrh	r2, [r7, #2]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4013      	ands	r3, r2
 80019f0:	041a      	lsls	r2, r3, #16
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43d9      	mvns	r1, r3
 80019f6:	887b      	ldrh	r3, [r7, #2]
 80019f8:	400b      	ands	r3, r1
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	619a      	str	r2, [r3, #24]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a1c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f001 b823 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 817d 	beq.w	8001d42 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a48:	4bbc      	ldr	r3, [pc, #752]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d00c      	beq.n	8001a6e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a54:	4bb9      	ldr	r3, [pc, #740]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d15c      	bne.n	8001b1a <HAL_RCC_OscConfig+0x10e>
 8001a60:	4bb6      	ldr	r3, [pc, #728]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6c:	d155      	bne.n	8001b1a <HAL_RCC_OscConfig+0x10e>
 8001a6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a72:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001a7a:	fa93 f3a3 	rbit	r3, r3
 8001a7e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a82:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a86:	fab3 f383 	clz	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	095b      	lsrs	r3, r3, #5
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d102      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x94>
 8001a9a:	4ba8      	ldr	r3, [pc, #672]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	e015      	b.n	8001acc <HAL_RCC_OscConfig+0xc0>
 8001aa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ab4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001abc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ac0:	fa93 f3a3 	rbit	r3, r3
 8001ac4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001ac8:	4b9c      	ldr	r3, [pc, #624]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ad0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001ad4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001ad8:	fa92 f2a2 	rbit	r2, r2
 8001adc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001ae0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001ae4:	fab2 f282 	clz	r2, r2
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	f042 0220 	orr.w	r2, r2, #32
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	f002 021f 	and.w	r2, r2, #31
 8001af4:	2101      	movs	r1, #1
 8001af6:	fa01 f202 	lsl.w	r2, r1, r2
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 811f 	beq.w	8001d40 <HAL_RCC_OscConfig+0x334>
 8001b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 8116 	bne.w	8001d40 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	f000 bfaf 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x12e>
 8001b2c:	4b83      	ldr	r3, [pc, #524]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a82      	ldr	r2, [pc, #520]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	e036      	b.n	8001ba8 <HAL_RCC_OscConfig+0x19c>
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x158>
 8001b4a:	4b7c      	ldr	r3, [pc, #496]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a7b      	ldr	r2, [pc, #492]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4b79      	ldr	r3, [pc, #484]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a78      	ldr	r2, [pc, #480]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e021      	b.n	8001ba8 <HAL_RCC_OscConfig+0x19c>
 8001b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b74:	d10c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x184>
 8001b76:	4b71      	ldr	r3, [pc, #452]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a70      	ldr	r2, [pc, #448]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	4b6e      	ldr	r3, [pc, #440]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a6d      	ldr	r2, [pc, #436]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e00b      	b.n	8001ba8 <HAL_RCC_OscConfig+0x19c>
 8001b90:	4b6a      	ldr	r3, [pc, #424]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a69      	ldr	r2, [pc, #420]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b67      	ldr	r3, [pc, #412]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a66      	ldr	r2, [pc, #408]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ba8:	4b64      	ldr	r3, [pc, #400]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	f023 020f 	bic.w	r2, r3, #15
 8001bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	495f      	ldr	r1, [pc, #380]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d059      	beq.n	8001c86 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f965 	bl	8000ea0 <HAL_GetTick>
 8001bd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff f960 	bl	8000ea0 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b64      	cmp	r3, #100	; 0x64
 8001bea:	d902      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	f000 bf43 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
 8001bf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001c06:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0a:	fab3 f383 	clz	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	095b      	lsrs	r3, r3, #5
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d102      	bne.n	8001c24 <HAL_RCC_OscConfig+0x218>
 8001c1e:	4b47      	ldr	r3, [pc, #284]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	e015      	b.n	8001c50 <HAL_RCC_OscConfig+0x244>
 8001c24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c28:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c3c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c40:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001c44:	fa93 f3a3 	rbit	r3, r3
 8001c48:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001c4c:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c54:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001c58:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c5c:	fa92 f2a2 	rbit	r2, r2
 8001c60:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001c64:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001c68:	fab2 f282 	clz	r2, r2
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	f042 0220 	orr.w	r2, r2, #32
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	f002 021f 	and.w	r2, r2, #31
 8001c78:	2101      	movs	r1, #1
 8001c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0ab      	beq.n	8001bdc <HAL_RCC_OscConfig+0x1d0>
 8001c84:	e05d      	b.n	8001d42 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7ff f90b 	bl	8000ea0 <HAL_GetTick>
 8001c8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8e:	e00a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c90:	f7ff f906 	bl	8000ea0 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b64      	cmp	r3, #100	; 0x64
 8001c9e:	d902      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	f000 bee9 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
 8001ca6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001caa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001cba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	fab3 f383 	clz	r3, r3
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	095b      	lsrs	r3, r3, #5
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d102      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x2cc>
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	e015      	b.n	8001d04 <HAL_RCC_OscConfig+0x2f8>
 8001cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cdc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001cf4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001cf8:	fa93 f3a3 	rbit	r3, r3
 8001cfc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001d00:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <HAL_RCC_OscConfig+0x330>)
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d08:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001d0c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d10:	fa92 f2a2 	rbit	r2, r2
 8001d14:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001d18:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001d1c:	fab2 f282 	clz	r2, r2
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	f042 0220 	orr.w	r2, r2, #32
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	f002 021f 	and.w	r2, r2, #31
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1ab      	bne.n	8001c90 <HAL_RCC_OscConfig+0x284>
 8001d38:	e003      	b.n	8001d42 <HAL_RCC_OscConfig+0x336>
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 817d 	beq.w	8002052 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d58:	4ba6      	ldr	r3, [pc, #664]	; (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00b      	beq.n	8001d7c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d64:	4ba3      	ldr	r3, [pc, #652]	; (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d172      	bne.n	8001e56 <HAL_RCC_OscConfig+0x44a>
 8001d70:	4ba0      	ldr	r3, [pc, #640]	; (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d16c      	bne.n	8001e56 <HAL_RCC_OscConfig+0x44a>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001d8e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	095b      	lsrs	r3, r3, #5
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d102      	bne.n	8001dac <HAL_RCC_OscConfig+0x3a0>
 8001da6:	4b93      	ldr	r3, [pc, #588]	; (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	e013      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3c8>
 8001dac:	2302      	movs	r3, #2
 8001dae:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001dc4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001dd0:	4b88      	ldr	r3, [pc, #544]	; (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001dda:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001dde:	fa92 f2a2 	rbit	r2, r2
 8001de2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001de6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001dea:	fab2 f282 	clz	r2, r2
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	f042 0220 	orr.w	r2, r2, #32
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	f002 021f 	and.w	r2, r2, #31
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00a      	beq.n	8001e1c <HAL_RCC_OscConfig+0x410>
 8001e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d002      	beq.n	8001e1c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	f000 be2e 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1c:	4b75      	ldr	r3, [pc, #468]	; (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	21f8      	movs	r1, #248	; 0xf8
 8001e32:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e3a:	fa91 f1a1 	rbit	r1, r1
 8001e3e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001e42:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001e46:	fab1 f181 	clz	r1, r1
 8001e4a:	b2c9      	uxtb	r1, r1
 8001e4c:	408b      	lsls	r3, r1
 8001e4e:	4969      	ldr	r1, [pc, #420]	; (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e54:	e0fd      	b.n	8002052 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8088 	beq.w	8001f78 <HAL_RCC_OscConfig+0x56c>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001e7a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2301      	movs	r3, #1
 8001e92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff f804 	bl	8000ea0 <HAL_GetTick>
 8001e98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9e:	f7fe ffff 	bl	8000ea0 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d902      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	f000 bde2 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001ec6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	095b      	lsrs	r3, r3, #5
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d102      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x4d8>
 8001ede:	4b45      	ldr	r3, [pc, #276]	; (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	e013      	b.n	8001f0c <HAL_RCC_OscConfig+0x500>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001efc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001f08:	4b3a      	ldr	r3, [pc, #232]	; (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001f12:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f16:	fa92 f2a2 	rbit	r2, r2
 8001f1a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001f1e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001f22:	fab2 f282 	clz	r2, r2
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	f042 0220 	orr.w	r2, r2, #32
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	f002 021f 	and.w	r2, r2, #31
 8001f32:	2101      	movs	r1, #1
 8001f34:	fa01 f202 	lsl.w	r2, r1, r2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0af      	beq.n	8001e9e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	21f8      	movs	r1, #248	; 0xf8
 8001f54:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f5c:	fa91 f1a1 	rbit	r1, r1
 8001f60:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001f64:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001f68:	fab1 f181 	clz	r1, r1
 8001f6c:	b2c9      	uxtb	r1, r1
 8001f6e:	408b      	lsls	r3, r1
 8001f70:	4920      	ldr	r1, [pc, #128]	; (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
 8001f76:	e06c      	b.n	8002052 <HAL_RCC_OscConfig+0x646>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001f8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7fe ff7c 	bl	8000ea0 <HAL_GetTick>
 8001fa8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fae:	f7fe ff77 	bl	8000ea0 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d902      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	f000 bd5a 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	095b      	lsrs	r3, r3, #5
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d104      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x5ec>
 8001fee:	4b01      	ldr	r3, [pc, #4]	; (8001ff4 <HAL_RCC_OscConfig+0x5e8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	e015      	b.n	8002020 <HAL_RCC_OscConfig+0x614>
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800200a:	2302      	movs	r3, #2
 800200c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002010:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800201c:	4bc8      	ldr	r3, [pc, #800]	; (8002340 <HAL_RCC_OscConfig+0x934>)
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	2202      	movs	r2, #2
 8002022:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002026:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800202a:	fa92 f2a2 	rbit	r2, r2
 800202e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002032:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002036:	fab2 f282 	clz	r2, r2
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	f042 0220 	orr.w	r2, r2, #32
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	f002 021f 	and.w	r2, r2, #31
 8002046:	2101      	movs	r1, #1
 8002048:	fa01 f202 	lsl.w	r2, r1, r2
 800204c:	4013      	ands	r3, r2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1ad      	bne.n	8001fae <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002056:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8110 	beq.w	8002288 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d079      	beq.n	800216c <HAL_RCC_OscConfig+0x760>
 8002078:	2301      	movs	r3, #1
 800207a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800208a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	4bab      	ldr	r3, [pc, #684]	; (8002344 <HAL_RCC_OscConfig+0x938>)
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	461a      	mov	r2, r3
 800209e:	2301      	movs	r3, #1
 80020a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a2:	f7fe fefd 	bl	8000ea0 <HAL_GetTick>
 80020a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ac:	f7fe fef8 	bl	8000ea0 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d902      	bls.n	80020c2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	f000 bcdb 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
 80020c2:	2302      	movs	r3, #2
 80020c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80020d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020dc:	2202      	movs	r2, #2
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	fa93 f2a3 	rbit	r2, r3
 80020ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002100:	2202      	movs	r2, #2
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	fa93 f2a3 	rbit	r2, r3
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800211a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211c:	4b88      	ldr	r3, [pc, #544]	; (8002340 <HAL_RCC_OscConfig+0x934>)
 800211e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002124:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002128:	2102      	movs	r1, #2
 800212a:	6019      	str	r1, [r3, #0]
 800212c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002130:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	fa93 f1a3 	rbit	r1, r3
 800213a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002142:	6019      	str	r1, [r3, #0]
  return result;
 8002144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002148:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002158:	b2db      	uxtb	r3, r3
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	2101      	movs	r1, #1
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0a0      	beq.n	80020ac <HAL_RCC_OscConfig+0x6a0>
 800216a:	e08d      	b.n	8002288 <HAL_RCC_OscConfig+0x87c>
 800216c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002170:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002174:	2201      	movs	r2, #1
 8002176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	fa93 f2a3 	rbit	r2, r3
 8002186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800218e:	601a      	str	r2, [r3, #0]
  return result;
 8002190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002194:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002198:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b68      	ldr	r3, [pc, #416]	; (8002344 <HAL_RCC_OscConfig+0x938>)
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	461a      	mov	r2, r3
 80021aa:	2300      	movs	r3, #0
 80021ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ae:	f7fe fe77 	bl	8000ea0 <HAL_GetTick>
 80021b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b8:	f7fe fe72 	bl	8000ea0 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d902      	bls.n	80021ce <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	f000 bc55 	b.w	8002a78 <HAL_RCC_OscConfig+0x106c>
 80021ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021d6:	2202      	movs	r2, #2
 80021d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	fa93 f2a3 	rbit	r2, r3
 80021e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80021fa:	2202      	movs	r2, #2
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002202:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	fa93 f2a3 	rbit	r2, r3
 800220c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002210:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800221e:	2202      	movs	r2, #2
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fa93 f2a3 	rbit	r2, r3
 8002230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002234:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002238:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223a:	4b41      	ldr	r3, [pc, #260]	; (8002340 <HAL_RCC_OscConfig+0x934>)
 800223c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800223e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002242:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002246:	2102      	movs	r1, #2
 8002248:	6019      	str	r1, [r3, #0]
 800224a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	fa93 f1a3 	rbit	r1, r3
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002260:	6019      	str	r1, [r3, #0]
  return result;
 8002262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002266:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d197      	bne.n	80021b8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 81a1 	beq.w	80025e0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a4:	4b26      	ldr	r3, [pc, #152]	; (8002340 <HAL_RCC_OscConfig+0x934>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d116      	bne.n	80022de <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b0:	4b23      	ldr	r3, [pc, #140]	; (8002340 <HAL_RCC_OscConfig+0x934>)
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	4a22      	ldr	r2, [pc, #136]	; (8002340 <HAL_RCC_OscConfig+0x934>)
 80022b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ba:	61d3      	str	r3, [r2, #28]
 80022bc:	4b20      	ldr	r3, [pc, #128]	; (8002340 <HAL_RCC_OscConfig+0x934>)
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80022c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80022d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022d8:	2301      	movs	r3, #1
 80022da:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022de:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <HAL_RCC_OscConfig+0x93c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d11a      	bne.n	8002320 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <HAL_RCC_OscConfig+0x93c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a16      	ldr	r2, [pc, #88]	; (8002348 <HAL_RCC_OscConfig+0x93c>)
 80022f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f6:	f7fe fdd3 	bl	8000ea0 <HAL_GetTick>
 80022fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	e009      	b.n	8002314 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002300:	f7fe fdce 	bl	8000ea0 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b64      	cmp	r3, #100	; 0x64
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e3b1      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <HAL_RCC_OscConfig+0x93c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0ef      	beq.n	8002300 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002324:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d10d      	bne.n	800234c <HAL_RCC_OscConfig+0x940>
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <HAL_RCC_OscConfig+0x934>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4a02      	ldr	r2, [pc, #8]	; (8002340 <HAL_RCC_OscConfig+0x934>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6213      	str	r3, [r2, #32]
 800233c:	e03c      	b.n	80023b8 <HAL_RCC_OscConfig+0x9ac>
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	10908120 	.word	0x10908120
 8002348:	40007000 	.word	0x40007000
 800234c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002350:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10c      	bne.n	8002376 <HAL_RCC_OscConfig+0x96a>
 800235c:	4bc1      	ldr	r3, [pc, #772]	; (8002664 <HAL_RCC_OscConfig+0xc58>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4ac0      	ldr	r2, [pc, #768]	; (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	6213      	str	r3, [r2, #32]
 8002368:	4bbe      	ldr	r3, [pc, #760]	; (8002664 <HAL_RCC_OscConfig+0xc58>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4abd      	ldr	r2, [pc, #756]	; (8002664 <HAL_RCC_OscConfig+0xc58>)
 800236e:	f023 0304 	bic.w	r3, r3, #4
 8002372:	6213      	str	r3, [r2, #32]
 8002374:	e020      	b.n	80023b8 <HAL_RCC_OscConfig+0x9ac>
 8002376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b05      	cmp	r3, #5
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x994>
 8002386:	4bb7      	ldr	r3, [pc, #732]	; (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4ab6      	ldr	r2, [pc, #728]	; (8002664 <HAL_RCC_OscConfig+0xc58>)
 800238c:	f043 0304 	orr.w	r3, r3, #4
 8002390:	6213      	str	r3, [r2, #32]
 8002392:	4bb4      	ldr	r3, [pc, #720]	; (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4ab3      	ldr	r2, [pc, #716]	; (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6213      	str	r3, [r2, #32]
 800239e:	e00b      	b.n	80023b8 <HAL_RCC_OscConfig+0x9ac>
 80023a0:	4bb0      	ldr	r3, [pc, #704]	; (8002664 <HAL_RCC_OscConfig+0xc58>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4aaf      	ldr	r2, [pc, #700]	; (8002664 <HAL_RCC_OscConfig+0xc58>)
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	6213      	str	r3, [r2, #32]
 80023ac:	4bad      	ldr	r3, [pc, #692]	; (8002664 <HAL_RCC_OscConfig+0xc58>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4aac      	ldr	r2, [pc, #688]	; (8002664 <HAL_RCC_OscConfig+0xc58>)
 80023b2:	f023 0304 	bic.w	r3, r3, #4
 80023b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 8081 	beq.w	80024cc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ca:	f7fe fd69 	bl	8000ea0 <HAL_GetTick>
 80023ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d2:	e00b      	b.n	80023ec <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d4:	f7fe fd64 	bl	8000ea0 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e345      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
 80023ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80023f4:	2202      	movs	r2, #2
 80023f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	fa93 f2a3 	rbit	r2, r3
 8002406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002414:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002418:	2202      	movs	r2, #2
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002420:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	fa93 f2a3 	rbit	r2, r3
 800242a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002432:	601a      	str	r2, [r3, #0]
  return result;
 8002434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002438:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800243c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	095b      	lsrs	r3, r3, #5
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d102      	bne.n	8002458 <HAL_RCC_OscConfig+0xa4c>
 8002452:	4b84      	ldr	r3, [pc, #528]	; (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	e013      	b.n	8002480 <HAL_RCC_OscConfig+0xa74>
 8002458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002460:	2202      	movs	r2, #2
 8002462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002468:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	fa93 f2a3 	rbit	r2, r3
 8002472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002476:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	4b79      	ldr	r3, [pc, #484]	; (8002664 <HAL_RCC_OscConfig+0xc58>)
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002484:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002488:	2102      	movs	r1, #2
 800248a:	6011      	str	r1, [r2, #0]
 800248c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002490:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	fa92 f1a2 	rbit	r1, r2
 800249a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800249e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024a2:	6011      	str	r1, [r2, #0]
  return result;
 80024a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024a8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	fab2 f282 	clz	r2, r2
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	f002 021f 	and.w	r2, r2, #31
 80024be:	2101      	movs	r1, #1
 80024c0:	fa01 f202 	lsl.w	r2, r1, r2
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d084      	beq.n	80023d4 <HAL_RCC_OscConfig+0x9c8>
 80024ca:	e07f      	b.n	80025cc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024cc:	f7fe fce8 	bl	8000ea0 <HAL_GetTick>
 80024d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	e00b      	b.n	80024ee <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7fe fce3 	bl	8000ea0 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e2c4      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
 80024ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80024f6:	2202      	movs	r2, #2
 80024f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	fa93 f2a3 	rbit	r2, r3
 8002508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002516:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800251a:	2202      	movs	r2, #2
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002522:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	fa93 f2a3 	rbit	r2, r3
 800252c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002530:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002534:	601a      	str	r2, [r3, #0]
  return result;
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800253e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002540:	fab3 f383 	clz	r3, r3
 8002544:	b2db      	uxtb	r3, r3
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f043 0302 	orr.w	r3, r3, #2
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d102      	bne.n	800255a <HAL_RCC_OscConfig+0xb4e>
 8002554:	4b43      	ldr	r3, [pc, #268]	; (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	e013      	b.n	8002582 <HAL_RCC_OscConfig+0xb76>
 800255a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002562:	2202      	movs	r2, #2
 8002564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	fa93 f2a3 	rbit	r2, r3
 8002574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002578:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	4b39      	ldr	r3, [pc, #228]	; (8002664 <HAL_RCC_OscConfig+0xc58>)
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002586:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800258a:	2102      	movs	r1, #2
 800258c:	6011      	str	r1, [r2, #0]
 800258e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002592:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	fa92 f1a2 	rbit	r1, r2
 800259c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025a0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025a4:	6011      	str	r1, [r2, #0]
  return result;
 80025a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025aa:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	fab2 f282 	clz	r2, r2
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	f002 021f 	and.w	r2, r2, #31
 80025c0:	2101      	movs	r1, #1
 80025c2:	fa01 f202 	lsl.w	r2, r1, r2
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d184      	bne.n	80024d6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d105      	bne.n	80025e0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d4:	4b23      	ldr	r3, [pc, #140]	; (8002664 <HAL_RCC_OscConfig+0xc58>)
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	4a22      	ldr	r2, [pc, #136]	; (8002664 <HAL_RCC_OscConfig+0xc58>)
 80025da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 8242 	beq.w	8002a76 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f2:	4b1c      	ldr	r3, [pc, #112]	; (8002664 <HAL_RCC_OscConfig+0xc58>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	f000 8213 	beq.w	8002a26 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002604:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	2b02      	cmp	r3, #2
 800260e:	f040 8162 	bne.w	80028d6 <HAL_RCC_OscConfig+0xeca>
 8002612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002616:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800261a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800261e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002624:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	fa93 f2a3 	rbit	r2, r3
 800262e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002632:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002636:	601a      	str	r2, [r3, #0]
  return result;
 8002638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002640:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800264c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	461a      	mov	r2, r3
 8002654:	2300      	movs	r3, #0
 8002656:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7fe fc22 	bl	8000ea0 <HAL_GetTick>
 800265c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002660:	e00c      	b.n	800267c <HAL_RCC_OscConfig+0xc70>
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002668:	f7fe fc1a 	bl	8000ea0 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e1fd      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
 800267c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002680:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	fa93 f2a3 	rbit	r2, r3
 8002698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026a0:	601a      	str	r2, [r3, #0]
  return result;
 80026a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d102      	bne.n	80026c6 <HAL_RCC_OscConfig+0xcba>
 80026c0:	4bb0      	ldr	r3, [pc, #704]	; (8002984 <HAL_RCC_OscConfig+0xf78>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	e027      	b.n	8002716 <HAL_RCC_OscConfig+0xd0a>
 80026c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ca:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	fa93 f2a3 	rbit	r2, r3
 80026e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80026f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	fa93 f2a3 	rbit	r2, r3
 8002708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	4b9c      	ldr	r3, [pc, #624]	; (8002984 <HAL_RCC_OscConfig+0xf78>)
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800271a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800271e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002722:	6011      	str	r1, [r2, #0]
 8002724:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002728:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	fa92 f1a2 	rbit	r1, r2
 8002732:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002736:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800273a:	6011      	str	r1, [r2, #0]
  return result;
 800273c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002740:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	fab2 f282 	clz	r2, r2
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	f042 0220 	orr.w	r2, r2, #32
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	f002 021f 	and.w	r2, r2, #31
 8002756:	2101      	movs	r1, #1
 8002758:	fa01 f202 	lsl.w	r2, r1, r2
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d182      	bne.n	8002668 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002762:	4b88      	ldr	r3, [pc, #544]	; (8002984 <HAL_RCC_OscConfig+0xf78>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	430b      	orrs	r3, r1
 8002784:	497f      	ldr	r1, [pc, #508]	; (8002984 <HAL_RCC_OscConfig+0xf78>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
 800278a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002792:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	fa93 f2a3 	rbit	r2, r3
 80027a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027aa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80027ae:	601a      	str	r2, [r3, #0]
  return result;
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80027b8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	461a      	mov	r2, r3
 80027cc:	2301      	movs	r3, #1
 80027ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fb66 	bl	8000ea0 <HAL_GetTick>
 80027d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027d8:	e009      	b.n	80027ee <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027da:	f7fe fb61 	bl	8000ea0 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e144      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
 80027ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80027f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002800:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	fa93 f2a3 	rbit	r2, r3
 800280a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002812:	601a      	str	r2, [r3, #0]
  return result;
 8002814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002818:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800281c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	095b      	lsrs	r3, r3, #5
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b01      	cmp	r3, #1
 8002830:	d102      	bne.n	8002838 <HAL_RCC_OscConfig+0xe2c>
 8002832:	4b54      	ldr	r3, [pc, #336]	; (8002984 <HAL_RCC_OscConfig+0xf78>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	e027      	b.n	8002888 <HAL_RCC_OscConfig+0xe7c>
 8002838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002840:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002844:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	fa93 f2a3 	rbit	r2, r3
 8002854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002858:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002866:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002870:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	fa93 f2a3 	rbit	r2, r3
 800287a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <HAL_RCC_OscConfig+0xf78>)
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800288c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002890:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002894:	6011      	str	r1, [r2, #0]
 8002896:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800289a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	fa92 f1a2 	rbit	r1, r2
 80028a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028a8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80028ac:	6011      	str	r1, [r2, #0]
  return result;
 80028ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028b2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	fab2 f282 	clz	r2, r2
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	f042 0220 	orr.w	r2, r2, #32
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	f002 021f 	and.w	r2, r2, #31
 80028c8:	2101      	movs	r1, #1
 80028ca:	fa01 f202 	lsl.w	r2, r1, r2
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d082      	beq.n	80027da <HAL_RCC_OscConfig+0xdce>
 80028d4:	e0cf      	b.n	8002a76 <HAL_RCC_OscConfig+0x106a>
 80028d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028da:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80028de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	fa93 f2a3 	rbit	r2, r3
 80028f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80028fa:	601a      	str	r2, [r3, #0]
  return result;
 80028fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002900:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002904:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002910:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	461a      	mov	r2, r3
 8002918:	2300      	movs	r3, #0
 800291a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe fac0 	bl	8000ea0 <HAL_GetTick>
 8002920:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002924:	e009      	b.n	800293a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002926:	f7fe fabb 	bl	8000ea0 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e09e      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
 800293a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002942:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	fa93 f2a3 	rbit	r2, r3
 8002956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800295e:	601a      	str	r2, [r3, #0]
  return result;
 8002960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002964:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002968:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	b2db      	uxtb	r3, r3
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d104      	bne.n	8002988 <HAL_RCC_OscConfig+0xf7c>
 800297e:	4b01      	ldr	r3, [pc, #4]	; (8002984 <HAL_RCC_OscConfig+0xf78>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	e029      	b.n	80029d8 <HAL_RCC_OscConfig+0xfcc>
 8002984:	40021000 	.word	0x40021000
 8002988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002990:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	fa93 f2a3 	rbit	r2, r3
 80029a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	fa93 f2a3 	rbit	r2, r3
 80029ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ce:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <HAL_RCC_OscConfig+0x1078>)
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029dc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80029e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029e4:	6011      	str	r1, [r2, #0]
 80029e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029ea:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	fa92 f1a2 	rbit	r1, r2
 80029f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029f8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80029fc:	6011      	str	r1, [r2, #0]
  return result;
 80029fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a02:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	fab2 f282 	clz	r2, r2
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	f042 0220 	orr.w	r2, r2, #32
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	f002 021f 	and.w	r2, r2, #31
 8002a18:	2101      	movs	r1, #1
 8002a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d180      	bne.n	8002926 <HAL_RCC_OscConfig+0xf1a>
 8002a24:	e027      	b.n	8002a76 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e01e      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a3a:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <HAL_RCC_OscConfig+0x1078>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a46:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d10b      	bne.n	8002a72 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d001      	beq.n	8002a76 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000

08002a88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b09e      	sub	sp, #120	; 0x78
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e162      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b90      	ldr	r3, [pc, #576]	; (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d910      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b8d      	ldr	r3, [pc, #564]	; (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 0207 	bic.w	r2, r3, #7
 8002ab6:	498b      	ldr	r1, [pc, #556]	; (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b89      	ldr	r3, [pc, #548]	; (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e14a      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002adc:	4b82      	ldr	r3, [pc, #520]	; (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	497f      	ldr	r1, [pc, #508]	; (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 80dc 	beq.w	8002cb4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d13c      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xf6>
 8002b04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b08:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b14:	fab3 f383 	clz	r3, r3
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d102      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xa6>
 8002b28:	4b6f      	ldr	r3, [pc, #444]	; (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	e00f      	b.n	8002b4e <HAL_RCC_ClockConfig+0xc6>
 8002b2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	667b      	str	r3, [r7, #100]	; 0x64
 8002b3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b40:	663b      	str	r3, [r7, #96]	; 0x60
 8002b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b4a:	4b67      	ldr	r3, [pc, #412]	; (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b52:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b56:	fa92 f2a2 	rbit	r2, r2
 8002b5a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002b5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b5e:	fab2 f282 	clz	r2, r2
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	f042 0220 	orr.w	r2, r2, #32
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	f002 021f 	and.w	r2, r2, #31
 8002b6e:	2101      	movs	r1, #1
 8002b70:	fa01 f202 	lsl.w	r2, r1, r2
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d17b      	bne.n	8002c72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0f3      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d13c      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x178>
 8002b86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b8e:	fa93 f3a3 	rbit	r3, r3
 8002b92:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d102      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x128>
 8002baa:	4b4f      	ldr	r3, [pc, #316]	; (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	e00f      	b.n	8002bd0 <HAL_RCC_ClockConfig+0x148>
 8002bb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bb4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	647b      	str	r3, [r7, #68]	; 0x44
 8002bbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bc2:	643b      	str	r3, [r7, #64]	; 0x40
 8002bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bcc:	4b46      	ldr	r3, [pc, #280]	; (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bd4:	63ba      	str	r2, [r7, #56]	; 0x38
 8002bd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bd8:	fa92 f2a2 	rbit	r2, r2
 8002bdc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002be0:	fab2 f282 	clz	r2, r2
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	f042 0220 	orr.w	r2, r2, #32
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	f002 021f 	and.w	r2, r2, #31
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d13a      	bne.n	8002c72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0b2      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
 8002c00:	2302      	movs	r3, #2
 8002c02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d102      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x1a0>
 8002c22:	4b31      	ldr	r3, [pc, #196]	; (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	e00d      	b.n	8002c44 <HAL_RCC_ClockConfig+0x1bc>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
 8002c34:	2302      	movs	r3, #2
 8002c36:	623b      	str	r3, [r7, #32]
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	4b29      	ldr	r3, [pc, #164]	; (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	2202      	movs	r2, #2
 8002c46:	61ba      	str	r2, [r7, #24]
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	fa92 f2a2 	rbit	r2, r2
 8002c4e:	617a      	str	r2, [r7, #20]
  return result;
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	fab2 f282 	clz	r2, r2
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	f042 0220 	orr.w	r2, r2, #32
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	f002 021f 	and.w	r2, r2, #31
 8002c62:	2101      	movs	r1, #1
 8002c64:	fa01 f202 	lsl.w	r2, r1, r2
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e079      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c72:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f023 0203 	bic.w	r2, r3, #3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	491a      	ldr	r1, [pc, #104]	; (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c84:	f7fe f90c 	bl	8000ea0 <HAL_GetTick>
 8002c88:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8a:	e00a      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c8c:	f7fe f908 	bl	8000ea0 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e061      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca2:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <HAL_RCC_ClockConfig+0x260>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 020c 	and.w	r2, r3, #12
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d1eb      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d214      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc2:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 0207 	bic.w	r2, r3, #7
 8002cca:	4906      	ldr	r1, [pc, #24]	; (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <HAL_RCC_ClockConfig+0x25c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e040      	b.n	8002d66 <HAL_RCC_ClockConfig+0x2de>
 8002ce4:	40022000 	.word	0x40022000
 8002ce8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <HAL_RCC_ClockConfig+0x2e8>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	491a      	ldr	r1, [pc, #104]	; (8002d70 <HAL_RCC_ClockConfig+0x2e8>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d16:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <HAL_RCC_ClockConfig+0x2e8>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4912      	ldr	r1, [pc, #72]	; (8002d70 <HAL_RCC_ClockConfig+0x2e8>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d2a:	f000 f829 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8002d2e:	4601      	mov	r1, r0
 8002d30:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <HAL_RCC_ClockConfig+0x2e8>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d38:	22f0      	movs	r2, #240	; 0xf0
 8002d3a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	fa92 f2a2 	rbit	r2, r2
 8002d42:	60fa      	str	r2, [r7, #12]
  return result;
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	fab2 f282 	clz	r2, r2
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	40d3      	lsrs	r3, r2
 8002d4e:	4a09      	ldr	r2, [pc, #36]	; (8002d74 <HAL_RCC_ClockConfig+0x2ec>)
 8002d50:	5cd3      	ldrb	r3, [r2, r3]
 8002d52:	fa21 f303 	lsr.w	r3, r1, r3
 8002d56:	4a08      	ldr	r2, [pc, #32]	; (8002d78 <HAL_RCC_ClockConfig+0x2f0>)
 8002d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d5a:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <HAL_RCC_ClockConfig+0x2f4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe f85a 	bl	8000e18 <HAL_InitTick>
  
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3778      	adds	r7, #120	; 0x78
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	080058e8 	.word	0x080058e8
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	20000004 	.word	0x20000004

08002d80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b08b      	sub	sp, #44	; 0x2c
 8002d84:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61bb      	str	r3, [r7, #24]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002d9a:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d002      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x30>
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d003      	beq.n	8002db6 <HAL_RCC_GetSysClockFreq+0x36>
 8002dae:	e03c      	b.n	8002e2a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002db0:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002db2:	623b      	str	r3, [r7, #32]
      break;
 8002db4:	e03c      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002dbc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002dc0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	fa92 f2a2 	rbit	r2, r2
 8002dc8:	607a      	str	r2, [r7, #4]
  return result;
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	fab2 f282 	clz	r2, r2
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	40d3      	lsrs	r3, r2
 8002dd4:	4a1c      	ldr	r2, [pc, #112]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002dd6:	5cd3      	ldrb	r3, [r2, r3]
 8002dd8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002dda:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	220f      	movs	r2, #15
 8002de4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	fa92 f2a2 	rbit	r2, r2
 8002dec:	60fa      	str	r2, [r7, #12]
  return result;
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	fab2 f282 	clz	r2, r2
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	40d3      	lsrs	r3, r2
 8002df8:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002dfa:	5cd3      	ldrb	r3, [r2, r3]
 8002dfc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e08:	4a0e      	ldr	r2, [pc, #56]	; (8002e44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	fb02 f303 	mul.w	r3, r2, r3
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
 8002e18:	e004      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	4a0c      	ldr	r2, [pc, #48]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	623b      	str	r3, [r7, #32]
      break;
 8002e28:	e002      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002e2c:	623b      	str	r3, [r7, #32]
      break;
 8002e2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e30:	6a3b      	ldr	r3, [r7, #32]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	372c      	adds	r7, #44	; 0x2c
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	00f42400 	.word	0x00f42400
 8002e48:	08005900 	.word	0x08005900
 8002e4c:	08005910 	.word	0x08005910
 8002e50:	003d0900 	.word	0x003d0900
 8002e54:	007a1200 	.word	0x007a1200

08002e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e5c:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	20000000 	.word	0x20000000

08002e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e76:	f7ff ffef 	bl	8002e58 <HAL_RCC_GetHCLKFreq>
 8002e7a:	4601      	mov	r1, r0
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e84:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002e88:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	fa92 f2a2 	rbit	r2, r2
 8002e90:	603a      	str	r2, [r7, #0]
  return result;
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	fab2 f282 	clz	r2, r2
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	40d3      	lsrs	r3, r2
 8002e9c:	4a04      	ldr	r2, [pc, #16]	; (8002eb0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ea0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	080058f8 	.word	0x080058f8

08002eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002eba:	f7ff ffcd 	bl	8002e58 <HAL_RCC_GetHCLKFreq>
 8002ebe:	4601      	mov	r1, r0
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002ec8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002ecc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	fa92 f2a2 	rbit	r2, r2
 8002ed4:	603a      	str	r2, [r7, #0]
  return result;
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	fab2 f282 	clz	r2, r2
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	40d3      	lsrs	r3, r2
 8002ee0:	4a04      	ldr	r2, [pc, #16]	; (8002ef4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ee2:	5cd3      	ldrb	r3, [r2, r3]
 8002ee4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	080058f8 	.word	0x080058f8

08002ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b092      	sub	sp, #72	; 0x48
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 80cd 	beq.w	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1c:	4b86      	ldr	r3, [pc, #536]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10e      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f28:	4b83      	ldr	r3, [pc, #524]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	4a82      	ldr	r2, [pc, #520]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f32:	61d3      	str	r3, [r2, #28]
 8002f34:	4b80      	ldr	r3, [pc, #512]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f40:	2301      	movs	r3, #1
 8002f42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f46:	4b7d      	ldr	r3, [pc, #500]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d118      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f52:	4b7a      	ldr	r3, [pc, #488]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a79      	ldr	r2, [pc, #484]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5e:	f7fd ff9f 	bl	8000ea0 <HAL_GetTick>
 8002f62:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	e008      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f66:	f7fd ff9b 	bl	8000ea0 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b64      	cmp	r3, #100	; 0x64
 8002f72:	d901      	bls.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e0db      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f78:	4b70      	ldr	r3, [pc, #448]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f84:	4b6c      	ldr	r3, [pc, #432]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d07d      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d076      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fa2:	4b65      	ldr	r3, [pc, #404]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fb0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	fa93 f3a3 	rbit	r3, r3
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fbc:	fab3 f383 	clz	r3, r3
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4b5e      	ldr	r3, [pc, #376]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2301      	movs	r3, #1
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd8:	fa93 f3a3 	rbit	r3, r3
 8002fdc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fe0:	fab3 f383 	clz	r3, r3
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b55      	ldr	r3, [pc, #340]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	461a      	mov	r2, r3
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ff4:	4a50      	ldr	r2, [pc, #320]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d045      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7fd ff4c 	bl	8000ea0 <HAL_GetTick>
 8003008:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300a:	e00a      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300c:	f7fd ff48 	bl	8000ea0 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	; 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e086      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003022:	2302      	movs	r3, #2
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
 800302e:	2302      	movs	r3, #2
 8003030:	623b      	str	r3, [r7, #32]
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	fa93 f3a3 	rbit	r3, r3
 8003038:	61fb      	str	r3, [r7, #28]
  return result;
 800303a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303c:	fab3 f383 	clz	r3, r3
 8003040:	b2db      	uxtb	r3, r3
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	b2db      	uxtb	r3, r3
 8003046:	f043 0302 	orr.w	r3, r3, #2
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d102      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003050:	4b39      	ldr	r3, [pc, #228]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	e007      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003056:	2302      	movs	r3, #2
 8003058:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	fa93 f3a3 	rbit	r3, r3
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	4b35      	ldr	r3, [pc, #212]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	2202      	movs	r2, #2
 8003068:	613a      	str	r2, [r7, #16]
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	fa92 f2a2 	rbit	r2, r2
 8003070:	60fa      	str	r2, [r7, #12]
  return result;
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	fab2 f282 	clz	r2, r2
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	f002 021f 	and.w	r2, r2, #31
 8003084:	2101      	movs	r1, #1
 8003086:	fa01 f202 	lsl.w	r2, r1, r2
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0bd      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003090:	4b29      	ldr	r3, [pc, #164]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4926      	ldr	r1, [pc, #152]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d105      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030aa:	4b23      	ldr	r3, [pc, #140]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	4a22      	ldr	r2, [pc, #136]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d008      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030c2:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	f023 0203 	bic.w	r2, r3, #3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	491a      	ldr	r1, [pc, #104]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030e0:	4b15      	ldr	r3, [pc, #84]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	f023 0210 	bic.w	r2, r3, #16
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4912      	ldr	r1, [pc, #72]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	490b      	ldr	r1, [pc, #44]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800310c:	4313      	orrs	r3, r2
 800310e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	4903      	ldr	r1, [pc, #12]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800312a:	4313      	orrs	r3, r2
 800312c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3748      	adds	r7, #72	; 0x48
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40021000 	.word	0x40021000
 800313c:	40007000 	.word	0x40007000
 8003140:	10908100 	.word	0x10908100

08003144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e049      	b.n	80031ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fd fcc0 	bl	8000af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3304      	adds	r3, #4
 8003180:	4619      	mov	r1, r3
 8003182:	4610      	mov	r0, r2
 8003184:	f001 f870 	bl	8004268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e049      	b.n	8003298 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d106      	bne.n	800321e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7fd fc09 	bl	8000a30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2202      	movs	r2, #2
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3304      	adds	r3, #4
 800322e:	4619      	mov	r1, r3
 8003230:	4610      	mov	r0, r2
 8003232:	f001 f819 	bl	8004268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d109      	bne.n	80032c4 <HAL_TIM_PWM_Start+0x24>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	bf14      	ite	ne
 80032bc:	2301      	movne	r3, #1
 80032be:	2300      	moveq	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e03c      	b.n	800333e <HAL_TIM_PWM_Start+0x9e>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d109      	bne.n	80032de <HAL_TIM_PWM_Start+0x3e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	bf14      	ite	ne
 80032d6:	2301      	movne	r3, #1
 80032d8:	2300      	moveq	r3, #0
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	e02f      	b.n	800333e <HAL_TIM_PWM_Start+0x9e>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d109      	bne.n	80032f8 <HAL_TIM_PWM_Start+0x58>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	bf14      	ite	ne
 80032f0:	2301      	movne	r3, #1
 80032f2:	2300      	moveq	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	e022      	b.n	800333e <HAL_TIM_PWM_Start+0x9e>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2b0c      	cmp	r3, #12
 80032fc:	d109      	bne.n	8003312 <HAL_TIM_PWM_Start+0x72>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b01      	cmp	r3, #1
 8003308:	bf14      	ite	ne
 800330a:	2301      	movne	r3, #1
 800330c:	2300      	moveq	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	e015      	b.n	800333e <HAL_TIM_PWM_Start+0x9e>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b10      	cmp	r3, #16
 8003316:	d109      	bne.n	800332c <HAL_TIM_PWM_Start+0x8c>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	bf14      	ite	ne
 8003324:	2301      	movne	r3, #1
 8003326:	2300      	moveq	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	e008      	b.n	800333e <HAL_TIM_PWM_Start+0x9e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b01      	cmp	r3, #1
 8003336:	bf14      	ite	ne
 8003338:	2301      	movne	r3, #1
 800333a:	2300      	moveq	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e088      	b.n	8003458 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d104      	bne.n	8003356 <HAL_TIM_PWM_Start+0xb6>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003354:	e023      	b.n	800339e <HAL_TIM_PWM_Start+0xfe>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b04      	cmp	r3, #4
 800335a:	d104      	bne.n	8003366 <HAL_TIM_PWM_Start+0xc6>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003364:	e01b      	b.n	800339e <HAL_TIM_PWM_Start+0xfe>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b08      	cmp	r3, #8
 800336a:	d104      	bne.n	8003376 <HAL_TIM_PWM_Start+0xd6>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003374:	e013      	b.n	800339e <HAL_TIM_PWM_Start+0xfe>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b0c      	cmp	r3, #12
 800337a:	d104      	bne.n	8003386 <HAL_TIM_PWM_Start+0xe6>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003384:	e00b      	b.n	800339e <HAL_TIM_PWM_Start+0xfe>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b10      	cmp	r3, #16
 800338a:	d104      	bne.n	8003396 <HAL_TIM_PWM_Start+0xf6>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003394:	e003      	b.n	800339e <HAL_TIM_PWM_Start+0xfe>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2202      	movs	r2, #2
 800339a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2201      	movs	r2, #1
 80033a4:	6839      	ldr	r1, [r7, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f001 fcbc 	bl	8004d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a2b      	ldr	r2, [pc, #172]	; (8003460 <HAL_TIM_PWM_Start+0x1c0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00e      	beq.n	80033d4 <HAL_TIM_PWM_Start+0x134>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a2a      	ldr	r2, [pc, #168]	; (8003464 <HAL_TIM_PWM_Start+0x1c4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d009      	beq.n	80033d4 <HAL_TIM_PWM_Start+0x134>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a28      	ldr	r2, [pc, #160]	; (8003468 <HAL_TIM_PWM_Start+0x1c8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d004      	beq.n	80033d4 <HAL_TIM_PWM_Start+0x134>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a27      	ldr	r2, [pc, #156]	; (800346c <HAL_TIM_PWM_Start+0x1cc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d101      	bne.n	80033d8 <HAL_TIM_PWM_Start+0x138>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <HAL_TIM_PWM_Start+0x13a>
 80033d8:	2300      	movs	r3, #0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d007      	beq.n	80033ee <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <HAL_TIM_PWM_Start+0x1c0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00e      	beq.n	8003416 <HAL_TIM_PWM_Start+0x176>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003400:	d009      	beq.n	8003416 <HAL_TIM_PWM_Start+0x176>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1a      	ldr	r2, [pc, #104]	; (8003470 <HAL_TIM_PWM_Start+0x1d0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d004      	beq.n	8003416 <HAL_TIM_PWM_Start+0x176>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a14      	ldr	r2, [pc, #80]	; (8003464 <HAL_TIM_PWM_Start+0x1c4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d115      	bne.n	8003442 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	4b15      	ldr	r3, [pc, #84]	; (8003474 <HAL_TIM_PWM_Start+0x1d4>)
 800341e:	4013      	ands	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b06      	cmp	r3, #6
 8003426:	d015      	beq.n	8003454 <HAL_TIM_PWM_Start+0x1b4>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342e:	d011      	beq.n	8003454 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0201 	orr.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003440:	e008      	b.n	8003454 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f042 0201 	orr.w	r2, r2, #1
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	e000      	b.n	8003456 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003454:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40012c00 	.word	0x40012c00
 8003464:	40014000 	.word	0x40014000
 8003468:	40014400 	.word	0x40014400
 800346c:	40014800 	.word	0x40014800
 8003470:	40000400 	.word	0x40000400
 8003474:	00010007 	.word	0x00010007

08003478 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d109      	bne.n	80034a4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	bf0c      	ite	eq
 800349c:	2301      	moveq	r3, #1
 800349e:	2300      	movne	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	e03c      	b.n	800351e <HAL_TIM_PWM_Start_DMA+0xa6>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d109      	bne.n	80034be <HAL_TIM_PWM_Start_DMA+0x46>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	bf0c      	ite	eq
 80034b6:	2301      	moveq	r3, #1
 80034b8:	2300      	movne	r3, #0
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	e02f      	b.n	800351e <HAL_TIM_PWM_Start_DMA+0xa6>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d109      	bne.n	80034d8 <HAL_TIM_PWM_Start_DMA+0x60>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e022      	b.n	800351e <HAL_TIM_PWM_Start_DMA+0xa6>
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b0c      	cmp	r3, #12
 80034dc:	d109      	bne.n	80034f2 <HAL_TIM_PWM_Start_DMA+0x7a>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	bf0c      	ite	eq
 80034ea:	2301      	moveq	r3, #1
 80034ec:	2300      	movne	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	e015      	b.n	800351e <HAL_TIM_PWM_Start_DMA+0xa6>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b10      	cmp	r3, #16
 80034f6:	d109      	bne.n	800350c <HAL_TIM_PWM_Start_DMA+0x94>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	bf0c      	ite	eq
 8003504:	2301      	moveq	r3, #1
 8003506:	2300      	movne	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	e008      	b.n	800351e <HAL_TIM_PWM_Start_DMA+0xa6>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	bf0c      	ite	eq
 8003518:	2301      	moveq	r3, #1
 800351a:	2300      	movne	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8003522:	2302      	movs	r3, #2
 8003524:	e197      	b.n	8003856 <HAL_TIM_PWM_Start_DMA+0x3de>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d109      	bne.n	8003540 <HAL_TIM_PWM_Start_DMA+0xc8>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	bf0c      	ite	eq
 8003538:	2301      	moveq	r3, #1
 800353a:	2300      	movne	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	e03c      	b.n	80035ba <HAL_TIM_PWM_Start_DMA+0x142>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b04      	cmp	r3, #4
 8003544:	d109      	bne.n	800355a <HAL_TIM_PWM_Start_DMA+0xe2>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	bf0c      	ite	eq
 8003552:	2301      	moveq	r3, #1
 8003554:	2300      	movne	r3, #0
 8003556:	b2db      	uxtb	r3, r3
 8003558:	e02f      	b.n	80035ba <HAL_TIM_PWM_Start_DMA+0x142>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b08      	cmp	r3, #8
 800355e:	d109      	bne.n	8003574 <HAL_TIM_PWM_Start_DMA+0xfc>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	e022      	b.n	80035ba <HAL_TIM_PWM_Start_DMA+0x142>
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b0c      	cmp	r3, #12
 8003578:	d109      	bne.n	800358e <HAL_TIM_PWM_Start_DMA+0x116>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b01      	cmp	r3, #1
 8003584:	bf0c      	ite	eq
 8003586:	2301      	moveq	r3, #1
 8003588:	2300      	movne	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	e015      	b.n	80035ba <HAL_TIM_PWM_Start_DMA+0x142>
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b10      	cmp	r3, #16
 8003592:	d109      	bne.n	80035a8 <HAL_TIM_PWM_Start_DMA+0x130>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	e008      	b.n	80035ba <HAL_TIM_PWM_Start_DMA+0x142>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	bf0c      	ite	eq
 80035b4:	2301      	moveq	r3, #1
 80035b6:	2300      	movne	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d034      	beq.n	8003628 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d104      	bne.n	80035ce <HAL_TIM_PWM_Start_DMA+0x156>
 80035c4:	887b      	ldrh	r3, [r7, #2]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e143      	b.n	8003856 <HAL_TIM_PWM_Start_DMA+0x3de>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d104      	bne.n	80035de <HAL_TIM_PWM_Start_DMA+0x166>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035dc:	e026      	b.n	800362c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d104      	bne.n	80035ee <HAL_TIM_PWM_Start_DMA+0x176>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ec:	e01e      	b.n	800362c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d104      	bne.n	80035fe <HAL_TIM_PWM_Start_DMA+0x186>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035fc:	e016      	b.n	800362c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b0c      	cmp	r3, #12
 8003602:	d104      	bne.n	800360e <HAL_TIM_PWM_Start_DMA+0x196>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800360c:	e00e      	b.n	800362c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b10      	cmp	r3, #16
 8003612:	d104      	bne.n	800361e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800361c:	e006      	b.n	800362c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2202      	movs	r2, #2
 8003622:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003626:	e001      	b.n	800362c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e114      	b.n	8003856 <HAL_TIM_PWM_Start_DMA+0x3de>
  }

  switch (Channel)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b0c      	cmp	r3, #12
 8003630:	f200 80ae 	bhi.w	8003790 <HAL_TIM_PWM_Start_DMA+0x318>
 8003634:	a201      	add	r2, pc, #4	; (adr r2, 800363c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363a:	bf00      	nop
 800363c:	08003671 	.word	0x08003671
 8003640:	08003791 	.word	0x08003791
 8003644:	08003791 	.word	0x08003791
 8003648:	08003791 	.word	0x08003791
 800364c:	080036b9 	.word	0x080036b9
 8003650:	08003791 	.word	0x08003791
 8003654:	08003791 	.word	0x08003791
 8003658:	08003791 	.word	0x08003791
 800365c:	08003701 	.word	0x08003701
 8003660:	08003791 	.word	0x08003791
 8003664:	08003791 	.word	0x08003791
 8003668:	08003791 	.word	0x08003791
 800366c:	08003749 	.word	0x08003749
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	4a7a      	ldr	r2, [pc, #488]	; (8003860 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003676:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	4a79      	ldr	r2, [pc, #484]	; (8003864 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800367e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	4a78      	ldr	r2, [pc, #480]	; (8003868 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8003686:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3334      	adds	r3, #52	; 0x34
 8003694:	461a      	mov	r2, r3
 8003696:	887b      	ldrh	r3, [r7, #2]
 8003698:	f7fd fe86 	bl	80013a8 <HAL_DMA_Start_IT>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e0d7      	b.n	8003856 <HAL_TIM_PWM_Start_DMA+0x3de>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b4:	60da      	str	r2, [r3, #12]
      break;
 80036b6:	e06e      	b.n	8003796 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036bc:	4a68      	ldr	r2, [pc, #416]	; (8003860 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80036be:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c4:	4a67      	ldr	r2, [pc, #412]	; (8003864 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80036c6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	4a66      	ldr	r2, [pc, #408]	; (8003868 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3338      	adds	r3, #56	; 0x38
 80036dc:	461a      	mov	r2, r3
 80036de:	887b      	ldrh	r3, [r7, #2]
 80036e0:	f7fd fe62 	bl	80013a8 <HAL_DMA_Start_IT>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e0b3      	b.n	8003856 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036fc:	60da      	str	r2, [r3, #12]
      break;
 80036fe:	e04a      	b.n	8003796 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	4a56      	ldr	r2, [pc, #344]	; (8003860 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003706:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	4a55      	ldr	r2, [pc, #340]	; (8003864 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800370e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	4a54      	ldr	r2, [pc, #336]	; (8003868 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8003716:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	333c      	adds	r3, #60	; 0x3c
 8003724:	461a      	mov	r2, r3
 8003726:	887b      	ldrh	r3, [r7, #2]
 8003728:	f7fd fe3e 	bl	80013a8 <HAL_DMA_Start_IT>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e08f      	b.n	8003856 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003744:	60da      	str	r2, [r3, #12]
      break;
 8003746:	e026      	b.n	8003796 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	4a44      	ldr	r2, [pc, #272]	; (8003860 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800374e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	4a43      	ldr	r2, [pc, #268]	; (8003864 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003756:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	4a42      	ldr	r2, [pc, #264]	; (8003868 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800375e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3340      	adds	r3, #64	; 0x40
 800376c:	461a      	mov	r2, r3
 800376e:	887b      	ldrh	r3, [r7, #2]
 8003770:	f7fd fe1a 	bl	80013a8 <HAL_DMA_Start_IT>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e06b      	b.n	8003856 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800378c:	60da      	str	r2, [r3, #12]
      break;
 800378e:	e002      	b.n	8003796 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	75fb      	strb	r3, [r7, #23]
      break;
 8003794:	bf00      	nop
  }

  if (status == HAL_OK)
 8003796:	7dfb      	ldrb	r3, [r7, #23]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d15b      	bne.n	8003854 <HAL_TIM_PWM_Start_DMA+0x3dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2201      	movs	r2, #1
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f001 fabd 	bl	8004d24 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a2f      	ldr	r2, [pc, #188]	; (800386c <HAL_TIM_PWM_Start_DMA+0x3f4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00e      	beq.n	80037d2 <HAL_TIM_PWM_Start_DMA+0x35a>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2d      	ldr	r2, [pc, #180]	; (8003870 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d009      	beq.n	80037d2 <HAL_TIM_PWM_Start_DMA+0x35a>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a2c      	ldr	r2, [pc, #176]	; (8003874 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_TIM_PWM_Start_DMA+0x35a>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a2a      	ldr	r2, [pc, #168]	; (8003878 <HAL_TIM_PWM_Start_DMA+0x400>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d101      	bne.n	80037d6 <HAL_TIM_PWM_Start_DMA+0x35e>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <HAL_TIM_PWM_Start_DMA+0x360>
 80037d6:	2300      	movs	r3, #0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1e      	ldr	r2, [pc, #120]	; (800386c <HAL_TIM_PWM_Start_DMA+0x3f4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00e      	beq.n	8003814 <HAL_TIM_PWM_Start_DMA+0x39c>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fe:	d009      	beq.n	8003814 <HAL_TIM_PWM_Start_DMA+0x39c>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1d      	ldr	r2, [pc, #116]	; (800387c <HAL_TIM_PWM_Start_DMA+0x404>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <HAL_TIM_PWM_Start_DMA+0x39c>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a18      	ldr	r2, [pc, #96]	; (8003870 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d115      	bne.n	8003840 <HAL_TIM_PWM_Start_DMA+0x3c8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	4b19      	ldr	r3, [pc, #100]	; (8003880 <HAL_TIM_PWM_Start_DMA+0x408>)
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	2b06      	cmp	r3, #6
 8003824:	d015      	beq.n	8003852 <HAL_TIM_PWM_Start_DMA+0x3da>
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382c:	d011      	beq.n	8003852 <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        __HAL_TIM_ENABLE(htim);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0201 	orr.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800383e:	e008      	b.n	8003852 <HAL_TIM_PWM_Start_DMA+0x3da>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	e000      	b.n	8003854 <HAL_TIM_PWM_Start_DMA+0x3dc>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003852:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003854:	7dfb      	ldrb	r3, [r7, #23]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	08004159 	.word	0x08004159
 8003864:	08004201 	.word	0x08004201
 8003868:	080040c7 	.word	0x080040c7
 800386c:	40012c00 	.word	0x40012c00
 8003870:	40014000 	.word	0x40014000
 8003874:	40014400 	.word	0x40014400
 8003878:	40014800 	.word	0x40014800
 800387c:	40000400 	.word	0x40000400
 8003880:	00010007 	.word	0x00010007

08003884 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b0c      	cmp	r3, #12
 8003896:	d855      	bhi.n	8003944 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003898:	a201      	add	r2, pc, #4	; (adr r2, 80038a0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800389a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389e:	bf00      	nop
 80038a0:	080038d5 	.word	0x080038d5
 80038a4:	08003945 	.word	0x08003945
 80038a8:	08003945 	.word	0x08003945
 80038ac:	08003945 	.word	0x08003945
 80038b0:	080038f1 	.word	0x080038f1
 80038b4:	08003945 	.word	0x08003945
 80038b8:	08003945 	.word	0x08003945
 80038bc:	08003945 	.word	0x08003945
 80038c0:	0800390d 	.word	0x0800390d
 80038c4:	08003945 	.word	0x08003945
 80038c8:	08003945 	.word	0x08003945
 80038cc:	08003945 	.word	0x08003945
 80038d0:	08003929 	.word	0x08003929
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fd fdbc 	bl	8001466 <HAL_DMA_Abort_IT>
      break;
 80038ee:	e02c      	b.n	800394a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003904:	4618      	mov	r0, r3
 8003906:	f7fd fdae 	bl	8001466 <HAL_DMA_Abort_IT>
      break;
 800390a:	e01e      	b.n	800394a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800391a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	4618      	mov	r0, r3
 8003922:	f7fd fda0 	bl	8001466 <HAL_DMA_Abort_IT>
      break;
 8003926:	e010      	b.n	800394a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003936:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	4618      	mov	r0, r3
 800393e:	f7fd fd92 	bl	8001466 <HAL_DMA_Abort_IT>
      break;
 8003942:	e002      	b.n	800394a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
      break;
 8003948:	bf00      	nop
  }

  if (status == HAL_OK)
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d17b      	bne.n	8003a48 <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2200      	movs	r2, #0
 8003956:	6839      	ldr	r1, [r7, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f001 f9e3 	bl	8004d24 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a3c      	ldr	r2, [pc, #240]	; (8003a54 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00e      	beq.n	8003986 <HAL_TIM_PWM_Stop_DMA+0x102>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a3a      	ldr	r2, [pc, #232]	; (8003a58 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d009      	beq.n	8003986 <HAL_TIM_PWM_Stop_DMA+0x102>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a39      	ldr	r2, [pc, #228]	; (8003a5c <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d004      	beq.n	8003986 <HAL_TIM_PWM_Stop_DMA+0x102>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a37      	ldr	r2, [pc, #220]	; (8003a60 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d101      	bne.n	800398a <HAL_TIM_PWM_Stop_DMA+0x106>
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_TIM_PWM_Stop_DMA+0x108>
 800398a:	2300      	movs	r3, #0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d017      	beq.n	80039c0 <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6a1a      	ldr	r2, [r3, #32]
 8003996:	f241 1311 	movw	r3, #4369	; 0x1111
 800399a:	4013      	ands	r3, r2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10f      	bne.n	80039c0 <HAL_TIM_PWM_Stop_DMA+0x13c>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6a1a      	ldr	r2, [r3, #32]
 80039a6:	f240 4344 	movw	r3, #1092	; 0x444
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d107      	bne.n	80039c0 <HAL_TIM_PWM_Stop_DMA+0x13c>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039be:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6a1a      	ldr	r2, [r3, #32]
 80039c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10f      	bne.n	80039f0 <HAL_TIM_PWM_Stop_DMA+0x16c>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6a1a      	ldr	r2, [r3, #32]
 80039d6:	f240 4344 	movw	r3, #1092	; 0x444
 80039da:	4013      	ands	r3, r2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d107      	bne.n	80039f0 <HAL_TIM_PWM_Stop_DMA+0x16c>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0201 	bic.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d104      	bne.n	8003a00 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039fe:	e023      	b.n	8003a48 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d104      	bne.n	8003a10 <HAL_TIM_PWM_Stop_DMA+0x18c>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a0e:	e01b      	b.n	8003a48 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d104      	bne.n	8003a20 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a1e:	e013      	b.n	8003a48 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b0c      	cmp	r3, #12
 8003a24:	d104      	bne.n	8003a30 <HAL_TIM_PWM_Stop_DMA+0x1ac>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a2e:	e00b      	b.n	8003a48 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b10      	cmp	r3, #16
 8003a34:	d104      	bne.n	8003a40 <HAL_TIM_PWM_Stop_DMA+0x1bc>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a3e:	e003      	b.n	8003a48 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40012c00 	.word	0x40012c00
 8003a58:	40014000 	.word	0x40014000
 8003a5c:	40014400 	.word	0x40014400
 8003a60:	40014800 	.word	0x40014800

08003a64 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e049      	b.n	8003b0a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fc fff0 	bl	8000a70 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	f000 fbe0 	bl	8004268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b086      	sub	sp, #24
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e088      	b.n	8003c42 <HAL_TIM_IC_ConfigChannel+0x130>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d11b      	bne.n	8003b76 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	6819      	ldr	r1, [r3, #0]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f000 ff3d 	bl	80049cc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699a      	ldr	r2, [r3, #24]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 020c 	bic.w	r2, r2, #12
 8003b60:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6999      	ldr	r1, [r3, #24]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	619a      	str	r2, [r3, #24]
 8003b74:	e060      	b.n	8003c38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d11c      	bne.n	8003bb6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f000 ffa9 	bl	8004ae2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b9e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6999      	ldr	r1, [r3, #24]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	021a      	lsls	r2, r3, #8
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	619a      	str	r2, [r3, #24]
 8003bb4:	e040      	b.n	8003c38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d11b      	bne.n	8003bf4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	6819      	ldr	r1, [r3, #0]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f000 fff6 	bl	8004bbc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	69da      	ldr	r2, [r3, #28]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 020c 	bic.w	r2, r2, #12
 8003bde:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69d9      	ldr	r1, [r3, #28]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	61da      	str	r2, [r3, #28]
 8003bf2:	e021      	b.n	8003c38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d11c      	bne.n	8003c34 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	6819      	ldr	r1, [r3, #0]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f001 f813 	bl	8004c34 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69da      	ldr	r2, [r3, #28]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c1c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	69d9      	ldr	r1, [r3, #28]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	021a      	lsls	r2, r3, #8
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	61da      	str	r2, [r3, #28]
 8003c32:	e001      	b.n	8003c38 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
	...

08003c4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e0ff      	b.n	8003e6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b14      	cmp	r3, #20
 8003c76:	f200 80f0 	bhi.w	8003e5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c7a:	a201      	add	r2, pc, #4	; (adr r2, 8003c80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c80:	08003cd5 	.word	0x08003cd5
 8003c84:	08003e5b 	.word	0x08003e5b
 8003c88:	08003e5b 	.word	0x08003e5b
 8003c8c:	08003e5b 	.word	0x08003e5b
 8003c90:	08003d15 	.word	0x08003d15
 8003c94:	08003e5b 	.word	0x08003e5b
 8003c98:	08003e5b 	.word	0x08003e5b
 8003c9c:	08003e5b 	.word	0x08003e5b
 8003ca0:	08003d57 	.word	0x08003d57
 8003ca4:	08003e5b 	.word	0x08003e5b
 8003ca8:	08003e5b 	.word	0x08003e5b
 8003cac:	08003e5b 	.word	0x08003e5b
 8003cb0:	08003d97 	.word	0x08003d97
 8003cb4:	08003e5b 	.word	0x08003e5b
 8003cb8:	08003e5b 	.word	0x08003e5b
 8003cbc:	08003e5b 	.word	0x08003e5b
 8003cc0:	08003dd9 	.word	0x08003dd9
 8003cc4:	08003e5b 	.word	0x08003e5b
 8003cc8:	08003e5b 	.word	0x08003e5b
 8003ccc:	08003e5b 	.word	0x08003e5b
 8003cd0:	08003e19 	.word	0x08003e19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fb3c 	bl	8004358 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0208 	orr.w	r2, r2, #8
 8003cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0204 	bic.w	r2, r2, #4
 8003cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6999      	ldr	r1, [r3, #24]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	619a      	str	r2, [r3, #24]
      break;
 8003d12:	e0a5      	b.n	8003e60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fba2 	bl	8004464 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6999      	ldr	r1, [r3, #24]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	021a      	lsls	r2, r3, #8
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	619a      	str	r2, [r3, #24]
      break;
 8003d54:	e084      	b.n	8003e60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68b9      	ldr	r1, [r7, #8]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fc01 	bl	8004564 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0208 	orr.w	r2, r2, #8
 8003d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69da      	ldr	r2, [r3, #28]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0204 	bic.w	r2, r2, #4
 8003d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69d9      	ldr	r1, [r3, #28]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	61da      	str	r2, [r3, #28]
      break;
 8003d94:	e064      	b.n	8003e60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fc5f 	bl	8004660 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69da      	ldr	r2, [r3, #28]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003db0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69da      	ldr	r2, [r3, #28]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69d9      	ldr	r1, [r3, #28]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	021a      	lsls	r2, r3, #8
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	61da      	str	r2, [r3, #28]
      break;
 8003dd6:	e043      	b.n	8003e60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fca2 	bl	8004728 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0208 	orr.w	r2, r2, #8
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0204 	bic.w	r2, r2, #4
 8003e02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	691a      	ldr	r2, [r3, #16]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e16:	e023      	b.n	8003e60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fce0 	bl	80047e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	021a      	lsls	r2, r3, #8
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e58:	e002      	b.n	8003e60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop

08003e74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_TIM_ConfigClockSource+0x1c>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e0b6      	b.n	8003ffe <HAL_TIM_ConfigClockSource+0x18a>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ecc:	d03e      	beq.n	8003f4c <HAL_TIM_ConfigClockSource+0xd8>
 8003ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed2:	f200 8087 	bhi.w	8003fe4 <HAL_TIM_ConfigClockSource+0x170>
 8003ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eda:	f000 8086 	beq.w	8003fea <HAL_TIM_ConfigClockSource+0x176>
 8003ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee2:	d87f      	bhi.n	8003fe4 <HAL_TIM_ConfigClockSource+0x170>
 8003ee4:	2b70      	cmp	r3, #112	; 0x70
 8003ee6:	d01a      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0xaa>
 8003ee8:	2b70      	cmp	r3, #112	; 0x70
 8003eea:	d87b      	bhi.n	8003fe4 <HAL_TIM_ConfigClockSource+0x170>
 8003eec:	2b60      	cmp	r3, #96	; 0x60
 8003eee:	d050      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x11e>
 8003ef0:	2b60      	cmp	r3, #96	; 0x60
 8003ef2:	d877      	bhi.n	8003fe4 <HAL_TIM_ConfigClockSource+0x170>
 8003ef4:	2b50      	cmp	r3, #80	; 0x50
 8003ef6:	d03c      	beq.n	8003f72 <HAL_TIM_ConfigClockSource+0xfe>
 8003ef8:	2b50      	cmp	r3, #80	; 0x50
 8003efa:	d873      	bhi.n	8003fe4 <HAL_TIM_ConfigClockSource+0x170>
 8003efc:	2b40      	cmp	r3, #64	; 0x40
 8003efe:	d058      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x13e>
 8003f00:	2b40      	cmp	r3, #64	; 0x40
 8003f02:	d86f      	bhi.n	8003fe4 <HAL_TIM_ConfigClockSource+0x170>
 8003f04:	2b30      	cmp	r3, #48	; 0x30
 8003f06:	d064      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x15e>
 8003f08:	2b30      	cmp	r3, #48	; 0x30
 8003f0a:	d86b      	bhi.n	8003fe4 <HAL_TIM_ConfigClockSource+0x170>
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d060      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x15e>
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	d867      	bhi.n	8003fe4 <HAL_TIM_ConfigClockSource+0x170>
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d05c      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x15e>
 8003f18:	2b10      	cmp	r3, #16
 8003f1a:	d05a      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x15e>
 8003f1c:	e062      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6899      	ldr	r1, [r3, #8]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f000 fed9 	bl	8004ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	609a      	str	r2, [r3, #8]
      break;
 8003f4a:	e04f      	b.n	8003fec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	6899      	ldr	r1, [r3, #8]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f000 fec2 	bl	8004ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689a      	ldr	r2, [r3, #8]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f6e:	609a      	str	r2, [r3, #8]
      break;
 8003f70:	e03c      	b.n	8003fec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6859      	ldr	r1, [r3, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f000 fd80 	bl	8004a84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2150      	movs	r1, #80	; 0x50
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fe8f 	bl	8004cae <TIM_ITRx_SetConfig>
      break;
 8003f90:	e02c      	b.n	8003fec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6859      	ldr	r1, [r3, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f000 fddc 	bl	8004b5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2160      	movs	r1, #96	; 0x60
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fe7f 	bl	8004cae <TIM_ITRx_SetConfig>
      break;
 8003fb0:	e01c      	b.n	8003fec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	6859      	ldr	r1, [r3, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f000 fd60 	bl	8004a84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2140      	movs	r1, #64	; 0x40
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fe6f 	bl	8004cae <TIM_ITRx_SetConfig>
      break;
 8003fd0:	e00c      	b.n	8003fec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4610      	mov	r0, r2
 8003fde:	f000 fe66 	bl	8004cae <TIM_ITRx_SetConfig>
      break;
 8003fe2:	e003      	b.n	8003fec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe8:	e000      	b.n	8003fec <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003fea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b082      	sub	sp, #8
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_TIM_SlaveConfigSynchro+0x18>
 800401a:	2302      	movs	r3, #2
 800401c:	e031      	b.n	8004082 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2202      	movs	r2, #2
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800402e:	6839      	ldr	r1, [r7, #0]
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fc37 	bl	80048a4 <TIM_SlaveTimer_SetConfig>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d009      	beq.n	8004050 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e018      	b.n	8004082 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800405e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800406e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d107      	bne.n	80040ee <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2201      	movs	r2, #1
 80040e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040ec:	e02a      	b.n	8004144 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d107      	bne.n	8004108 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2202      	movs	r2, #2
 80040fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004106:	e01d      	b.n	8004144 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	429a      	cmp	r2, r3
 8004110:	d107      	bne.n	8004122 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2204      	movs	r2, #4
 8004116:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004120:	e010      	b.n	8004144 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	429a      	cmp	r2, r3
 800412a:	d107      	bne.n	800413c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2208      	movs	r2, #8
 8004130:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800413a:	e003      	b.n	8004144 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f7ff ffb4 	bl	80040b2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	771a      	strb	r2, [r3, #28]
}
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	429a      	cmp	r2, r3
 800416e:	d10b      	bne.n	8004188 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d136      	bne.n	80041ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004186:	e031      	b.n	80041ec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	429a      	cmp	r2, r3
 8004190:	d10b      	bne.n	80041aa <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2202      	movs	r2, #2
 8004196:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d125      	bne.n	80041ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041a8:	e020      	b.n	80041ec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d10b      	bne.n	80041cc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2204      	movs	r2, #4
 80041b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d114      	bne.n	80041ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041ca:	e00f      	b.n	80041ec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d10a      	bne.n	80041ec <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2208      	movs	r2, #8
 80041da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d103      	bne.n	80041ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f7ff ff4c 	bl	800408a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]
}
 80041f8:	bf00      	nop
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	429a      	cmp	r2, r3
 8004216:	d103      	bne.n	8004220 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2201      	movs	r2, #1
 800421c:	771a      	strb	r2, [r3, #28]
 800421e:	e019      	b.n	8004254 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	429a      	cmp	r2, r3
 8004228:	d103      	bne.n	8004232 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2202      	movs	r2, #2
 800422e:	771a      	strb	r2, [r3, #28]
 8004230:	e010      	b.n	8004254 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	429a      	cmp	r2, r3
 800423a:	d103      	bne.n	8004244 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2204      	movs	r2, #4
 8004240:	771a      	strb	r2, [r3, #28]
 8004242:	e007      	b.n	8004254 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	429a      	cmp	r2, r3
 800424c:	d102      	bne.n	8004254 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2208      	movs	r2, #8
 8004252:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f7ff ff22 	bl	800409e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	771a      	strb	r2, [r3, #28]
}
 8004260:	bf00      	nop
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a32      	ldr	r2, [pc, #200]	; (8004344 <TIM_Base_SetConfig+0xdc>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d007      	beq.n	8004290 <TIM_Base_SetConfig+0x28>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004286:	d003      	beq.n	8004290 <TIM_Base_SetConfig+0x28>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a2f      	ldr	r2, [pc, #188]	; (8004348 <TIM_Base_SetConfig+0xe0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d108      	bne.n	80042a2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a27      	ldr	r2, [pc, #156]	; (8004344 <TIM_Base_SetConfig+0xdc>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d013      	beq.n	80042d2 <TIM_Base_SetConfig+0x6a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b0:	d00f      	beq.n	80042d2 <TIM_Base_SetConfig+0x6a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a24      	ldr	r2, [pc, #144]	; (8004348 <TIM_Base_SetConfig+0xe0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00b      	beq.n	80042d2 <TIM_Base_SetConfig+0x6a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a23      	ldr	r2, [pc, #140]	; (800434c <TIM_Base_SetConfig+0xe4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d007      	beq.n	80042d2 <TIM_Base_SetConfig+0x6a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a22      	ldr	r2, [pc, #136]	; (8004350 <TIM_Base_SetConfig+0xe8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d003      	beq.n	80042d2 <TIM_Base_SetConfig+0x6a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a21      	ldr	r2, [pc, #132]	; (8004354 <TIM_Base_SetConfig+0xec>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d108      	bne.n	80042e4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a0e      	ldr	r2, [pc, #56]	; (8004344 <TIM_Base_SetConfig+0xdc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d00b      	beq.n	8004328 <TIM_Base_SetConfig+0xc0>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a0e      	ldr	r2, [pc, #56]	; (800434c <TIM_Base_SetConfig+0xe4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d007      	beq.n	8004328 <TIM_Base_SetConfig+0xc0>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a0d      	ldr	r2, [pc, #52]	; (8004350 <TIM_Base_SetConfig+0xe8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d003      	beq.n	8004328 <TIM_Base_SetConfig+0xc0>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a0c      	ldr	r2, [pc, #48]	; (8004354 <TIM_Base_SetConfig+0xec>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d103      	bne.n	8004330 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	615a      	str	r2, [r3, #20]
}
 8004336:	bf00      	nop
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40000400 	.word	0x40000400
 800434c:	40014000 	.word	0x40014000
 8004350:	40014400 	.word	0x40014400
 8004354:	40014800 	.word	0x40014800

08004358 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	f023 0201 	bic.w	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0303 	bic.w	r3, r3, #3
 8004392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f023 0302 	bic.w	r3, r3, #2
 80043a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a28      	ldr	r2, [pc, #160]	; (8004454 <TIM_OC1_SetConfig+0xfc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d00b      	beq.n	80043d0 <TIM_OC1_SetConfig+0x78>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a27      	ldr	r2, [pc, #156]	; (8004458 <TIM_OC1_SetConfig+0x100>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d007      	beq.n	80043d0 <TIM_OC1_SetConfig+0x78>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a26      	ldr	r2, [pc, #152]	; (800445c <TIM_OC1_SetConfig+0x104>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d003      	beq.n	80043d0 <TIM_OC1_SetConfig+0x78>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a25      	ldr	r2, [pc, #148]	; (8004460 <TIM_OC1_SetConfig+0x108>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d10c      	bne.n	80043ea <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f023 0308 	bic.w	r3, r3, #8
 80043d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f023 0304 	bic.w	r3, r3, #4
 80043e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a19      	ldr	r2, [pc, #100]	; (8004454 <TIM_OC1_SetConfig+0xfc>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00b      	beq.n	800440a <TIM_OC1_SetConfig+0xb2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a18      	ldr	r2, [pc, #96]	; (8004458 <TIM_OC1_SetConfig+0x100>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d007      	beq.n	800440a <TIM_OC1_SetConfig+0xb2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a17      	ldr	r2, [pc, #92]	; (800445c <TIM_OC1_SetConfig+0x104>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d003      	beq.n	800440a <TIM_OC1_SetConfig+0xb2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a16      	ldr	r2, [pc, #88]	; (8004460 <TIM_OC1_SetConfig+0x108>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d111      	bne.n	800442e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	621a      	str	r2, [r3, #32]
}
 8004448:	bf00      	nop
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	40012c00 	.word	0x40012c00
 8004458:	40014000 	.word	0x40014000
 800445c:	40014400 	.word	0x40014400
 8004460:	40014800 	.word	0x40014800

08004464 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f023 0210 	bic.w	r2, r3, #16
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f023 0320 	bic.w	r3, r3, #32
 80044b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a24      	ldr	r2, [pc, #144]	; (8004554 <TIM_OC2_SetConfig+0xf0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d10d      	bne.n	80044e4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a1b      	ldr	r2, [pc, #108]	; (8004554 <TIM_OC2_SetConfig+0xf0>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00b      	beq.n	8004504 <TIM_OC2_SetConfig+0xa0>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a1a      	ldr	r2, [pc, #104]	; (8004558 <TIM_OC2_SetConfig+0xf4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d007      	beq.n	8004504 <TIM_OC2_SetConfig+0xa0>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a19      	ldr	r2, [pc, #100]	; (800455c <TIM_OC2_SetConfig+0xf8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d003      	beq.n	8004504 <TIM_OC2_SetConfig+0xa0>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a18      	ldr	r2, [pc, #96]	; (8004560 <TIM_OC2_SetConfig+0xfc>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d113      	bne.n	800452c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800450a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004512:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	621a      	str	r2, [r3, #32]
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40012c00 	.word	0x40012c00
 8004558:	40014000 	.word	0x40014000
 800455c:	40014400 	.word	0x40014400
 8004560:	40014800 	.word	0x40014800

08004564 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0303 	bic.w	r3, r3, #3
 800459e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	021b      	lsls	r3, r3, #8
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a23      	ldr	r2, [pc, #140]	; (8004650 <TIM_OC3_SetConfig+0xec>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d10d      	bne.n	80045e2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	021b      	lsls	r3, r3, #8
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045e0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a1a      	ldr	r2, [pc, #104]	; (8004650 <TIM_OC3_SetConfig+0xec>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00b      	beq.n	8004602 <TIM_OC3_SetConfig+0x9e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a19      	ldr	r2, [pc, #100]	; (8004654 <TIM_OC3_SetConfig+0xf0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d007      	beq.n	8004602 <TIM_OC3_SetConfig+0x9e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a18      	ldr	r2, [pc, #96]	; (8004658 <TIM_OC3_SetConfig+0xf4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d003      	beq.n	8004602 <TIM_OC3_SetConfig+0x9e>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a17      	ldr	r2, [pc, #92]	; (800465c <TIM_OC3_SetConfig+0xf8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d113      	bne.n	800462a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	621a      	str	r2, [r3, #32]
}
 8004644:	bf00      	nop
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	40012c00 	.word	0x40012c00
 8004654:	40014000 	.word	0x40014000
 8004658:	40014400 	.word	0x40014400
 800465c:	40014800 	.word	0x40014800

08004660 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800468e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800469a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	031b      	lsls	r3, r3, #12
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a16      	ldr	r2, [pc, #88]	; (8004718 <TIM_OC4_SetConfig+0xb8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00b      	beq.n	80046dc <TIM_OC4_SetConfig+0x7c>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a15      	ldr	r2, [pc, #84]	; (800471c <TIM_OC4_SetConfig+0xbc>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d007      	beq.n	80046dc <TIM_OC4_SetConfig+0x7c>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a14      	ldr	r2, [pc, #80]	; (8004720 <TIM_OC4_SetConfig+0xc0>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d003      	beq.n	80046dc <TIM_OC4_SetConfig+0x7c>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a13      	ldr	r2, [pc, #76]	; (8004724 <TIM_OC4_SetConfig+0xc4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d109      	bne.n	80046f0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	019b      	lsls	r3, r3, #6
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	621a      	str	r2, [r3, #32]
}
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40012c00 	.word	0x40012c00
 800471c:	40014000 	.word	0x40014000
 8004720:	40014400 	.word	0x40014400
 8004724:	40014800 	.word	0x40014800

08004728 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800476c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	041b      	lsls	r3, r3, #16
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a15      	ldr	r2, [pc, #84]	; (80047d4 <TIM_OC5_SetConfig+0xac>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00b      	beq.n	800479a <TIM_OC5_SetConfig+0x72>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a14      	ldr	r2, [pc, #80]	; (80047d8 <TIM_OC5_SetConfig+0xb0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d007      	beq.n	800479a <TIM_OC5_SetConfig+0x72>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a13      	ldr	r2, [pc, #76]	; (80047dc <TIM_OC5_SetConfig+0xb4>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d003      	beq.n	800479a <TIM_OC5_SetConfig+0x72>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a12      	ldr	r2, [pc, #72]	; (80047e0 <TIM_OC5_SetConfig+0xb8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d109      	bne.n	80047ae <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	021b      	lsls	r3, r3, #8
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	621a      	str	r2, [r3, #32]
}
 80047c8:	bf00      	nop
 80047ca:	371c      	adds	r7, #28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	40012c00 	.word	0x40012c00
 80047d8:	40014000 	.word	0x40014000
 80047dc:	40014400 	.word	0x40014400
 80047e0:	40014800 	.word	0x40014800

080047e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800482a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	051b      	lsls	r3, r3, #20
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a16      	ldr	r2, [pc, #88]	; (8004894 <TIM_OC6_SetConfig+0xb0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00b      	beq.n	8004858 <TIM_OC6_SetConfig+0x74>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a15      	ldr	r2, [pc, #84]	; (8004898 <TIM_OC6_SetConfig+0xb4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d007      	beq.n	8004858 <TIM_OC6_SetConfig+0x74>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a14      	ldr	r2, [pc, #80]	; (800489c <TIM_OC6_SetConfig+0xb8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d003      	beq.n	8004858 <TIM_OC6_SetConfig+0x74>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a13      	ldr	r2, [pc, #76]	; (80048a0 <TIM_OC6_SetConfig+0xbc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d109      	bne.n	800486c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800485e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	029b      	lsls	r3, r3, #10
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	621a      	str	r2, [r3, #32]
}
 8004886:	bf00      	nop
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40012c00 	.word	0x40012c00
 8004898:	40014000 	.word	0x40014000
 800489c:	40014400 	.word	0x40014400
 80048a0:	40014800 	.word	0x40014800

080048a4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d2:	f023 0307 	bic.w	r3, r3, #7
 80048d6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b70      	cmp	r3, #112	; 0x70
 80048f0:	d01a      	beq.n	8004928 <TIM_SlaveTimer_SetConfig+0x84>
 80048f2:	2b70      	cmp	r3, #112	; 0x70
 80048f4:	d860      	bhi.n	80049b8 <TIM_SlaveTimer_SetConfig+0x114>
 80048f6:	2b60      	cmp	r3, #96	; 0x60
 80048f8:	d054      	beq.n	80049a4 <TIM_SlaveTimer_SetConfig+0x100>
 80048fa:	2b60      	cmp	r3, #96	; 0x60
 80048fc:	d85c      	bhi.n	80049b8 <TIM_SlaveTimer_SetConfig+0x114>
 80048fe:	2b50      	cmp	r3, #80	; 0x50
 8004900:	d046      	beq.n	8004990 <TIM_SlaveTimer_SetConfig+0xec>
 8004902:	2b50      	cmp	r3, #80	; 0x50
 8004904:	d858      	bhi.n	80049b8 <TIM_SlaveTimer_SetConfig+0x114>
 8004906:	2b40      	cmp	r3, #64	; 0x40
 8004908:	d019      	beq.n	800493e <TIM_SlaveTimer_SetConfig+0x9a>
 800490a:	2b40      	cmp	r3, #64	; 0x40
 800490c:	d854      	bhi.n	80049b8 <TIM_SlaveTimer_SetConfig+0x114>
 800490e:	2b30      	cmp	r3, #48	; 0x30
 8004910:	d055      	beq.n	80049be <TIM_SlaveTimer_SetConfig+0x11a>
 8004912:	2b30      	cmp	r3, #48	; 0x30
 8004914:	d850      	bhi.n	80049b8 <TIM_SlaveTimer_SetConfig+0x114>
 8004916:	2b20      	cmp	r3, #32
 8004918:	d051      	beq.n	80049be <TIM_SlaveTimer_SetConfig+0x11a>
 800491a:	2b20      	cmp	r3, #32
 800491c:	d84c      	bhi.n	80049b8 <TIM_SlaveTimer_SetConfig+0x114>
 800491e:	2b00      	cmp	r3, #0
 8004920:	d04d      	beq.n	80049be <TIM_SlaveTimer_SetConfig+0x11a>
 8004922:	2b10      	cmp	r3, #16
 8004924:	d04b      	beq.n	80049be <TIM_SlaveTimer_SetConfig+0x11a>
 8004926:	e047      	b.n	80049b8 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6818      	ldr	r0, [r3, #0]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	68d9      	ldr	r1, [r3, #12]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f000 f9d4 	bl	8004ce4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800493c:	e040      	b.n	80049c0 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b05      	cmp	r3, #5
 8004944:	d101      	bne.n	800494a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e03b      	b.n	80049c2 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6a1a      	ldr	r2, [r3, #32]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0201 	bic.w	r2, r2, #1
 8004960:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004970:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	4313      	orrs	r3, r2
 800497c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	621a      	str	r2, [r3, #32]
      break;
 800498e:	e017      	b.n	80049c0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6818      	ldr	r0, [r3, #0]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	6899      	ldr	r1, [r3, #8]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	461a      	mov	r2, r3
 800499e:	f000 f871 	bl	8004a84 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80049a2:	e00d      	b.n	80049c0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	6899      	ldr	r1, [r3, #8]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	461a      	mov	r2, r3
 80049b2:	f000 f8d3 	bl	8004b5c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80049b6:	e003      	b.n	80049c0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	75fb      	strb	r3, [r7, #23]
      break;
 80049bc:	e000      	b.n	80049c0 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80049be:	bf00      	nop
  }

  return status;
 80049c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	f023 0201 	bic.w	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4a20      	ldr	r2, [pc, #128]	; (8004a78 <TIM_TI1_SetConfig+0xac>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00b      	beq.n	8004a12 <TIM_TI1_SetConfig+0x46>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a00:	d007      	beq.n	8004a12 <TIM_TI1_SetConfig+0x46>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4a1d      	ldr	r2, [pc, #116]	; (8004a7c <TIM_TI1_SetConfig+0xb0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d003      	beq.n	8004a12 <TIM_TI1_SetConfig+0x46>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4a1c      	ldr	r2, [pc, #112]	; (8004a80 <TIM_TI1_SetConfig+0xb4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d101      	bne.n	8004a16 <TIM_TI1_SetConfig+0x4a>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <TIM_TI1_SetConfig+0x4c>
 8004a16:	2300      	movs	r3, #0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d008      	beq.n	8004a2e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f023 0303 	bic.w	r3, r3, #3
 8004a22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	e003      	b.n	8004a36 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f023 030a 	bic.w	r3, r3, #10
 8004a50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	f003 030a 	and.w	r3, r3, #10
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	621a      	str	r2, [r3, #32]
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40012c00 	.word	0x40012c00
 8004a7c:	40000400 	.word	0x40000400
 8004a80:	40014000 	.word	0x40014000

08004a84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	f023 0201 	bic.w	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f023 030a 	bic.w	r3, r3, #10
 8004ac0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	621a      	str	r2, [r3, #32]
}
 8004ad6:	bf00      	nop
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b087      	sub	sp, #28
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	60b9      	str	r1, [r7, #8]
 8004aec:	607a      	str	r2, [r7, #4]
 8004aee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	f023 0210 	bic.w	r2, r3, #16
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	031b      	lsls	r3, r3, #12
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	621a      	str	r2, [r3, #32]
}
 8004b50:	bf00      	nop
 8004b52:	371c      	adds	r7, #28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	f023 0210 	bic.w	r2, r3, #16
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	031b      	lsls	r3, r3, #12
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	621a      	str	r2, [r3, #32]
}
 8004bb0:	bf00      	nop
 8004bb2:	371c      	adds	r7, #28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f023 0303 	bic.w	r3, r3, #3
 8004be8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bf8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	011b      	lsls	r3, r3, #4
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004c0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	021b      	lsls	r3, r3, #8
 8004c12:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	621a      	str	r2, [r3, #32]
}
 8004c28:	bf00      	nop
 8004c2a:	371c      	adds	r7, #28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	021b      	lsls	r3, r3, #8
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	031b      	lsls	r3, r3, #12
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004c86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	031b      	lsls	r3, r3, #12
 8004c8c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	621a      	str	r2, [r3, #32]
}
 8004ca2:	bf00      	nop
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b085      	sub	sp, #20
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f043 0307 	orr.w	r3, r3, #7
 8004cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	609a      	str	r2, [r3, #8]
}
 8004cd8:	bf00      	nop
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	021a      	lsls	r2, r3, #8
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	609a      	str	r2, [r3, #8]
}
 8004d18:	bf00      	nop
 8004d1a:	371c      	adds	r7, #28
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 031f 	and.w	r3, r3, #31
 8004d36:	2201      	movs	r2, #1
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a1a      	ldr	r2, [r3, #32]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	43db      	mvns	r3, r3
 8004d46:	401a      	ands	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a1a      	ldr	r2, [r3, #32]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f003 031f 	and.w	r3, r3, #31
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	621a      	str	r2, [r3, #32]
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d109      	bne.n	8004d94 <HAL_TIMEx_PWMN_Start+0x24>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	bf14      	ite	ne
 8004d8c:	2301      	movne	r3, #1
 8004d8e:	2300      	moveq	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	e022      	b.n	8004dda <HAL_TIMEx_PWMN_Start+0x6a>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d109      	bne.n	8004dae <HAL_TIMEx_PWMN_Start+0x3e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	bf14      	ite	ne
 8004da6:	2301      	movne	r3, #1
 8004da8:	2300      	moveq	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	e015      	b.n	8004dda <HAL_TIMEx_PWMN_Start+0x6a>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d109      	bne.n	8004dc8 <HAL_TIMEx_PWMN_Start+0x58>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	e008      	b.n	8004dda <HAL_TIMEx_PWMN_Start+0x6a>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	bf14      	ite	ne
 8004dd4:	2301      	movne	r3, #1
 8004dd6:	2300      	moveq	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e05f      	b.n	8004ea2 <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d104      	bne.n	8004df2 <HAL_TIMEx_PWMN_Start+0x82>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004df0:	e013      	b.n	8004e1a <HAL_TIMEx_PWMN_Start+0xaa>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d104      	bne.n	8004e02 <HAL_TIMEx_PWMN_Start+0x92>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e00:	e00b      	b.n	8004e1a <HAL_TIMEx_PWMN_Start+0xaa>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d104      	bne.n	8004e12 <HAL_TIMEx_PWMN_Start+0xa2>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e10:	e003      	b.n	8004e1a <HAL_TIMEx_PWMN_Start+0xaa>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2202      	movs	r2, #2
 8004e16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2204      	movs	r2, #4
 8004e20:	6839      	ldr	r1, [r7, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 f930 	bl	8005088 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1b      	ldr	r2, [pc, #108]	; (8004eac <HAL_TIMEx_PWMN_Start+0x13c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00e      	beq.n	8004e60 <HAL_TIMEx_PWMN_Start+0xf0>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4a:	d009      	beq.n	8004e60 <HAL_TIMEx_PWMN_Start+0xf0>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a17      	ldr	r2, [pc, #92]	; (8004eb0 <HAL_TIMEx_PWMN_Start+0x140>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d004      	beq.n	8004e60 <HAL_TIMEx_PWMN_Start+0xf0>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a16      	ldr	r2, [pc, #88]	; (8004eb4 <HAL_TIMEx_PWMN_Start+0x144>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d115      	bne.n	8004e8c <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <HAL_TIMEx_PWMN_Start+0x148>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b06      	cmp	r3, #6
 8004e70:	d015      	beq.n	8004e9e <HAL_TIMEx_PWMN_Start+0x12e>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e78:	d011      	beq.n	8004e9e <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0201 	orr.w	r2, r2, #1
 8004e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8a:	e008      	b.n	8004e9e <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	e000      	b.n	8004ea0 <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	40012c00 	.word	0x40012c00
 8004eb0:	40000400 	.word	0x40000400
 8004eb4:	40014000 	.word	0x40014000
 8004eb8:	00010007 	.word	0x00010007

08004ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e054      	b.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a24      	ldr	r2, [pc, #144]	; (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d108      	bne.n	8004f10 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f04:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a17      	ldr	r2, [pc, #92]	; (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00e      	beq.n	8004f52 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3c:	d009      	beq.n	8004f52 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a13      	ldr	r2, [pc, #76]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d004      	beq.n	8004f52 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a11      	ldr	r2, [pc, #68]	; (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d10c      	bne.n	8004f6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40012c00 	.word	0x40012c00
 8004f90:	40000400 	.word	0x40000400
 8004f94:	40014000 	.word	0x40014000

08004f98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e060      	b.n	8005076 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	041b      	lsls	r3, r3, #16
 800502a:	4313      	orrs	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a14      	ldr	r2, [pc, #80]	; (8005084 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d115      	bne.n	8005064 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	051b      	lsls	r3, r3, #20
 8005044:	4313      	orrs	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	4313      	orrs	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40012c00 	.word	0x40012c00

08005088 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 031f 	and.w	r3, r3, #31
 800509a:	2204      	movs	r2, #4
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a1a      	ldr	r2, [r3, #32]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	43db      	mvns	r3, r3
 80050aa:	401a      	ands	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a1a      	ldr	r2, [r3, #32]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f003 031f 	and.w	r3, r3, #31
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	fa01 f303 	lsl.w	r3, r1, r3
 80050c0:	431a      	orrs	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	621a      	str	r2, [r3, #32]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e040      	b.n	8005166 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d106      	bne.n	80050fa <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7fb fdc5 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2224      	movs	r2, #36	; 0x24
 80050fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0201 	bic.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f8c1 	bl	8005298 <UART_SetConfig>
 8005116:	4603      	mov	r3, r0
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e022      	b.n	8005166 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f9eb 	bl	8005504 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800513c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800514c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0201 	orr.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fa72 	bl	8005648 <UART_CheckIdleState>
 8005164:	4603      	mov	r3, r0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b08a      	sub	sp, #40	; 0x28
 8005172:	af02      	add	r7, sp, #8
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	603b      	str	r3, [r7, #0]
 800517a:	4613      	mov	r3, r2
 800517c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005182:	2b20      	cmp	r3, #32
 8005184:	f040 8082 	bne.w	800528c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <HAL_UART_Transmit+0x26>
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e07a      	b.n	800528e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_UART_Transmit+0x38>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e073      	b.n	800528e <HAL_UART_Transmit+0x120>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2221      	movs	r2, #33	; 0x21
 80051ba:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051bc:	f7fb fe70 	bl	8000ea0 <HAL_GetTick>
 80051c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	88fa      	ldrh	r2, [r7, #6]
 80051c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	88fa      	ldrh	r2, [r7, #6]
 80051ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051da:	d108      	bne.n	80051ee <HAL_UART_Transmit+0x80>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d104      	bne.n	80051ee <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	61bb      	str	r3, [r7, #24]
 80051ec:	e003      	b.n	80051f6 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80051fe:	e02d      	b.n	800525c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	2200      	movs	r2, #0
 8005208:	2180      	movs	r1, #128	; 0x80
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 fa65 	bl	80056da <UART_WaitOnFlagUntilTimeout>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e039      	b.n	800528e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	881a      	ldrh	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800522c:	b292      	uxth	r2, r2
 800522e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	3302      	adds	r3, #2
 8005234:	61bb      	str	r3, [r7, #24]
 8005236:	e008      	b.n	800524a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	781a      	ldrb	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	b292      	uxth	r2, r2
 8005242:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	3301      	adds	r3, #1
 8005248:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005262:	b29b      	uxth	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1cb      	bne.n	8005200 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2200      	movs	r2, #0
 8005270:	2140      	movs	r1, #64	; 0x40
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 fa31 	bl	80056da <UART_WaitOnFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e005      	b.n	800528e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2220      	movs	r2, #32
 8005286:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005288:	2300      	movs	r3, #0
 800528a:	e000      	b.n	800528e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800528c:	2302      	movs	r3, #2
  }
}
 800528e:	4618      	mov	r0, r3
 8005290:	3720      	adds	r7, #32
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	4b8a      	ldr	r3, [pc, #552]	; (80054ec <UART_SetConfig+0x254>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6812      	ldr	r2, [r2, #0]
 80052ca:	6979      	ldr	r1, [r7, #20]
 80052cc:	430b      	orrs	r3, r1
 80052ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	430a      	orrs	r2, r1
 8005308:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a78      	ldr	r2, [pc, #480]	; (80054f0 <UART_SetConfig+0x258>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d120      	bne.n	8005356 <UART_SetConfig+0xbe>
 8005314:	4b77      	ldr	r3, [pc, #476]	; (80054f4 <UART_SetConfig+0x25c>)
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	f003 0303 	and.w	r3, r3, #3
 800531c:	2b03      	cmp	r3, #3
 800531e:	d817      	bhi.n	8005350 <UART_SetConfig+0xb8>
 8005320:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <UART_SetConfig+0x90>)
 8005322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005326:	bf00      	nop
 8005328:	08005339 	.word	0x08005339
 800532c:	08005345 	.word	0x08005345
 8005330:	0800534b 	.word	0x0800534b
 8005334:	0800533f 	.word	0x0800533f
 8005338:	2300      	movs	r3, #0
 800533a:	77fb      	strb	r3, [r7, #31]
 800533c:	e01d      	b.n	800537a <UART_SetConfig+0xe2>
 800533e:	2302      	movs	r3, #2
 8005340:	77fb      	strb	r3, [r7, #31]
 8005342:	e01a      	b.n	800537a <UART_SetConfig+0xe2>
 8005344:	2304      	movs	r3, #4
 8005346:	77fb      	strb	r3, [r7, #31]
 8005348:	e017      	b.n	800537a <UART_SetConfig+0xe2>
 800534a:	2308      	movs	r3, #8
 800534c:	77fb      	strb	r3, [r7, #31]
 800534e:	e014      	b.n	800537a <UART_SetConfig+0xe2>
 8005350:	2310      	movs	r3, #16
 8005352:	77fb      	strb	r3, [r7, #31]
 8005354:	e011      	b.n	800537a <UART_SetConfig+0xe2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a67      	ldr	r2, [pc, #412]	; (80054f8 <UART_SetConfig+0x260>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d102      	bne.n	8005366 <UART_SetConfig+0xce>
 8005360:	2300      	movs	r3, #0
 8005362:	77fb      	strb	r3, [r7, #31]
 8005364:	e009      	b.n	800537a <UART_SetConfig+0xe2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a64      	ldr	r2, [pc, #400]	; (80054fc <UART_SetConfig+0x264>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d102      	bne.n	8005376 <UART_SetConfig+0xde>
 8005370:	2300      	movs	r3, #0
 8005372:	77fb      	strb	r3, [r7, #31]
 8005374:	e001      	b.n	800537a <UART_SetConfig+0xe2>
 8005376:	2310      	movs	r3, #16
 8005378:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005382:	d15b      	bne.n	800543c <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005384:	7ffb      	ldrb	r3, [r7, #31]
 8005386:	2b08      	cmp	r3, #8
 8005388:	d827      	bhi.n	80053da <UART_SetConfig+0x142>
 800538a:	a201      	add	r2, pc, #4	; (adr r2, 8005390 <UART_SetConfig+0xf8>)
 800538c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005390:	080053b5 	.word	0x080053b5
 8005394:	080053bd 	.word	0x080053bd
 8005398:	080053c5 	.word	0x080053c5
 800539c:	080053db 	.word	0x080053db
 80053a0:	080053cb 	.word	0x080053cb
 80053a4:	080053db 	.word	0x080053db
 80053a8:	080053db 	.word	0x080053db
 80053ac:	080053db 	.word	0x080053db
 80053b0:	080053d3 	.word	0x080053d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b4:	f7fd fd5c 	bl	8002e70 <HAL_RCC_GetPCLK1Freq>
 80053b8:	61b8      	str	r0, [r7, #24]
        break;
 80053ba:	e013      	b.n	80053e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053bc:	f7fd fd7a 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 80053c0:	61b8      	str	r0, [r7, #24]
        break;
 80053c2:	e00f      	b.n	80053e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c4:	4b4e      	ldr	r3, [pc, #312]	; (8005500 <UART_SetConfig+0x268>)
 80053c6:	61bb      	str	r3, [r7, #24]
        break;
 80053c8:	e00c      	b.n	80053e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ca:	f7fd fcd9 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 80053ce:	61b8      	str	r0, [r7, #24]
        break;
 80053d0:	e008      	b.n	80053e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d6:	61bb      	str	r3, [r7, #24]
        break;
 80053d8:	e004      	b.n	80053e4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	77bb      	strb	r3, [r7, #30]
        break;
 80053e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d074      	beq.n	80054d4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	005a      	lsls	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	085b      	lsrs	r3, r3, #1
 80053f4:	441a      	add	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fe:	b29b      	uxth	r3, r3
 8005400:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2b0f      	cmp	r3, #15
 8005406:	d916      	bls.n	8005436 <UART_SetConfig+0x19e>
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800540e:	d212      	bcs.n	8005436 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	b29b      	uxth	r3, r3
 8005414:	f023 030f 	bic.w	r3, r3, #15
 8005418:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	085b      	lsrs	r3, r3, #1
 800541e:	b29b      	uxth	r3, r3
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	b29a      	uxth	r2, r3
 8005426:	89fb      	ldrh	r3, [r7, #14]
 8005428:	4313      	orrs	r3, r2
 800542a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	89fa      	ldrh	r2, [r7, #14]
 8005432:	60da      	str	r2, [r3, #12]
 8005434:	e04e      	b.n	80054d4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	77bb      	strb	r3, [r7, #30]
 800543a:	e04b      	b.n	80054d4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800543c:	7ffb      	ldrb	r3, [r7, #31]
 800543e:	2b08      	cmp	r3, #8
 8005440:	d827      	bhi.n	8005492 <UART_SetConfig+0x1fa>
 8005442:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <UART_SetConfig+0x1b0>)
 8005444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005448:	0800546d 	.word	0x0800546d
 800544c:	08005475 	.word	0x08005475
 8005450:	0800547d 	.word	0x0800547d
 8005454:	08005493 	.word	0x08005493
 8005458:	08005483 	.word	0x08005483
 800545c:	08005493 	.word	0x08005493
 8005460:	08005493 	.word	0x08005493
 8005464:	08005493 	.word	0x08005493
 8005468:	0800548b 	.word	0x0800548b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800546c:	f7fd fd00 	bl	8002e70 <HAL_RCC_GetPCLK1Freq>
 8005470:	61b8      	str	r0, [r7, #24]
        break;
 8005472:	e013      	b.n	800549c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005474:	f7fd fd1e 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 8005478:	61b8      	str	r0, [r7, #24]
        break;
 800547a:	e00f      	b.n	800549c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800547c:	4b20      	ldr	r3, [pc, #128]	; (8005500 <UART_SetConfig+0x268>)
 800547e:	61bb      	str	r3, [r7, #24]
        break;
 8005480:	e00c      	b.n	800549c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005482:	f7fd fc7d 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8005486:	61b8      	str	r0, [r7, #24]
        break;
 8005488:	e008      	b.n	800549c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800548a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800548e:	61bb      	str	r3, [r7, #24]
        break;
 8005490:	e004      	b.n	800549c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	77bb      	strb	r3, [r7, #30]
        break;
 800549a:	bf00      	nop
    }

    if (pclk != 0U)
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d018      	beq.n	80054d4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	085a      	lsrs	r2, r3, #1
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	441a      	add	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2b0f      	cmp	r3, #15
 80054bc:	d908      	bls.n	80054d0 <UART_SetConfig+0x238>
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c4:	d204      	bcs.n	80054d0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	60da      	str	r2, [r3, #12]
 80054ce:	e001      	b.n	80054d4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80054e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3720      	adds	r7, #32
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	efff69f3 	.word	0xefff69f3
 80054f0:	40013800 	.word	0x40013800
 80054f4:	40021000 	.word	0x40021000
 80054f8:	40004400 	.word	0x40004400
 80054fc:	40004800 	.word	0x40004800
 8005500:	007a1200 	.word	0x007a1200

08005504 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00a      	beq.n	800552e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	f003 0310 	and.w	r3, r3, #16
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00a      	beq.n	80055b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	f003 0320 	and.w	r3, r3, #32
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d01a      	beq.n	800561a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005602:	d10a      	bne.n	800561a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	605a      	str	r2, [r3, #4]
  }
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af02      	add	r7, sp, #8
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005658:	f7fb fc22 	bl	8000ea0 <HAL_GetTick>
 800565c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b08      	cmp	r3, #8
 800566a:	d10e      	bne.n	800568a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800566c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f82d 	bl	80056da <UART_WaitOnFlagUntilTimeout>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e023      	b.n	80056d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b04      	cmp	r3, #4
 8005696:	d10e      	bne.n	80056b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005698:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f817 	bl	80056da <UART_WaitOnFlagUntilTimeout>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e00d      	b.n	80056d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b09c      	sub	sp, #112	; 0x70
 80056de:	af00      	add	r7, sp, #0
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	603b      	str	r3, [r7, #0]
 80056e6:	4613      	mov	r3, r2
 80056e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ea:	e0a5      	b.n	8005838 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f2:	f000 80a1 	beq.w	8005838 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f6:	f7fb fbd3 	bl	8000ea0 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005702:	429a      	cmp	r2, r3
 8005704:	d302      	bcc.n	800570c <UART_WaitOnFlagUntilTimeout+0x32>
 8005706:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005708:	2b00      	cmp	r3, #0
 800570a:	d13e      	bne.n	800578a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800571a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800571c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005720:	667b      	str	r3, [r7, #100]	; 0x64
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800572a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800572c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005730:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005732:	e841 2300 	strex	r3, r2, [r1]
 8005736:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1e6      	bne.n	800570c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3308      	adds	r3, #8
 8005744:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	f023 0301 	bic.w	r3, r3, #1
 8005754:	663b      	str	r3, [r7, #96]	; 0x60
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3308      	adds	r3, #8
 800575c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800575e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005760:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005764:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800576c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e5      	bne.n	800573e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2220      	movs	r2, #32
 8005776:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e067      	b.n	800585a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	d04f      	beq.n	8005838 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057a6:	d147      	bne.n	8005838 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	e853 3f00 	ldrex	r3, [r3]
 80057be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d0:	637b      	str	r3, [r7, #52]	; 0x34
 80057d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e6      	bne.n	80057b2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3308      	adds	r3, #8
 80057ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	613b      	str	r3, [r7, #16]
   return(result);
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f023 0301 	bic.w	r3, r3, #1
 80057fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3308      	adds	r3, #8
 8005802:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005804:	623a      	str	r2, [r7, #32]
 8005806:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	69f9      	ldr	r1, [r7, #28]
 800580a:	6a3a      	ldr	r2, [r7, #32]
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	61bb      	str	r3, [r7, #24]
   return(result);
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e5      	bne.n	80057e4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2220      	movs	r2, #32
 800581c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2220      	movs	r2, #32
 8005822:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2220      	movs	r2, #32
 8005828:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e010      	b.n	800585a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	69da      	ldr	r2, [r3, #28]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	4013      	ands	r3, r2
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	429a      	cmp	r2, r3
 8005846:	bf0c      	ite	eq
 8005848:	2301      	moveq	r3, #1
 800584a:	2300      	movne	r3, #0
 800584c:	b2db      	uxtb	r3, r3
 800584e:	461a      	mov	r2, r3
 8005850:	79fb      	ldrb	r3, [r7, #7]
 8005852:	429a      	cmp	r2, r3
 8005854:	f43f af4a 	beq.w	80056ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3770      	adds	r7, #112	; 0x70
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
	...

08005864 <__libc_init_array>:
 8005864:	b570      	push	{r4, r5, r6, lr}
 8005866:	4d0d      	ldr	r5, [pc, #52]	; (800589c <__libc_init_array+0x38>)
 8005868:	4c0d      	ldr	r4, [pc, #52]	; (80058a0 <__libc_init_array+0x3c>)
 800586a:	1b64      	subs	r4, r4, r5
 800586c:	10a4      	asrs	r4, r4, #2
 800586e:	2600      	movs	r6, #0
 8005870:	42a6      	cmp	r6, r4
 8005872:	d109      	bne.n	8005888 <__libc_init_array+0x24>
 8005874:	4d0b      	ldr	r5, [pc, #44]	; (80058a4 <__libc_init_array+0x40>)
 8005876:	4c0c      	ldr	r4, [pc, #48]	; (80058a8 <__libc_init_array+0x44>)
 8005878:	f000 f820 	bl	80058bc <_init>
 800587c:	1b64      	subs	r4, r4, r5
 800587e:	10a4      	asrs	r4, r4, #2
 8005880:	2600      	movs	r6, #0
 8005882:	42a6      	cmp	r6, r4
 8005884:	d105      	bne.n	8005892 <__libc_init_array+0x2e>
 8005886:	bd70      	pop	{r4, r5, r6, pc}
 8005888:	f855 3b04 	ldr.w	r3, [r5], #4
 800588c:	4798      	blx	r3
 800588e:	3601      	adds	r6, #1
 8005890:	e7ee      	b.n	8005870 <__libc_init_array+0xc>
 8005892:	f855 3b04 	ldr.w	r3, [r5], #4
 8005896:	4798      	blx	r3
 8005898:	3601      	adds	r6, #1
 800589a:	e7f2      	b.n	8005882 <__libc_init_array+0x1e>
 800589c:	08005920 	.word	0x08005920
 80058a0:	08005920 	.word	0x08005920
 80058a4:	08005920 	.word	0x08005920
 80058a8:	08005924 	.word	0x08005924

080058ac <memset>:
 80058ac:	4402      	add	r2, r0
 80058ae:	4603      	mov	r3, r0
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d100      	bne.n	80058b6 <memset+0xa>
 80058b4:	4770      	bx	lr
 80058b6:	f803 1b01 	strb.w	r1, [r3], #1
 80058ba:	e7f9      	b.n	80058b0 <memset+0x4>

080058bc <_init>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	bf00      	nop
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr

080058c8 <_fini>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	bf00      	nop
 80058cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ce:	bc08      	pop	{r3}
 80058d0:	469e      	mov	lr, r3
 80058d2:	4770      	bx	lr
