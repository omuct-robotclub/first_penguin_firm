
MD-5_firm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f14  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800609c  0800609c  0001609c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006104  08006104  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006104  08006104  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006104  08006104  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006104  08006104  00016104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006108  08006108  00016108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800610c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000258  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000264  20000264  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000104b6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fd7  00000000  00000000  000304f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e00  00000000  00000000  000324d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d48  00000000  00000000  000332d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af42  00000000  00000000  00034018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010621  00000000  00000000  0004ef5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3254  00000000  00000000  0005f57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001027cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b84  00000000  00000000  00102820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006084 	.word	0x08006084

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006084 	.word	0x08006084

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fec1 	bl	8000f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f891 	bl	80002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 fb07 	bl	80007e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80001da:	f000 fae7 	bl	80007ac <MX_DMA_Init>
  MX_CAN_Init();
 80001de:	f000 f8eb 	bl	80003b8 <MX_CAN_Init>
  MX_TIM1_Init();
 80001e2:	f000 f921 	bl	8000428 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001e6:	f000 f9bb 	bl	8000560 <MX_TIM2_Init>
  MX_TIM3_Init();
 80001ea:	f000 fa39 	bl	8000660 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80001ee:	f000 faad 	bl	800074c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setup_fillter_CAN();
 80001f2:	f000 fbbb 	bl	800096c <setup_fillter_CAN>
  HAL_CAN_Start(&hcan);
 80001f6:	483a      	ldr	r0, [pc, #232]	; (80002e0 <main+0x118>)
 80001f8:	f001 f8fb 	bl	80013f2 <HAL_CAN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001fc:	2100      	movs	r1, #0
 80001fe:	4839      	ldr	r0, [pc, #228]	; (80002e4 <main+0x11c>)
 8000200:	f003 fc32 	bl	8003a68 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000204:	2100      	movs	r1, #0
 8000206:	4837      	ldr	r0, [pc, #220]	; (80002e4 <main+0x11c>)
 8000208:	f005 f996 	bl	8005538 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800020c:	2104      	movs	r1, #4
 800020e:	4835      	ldr	r0, [pc, #212]	; (80002e4 <main+0x11c>)
 8000210:	f003 fc2a 	bl	8003a68 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000214:	2104      	movs	r1, #4
 8000216:	4833      	ldr	r0, [pc, #204]	; (80002e4 <main+0x11c>)
 8000218:	f005 f98e 	bl	8005538 <HAL_TIMEx_PWMN_Start>

  uint8_t hello[5] = "hello";
 800021c:	4a32      	ldr	r2, [pc, #200]	; (80002e8 <main+0x120>)
 800021e:	f107 0308 	add.w	r3, r7, #8
 8000222:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000226:	6018      	str	r0, [r3, #0]
 8000228:	3304      	adds	r3, #4
 800022a:	7019      	strb	r1, [r3, #0]
  uint8_t world[5] = "world";
 800022c:	4a2f      	ldr	r2, [pc, #188]	; (80002ec <main+0x124>)
 800022e:	463b      	mov	r3, r7
 8000230:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000234:	6018      	str	r0, [r3, #0]
 8000236:	3304      	adds	r3, #4
 8000238:	7019      	strb	r1, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart1, hello, 5, 1);
 800023a:	f107 0108 	add.w	r1, r7, #8
 800023e:	2301      	movs	r3, #1
 8000240:	2205      	movs	r2, #5
 8000242:	482b      	ldr	r0, [pc, #172]	; (80002f0 <main+0x128>)
 8000244:	f005 fb77 	bl	8005936 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000248:	2120      	movs	r1, #32
 800024a:	482a      	ldr	r0, [pc, #168]	; (80002f4 <main+0x12c>)
 800024c:	f001 ffa8 	bl	80021a0 <HAL_GPIO_TogglePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1600);
 8000250:	4b24      	ldr	r3, [pc, #144]	; (80002e4 <main+0x11c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000258:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 300);
 800025a:	4b22      	ldr	r3, [pc, #136]	; (80002e4 <main+0x11c>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000262:	639a      	str	r2, [r3, #56]	; 0x38
	  led_set_RGB(0, 32, 0, 0);
 8000264:	2300      	movs	r3, #0
 8000266:	2200      	movs	r2, #0
 8000268:	2120      	movs	r1, #32
 800026a:	2000      	movs	r0, #0
 800026c:	f000 fb06 	bl	800087c <led_set_RGB>
	  led_set_RGB(1, 0, 32, 0);
 8000270:	2300      	movs	r3, #0
 8000272:	2220      	movs	r2, #32
 8000274:	2100      	movs	r1, #0
 8000276:	2001      	movs	r0, #1
 8000278:	f000 fb00 	bl	800087c <led_set_RGB>
	  led_render_all();
 800027c:	f000 fb2c 	bl	80008d8 <led_render_all>
	  send_message_CAN();
 8000280:	f000 fbb2 	bl	80009e8 <send_message_CAN>
	  HAL_Delay(1000);
 8000284:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000288:	f000 feca 	bl	8001020 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, world, 5, 1);
 800028c:	4639      	mov	r1, r7
 800028e:	2301      	movs	r3, #1
 8000290:	2205      	movs	r2, #5
 8000292:	4817      	ldr	r0, [pc, #92]	; (80002f0 <main+0x128>)
 8000294:	f005 fb4f 	bl	8005936 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000298:	2120      	movs	r1, #32
 800029a:	4816      	ldr	r0, [pc, #88]	; (80002f4 <main+0x12c>)
 800029c:	f001 ff80 	bl	80021a0 <HAL_GPIO_TogglePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 300);
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <main+0x11c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002a8:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1600);
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <main+0x11c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80002b2:	639a      	str	r2, [r3, #56]	; 0x38
	  led_set_RGB(0, 0, 0, 32);
 80002b4:	2320      	movs	r3, #32
 80002b6:	2200      	movs	r2, #0
 80002b8:	2100      	movs	r1, #0
 80002ba:	2000      	movs	r0, #0
 80002bc:	f000 fade 	bl	800087c <led_set_RGB>
	  led_set_RGB(1, 16, 16, 16);
 80002c0:	2310      	movs	r3, #16
 80002c2:	2210      	movs	r2, #16
 80002c4:	2110      	movs	r1, #16
 80002c6:	2001      	movs	r0, #1
 80002c8:	f000 fad8 	bl	800087c <led_set_RGB>
	  led_render_all();
 80002cc:	f000 fb04 	bl	80008d8 <led_render_all>
	  send_usart1_CAN_mailbox();
 80002d0:	f000 fbc0 	bl	8000a54 <send_usart1_CAN_mailbox>
	  HAL_Delay(1000);
 80002d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d8:	f000 fea2 	bl	8001020 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, hello, 5, 1);
 80002dc:	e7ad      	b.n	800023a <main+0x72>
 80002de:	bf00      	nop
 80002e0:	20000028 	.word	0x20000028
 80002e4:	20000050 	.word	0x20000050
 80002e8:	0800609c 	.word	0x0800609c
 80002ec:	080060a4 	.word	0x080060a4
 80002f0:	20000178 	.word	0x20000178
 80002f4:	48000400 	.word	0x48000400

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b096      	sub	sp, #88	; 0x58
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000302:	2228      	movs	r2, #40	; 0x28
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f005 feb4 	bl	8006074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030c:	f107 031c 	add.w	r3, r7, #28
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
 8000328:	611a      	str	r2, [r3, #16]
 800032a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800032c:	2301      	movs	r3, #1
 800032e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000334:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000336:	2301      	movs	r3, #1
 8000338:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033a:	2301      	movs	r3, #1
 800033c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800033e:	2302      	movs	r3, #2
 8000340:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000346:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000348:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800034c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000352:	4618      	mov	r0, r3
 8000354:	f001 ff3e 	bl	80021d4 <HAL_RCC_OscConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800035e:	f000 fbad 	bl	8000abc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000362:	230f      	movs	r3, #15
 8000364:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000366:	2302      	movs	r3, #2
 8000368:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800036e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000372:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000378:	f107 031c 	add.w	r3, r7, #28
 800037c:	2102      	movs	r1, #2
 800037e:	4618      	mov	r0, r3
 8000380:	f002 ff66 	bl	8003250 <HAL_RCC_ClockConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800038a:	f000 fb97 	bl	8000abc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 800038e:	f241 0301 	movw	r3, #4097	; 0x1001
 8000392:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000398:	2300      	movs	r3, #0
 800039a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	4618      	mov	r0, r3
 80003a0:	f003 f98e 	bl	80036c0 <HAL_RCCEx_PeriphCLKConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003aa:	f000 fb87 	bl	8000abc <Error_Handler>
  }
}
 80003ae:	bf00      	nop
 80003b0:	3758      	adds	r7, #88	; 0x58
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <MX_CAN_Init+0x68>)
 80003be:	4a19      	ldr	r2, [pc, #100]	; (8000424 <MX_CAN_Init+0x6c>)
 80003c0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <MX_CAN_Init+0x68>)
 80003c4:	2202      	movs	r2, #2
 80003c6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <MX_CAN_Init+0x68>)
 80003ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ce:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003d0:	4b13      	ldr	r3, [pc, #76]	; (8000420 <MX_CAN_Init+0x68>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 80003d6:	4b12      	ldr	r3, [pc, #72]	; (8000420 <MX_CAN_Init+0x68>)
 80003d8:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 80003dc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80003de:	4b10      	ldr	r3, [pc, #64]	; (8000420 <MX_CAN_Init+0x68>)
 80003e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003e4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003e6:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <MX_CAN_Init+0x68>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003ec:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <MX_CAN_Init+0x68>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003f2:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <MX_CAN_Init+0x68>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003f8:	4b09      	ldr	r3, [pc, #36]	; (8000420 <MX_CAN_Init+0x68>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003fe:	4b08      	ldr	r3, [pc, #32]	; (8000420 <MX_CAN_Init+0x68>)
 8000400:	2200      	movs	r2, #0
 8000402:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <MX_CAN_Init+0x68>)
 8000406:	2200      	movs	r2, #0
 8000408:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800040a:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_CAN_Init+0x68>)
 800040c:	f000 fe2c 	bl	8001068 <HAL_CAN_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000416:	f000 fb51 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	20000028 	.word	0x20000028
 8000424:	40006400 	.word	0x40006400

08000428 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b096      	sub	sp, #88	; 0x58
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800042e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800043a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
 8000448:	611a      	str	r2, [r3, #16]
 800044a:	615a      	str	r2, [r3, #20]
 800044c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	222c      	movs	r2, #44	; 0x2c
 8000452:	2100      	movs	r1, #0
 8000454:	4618      	mov	r0, r3
 8000456:	f005 fe0d 	bl	8006074 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800045a:	4b3f      	ldr	r3, [pc, #252]	; (8000558 <MX_TIM1_Init+0x130>)
 800045c:	4a3f      	ldr	r2, [pc, #252]	; (800055c <MX_TIM1_Init+0x134>)
 800045e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000460:	4b3d      	ldr	r3, [pc, #244]	; (8000558 <MX_TIM1_Init+0x130>)
 8000462:	2200      	movs	r2, #0
 8000464:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000466:	4b3c      	ldr	r3, [pc, #240]	; (8000558 <MX_TIM1_Init+0x130>)
 8000468:	2220      	movs	r2, #32
 800046a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 800046c:	4b3a      	ldr	r3, [pc, #232]	; (8000558 <MX_TIM1_Init+0x130>)
 800046e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000472:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000474:	4b38      	ldr	r3, [pc, #224]	; (8000558 <MX_TIM1_Init+0x130>)
 8000476:	2200      	movs	r2, #0
 8000478:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800047a:	4b37      	ldr	r3, [pc, #220]	; (8000558 <MX_TIM1_Init+0x130>)
 800047c:	2200      	movs	r2, #0
 800047e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000480:	4b35      	ldr	r3, [pc, #212]	; (8000558 <MX_TIM1_Init+0x130>)
 8000482:	2200      	movs	r2, #0
 8000484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000486:	4834      	ldr	r0, [pc, #208]	; (8000558 <MX_TIM1_Init+0x130>)
 8000488:	f003 fa97 	bl	80039ba <HAL_TIM_PWM_Init>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000492:	f000 fb13 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000496:	2300      	movs	r3, #0
 8000498:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800049a:	2300      	movs	r3, #0
 800049c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800049e:	2300      	movs	r3, #0
 80004a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004a6:	4619      	mov	r1, r3
 80004a8:	482b      	ldr	r0, [pc, #172]	; (8000558 <MX_TIM1_Init+0x130>)
 80004aa:	f005 f8eb 	bl	8005684 <HAL_TIMEx_MasterConfigSynchronization>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80004b4:	f000 fb02 	bl	8000abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004b8:	2360      	movs	r3, #96	; 0x60
 80004ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004c0:	2300      	movs	r3, #0
 80004c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004c4:	2300      	movs	r3, #0
 80004c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004cc:	2300      	movs	r3, #0
 80004ce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004d0:	2300      	movs	r3, #0
 80004d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004d8:	2200      	movs	r2, #0
 80004da:	4619      	mov	r1, r3
 80004dc:	481e      	ldr	r0, [pc, #120]	; (8000558 <MX_TIM1_Init+0x130>)
 80004de:	f003 ff99 	bl	8004414 <HAL_TIM_PWM_ConfigChannel>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80004e8:	f000 fae8 	bl	8000abc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004f0:	2204      	movs	r2, #4
 80004f2:	4619      	mov	r1, r3
 80004f4:	4818      	ldr	r0, [pc, #96]	; (8000558 <MX_TIM1_Init+0x130>)
 80004f6:	f003 ff8d 	bl	8004414 <HAL_TIM_PWM_ConfigChannel>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000500:	f000 fadc 	bl	8000abc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000504:	2300      	movs	r3, #0
 8000506:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000508:	2300      	movs	r3, #0
 800050a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 16;
 8000510:	2310      	movs	r3, #16
 8000512:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800051c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000522:	2300      	movs	r3, #0
 8000524:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800052a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000530:	2300      	movs	r3, #0
 8000532:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	4619      	mov	r1, r3
 8000538:	4807      	ldr	r0, [pc, #28]	; (8000558 <MX_TIM1_Init+0x130>)
 800053a:	f005 f911 	bl	8005760 <HAL_TIMEx_ConfigBreakDeadTime>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000544:	f000 faba 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <MX_TIM1_Init+0x130>)
 800054a:	f000 fbd5 	bl	8000cf8 <HAL_TIM_MspPostInit>

}
 800054e:	bf00      	nop
 8000550:	3758      	adds	r7, #88	; 0x58
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000050 	.word	0x20000050
 800055c:	40012c00 	.word	0x40012c00

08000560 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08c      	sub	sp, #48	; 0x30
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800058e:	4b33      	ldr	r3, [pc, #204]	; (800065c <MX_TIM2_Init+0xfc>)
 8000590:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000594:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000596:	4b31      	ldr	r3, [pc, #196]	; (800065c <MX_TIM2_Init+0xfc>)
 8000598:	2200      	movs	r2, #0
 800059a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059c:	4b2f      	ldr	r3, [pc, #188]	; (800065c <MX_TIM2_Init+0xfc>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <MX_TIM2_Init+0xfc>)
 80005a4:	f04f 32ff 	mov.w	r2, #4294967295
 80005a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005aa:	4b2c      	ldr	r3, [pc, #176]	; (800065c <MX_TIM2_Init+0xfc>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b0:	4b2a      	ldr	r3, [pc, #168]	; (800065c <MX_TIM2_Init+0xfc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80005b6:	4829      	ldr	r0, [pc, #164]	; (800065c <MX_TIM2_Init+0xfc>)
 80005b8:	f003 fe38 	bl	800422c <HAL_TIM_IC_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80005c2:	f000 fa7b 	bl	8000abc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80005c6:	2304      	movs	r3, #4
 80005c8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80005ca:	2350      	movs	r3, #80	; 0x50
 80005cc:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	4619      	mov	r1, r3
 80005e0:	481e      	ldr	r0, [pc, #120]	; (800065c <MX_TIM2_Init+0xfc>)
 80005e2:	f004 f8f4 	bl	80047ce <HAL_TIM_SlaveConfigSynchro>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80005ec:	f000 fa66 	bl	8000abc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80005f4:	2301      	movs	r3, #1
 80005f6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	4619      	mov	r1, r3
 8000608:	4814      	ldr	r0, [pc, #80]	; (800065c <MX_TIM2_Init+0xfc>)
 800060a:	f003 fe66 	bl	80042da <HAL_TIM_IC_ConfigChannel>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000614:	f000 fa52 	bl	8000abc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000618:	2302      	movs	r3, #2
 800061a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800061c:	2302      	movs	r3, #2
 800061e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2204      	movs	r2, #4
 8000626:	4619      	mov	r1, r3
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <MX_TIM2_Init+0xfc>)
 800062a:	f003 fe56 	bl	80042da <HAL_TIM_IC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000634:	f000 fa42 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000638:	2300      	movs	r3, #0
 800063a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000640:	463b      	mov	r3, r7
 8000642:	4619      	mov	r1, r3
 8000644:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_TIM2_Init+0xfc>)
 8000646:	f005 f81d 	bl	8005684 <HAL_TIMEx_MasterConfigSynchronization>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8000650:	f000 fa34 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	3730      	adds	r7, #48	; 0x30
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2000009c 	.word	0x2000009c

08000660 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08e      	sub	sp, #56	; 0x38
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000680:	463b      	mov	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
 800068e:	615a      	str	r2, [r3, #20]
 8000690:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000692:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <MX_TIM3_Init+0xe4>)
 8000694:	4a2c      	ldr	r2, [pc, #176]	; (8000748 <MX_TIM3_Init+0xe8>)
 8000696:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000698:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <MX_TIM3_Init+0xe4>)
 800069a:	2200      	movs	r2, #0
 800069c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069e:	4b29      	ldr	r3, [pc, #164]	; (8000744 <MX_TIM3_Init+0xe4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 80006a4:	4b27      	ldr	r3, [pc, #156]	; (8000744 <MX_TIM3_Init+0xe4>)
 80006a6:	2259      	movs	r2, #89	; 0x59
 80006a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006aa:	4b26      	ldr	r3, [pc, #152]	; (8000744 <MX_TIM3_Init+0xe4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b0:	4b24      	ldr	r3, [pc, #144]	; (8000744 <MX_TIM3_Init+0xe4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006b6:	4823      	ldr	r0, [pc, #140]	; (8000744 <MX_TIM3_Init+0xe4>)
 80006b8:	f003 f928 	bl	800390c <HAL_TIM_Base_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80006c2:	f000 f9fb 	bl	8000abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006d0:	4619      	mov	r1, r3
 80006d2:	481c      	ldr	r0, [pc, #112]	; (8000744 <MX_TIM3_Init+0xe4>)
 80006d4:	f003 ffb2 	bl	800463c <HAL_TIM_ConfigClockSource>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80006de:	f000 f9ed 	bl	8000abc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006e2:	4818      	ldr	r0, [pc, #96]	; (8000744 <MX_TIM3_Init+0xe4>)
 80006e4:	f003 f969 	bl	80039ba <HAL_TIM_PWM_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80006ee:	f000 f9e5 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	4810      	ldr	r0, [pc, #64]	; (8000744 <MX_TIM3_Init+0xe4>)
 8000702:	f004 ffbf 	bl	8005684 <HAL_TIMEx_MasterConfigSynchronization>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800070c:	f000 f9d6 	bl	8000abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000710:	2360      	movs	r3, #96	; 0x60
 8000712:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	220c      	movs	r2, #12
 8000724:	4619      	mov	r1, r3
 8000726:	4807      	ldr	r0, [pc, #28]	; (8000744 <MX_TIM3_Init+0xe4>)
 8000728:	f003 fe74 	bl	8004414 <HAL_TIM_PWM_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000732:	f000 f9c3 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000736:	4803      	ldr	r0, [pc, #12]	; (8000744 <MX_TIM3_Init+0xe4>)
 8000738:	f000 fade 	bl	8000cf8 <HAL_TIM_MspPostInit>

}
 800073c:	bf00      	nop
 800073e:	3738      	adds	r7, #56	; 0x38
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000e8 	.word	0x200000e8
 8000748:	40000400 	.word	0x40000400

0800074c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_USART1_UART_Init+0x58>)
 8000752:	4a15      	ldr	r2, [pc, #84]	; (80007a8 <MX_USART1_UART_Init+0x5c>)
 8000754:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_USART1_UART_Init+0x58>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_USART1_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_USART1_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_USART1_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_USART1_UART_Init+0x58>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_USART1_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_USART1_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_USART1_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_USART1_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_USART1_UART_Init+0x58>)
 8000790:	f005 f883 	bl	800589a <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800079a:	f000 f98f 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000178 	.word	0x20000178
 80007a8:	40013800 	.word	0x40013800

080007ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_DMA_Init+0x38>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <MX_DMA_Init+0x38>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6153      	str	r3, [r2, #20]
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_DMA_Init+0x38>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	200d      	movs	r0, #13
 80007d0:	f001 f951 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80007d4:	200d      	movs	r0, #13
 80007d6:	f001 f96a 	bl	8001aae <HAL_NVIC_EnableIRQ>

}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007fe:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_GPIO_Init+0x8c>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a1c      	ldr	r2, [pc, #112]	; (8000874 <MX_GPIO_Init+0x8c>)
 8000804:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000808:	6153      	str	r3, [r2, #20]
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_GPIO_Init+0x8c>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_GPIO_Init+0x8c>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	4a16      	ldr	r2, [pc, #88]	; (8000874 <MX_GPIO_Init+0x8c>)
 800081c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000820:	6153      	str	r3, [r2, #20]
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_GPIO_Init+0x8c>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_GPIO_Init+0x8c>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	4a10      	ldr	r2, [pc, #64]	; (8000874 <MX_GPIO_Init+0x8c>)
 8000834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000838:	6153      	str	r3, [r2, #20]
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_GPIO_Init+0x8c>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISABLE_GPIO_Port, DISABLE_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2120      	movs	r1, #32
 800084a:	480b      	ldr	r0, [pc, #44]	; (8000878 <MX_GPIO_Init+0x90>)
 800084c:	f001 fc90 	bl	8002170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISABLE_Pin */
  GPIO_InitStruct.Pin = DISABLE_Pin;
 8000850:	2320      	movs	r3, #32
 8000852:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISABLE_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	4619      	mov	r1, r3
 8000866:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_GPIO_Init+0x90>)
 8000868:	f001 fb10 	bl	8001e8c <HAL_GPIO_Init>

}
 800086c:	bf00      	nop
 800086e:	3720      	adds	r7, #32
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000
 8000878:	48000400 	.word	0x48000400

0800087c <led_set_RGB>:

/* USER CODE BEGIN 4 */
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 800087c:	b490      	push	{r4, r7}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	4604      	mov	r4, r0
 8000884:	4608      	mov	r0, r1
 8000886:	4611      	mov	r1, r2
 8000888:	461a      	mov	r2, r3
 800088a:	4623      	mov	r3, r4
 800088c:	71fb      	strb	r3, [r7, #7]
 800088e:	4603      	mov	r3, r0
 8000890:	71bb      	strb	r3, [r7, #6]
 8000892:	460b      	mov	r3, r1
 8000894:	717b      	strb	r3, [r7, #5]
 8000896:	4613      	mov	r3, r2
 8000898:	713b      	strb	r3, [r7, #4]
  rgb_arr[3 * index    ] = g;
 800089a:	79fa      	ldrb	r2, [r7, #7]
 800089c:	4613      	mov	r3, r2
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	4413      	add	r3, r2
 80008a2:	490c      	ldr	r1, [pc, #48]	; (80008d4 <led_set_RGB+0x58>)
 80008a4:	797a      	ldrb	r2, [r7, #5]
 80008a6:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 1] = r;
 80008a8:	79fa      	ldrb	r2, [r7, #7]
 80008aa:	4613      	mov	r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	4413      	add	r3, r2
 80008b0:	3301      	adds	r3, #1
 80008b2:	4908      	ldr	r1, [pc, #32]	; (80008d4 <led_set_RGB+0x58>)
 80008b4:	79ba      	ldrb	r2, [r7, #6]
 80008b6:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = b;
 80008b8:	79fa      	ldrb	r2, [r7, #7]
 80008ba:	4613      	mov	r3, r2
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	4413      	add	r3, r2
 80008c0:	3302      	adds	r3, #2
 80008c2:	4904      	ldr	r1, [pc, #16]	; (80008d4 <led_set_RGB+0x58>)
 80008c4:	793a      	ldrb	r2, [r7, #4]
 80008c6:	54ca      	strb	r2, [r1, r3]
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc90      	pop	{r4, r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	200001fc 	.word	0x200001fc

080008d8 <led_render_all>:

void led_set_all_RGB(uint8_t r, uint8_t g, uint8_t b) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; i++) led_set_RGB(i, r, g, b);
}

void led_render_all() {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
  if(hdma_tim3_ch4_up.State != HAL_DMA_STATE_READY) {
 80008de:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <led_render_all+0x80>)
 80008e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d003      	beq.n	80008f0 <led_render_all+0x18>
    HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_4);
 80008e8:	210c      	movs	r1, #12
 80008ea:	481c      	ldr	r0, [pc, #112]	; (800095c <led_render_all+0x84>)
 80008ec:	f003 fbae 	bl	800404c <HAL_TIM_PWM_Stop_DMA>
  }
  for(uint_fast8_t i = 0; i < NUM_BYTES; i++) {
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	e023      	b.n	800093e <led_render_all+0x66>
	  for(uint_fast8_t j = 0; j < 8; j++){
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	e01a      	b.n	8000932 <led_render_all+0x5a>
		wr_buf[i * 8 + j] = PIXEL_PWM_LEN[((rgb_arr[i] << j) & 0b10000000) > 0];
 80008fc:	4a18      	ldr	r2, [pc, #96]	; (8000960 <led_render_all+0x88>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000910:	2b00      	cmp	r3, #0
 8000912:	bfcc      	ite	gt
 8000914:	2301      	movgt	r3, #1
 8000916:	2300      	movle	r3, #0
 8000918:	b2db      	uxtb	r3, r3
 800091a:	4619      	mov	r1, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	00da      	lsls	r2, r3, #3
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a0f      	ldr	r2, [pc, #60]	; (8000964 <led_render_all+0x8c>)
 8000926:	5c51      	ldrb	r1, [r2, r1]
 8000928:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <led_render_all+0x90>)
 800092a:	54d1      	strb	r1, [r2, r3]
	  for(uint_fast8_t j = 0; j < 8; j++){
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	3301      	adds	r3, #1
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	2b07      	cmp	r3, #7
 8000936:	d9e1      	bls.n	80008fc <led_render_all+0x24>
  for(uint_fast8_t i = 0; i < NUM_BYTES; i++) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3301      	adds	r3, #1
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b05      	cmp	r3, #5
 8000942:	d9d8      	bls.n	80008f6 <led_render_all+0x1e>
	  }
  }
  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t *)wr_buf, WRITE_BUF_LEN);
 8000944:	2331      	movs	r3, #49	; 0x31
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <led_render_all+0x90>)
 8000948:	210c      	movs	r1, #12
 800094a:	4804      	ldr	r0, [pc, #16]	; (800095c <led_render_all+0x84>)
 800094c:	f003 f978 	bl	8003c40 <HAL_TIM_PWM_Start_DMA>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000134 	.word	0x20000134
 800095c:	200000e8 	.word	0x200000e8
 8000960:	200001fc 	.word	0x200001fc
 8000964:	080060c8 	.word	0x080060c8
 8000968:	20000204 	.word	0x20000204

0800096c <setup_fillter_CAN>:

void setup_fillter_CAN(){
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
	uint16_t filterID[4] = {0x000, 0x200, 0x400, 0x500};
 8000972:	4a1a      	ldr	r2, [pc, #104]	; (80009dc <setup_fillter_CAN+0x70>)
 8000974:	463b      	mov	r3, r7
 8000976:	e892 0003 	ldmia.w	r2, {r0, r1}
 800097a:	e883 0003 	stmia.w	r3, {r0, r1}

	filter.FilterIdHigh         = filterID[0] << 5;                        // フィルターID(上位16ビット)
 800097e:	883b      	ldrh	r3, [r7, #0]
 8000980:	015b      	lsls	r3, r3, #5
 8000982:	461a      	mov	r2, r3
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <setup_fillter_CAN+0x74>)
 8000986:	601a      	str	r2, [r3, #0]
	filter.FilterIdLow          = filterID[1] << 5;                        // フィルターID(下位16ビット)
 8000988:	887b      	ldrh	r3, [r7, #2]
 800098a:	015b      	lsls	r3, r3, #5
 800098c:	461a      	mov	r2, r3
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <setup_fillter_CAN+0x74>)
 8000990:	605a      	str	r2, [r3, #4]
	filter.FilterMaskIdHigh     = filterID[2] << 5;                        // フィルターマスク(上位16ビット)
 8000992:	88bb      	ldrh	r3, [r7, #4]
 8000994:	015b      	lsls	r3, r3, #5
 8000996:	461a      	mov	r2, r3
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <setup_fillter_CAN+0x74>)
 800099a:	609a      	str	r2, [r3, #8]
	filter.FilterMaskIdLow      = filterID[3] << 5;                        // フィルターマスク(下位16ビット)
 800099c:	88fb      	ldrh	r3, [r7, #6]
 800099e:	015b      	lsls	r3, r3, #5
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <setup_fillter_CAN+0x74>)
 80009a4:	60da      	str	r2, [r3, #12]
	filter.FilterScale          = CAN_FILTERSCALE_16BIT;    // フィルタースケール
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <setup_fillter_CAN+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <setup_fillter_CAN+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
	filter.FilterBank           = 0;                        // フィルターバンクNo
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <setup_fillter_CAN+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	615a      	str	r2, [r3, #20]
	filter.FilterMode           = CAN_FILTERMODE_IDLIST;    // フィルターモード
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <setup_fillter_CAN+0x74>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	619a      	str	r2, [r3, #24]
	filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <setup_fillter_CAN+0x74>)
 80009c0:	220e      	movs	r2, #14
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24
	filter.FilterActivation     = ENABLE;                   // フィルター無効／有効
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <setup_fillter_CAN+0x74>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	621a      	str	r2, [r3, #32]
	HAL_CAN_ConfigFilter(&hcan, &filter);
 80009ca:	4905      	ldr	r1, [pc, #20]	; (80009e0 <setup_fillter_CAN+0x74>)
 80009cc:	4805      	ldr	r0, [pc, #20]	; (80009e4 <setup_fillter_CAN+0x78>)
 80009ce:	f000 fc46 	bl	800125e <HAL_CAN_ConfigFilter>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	080060ac 	.word	0x080060ac
 80009e0:	20000238 	.word	0x20000238
 80009e4:	20000028 	.word	0x20000028

080009e8 <send_message_CAN>:

int send_message_CAN(){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	uint8_t TxData[8];
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80009ee:	4818      	ldr	r0, [pc, #96]	; (8000a50 <send_message_CAN+0x68>)
 80009f0:	f000 fe1e 	bl	8001630 <HAL_CAN_GetTxMailboxesFreeLevel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d024      	beq.n	8000a44 <send_message_CAN+0x5c>
	    TxHeader.StdId = 0x000;                 // CAN ID
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
	    TxHeader.RTR = CAN_RTR_DATA;            // フレームタイプはデータフレーム
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
	    TxHeader.IDE = CAN_ID_STD;              // 標準ID(11ﾋﾞｯﾄ)
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
	    TxHeader.DLC = 8;                       // データ長は8バイトに
 8000a06:	2308      	movs	r3, #8
 8000a08:	623b      	str	r3, [r7, #32]
	    TxHeader.TransmitGlobalTime = DISABLE;  // ???
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    TxData[0] = 0x11;
 8000a10:	2311      	movs	r3, #17
 8000a12:	713b      	strb	r3, [r7, #4]
	    TxData[1] = 0x22;
 8000a14:	2322      	movs	r3, #34	; 0x22
 8000a16:	717b      	strb	r3, [r7, #5]
	    TxData[2] = 0x33;
 8000a18:	2333      	movs	r3, #51	; 0x33
 8000a1a:	71bb      	strb	r3, [r7, #6]
	    TxData[3] = 0x44;
 8000a1c:	2344      	movs	r3, #68	; 0x44
 8000a1e:	71fb      	strb	r3, [r7, #7]
	    TxData[4] = 0x55;
 8000a20:	2355      	movs	r3, #85	; 0x55
 8000a22:	723b      	strb	r3, [r7, #8]
	    TxData[5] = 0x66;
 8000a24:	2366      	movs	r3, #102	; 0x66
 8000a26:	727b      	strb	r3, [r7, #9]
	    TxData[6] = 0x77;
 8000a28:	2377      	movs	r3, #119	; 0x77
 8000a2a:	72bb      	strb	r3, [r7, #10]
	    TxData[7] = 0x88;
 8000a2c:	2388      	movs	r3, #136	; 0x88
 8000a2e:	72fb      	strb	r3, [r7, #11]
	    HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	1d3a      	adds	r2, r7, #4
 8000a36:	f107 0110 	add.w	r1, r7, #16
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <send_message_CAN+0x68>)
 8000a3c:	f000 fd1d 	bl	800147a <HAL_CAN_AddTxMessage>
	    return 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	e000      	b.n	8000a46 <send_message_CAN+0x5e>
	}
	return 1;
 8000a44:	2301      	movs	r3, #1
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3728      	adds	r7, #40	; 0x28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000028 	.word	0x20000028

08000a54 <send_usart1_CAN_mailbox>:

void send_usart1_CAN_mailbox(){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08c      	sub	sp, #48	; 0x30
 8000a58:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef RxHeader;
	uint32_t id;
	uint32_t dlc;
	uint8_t RxData[8] = "nnnnnnnn";
 8000a5a:	4a14      	ldr	r2, [pc, #80]	; (8000aac <send_usart1_CAN_mailbox+0x58>)
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a62:	e883 0003 	stmia.w	r3, {r0, r1}
	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	f107 020c 	add.w	r2, r7, #12
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4810      	ldr	r0, [pc, #64]	; (8000ab0 <send_usart1_CAN_mailbox+0x5c>)
 8000a70:	f000 fe13 	bl	800169a <HAL_CAN_GetRxMessage>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d10e      	bne.n	8000a98 <send_usart1_CAN_mailbox+0x44>
	{
		id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;     // ID
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d101      	bne.n	8000a84 <send_usart1_CAN_mailbox+0x30>
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	e000      	b.n	8000a86 <send_usart1_CAN_mailbox+0x32>
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
		dlc = RxHeader.DLC;
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_UART_Transmit(&huart1, "Received", 8, 1);
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	2208      	movs	r2, #8
 8000a90:	4908      	ldr	r1, [pc, #32]	; (8000ab4 <send_usart1_CAN_mailbox+0x60>)
 8000a92:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <send_usart1_CAN_mailbox+0x64>)
 8000a94:	f004 ff4f 	bl	8005936 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart1, RxData, 8, 1);
 8000a98:	1d39      	adds	r1, r7, #4
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	2208      	movs	r2, #8
 8000a9e:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <send_usart1_CAN_mailbox+0x64>)
 8000aa0:	f004 ff49 	bl	8005936 <HAL_UART_Transmit>
}
 8000aa4:	bf00      	nop
 8000aa6:	3730      	adds	r7, #48	; 0x30
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	080060c0 	.word	0x080060c0
 8000ab0:	20000028 	.word	0x20000028
 8000ab4:	080060b4 	.word	0x080060b4
 8000ab8:	20000178 	.word	0x20000178

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6193      	str	r3, [r2, #24]
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_MspInit+0x44>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x44>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x44>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	61d3      	str	r3, [r2, #28]
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x44>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000

08000b10 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a18      	ldr	r2, [pc, #96]	; (8000b90 <HAL_CAN_MspInit+0x80>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d129      	bne.n	8000b86 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_CAN_MspInit+0x84>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <HAL_CAN_MspInit+0x84>)
 8000b38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b3c:	61d3      	str	r3, [r2, #28]
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_CAN_MspInit+0x84>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_CAN_MspInit+0x84>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	4a11      	ldr	r2, [pc, #68]	; (8000b94 <HAL_CAN_MspInit+0x84>)
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b54:	6153      	str	r3, [r2, #20]
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <HAL_CAN_MspInit+0x84>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000b74:	2309      	movs	r3, #9
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f001 f983 	bl	8001e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40006400 	.word	0x40006400
 8000b94:	40021000 	.word	0x40021000

08000b98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x38>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d10b      	bne.n	8000bc2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	4a09      	ldr	r2, [pc, #36]	; (8000bd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000bb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bb4:	6193      	str	r3, [r2, #24]
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40012c00 	.word	0x40012c00
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bf8:	d128      	bne.n	8000c4c <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <HAL_TIM_IC_MspInit+0x7c>)
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	4a15      	ldr	r2, [pc, #84]	; (8000c54 <HAL_TIM_IC_MspInit+0x7c>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	61d3      	str	r3, [r2, #28]
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <HAL_TIM_IC_MspInit+0x7c>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <HAL_TIM_IC_MspInit+0x7c>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <HAL_TIM_IC_MspInit+0x7c>)
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1c:	6153      	str	r3, [r2, #20]
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <HAL_TIM_IC_MspInit+0x7c>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c2a:	2320      	movs	r3, #32
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c48:	f001 f920 	bl	8001e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40021000 	.word	0x40021000

08000c58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a20      	ldr	r2, [pc, #128]	; (8000ce8 <HAL_TIM_Base_MspInit+0x90>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d139      	bne.n	8000cde <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <HAL_TIM_Base_MspInit+0x94>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	4a1f      	ldr	r2, [pc, #124]	; (8000cec <HAL_TIM_Base_MspInit+0x94>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	61d3      	str	r3, [r2, #28]
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <HAL_TIM_Base_MspInit+0x94>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8000c82:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <HAL_TIM_Base_MspInit+0x98>)
 8000c84:	4a1b      	ldr	r2, [pc, #108]	; (8000cf4 <HAL_TIM_Base_MspInit+0x9c>)
 8000c86:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_TIM_Base_MspInit+0x98>)
 8000c8a:	2210      	movs	r2, #16
 8000c8c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_TIM_Base_MspInit+0x98>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HAL_TIM_Base_MspInit+0x98>)
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_TIM_Base_MspInit+0x98>)
 8000c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <HAL_TIM_Base_MspInit+0x98>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_TIM_Base_MspInit+0x98>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <HAL_TIM_Base_MspInit+0x98>)
 8000cb0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000cb4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8000cb6:	480e      	ldr	r0, [pc, #56]	; (8000cf0 <HAL_TIM_Base_MspInit+0x98>)
 8000cb8:	f000 ff13 	bl	8001ae2 <HAL_DMA_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000cc2:	f7ff fefb 	bl	8000abc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <HAL_TIM_Base_MspInit+0x98>)
 8000cca:	631a      	str	r2, [r3, #48]	; 0x30
 8000ccc:	4a08      	ldr	r2, [pc, #32]	; (8000cf0 <HAL_TIM_Base_MspInit+0x98>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <HAL_TIM_Base_MspInit+0x98>)
 8000cd6:	621a      	str	r2, [r3, #32]
 8000cd8:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <HAL_TIM_Base_MspInit+0x98>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40000400 	.word	0x40000400
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	20000134 	.word	0x20000134
 8000cf4:	40020030 	.word	0x40020030

08000cf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a31      	ldr	r2, [pc, #196]	; (8000ddc <HAL_TIM_MspPostInit+0xe4>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d13a      	bne.n	8000d90 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b31      	ldr	r3, [pc, #196]	; (8000de0 <HAL_TIM_MspPostInit+0xe8>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	4a30      	ldr	r2, [pc, #192]	; (8000de0 <HAL_TIM_MspPostInit+0xe8>)
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d24:	6153      	str	r3, [r2, #20]
 8000d26:	4b2e      	ldr	r3, [pc, #184]	; (8000de0 <HAL_TIM_MspPostInit+0xe8>)
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <HAL_TIM_MspPostInit+0xe8>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	4a2a      	ldr	r2, [pc, #168]	; (8000de0 <HAL_TIM_MspPostInit+0xe8>)
 8000d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d3c:	6153      	str	r3, [r2, #20]
 8000d3e:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <HAL_TIM_MspPostInit+0xe8>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000d4a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d5c:	2306      	movs	r3, #6
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6a:	f001 f88f 	bl	8001e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d7e:	2306      	movs	r3, #6
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4816      	ldr	r0, [pc, #88]	; (8000de4 <HAL_TIM_MspPostInit+0xec>)
 8000d8a:	f001 f87f 	bl	8001e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d8e:	e020      	b.n	8000dd2 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM3)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <HAL_TIM_MspPostInit+0xf0>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d11b      	bne.n	8000dd2 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <HAL_TIM_MspPostInit+0xe8>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	4a10      	ldr	r2, [pc, #64]	; (8000de0 <HAL_TIM_MspPostInit+0xe8>)
 8000da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da4:	6153      	str	r3, [r2, #20]
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <HAL_TIM_MspPostInit+0xe8>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000db2:	2302      	movs	r3, #2
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <HAL_TIM_MspPostInit+0xec>)
 8000dce:	f001 f85d 	bl	8001e8c <HAL_GPIO_Init>
}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	; 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40012c00 	.word	0x40012c00
 8000de0:	40021000 	.word	0x40021000
 8000de4:	48000400 	.word	0x48000400
 8000de8:	40000400 	.word	0x40000400

08000dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <HAL_UART_MspInit+0x7c>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d127      	bne.n	8000e5e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_UART_MspInit+0x80>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a16      	ldr	r2, [pc, #88]	; (8000e6c <HAL_UART_MspInit+0x80>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6193      	str	r3, [r2, #24]
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_UART_MspInit+0x80>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_UART_MspInit+0x80>)
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <HAL_UART_MspInit+0x80>)
 8000e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e30:	6153      	str	r3, [r2, #20]
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_UART_MspInit+0x80>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e3e:	23c0      	movs	r3, #192	; 0xc0
 8000e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e4e:	2307      	movs	r3, #7
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <HAL_UART_MspInit+0x84>)
 8000e5a:	f001 f817 	bl	8001e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	; 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40013800 	.word	0x40013800
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	48000400 	.word	0x48000400

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f88e 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <DMA1_Channel3_IRQHandler+0x10>)
 8000ece:	f000 feec 	bl	8001caa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000134 	.word	0x20000134

08000edc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <SystemInit+0x20>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <SystemInit+0x20>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f06:	490e      	ldr	r1, [pc, #56]	; (8000f40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f08:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <LoopForever+0xe>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f1c:	4c0b      	ldr	r4, [pc, #44]	; (8000f4c <LoopForever+0x16>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f2a:	f7ff ffd7 	bl	8000edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f005 f87d 	bl	800602c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f32:	f7ff f949 	bl	80001c8 <main>

08000f36 <LoopForever>:

LoopForever:
    b LoopForever
 8000f36:	e7fe      	b.n	8000f36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f38:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f44:	0800610c 	.word	0x0800610c
  ldr r2, =_sbss
 8000f48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f4c:	20000264 	.word	0x20000264

08000f50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC1_2_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_Init+0x28>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <HAL_Init+0x28>)
 8000f5e:	f043 0310 	orr.w	r3, r3, #16
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f64:	2003      	movs	r0, #3
 8000f66:	f000 fd7b 	bl	8001a60 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6a:	200f      	movs	r0, #15
 8000f6c:	f000 f808 	bl	8000f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f70:	f7ff fdaa 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40022000 	.word	0x40022000

08000f80 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x54>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0x58>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fd93 	bl	8001aca <HAL_SYSTICK_Config>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00e      	b.n	8000fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b0f      	cmp	r3, #15
 8000fb2:	d80a      	bhi.n	8000fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f000 fd5b 	bl	8001a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <HAL_InitTick+0x5c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e000      	b.n	8000fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000004 	.word	0x20000004

08000fe0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x20>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_IncTick+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000008 	.word	0x20000008
 8001004:	20000260 	.word	0x20000260

08001008 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;  
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_GetTick+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000260 	.word	0x20000260

08001020 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff ffee 	bl	8001008 <HAL_GetTick>
 800102c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	d005      	beq.n	8001046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_Delay+0x44>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001046:	bf00      	nop
 8001048:	f7ff ffde 	bl	8001008 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8f7      	bhi.n	8001048 <HAL_Delay+0x28>
  {
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008

08001068 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e0ed      	b.n	8001256 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d102      	bne.n	800108c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff fd42 	bl	8000b10 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0201 	orr.w	r2, r2, #1
 800109a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800109c:	f7ff ffb4 	bl	8001008 <HAL_GetTick>
 80010a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010a2:	e012      	b.n	80010ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010a4:	f7ff ffb0 	bl	8001008 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b0a      	cmp	r3, #10
 80010b0:	d90b      	bls.n	80010ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2205      	movs	r2, #5
 80010c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e0c5      	b.n	8001256 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0e5      	beq.n	80010a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0202 	bic.w	r2, r2, #2
 80010e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010e8:	f7ff ff8e 	bl	8001008 <HAL_GetTick>
 80010ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010ee:	e012      	b.n	8001116 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010f0:	f7ff ff8a 	bl	8001008 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b0a      	cmp	r3, #10
 80010fc:	d90b      	bls.n	8001116 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2205      	movs	r2, #5
 800110e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e09f      	b.n	8001256 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e5      	bne.n	80010f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7e1b      	ldrb	r3, [r3, #24]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d108      	bne.n	800113e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	e007      	b.n	800114e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800114c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7e5b      	ldrb	r3, [r3, #25]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d108      	bne.n	8001168 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	e007      	b.n	8001178 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001176:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7e9b      	ldrb	r3, [r3, #26]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d108      	bne.n	8001192 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0220 	orr.w	r2, r2, #32
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	e007      	b.n	80011a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0220 	bic.w	r2, r2, #32
 80011a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7edb      	ldrb	r3, [r3, #27]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d108      	bne.n	80011bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0210 	bic.w	r2, r2, #16
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	e007      	b.n	80011cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0210 	orr.w	r2, r2, #16
 80011ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7f1b      	ldrb	r3, [r3, #28]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d108      	bne.n	80011e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0208 	orr.w	r2, r2, #8
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	e007      	b.n	80011f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0208 	bic.w	r2, r2, #8
 80011f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	7f5b      	ldrb	r3, [r3, #29]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d108      	bne.n	8001210 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f042 0204 	orr.w	r2, r2, #4
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	e007      	b.n	8001220 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0204 	bic.w	r2, r2, #4
 800121e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	ea42 0103 	orr.w	r1, r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	1e5a      	subs	r2, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800125e:	b480      	push	{r7}
 8001260:	b087      	sub	sp, #28
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001274:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001276:	7cfb      	ldrb	r3, [r7, #19]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d003      	beq.n	8001284 <HAL_CAN_ConfigFilter+0x26>
 800127c:	7cfb      	ldrb	r3, [r7, #19]
 800127e:	2b02      	cmp	r3, #2
 8001280:	f040 80aa 	bne.w	80013d8 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800128a:	f043 0201 	orr.w	r2, r3, #1
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	f003 031f 	and.w	r3, r3, #31
 800129c:	2201      	movs	r2, #1
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d123      	bne.n	8001306 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	401a      	ands	r2, r3
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3248      	adds	r2, #72	; 0x48
 80012e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012fc:	6979      	ldr	r1, [r7, #20]
 80012fe:	3348      	adds	r3, #72	; 0x48
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	440b      	add	r3, r1
 8001304:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d122      	bne.n	8001354 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	431a      	orrs	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800132e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3248      	adds	r2, #72	; 0x48
 8001334:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001348:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800134a:	6979      	ldr	r1, [r7, #20]
 800134c:	3348      	adds	r3, #72	; 0x48
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	440b      	add	r3, r1
 8001352:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d109      	bne.n	8001370 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	43db      	mvns	r3, r3
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800136e:	e007      	b.n	8001380 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	431a      	orrs	r2, r3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d109      	bne.n	800139c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	43db      	mvns	r3, r3
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800139a:	e007      	b.n	80013ac <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	431a      	orrs	r2, r3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d107      	bne.n	80013c4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	431a      	orrs	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013ca:	f023 0201 	bic.w	r2, r3, #1
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	e006      	b.n	80013e6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
  }
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	371c      	adds	r7, #28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d12e      	bne.n	8001464 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2202      	movs	r2, #2
 800140a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 0201 	bic.w	r2, r2, #1
 800141c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800141e:	f7ff fdf3 	bl	8001008 <HAL_GetTick>
 8001422:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001424:	e012      	b.n	800144c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001426:	f7ff fdef 	bl	8001008 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b0a      	cmp	r3, #10
 8001432:	d90b      	bls.n	800144c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2205      	movs	r2, #5
 8001444:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e012      	b.n	8001472 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1e5      	bne.n	8001426 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	e006      	b.n	8001472 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
  }
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800147a:	b480      	push	{r7}
 800147c:	b089      	sub	sp, #36	; 0x24
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800148e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001498:	7ffb      	ldrb	r3, [r7, #31]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d003      	beq.n	80014a6 <HAL_CAN_AddTxMessage+0x2c>
 800149e:	7ffb      	ldrb	r3, [r7, #31]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	f040 80b8 	bne.w	8001616 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10a      	bne.n	80014c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d105      	bne.n	80014c6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80a0 	beq.w	8001606 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	0e1b      	lsrs	r3, r3, #24
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d907      	bls.n	80014e6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e09e      	b.n	8001624 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014e6:	2201      	movs	r2, #1
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d10d      	bne.n	8001514 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001502:	68f9      	ldr	r1, [r7, #12]
 8001504:	6809      	ldr	r1, [r1, #0]
 8001506:	431a      	orrs	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	3318      	adds	r3, #24
 800150c:	011b      	lsls	r3, r3, #4
 800150e:	440b      	add	r3, r1
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	e00f      	b.n	8001534 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800151e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001524:	68f9      	ldr	r1, [r7, #12]
 8001526:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001528:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3318      	adds	r3, #24
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	440b      	add	r3, r1
 8001532:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6819      	ldr	r1, [r3, #0]
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	3318      	adds	r3, #24
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	440b      	add	r3, r1
 8001544:	3304      	adds	r3, #4
 8001546:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	7d1b      	ldrb	r3, [r3, #20]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d111      	bne.n	8001574 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	3318      	adds	r3, #24
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	4413      	add	r3, r2
 800155c:	3304      	adds	r3, #4
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	6811      	ldr	r1, [r2, #0]
 8001564:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3318      	adds	r3, #24
 800156c:	011b      	lsls	r3, r3, #4
 800156e:	440b      	add	r3, r1
 8001570:	3304      	adds	r3, #4
 8001572:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3307      	adds	r3, #7
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	061a      	lsls	r2, r3, #24
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3306      	adds	r3, #6
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	041b      	lsls	r3, r3, #16
 8001584:	431a      	orrs	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3305      	adds	r3, #5
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	4313      	orrs	r3, r2
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	3204      	adds	r2, #4
 8001594:	7812      	ldrb	r2, [r2, #0]
 8001596:	4610      	mov	r0, r2
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	6811      	ldr	r1, [r2, #0]
 800159c:	ea43 0200 	orr.w	r2, r3, r0
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	440b      	add	r3, r1
 80015a6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80015aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3303      	adds	r3, #3
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	061a      	lsls	r2, r3, #24
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3302      	adds	r3, #2
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	041b      	lsls	r3, r3, #16
 80015bc:	431a      	orrs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3301      	adds	r3, #1
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	4313      	orrs	r3, r2
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	7812      	ldrb	r2, [r2, #0]
 80015cc:	4610      	mov	r0, r2
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	6811      	ldr	r1, [r2, #0]
 80015d2:	ea43 0200 	orr.w	r2, r3, r0
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	440b      	add	r3, r1
 80015dc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80015e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3318      	adds	r3, #24
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	4413      	add	r3, r2
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	6811      	ldr	r1, [r2, #0]
 80015f4:	f043 0201 	orr.w	r2, r3, #1
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3318      	adds	r3, #24
 80015fc:	011b      	lsls	r3, r3, #4
 80015fe:	440b      	add	r3, r1
 8001600:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	e00e      	b.n	8001624 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e006      	b.n	8001624 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
  }
}
 8001624:	4618      	mov	r0, r3
 8001626:	3724      	adds	r7, #36	; 0x24
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001642:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001644:	7afb      	ldrb	r3, [r7, #11]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d002      	beq.n	8001650 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800164a:	7afb      	ldrb	r3, [r7, #11]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d11d      	bne.n	800168c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d002      	beq.n	8001664 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	3301      	adds	r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3301      	adds	r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d002      	beq.n	800168c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	3301      	adds	r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800168c:	68fb      	ldr	r3, [r7, #12]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800169a:	b480      	push	{r7}
 800169c:	b087      	sub	sp, #28
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ae:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d003      	beq.n	80016be <HAL_CAN_GetRxMessage+0x24>
 80016b6:	7dfb      	ldrb	r3, [r7, #23]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	f040 80f3 	bne.w	80018a4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10e      	bne.n	80016e2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d116      	bne.n	8001700 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0e7      	b.n	80018b2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d107      	bne.n	8001700 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0d8      	b.n	80018b2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	331b      	adds	r3, #27
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	4413      	add	r3, r2
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0204 	and.w	r2, r3, #4
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10c      	bne.n	8001738 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	331b      	adds	r3, #27
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	4413      	add	r3, r2
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	0d5b      	lsrs	r3, r3, #21
 800172e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	e00b      	b.n	8001750 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	331b      	adds	r3, #27
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	4413      	add	r3, r2
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	08db      	lsrs	r3, r3, #3
 8001748:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	331b      	adds	r3, #27
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	4413      	add	r3, r2
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0202 	and.w	r2, r3, #2
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	331b      	adds	r3, #27
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	4413      	add	r3, r2
 8001772:	3304      	adds	r3, #4
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 020f 	and.w	r2, r3, #15
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	331b      	adds	r3, #27
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	4413      	add	r3, r2
 800178a:	3304      	adds	r3, #4
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	0a1b      	lsrs	r3, r3, #8
 8001790:	b2da      	uxtb	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	331b      	adds	r3, #27
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	4413      	add	r3, r2
 80017a2:	3304      	adds	r3, #4
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	0c1b      	lsrs	r3, r3, #16
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	0a1a      	lsrs	r2, r3, #8
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	3301      	adds	r3, #1
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	4413      	add	r3, r2
 80017e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	0c1a      	lsrs	r2, r3, #16
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	3302      	adds	r3, #2
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	4413      	add	r3, r2
 8001802:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	0e1a      	lsrs	r2, r3, #24
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	3303      	adds	r3, #3
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	4413      	add	r3, r2
 800181c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	3304      	adds	r3, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4413      	add	r3, r2
 8001834:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	0a1a      	lsrs	r2, r3, #8
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	3305      	adds	r3, #5
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	4413      	add	r3, r2
 800184e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0c1a      	lsrs	r2, r3, #16
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	3306      	adds	r3, #6
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	4413      	add	r3, r2
 8001868:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	0e1a      	lsrs	r2, r3, #24
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	3307      	adds	r3, #7
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d108      	bne.n	8001890 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f042 0220 	orr.w	r2, r2, #32
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	e007      	b.n	80018a0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691a      	ldr	r2, [r3, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0220 	orr.w	r2, r2, #32
 800189e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	e006      	b.n	80018b2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
  }
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	371c      	adds	r7, #28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018dc:	4013      	ands	r3, r2
 80018de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <__NVIC_GetPriorityGrouping+0x18>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	f003 0307 	and.w	r3, r3, #7
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	db0b      	blt.n	800194e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	4907      	ldr	r1, [pc, #28]	; (800195c <__NVIC_EnableIRQ+0x38>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	2001      	movs	r0, #1
 8001946:	fa00 f202 	lsl.w	r2, r0, r2
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000e100 	.word	0xe000e100

08001960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	2b00      	cmp	r3, #0
 8001972:	db0a      	blt.n	800198a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	490c      	ldr	r1, [pc, #48]	; (80019ac <__NVIC_SetPriority+0x4c>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	440b      	add	r3, r1
 8001984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001988:	e00a      	b.n	80019a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4908      	ldr	r1, [pc, #32]	; (80019b0 <__NVIC_SetPriority+0x50>)
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	3b04      	subs	r3, #4
 8001998:	0112      	lsls	r2, r2, #4
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	440b      	add	r3, r1
 800199e:	761a      	strb	r2, [r3, #24]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000e100 	.word	0xe000e100
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f1c3 0307 	rsb	r3, r3, #7
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	bf28      	it	cs
 80019d2:	2304      	movcs	r3, #4
 80019d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3304      	adds	r3, #4
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d902      	bls.n	80019e4 <NVIC_EncodePriority+0x30>
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3b03      	subs	r3, #3
 80019e2:	e000      	b.n	80019e6 <NVIC_EncodePriority+0x32>
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	401a      	ands	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43d9      	mvns	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	4313      	orrs	r3, r2
         );
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3724      	adds	r7, #36	; 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a2c:	d301      	bcc.n	8001a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00f      	b.n	8001a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <SysTick_Config+0x40>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3a:	210f      	movs	r1, #15
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a40:	f7ff ff8e 	bl	8001960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <SysTick_Config+0x40>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <SysTick_Config+0x40>)
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	e000e010 	.word	0xe000e010

08001a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff29 	bl	80018c0 <__NVIC_SetPriorityGrouping>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a88:	f7ff ff3e 	bl	8001908 <__NVIC_GetPriorityGrouping>
 8001a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	6978      	ldr	r0, [r7, #20]
 8001a94:	f7ff ff8e 	bl	80019b4 <NVIC_EncodePriority>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff5d 	bl	8001960 <__NVIC_SetPriority>
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff31 	bl	8001924 <__NVIC_EnableIRQ>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffa2 	bl	8001a1c <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e037      	b.n	8001b68 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f97e 	bl	8001e4c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}  
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <HAL_DMA_Start_IT+0x20>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e04a      	b.n	8001c26 <HAL_DMA_Start_IT+0xb6>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d13a      	bne.n	8001c18 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 f912 	bl	8001df0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 020e 	orr.w	r2, r2, #14
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	e00f      	b.n	8001c06 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 020a 	orr.w	r2, r2, #10
 8001bf4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0204 	bic.w	r2, r2, #4
 8001c04:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f042 0201 	orr.w	r2, r2, #1
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	e005      	b.n	8001c24 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001c20:	2302      	movs	r3, #2
 8001c22:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001c24:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d005      	beq.n	8001c50 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2204      	movs	r2, #4
 8001c48:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
 8001c4e:	e027      	b.n	8001ca0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 020e 	bic.w	r2, r2, #14
 8001c5e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0201 	bic.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c78:	2101      	movs	r1, #1
 8001c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	4798      	blx	r3
    } 
  }
  return status;
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d024      	beq.n	8001d1c <HAL_DMA_IRQHandler+0x72>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01f      	beq.n	8001d1c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0320 	and.w	r3, r3, #32
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d107      	bne.n	8001cfa <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0204 	bic.w	r2, r2, #4
 8001cf8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d02:	2104      	movs	r1, #4
 8001d04:	fa01 f202 	lsl.w	r2, r1, r2
 8001d08:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d06a      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001d1a:	e065      	b.n	8001de8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	2202      	movs	r2, #2
 8001d22:	409a      	lsls	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d02c      	beq.n	8001d86 <HAL_DMA_IRQHandler+0xdc>
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d027      	beq.n	8001d86 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d10b      	bne.n	8001d5c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 020a 	bic.w	r2, r2, #10
 8001d52:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d64:	2102      	movs	r1, #2
 8001d66:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d035      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001d84:	e030      	b.n	8001de8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d028      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x13e>
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d023      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 020e 	bic.w	r2, r2, #14
 8001dae:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db8:	2101      	movs	r1, #1
 8001dba:	fa01 f202 	lsl.w	r2, r1, r2
 8001dbe:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d004      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	4798      	blx	r3
    }
  }
}  
 8001de6:	e7ff      	b.n	8001de8 <HAL_DMA_IRQHandler+0x13e>
 8001de8:	bf00      	nop
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e06:	2101      	movs	r1, #1
 8001e08:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b10      	cmp	r3, #16
 8001e1c:	d108      	bne.n	8001e30 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e2e:	e007      	b.n	8001e40 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	60da      	str	r2, [r3, #12]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <DMA_CalcBaseAndBitshift+0x34>)
 8001e5c:	4413      	add	r3, r2
 8001e5e:	4a09      	ldr	r2, [pc, #36]	; (8001e84 <DMA_CalcBaseAndBitshift+0x38>)
 8001e60:	fba2 2303 	umull	r2, r3, r2, r3
 8001e64:	091b      	lsrs	r3, r3, #4
 8001e66:	009a      	lsls	r2, r3, #2
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a06      	ldr	r2, [pc, #24]	; (8001e88 <DMA_CalcBaseAndBitshift+0x3c>)
 8001e70:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	bffdfff8 	.word	0xbffdfff8
 8001e84:	cccccccd 	.word	0xcccccccd
 8001e88:	40020000 	.word	0x40020000

08001e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9a:	e14e      	b.n	800213a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8140 	beq.w	8002134 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d005      	beq.n	8001ecc <HAL_GPIO_Init+0x40>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d130      	bne.n	8001f2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f02:	2201      	movs	r2, #1
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	f003 0201 	and.w	r2, r3, #1
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d017      	beq.n	8001f6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	2203      	movs	r2, #3
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d123      	bne.n	8001fbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	08da      	lsrs	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3208      	adds	r2, #8
 8001f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	691a      	ldr	r2, [r3, #16]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	08da      	lsrs	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3208      	adds	r2, #8
 8001fb8:	6939      	ldr	r1, [r7, #16]
 8001fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	2203      	movs	r2, #3
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0203 	and.w	r2, r3, #3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 809a 	beq.w	8002134 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002000:	4b55      	ldr	r3, [pc, #340]	; (8002158 <HAL_GPIO_Init+0x2cc>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a54      	ldr	r2, [pc, #336]	; (8002158 <HAL_GPIO_Init+0x2cc>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b52      	ldr	r3, [pc, #328]	; (8002158 <HAL_GPIO_Init+0x2cc>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002018:	4a50      	ldr	r2, [pc, #320]	; (800215c <HAL_GPIO_Init+0x2d0>)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	220f      	movs	r2, #15
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002042:	d013      	beq.n	800206c <HAL_GPIO_Init+0x1e0>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a46      	ldr	r2, [pc, #280]	; (8002160 <HAL_GPIO_Init+0x2d4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00d      	beq.n	8002068 <HAL_GPIO_Init+0x1dc>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a45      	ldr	r2, [pc, #276]	; (8002164 <HAL_GPIO_Init+0x2d8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d007      	beq.n	8002064 <HAL_GPIO_Init+0x1d8>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a44      	ldr	r2, [pc, #272]	; (8002168 <HAL_GPIO_Init+0x2dc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d101      	bne.n	8002060 <HAL_GPIO_Init+0x1d4>
 800205c:	2303      	movs	r3, #3
 800205e:	e006      	b.n	800206e <HAL_GPIO_Init+0x1e2>
 8002060:	2305      	movs	r3, #5
 8002062:	e004      	b.n	800206e <HAL_GPIO_Init+0x1e2>
 8002064:	2302      	movs	r3, #2
 8002066:	e002      	b.n	800206e <HAL_GPIO_Init+0x1e2>
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <HAL_GPIO_Init+0x1e2>
 800206c:	2300      	movs	r3, #0
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	f002 0203 	and.w	r2, r2, #3
 8002074:	0092      	lsls	r2, r2, #2
 8002076:	4093      	lsls	r3, r2
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800207e:	4937      	ldr	r1, [pc, #220]	; (800215c <HAL_GPIO_Init+0x2d0>)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	3302      	adds	r3, #2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800208c:	4b37      	ldr	r3, [pc, #220]	; (800216c <HAL_GPIO_Init+0x2e0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	43db      	mvns	r3, r3
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020b0:	4a2e      	ldr	r2, [pc, #184]	; (800216c <HAL_GPIO_Init+0x2e0>)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020b6:	4b2d      	ldr	r3, [pc, #180]	; (800216c <HAL_GPIO_Init+0x2e0>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	43db      	mvns	r3, r3
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4013      	ands	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020da:	4a24      	ldr	r2, [pc, #144]	; (800216c <HAL_GPIO_Init+0x2e0>)
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020e0:	4b22      	ldr	r3, [pc, #136]	; (800216c <HAL_GPIO_Init+0x2e0>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002104:	4a19      	ldr	r2, [pc, #100]	; (800216c <HAL_GPIO_Init+0x2e0>)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800210a:	4b18      	ldr	r3, [pc, #96]	; (800216c <HAL_GPIO_Init+0x2e0>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	43db      	mvns	r3, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800212e:	4a0f      	ldr	r2, [pc, #60]	; (800216c <HAL_GPIO_Init+0x2e0>)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	3301      	adds	r3, #1
 8002138:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	fa22 f303 	lsr.w	r3, r2, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	f47f aea9 	bne.w	8001e9c <HAL_GPIO_Init+0x10>
  }
}
 800214a:	bf00      	nop
 800214c:	bf00      	nop
 800214e:	371c      	adds	r7, #28
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	40021000 	.word	0x40021000
 800215c:	40010000 	.word	0x40010000
 8002160:	48000400 	.word	0x48000400
 8002164:	48000800 	.word	0x48000800
 8002168:	48000c00 	.word	0x48000c00
 800216c:	40010400 	.word	0x40010400

08002170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	807b      	strh	r3, [r7, #2]
 800217c:	4613      	mov	r3, r2
 800217e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002180:	787b      	ldrb	r3, [r7, #1]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800218c:	e002      	b.n	8002194 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021b2:	887a      	ldrh	r2, [r7, #2]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4013      	ands	r3, r2
 80021b8:	041a      	lsls	r2, r3, #16
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	43d9      	mvns	r1, r3
 80021be:	887b      	ldrh	r3, [r7, #2]
 80021c0:	400b      	ands	r3, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	619a      	str	r2, [r3, #24]
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80021da:	af00      	add	r7, sp, #0
 80021dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d102      	bne.n	80021fa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f001 b823 	b.w	8003240 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 817d 	beq.w	800250a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002210:	4bbc      	ldr	r3, [pc, #752]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 030c 	and.w	r3, r3, #12
 8002218:	2b04      	cmp	r3, #4
 800221a:	d00c      	beq.n	8002236 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800221c:	4bb9      	ldr	r3, [pc, #740]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b08      	cmp	r3, #8
 8002226:	d15c      	bne.n	80022e2 <HAL_RCC_OscConfig+0x10e>
 8002228:	4bb6      	ldr	r3, [pc, #728]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002234:	d155      	bne.n	80022e2 <HAL_RCC_OscConfig+0x10e>
 8002236:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800223a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800224a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b01      	cmp	r3, #1
 8002260:	d102      	bne.n	8002268 <HAL_RCC_OscConfig+0x94>
 8002262:	4ba8      	ldr	r3, [pc, #672]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	e015      	b.n	8002294 <HAL_RCC_OscConfig+0xc0>
 8002268:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800226c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002274:	fa93 f3a3 	rbit	r3, r3
 8002278:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800227c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002280:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002284:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002290:	4b9c      	ldr	r3, [pc, #624]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002298:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800229c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80022a0:	fa92 f2a2 	rbit	r2, r2
 80022a4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80022a8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80022ac:	fab2 f282 	clz	r2, r2
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	f042 0220 	orr.w	r2, r2, #32
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	f002 021f 	and.w	r2, r2, #31
 80022bc:	2101      	movs	r1, #1
 80022be:	fa01 f202 	lsl.w	r2, r1, r2
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 811f 	beq.w	8002508 <HAL_RCC_OscConfig+0x334>
 80022ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f040 8116 	bne.w	8002508 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	f000 bfaf 	b.w	8003240 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_OscConfig+0x12e>
 80022f4:	4b83      	ldr	r3, [pc, #524]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a82      	ldr	r2, [pc, #520]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 80022fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	e036      	b.n	8002370 <HAL_RCC_OscConfig+0x19c>
 8002302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002306:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0x158>
 8002312:	4b7c      	ldr	r3, [pc, #496]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a7b      	ldr	r2, [pc, #492]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 8002318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b79      	ldr	r3, [pc, #484]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a78      	ldr	r2, [pc, #480]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 8002324:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e021      	b.n	8002370 <HAL_RCC_OscConfig+0x19c>
 800232c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002330:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0x184>
 800233e:	4b71      	ldr	r3, [pc, #452]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a70      	ldr	r2, [pc, #448]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 8002344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b6e      	ldr	r3, [pc, #440]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a6d      	ldr	r2, [pc, #436]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e00b      	b.n	8002370 <HAL_RCC_OscConfig+0x19c>
 8002358:	4b6a      	ldr	r3, [pc, #424]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a69      	ldr	r2, [pc, #420]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 800235e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	4b67      	ldr	r3, [pc, #412]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a66      	ldr	r2, [pc, #408]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 800236a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002370:	4b64      	ldr	r3, [pc, #400]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	f023 020f 	bic.w	r2, r3, #15
 8002378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	495f      	ldr	r1, [pc, #380]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 8002386:	4313      	orrs	r3, r2
 8002388:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800238a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d059      	beq.n	800244e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7fe fe35 	bl	8001008 <HAL_GetTick>
 800239e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a4:	f7fe fe30 	bl	8001008 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b64      	cmp	r3, #100	; 0x64
 80023b2:	d902      	bls.n	80023ba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	f000 bf43 	b.w	8003240 <HAL_RCC_OscConfig+0x106c>
 80023ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023be:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80023ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d102      	bne.n	80023ec <HAL_RCC_OscConfig+0x218>
 80023e6:	4b47      	ldr	r3, [pc, #284]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	e015      	b.n	8002418 <HAL_RCC_OscConfig+0x244>
 80023ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023f0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80023f8:	fa93 f3a3 	rbit	r3, r3
 80023fc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002400:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002404:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002408:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002414:	4b3b      	ldr	r3, [pc, #236]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800241c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002420:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002424:	fa92 f2a2 	rbit	r2, r2
 8002428:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800242c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002430:	fab2 f282 	clz	r2, r2
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	f042 0220 	orr.w	r2, r2, #32
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	f002 021f 	and.w	r2, r2, #31
 8002440:	2101      	movs	r1, #1
 8002442:	fa01 f202 	lsl.w	r2, r1, r2
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ab      	beq.n	80023a4 <HAL_RCC_OscConfig+0x1d0>
 800244c:	e05d      	b.n	800250a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244e:	f7fe fddb 	bl	8001008 <HAL_GetTick>
 8002452:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002456:	e00a      	b.n	800246e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002458:	f7fe fdd6 	bl	8001008 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b64      	cmp	r3, #100	; 0x64
 8002466:	d902      	bls.n	800246e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	f000 bee9 	b.w	8003240 <HAL_RCC_OscConfig+0x106c>
 800246e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002472:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002482:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002486:	fab3 f383 	clz	r3, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	095b      	lsrs	r3, r3, #5
 800248e:	b2db      	uxtb	r3, r3
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b01      	cmp	r3, #1
 8002498:	d102      	bne.n	80024a0 <HAL_RCC_OscConfig+0x2cc>
 800249a:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	e015      	b.n	80024cc <HAL_RCC_OscConfig+0x2f8>
 80024a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80024b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024b8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80024bc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80024c8:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <HAL_RCC_OscConfig+0x330>)
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024d0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80024d4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80024d8:	fa92 f2a2 	rbit	r2, r2
 80024dc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80024e0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80024e4:	fab2 f282 	clz	r2, r2
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	f042 0220 	orr.w	r2, r2, #32
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	f002 021f 	and.w	r2, r2, #31
 80024f4:	2101      	movs	r1, #1
 80024f6:	fa01 f202 	lsl.w	r2, r1, r2
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1ab      	bne.n	8002458 <HAL_RCC_OscConfig+0x284>
 8002500:	e003      	b.n	800250a <HAL_RCC_OscConfig+0x336>
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 817d 	beq.w	800281a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002520:	4ba6      	ldr	r3, [pc, #664]	; (80027bc <HAL_RCC_OscConfig+0x5e8>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00b      	beq.n	8002544 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800252c:	4ba3      	ldr	r3, [pc, #652]	; (80027bc <HAL_RCC_OscConfig+0x5e8>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b08      	cmp	r3, #8
 8002536:	d172      	bne.n	800261e <HAL_RCC_OscConfig+0x44a>
 8002538:	4ba0      	ldr	r3, [pc, #640]	; (80027bc <HAL_RCC_OscConfig+0x5e8>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d16c      	bne.n	800261e <HAL_RCC_OscConfig+0x44a>
 8002544:	2302      	movs	r3, #2
 8002546:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002556:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	095b      	lsrs	r3, r3, #5
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b01      	cmp	r3, #1
 800256c:	d102      	bne.n	8002574 <HAL_RCC_OscConfig+0x3a0>
 800256e:	4b93      	ldr	r3, [pc, #588]	; (80027bc <HAL_RCC_OscConfig+0x5e8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	e013      	b.n	800259c <HAL_RCC_OscConfig+0x3c8>
 8002574:	2302      	movs	r3, #2
 8002576:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002586:	2302      	movs	r3, #2
 8002588:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800258c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002598:	4b88      	ldr	r3, [pc, #544]	; (80027bc <HAL_RCC_OscConfig+0x5e8>)
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	2202      	movs	r2, #2
 800259e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80025a2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80025a6:	fa92 f2a2 	rbit	r2, r2
 80025aa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80025ae:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80025b2:	fab2 f282 	clz	r2, r2
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	f042 0220 	orr.w	r2, r2, #32
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	f002 021f 	and.w	r2, r2, #31
 80025c2:	2101      	movs	r1, #1
 80025c4:	fa01 f202 	lsl.w	r2, r1, r2
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_RCC_OscConfig+0x410>
 80025ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d002      	beq.n	80025e4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	f000 be2e 	b.w	8003240 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e4:	4b75      	ldr	r3, [pc, #468]	; (80027bc <HAL_RCC_OscConfig+0x5e8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	21f8      	movs	r1, #248	; 0xf8
 80025fa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002602:	fa91 f1a1 	rbit	r1, r1
 8002606:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800260a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800260e:	fab1 f181 	clz	r1, r1
 8002612:	b2c9      	uxtb	r1, r1
 8002614:	408b      	lsls	r3, r1
 8002616:	4969      	ldr	r1, [pc, #420]	; (80027bc <HAL_RCC_OscConfig+0x5e8>)
 8002618:	4313      	orrs	r3, r2
 800261a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261c:	e0fd      	b.n	800281a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800261e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002622:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8088 	beq.w	8002740 <HAL_RCC_OscConfig+0x56c>
 8002630:	2301      	movs	r3, #1
 8002632:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002642:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002650:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	461a      	mov	r2, r3
 8002658:	2301      	movs	r3, #1
 800265a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7fe fcd4 	bl	8001008 <HAL_GetTick>
 8002660:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002664:	e00a      	b.n	800267c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002666:	f7fe fccf 	bl	8001008 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d902      	bls.n	800267c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	f000 bde2 	b.w	8003240 <HAL_RCC_OscConfig+0x106c>
 800267c:	2302      	movs	r3, #2
 800267e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800268e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d102      	bne.n	80026ac <HAL_RCC_OscConfig+0x4d8>
 80026a6:	4b45      	ldr	r3, [pc, #276]	; (80027bc <HAL_RCC_OscConfig+0x5e8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	e013      	b.n	80026d4 <HAL_RCC_OscConfig+0x500>
 80026ac:	2302      	movs	r3, #2
 80026ae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80026be:	2302      	movs	r3, #2
 80026c0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80026c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80026d0:	4b3a      	ldr	r3, [pc, #232]	; (80027bc <HAL_RCC_OscConfig+0x5e8>)
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	2202      	movs	r2, #2
 80026d6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80026da:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80026de:	fa92 f2a2 	rbit	r2, r2
 80026e2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80026e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80026ea:	fab2 f282 	clz	r2, r2
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	f042 0220 	orr.w	r2, r2, #32
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f002 021f 	and.w	r2, r2, #31
 80026fa:	2101      	movs	r1, #1
 80026fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0af      	beq.n	8002666 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002706:	4b2d      	ldr	r3, [pc, #180]	; (80027bc <HAL_RCC_OscConfig+0x5e8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800270e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002712:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	21f8      	movs	r1, #248	; 0xf8
 800271c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002724:	fa91 f1a1 	rbit	r1, r1
 8002728:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800272c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002730:	fab1 f181 	clz	r1, r1
 8002734:	b2c9      	uxtb	r1, r1
 8002736:	408b      	lsls	r3, r1
 8002738:	4920      	ldr	r1, [pc, #128]	; (80027bc <HAL_RCC_OscConfig+0x5e8>)
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
 800273e:	e06c      	b.n	800281a <HAL_RCC_OscConfig+0x646>
 8002740:	2301      	movs	r3, #1
 8002742:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002752:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002760:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	461a      	mov	r2, r3
 8002768:	2300      	movs	r3, #0
 800276a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7fe fc4c 	bl	8001008 <HAL_GetTick>
 8002770:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002774:	e00a      	b.n	800278c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002776:	f7fe fc47 	bl	8001008 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d902      	bls.n	800278c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	f000 bd5a 	b.w	8003240 <HAL_RCC_OscConfig+0x106c>
 800278c:	2302      	movs	r3, #2
 800278e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002796:	fa93 f3a3 	rbit	r3, r3
 800279a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800279e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a2:	fab3 f383 	clz	r3, r3
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d104      	bne.n	80027c0 <HAL_RCC_OscConfig+0x5ec>
 80027b6:	4b01      	ldr	r3, [pc, #4]	; (80027bc <HAL_RCC_OscConfig+0x5e8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	e015      	b.n	80027e8 <HAL_RCC_OscConfig+0x614>
 80027bc:	40021000 	.word	0x40021000
 80027c0:	2302      	movs	r3, #2
 80027c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80027d2:	2302      	movs	r3, #2
 80027d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80027d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80027e4:	4bc8      	ldr	r3, [pc, #800]	; (8002b08 <HAL_RCC_OscConfig+0x934>)
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	2202      	movs	r2, #2
 80027ea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80027ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80027f2:	fa92 f2a2 	rbit	r2, r2
 80027f6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80027fa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80027fe:	fab2 f282 	clz	r2, r2
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	f042 0220 	orr.w	r2, r2, #32
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	f002 021f 	and.w	r2, r2, #31
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f202 	lsl.w	r2, r1, r2
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1ad      	bne.n	8002776 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 8110 	beq.w	8002a50 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002834:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d079      	beq.n	8002934 <HAL_RCC_OscConfig+0x760>
 8002840:	2301      	movs	r3, #1
 8002842:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	4bab      	ldr	r3, [pc, #684]	; (8002b0c <HAL_RCC_OscConfig+0x938>)
 8002860:	4413      	add	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	461a      	mov	r2, r3
 8002866:	2301      	movs	r3, #1
 8002868:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286a:	f7fe fbcd 	bl	8001008 <HAL_GetTick>
 800286e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002872:	e00a      	b.n	800288a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002874:	f7fe fbc8 	bl	8001008 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d902      	bls.n	800288a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	f000 bcdb 	b.w	8003240 <HAL_RCC_OscConfig+0x106c>
 800288a:	2302      	movs	r3, #2
 800288c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002894:	fa93 f3a3 	rbit	r3, r3
 8002898:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800289c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028a4:	2202      	movs	r2, #2
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	fa93 f2a3 	rbit	r2, r3
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028c8:	2202      	movs	r2, #2
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	fa93 f2a3 	rbit	r2, r3
 80028da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e4:	4b88      	ldr	r3, [pc, #544]	; (8002b08 <HAL_RCC_OscConfig+0x934>)
 80028e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028f0:	2102      	movs	r1, #2
 80028f2:	6019      	str	r1, [r3, #0]
 80028f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	fa93 f1a3 	rbit	r1, r3
 8002902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002906:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800290a:	6019      	str	r1, [r3, #0]
  return result;
 800290c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002910:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	fab3 f383 	clz	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f003 031f 	and.w	r3, r3, #31
 8002926:	2101      	movs	r1, #1
 8002928:	fa01 f303 	lsl.w	r3, r1, r3
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0a0      	beq.n	8002874 <HAL_RCC_OscConfig+0x6a0>
 8002932:	e08d      	b.n	8002a50 <HAL_RCC_OscConfig+0x87c>
 8002934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002938:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800293c:	2201      	movs	r2, #1
 800293e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002944:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	fa93 f2a3 	rbit	r2, r3
 800294e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002952:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002956:	601a      	str	r2, [r3, #0]
  return result;
 8002958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002960:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002962:	fab3 f383 	clz	r3, r3
 8002966:	b2db      	uxtb	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	4b68      	ldr	r3, [pc, #416]	; (8002b0c <HAL_RCC_OscConfig+0x938>)
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	461a      	mov	r2, r3
 8002972:	2300      	movs	r3, #0
 8002974:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002976:	f7fe fb47 	bl	8001008 <HAL_GetTick>
 800297a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297e:	e00a      	b.n	8002996 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002980:	f7fe fb42 	bl	8001008 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d902      	bls.n	8002996 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	f000 bc55 	b.w	8003240 <HAL_RCC_OscConfig+0x106c>
 8002996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800299e:	2202      	movs	r2, #2
 80029a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	fa93 f2a3 	rbit	r2, r3
 80029b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029c2:	2202      	movs	r2, #2
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	fa93 f2a3 	rbit	r2, r3
 80029d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80029e6:	2202      	movs	r2, #2
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	fa93 f2a3 	rbit	r2, r3
 80029f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a00:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a02:	4b41      	ldr	r3, [pc, #260]	; (8002b08 <HAL_RCC_OscConfig+0x934>)
 8002a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002a0e:	2102      	movs	r1, #2
 8002a10:	6019      	str	r1, [r3, #0]
 8002a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a16:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fa93 f1a3 	rbit	r1, r3
 8002a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a24:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a28:	6019      	str	r1, [r3, #0]
  return result;
 8002a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	2101      	movs	r1, #1
 8002a46:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d197      	bne.n	8002980 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 81a1 	beq.w	8002da8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a66:	2300      	movs	r3, #0
 8002a68:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6c:	4b26      	ldr	r3, [pc, #152]	; (8002b08 <HAL_RCC_OscConfig+0x934>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d116      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a78:	4b23      	ldr	r3, [pc, #140]	; (8002b08 <HAL_RCC_OscConfig+0x934>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	4a22      	ldr	r2, [pc, #136]	; (8002b08 <HAL_RCC_OscConfig+0x934>)
 8002a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a82:	61d3      	str	r3, [r2, #28]
 8002a84:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <HAL_RCC_OscConfig+0x934>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a90:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a9e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa6:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <HAL_RCC_OscConfig+0x93c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d11a      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab2:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <HAL_RCC_OscConfig+0x93c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <HAL_RCC_OscConfig+0x93c>)
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002abe:	f7fe faa3 	bl	8001008 <HAL_GetTick>
 8002ac2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac6:	e009      	b.n	8002adc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac8:	f7fe fa9e 	bl	8001008 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b64      	cmp	r3, #100	; 0x64
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e3b1      	b.n	8003240 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <HAL_RCC_OscConfig+0x93c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0ef      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d10d      	bne.n	8002b14 <HAL_RCC_OscConfig+0x940>
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <HAL_RCC_OscConfig+0x934>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4a02      	ldr	r2, [pc, #8]	; (8002b08 <HAL_RCC_OscConfig+0x934>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	6213      	str	r3, [r2, #32]
 8002b04:	e03c      	b.n	8002b80 <HAL_RCC_OscConfig+0x9ac>
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	10908120 	.word	0x10908120
 8002b10:	40007000 	.word	0x40007000
 8002b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10c      	bne.n	8002b3e <HAL_RCC_OscConfig+0x96a>
 8002b24:	4bc1      	ldr	r3, [pc, #772]	; (8002e2c <HAL_RCC_OscConfig+0xc58>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4ac0      	ldr	r2, [pc, #768]	; (8002e2c <HAL_RCC_OscConfig+0xc58>)
 8002b2a:	f023 0301 	bic.w	r3, r3, #1
 8002b2e:	6213      	str	r3, [r2, #32]
 8002b30:	4bbe      	ldr	r3, [pc, #760]	; (8002e2c <HAL_RCC_OscConfig+0xc58>)
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	4abd      	ldr	r2, [pc, #756]	; (8002e2c <HAL_RCC_OscConfig+0xc58>)
 8002b36:	f023 0304 	bic.w	r3, r3, #4
 8002b3a:	6213      	str	r3, [r2, #32]
 8002b3c:	e020      	b.n	8002b80 <HAL_RCC_OscConfig+0x9ac>
 8002b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x994>
 8002b4e:	4bb7      	ldr	r3, [pc, #732]	; (8002e2c <HAL_RCC_OscConfig+0xc58>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4ab6      	ldr	r2, [pc, #728]	; (8002e2c <HAL_RCC_OscConfig+0xc58>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	6213      	str	r3, [r2, #32]
 8002b5a:	4bb4      	ldr	r3, [pc, #720]	; (8002e2c <HAL_RCC_OscConfig+0xc58>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	4ab3      	ldr	r2, [pc, #716]	; (8002e2c <HAL_RCC_OscConfig+0xc58>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6213      	str	r3, [r2, #32]
 8002b66:	e00b      	b.n	8002b80 <HAL_RCC_OscConfig+0x9ac>
 8002b68:	4bb0      	ldr	r3, [pc, #704]	; (8002e2c <HAL_RCC_OscConfig+0xc58>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	4aaf      	ldr	r2, [pc, #700]	; (8002e2c <HAL_RCC_OscConfig+0xc58>)
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	6213      	str	r3, [r2, #32]
 8002b74:	4bad      	ldr	r3, [pc, #692]	; (8002e2c <HAL_RCC_OscConfig+0xc58>)
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4aac      	ldr	r2, [pc, #688]	; (8002e2c <HAL_RCC_OscConfig+0xc58>)
 8002b7a:	f023 0304 	bic.w	r3, r3, #4
 8002b7e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 8081 	beq.w	8002c94 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b92:	f7fe fa39 	bl	8001008 <HAL_GetTick>
 8002b96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9a:	e00b      	b.n	8002bb4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	f7fe fa34 	bl	8001008 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e345      	b.n	8003240 <HAL_RCC_OscConfig+0x106c>
 8002bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	fa93 f2a3 	rbit	r2, r3
 8002bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bdc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002be0:	2202      	movs	r2, #2
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	fa93 f2a3 	rbit	r2, r3
 8002bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002bfa:	601a      	str	r2, [r3, #0]
  return result;
 8002bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c00:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c04:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	f043 0302 	orr.w	r3, r3, #2
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d102      	bne.n	8002c20 <HAL_RCC_OscConfig+0xa4c>
 8002c1a:	4b84      	ldr	r3, [pc, #528]	; (8002e2c <HAL_RCC_OscConfig+0xc58>)
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	e013      	b.n	8002c48 <HAL_RCC_OscConfig+0xa74>
 8002c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c24:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c28:	2202      	movs	r2, #2
 8002c2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c30:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	fa93 f2a3 	rbit	r2, r3
 8002c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	4b79      	ldr	r3, [pc, #484]	; (8002e2c <HAL_RCC_OscConfig+0xc58>)
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c4c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c50:	2102      	movs	r1, #2
 8002c52:	6011      	str	r1, [r2, #0]
 8002c54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c58:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	fa92 f1a2 	rbit	r1, r2
 8002c62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c66:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c6a:	6011      	str	r1, [r2, #0]
  return result;
 8002c6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c70:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	fab2 f282 	clz	r2, r2
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	f002 021f 	and.w	r2, r2, #31
 8002c86:	2101      	movs	r1, #1
 8002c88:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d084      	beq.n	8002b9c <HAL_RCC_OscConfig+0x9c8>
 8002c92:	e07f      	b.n	8002d94 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c94:	f7fe f9b8 	bl	8001008 <HAL_GetTick>
 8002c98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9c:	e00b      	b.n	8002cb6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c9e:	f7fe f9b3 	bl	8001008 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e2c4      	b.n	8003240 <HAL_RCC_OscConfig+0x106c>
 8002cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	fa93 f2a3 	rbit	r2, r3
 8002cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cde:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	fa93 f2a3 	rbit	r2, r3
 8002cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002cfc:	601a      	str	r2, [r3, #0]
  return result;
 8002cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d02:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d06:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	f043 0302 	orr.w	r3, r3, #2
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d102      	bne.n	8002d22 <HAL_RCC_OscConfig+0xb4e>
 8002d1c:	4b43      	ldr	r3, [pc, #268]	; (8002e2c <HAL_RCC_OscConfig+0xc58>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	e013      	b.n	8002d4a <HAL_RCC_OscConfig+0xb76>
 8002d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d26:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d32:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	fa93 f2a3 	rbit	r2, r3
 8002d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d40:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	4b39      	ldr	r3, [pc, #228]	; (8002e2c <HAL_RCC_OscConfig+0xc58>)
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d4e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d52:	2102      	movs	r1, #2
 8002d54:	6011      	str	r1, [r2, #0]
 8002d56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d5a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	fa92 f1a2 	rbit	r1, r2
 8002d64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d68:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d6c:	6011      	str	r1, [r2, #0]
  return result;
 8002d6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d72:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	fab2 f282 	clz	r2, r2
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	f002 021f 	and.w	r2, r2, #31
 8002d88:	2101      	movs	r1, #1
 8002d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d184      	bne.n	8002c9e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d94:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d105      	bne.n	8002da8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d9c:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <HAL_RCC_OscConfig+0xc58>)
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <HAL_RCC_OscConfig+0xc58>)
 8002da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 8242 	beq.w	800323e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dba:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <HAL_RCC_OscConfig+0xc58>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	f000 8213 	beq.w	80031ee <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	f040 8162 	bne.w	800309e <HAL_RCC_OscConfig+0xeca>
 8002dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dde:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002de2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002de6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dec:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	fa93 f2a3 	rbit	r2, r3
 8002df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002dfe:	601a      	str	r2, [r3, #0]
  return result;
 8002e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e04:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e08:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fe f8f2 	bl	8001008 <HAL_GetTick>
 8002e24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e28:	e00c      	b.n	8002e44 <HAL_RCC_OscConfig+0xc70>
 8002e2a:	bf00      	nop
 8002e2c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e30:	f7fe f8ea 	bl	8001008 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e1fd      	b.n	8003240 <HAL_RCC_OscConfig+0x106c>
 8002e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e48:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e56:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	fa93 f2a3 	rbit	r2, r3
 8002e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e64:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e68:	601a      	str	r2, [r3, #0]
  return result;
 8002e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e72:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d102      	bne.n	8002e8e <HAL_RCC_OscConfig+0xcba>
 8002e88:	4bb0      	ldr	r3, [pc, #704]	; (800314c <HAL_RCC_OscConfig+0xf78>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	e027      	b.n	8002ede <HAL_RCC_OscConfig+0xd0a>
 8002e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e92:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	fa93 f2a3 	rbit	r2, r3
 8002eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ebc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	fa93 f2a3 	rbit	r2, r3
 8002ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	4b9c      	ldr	r3, [pc, #624]	; (800314c <HAL_RCC_OscConfig+0xf78>)
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ee2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002ee6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002eea:	6011      	str	r1, [r2, #0]
 8002eec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ef0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	fa92 f1a2 	rbit	r1, r2
 8002efa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002efe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f02:	6011      	str	r1, [r2, #0]
  return result;
 8002f04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f08:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	fab2 f282 	clz	r2, r2
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	f042 0220 	orr.w	r2, r2, #32
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	f002 021f 	and.w	r2, r2, #31
 8002f1e:	2101      	movs	r1, #1
 8002f20:	fa01 f202 	lsl.w	r2, r1, r2
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d182      	bne.n	8002e30 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f2a:	4b88      	ldr	r3, [pc, #544]	; (800314c <HAL_RCC_OscConfig+0xf78>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	430b      	orrs	r3, r1
 8002f4c:	497f      	ldr	r1, [pc, #508]	; (800314c <HAL_RCC_OscConfig+0xf78>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	604b      	str	r3, [r1, #4]
 8002f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f56:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f64:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	fa93 f2a3 	rbit	r2, r3
 8002f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f72:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f76:	601a      	str	r2, [r3, #0]
  return result;
 8002f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f80:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f82:	fab3 f383 	clz	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	461a      	mov	r2, r3
 8002f94:	2301      	movs	r3, #1
 8002f96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7fe f836 	bl	8001008 <HAL_GetTick>
 8002f9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa0:	e009      	b.n	8002fb6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa2:	f7fe f831 	bl	8001008 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e144      	b.n	8003240 <HAL_RCC_OscConfig+0x106c>
 8002fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fba:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002fbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	fa93 f2a3 	rbit	r2, r3
 8002fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002fda:	601a      	str	r2, [r3, #0]
  return result;
 8002fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002fe4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fe6:	fab3 f383 	clz	r3, r3
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d102      	bne.n	8003000 <HAL_RCC_OscConfig+0xe2c>
 8002ffa:	4b54      	ldr	r3, [pc, #336]	; (800314c <HAL_RCC_OscConfig+0xf78>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	e027      	b.n	8003050 <HAL_RCC_OscConfig+0xe7c>
 8003000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003004:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800300c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003012:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	fa93 f2a3 	rbit	r2, r3
 800301c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003020:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800302e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003038:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	fa93 f2a3 	rbit	r2, r3
 8003042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003046:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	4b3f      	ldr	r3, [pc, #252]	; (800314c <HAL_RCC_OscConfig+0xf78>)
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003054:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003058:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800305c:	6011      	str	r1, [r2, #0]
 800305e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003062:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	fa92 f1a2 	rbit	r1, r2
 800306c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003070:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003074:	6011      	str	r1, [r2, #0]
  return result;
 8003076:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800307a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	fab2 f282 	clz	r2, r2
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	f042 0220 	orr.w	r2, r2, #32
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	f002 021f 	and.w	r2, r2, #31
 8003090:	2101      	movs	r1, #1
 8003092:	fa01 f202 	lsl.w	r2, r1, r2
 8003096:	4013      	ands	r3, r2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d082      	beq.n	8002fa2 <HAL_RCC_OscConfig+0xdce>
 800309c:	e0cf      	b.n	800323e <HAL_RCC_OscConfig+0x106a>
 800309e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80030a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	fa93 f2a3 	rbit	r2, r3
 80030ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030be:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80030c2:	601a      	str	r2, [r3, #0]
  return result;
 80030c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80030cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ce:	fab3 f383 	clz	r3, r3
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	461a      	mov	r2, r3
 80030e0:	2300      	movs	r3, #0
 80030e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7fd ff90 	bl	8001008 <HAL_GetTick>
 80030e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ec:	e009      	b.n	8003102 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fd ff8b 	bl	8001008 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e09e      	b.n	8003240 <HAL_RCC_OscConfig+0x106c>
 8003102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003106:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800310a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800310e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003114:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	fa93 f2a3 	rbit	r2, r3
 800311e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003122:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003126:	601a      	str	r2, [r3, #0]
  return result;
 8003128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003130:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b01      	cmp	r3, #1
 8003144:	d104      	bne.n	8003150 <HAL_RCC_OscConfig+0xf7c>
 8003146:	4b01      	ldr	r3, [pc, #4]	; (800314c <HAL_RCC_OscConfig+0xf78>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	e029      	b.n	80031a0 <HAL_RCC_OscConfig+0xfcc>
 800314c:	40021000 	.word	0x40021000
 8003150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003154:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003158:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800315c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003162:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	fa93 f2a3 	rbit	r2, r3
 800316c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003170:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800317e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003188:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	fa93 f2a3 	rbit	r2, r3
 8003192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003196:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	4b2b      	ldr	r3, [pc, #172]	; (800324c <HAL_RCC_OscConfig+0x1078>)
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031a4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80031a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031ac:	6011      	str	r1, [r2, #0]
 80031ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031b2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	fa92 f1a2 	rbit	r1, r2
 80031bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031c0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80031c4:	6011      	str	r1, [r2, #0]
  return result;
 80031c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031ca:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	fab2 f282 	clz	r2, r2
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	f042 0220 	orr.w	r2, r2, #32
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	f002 021f 	and.w	r2, r2, #31
 80031e0:	2101      	movs	r1, #1
 80031e2:	fa01 f202 	lsl.w	r2, r1, r2
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d180      	bne.n	80030ee <HAL_RCC_OscConfig+0xf1a>
 80031ec:	e027      	b.n	800323e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e01e      	b.n	8003240 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003202:	4b12      	ldr	r3, [pc, #72]	; (800324c <HAL_RCC_OscConfig+0x1078>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800320a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800320e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003216:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	429a      	cmp	r2, r3
 8003220:	d10b      	bne.n	800323a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003222:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003226:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800322a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003236:	429a      	cmp	r2, r3
 8003238:	d001      	beq.n	800323e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000

08003250 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b09e      	sub	sp, #120	; 0x78
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e162      	b.n	800352e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003268:	4b90      	ldr	r3, [pc, #576]	; (80034ac <HAL_RCC_ClockConfig+0x25c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d910      	bls.n	8003298 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003276:	4b8d      	ldr	r3, [pc, #564]	; (80034ac <HAL_RCC_ClockConfig+0x25c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f023 0207 	bic.w	r2, r3, #7
 800327e:	498b      	ldr	r1, [pc, #556]	; (80034ac <HAL_RCC_ClockConfig+0x25c>)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	4b89      	ldr	r3, [pc, #548]	; (80034ac <HAL_RCC_ClockConfig+0x25c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e14a      	b.n	800352e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a4:	4b82      	ldr	r3, [pc, #520]	; (80034b0 <HAL_RCC_ClockConfig+0x260>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	497f      	ldr	r1, [pc, #508]	; (80034b0 <HAL_RCC_ClockConfig+0x260>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80dc 	beq.w	800347c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d13c      	bne.n	8003346 <HAL_RCC_ClockConfig+0xf6>
 80032cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032d4:	fa93 f3a3 	rbit	r3, r3
 80032d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032dc:	fab3 f383 	clz	r3, r3
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d102      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xa6>
 80032f0:	4b6f      	ldr	r3, [pc, #444]	; (80034b0 <HAL_RCC_ClockConfig+0x260>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	e00f      	b.n	8003316 <HAL_RCC_ClockConfig+0xc6>
 80032f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	667b      	str	r3, [r7, #100]	; 0x64
 8003304:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003308:	663b      	str	r3, [r7, #96]	; 0x60
 800330a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003312:	4b67      	ldr	r3, [pc, #412]	; (80034b0 <HAL_RCC_ClockConfig+0x260>)
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800331a:	65ba      	str	r2, [r7, #88]	; 0x58
 800331c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800331e:	fa92 f2a2 	rbit	r2, r2
 8003322:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003324:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003326:	fab2 f282 	clz	r2, r2
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	f042 0220 	orr.w	r2, r2, #32
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	f002 021f 	and.w	r2, r2, #31
 8003336:	2101      	movs	r1, #1
 8003338:	fa01 f202 	lsl.w	r2, r1, r2
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d17b      	bne.n	800343a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e0f3      	b.n	800352e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d13c      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x178>
 800334e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003352:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800335c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335e:	fab3 f383 	clz	r3, r3
 8003362:	b2db      	uxtb	r3, r3
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b01      	cmp	r3, #1
 8003370:	d102      	bne.n	8003378 <HAL_RCC_ClockConfig+0x128>
 8003372:	4b4f      	ldr	r3, [pc, #316]	; (80034b0 <HAL_RCC_ClockConfig+0x260>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	e00f      	b.n	8003398 <HAL_RCC_ClockConfig+0x148>
 8003378:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800337c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003380:	fa93 f3a3 	rbit	r3, r3
 8003384:	647b      	str	r3, [r7, #68]	; 0x44
 8003386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800338a:	643b      	str	r3, [r7, #64]	; 0x40
 800338c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003394:	4b46      	ldr	r3, [pc, #280]	; (80034b0 <HAL_RCC_ClockConfig+0x260>)
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800339c:	63ba      	str	r2, [r7, #56]	; 0x38
 800339e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033a0:	fa92 f2a2 	rbit	r2, r2
 80033a4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80033a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033a8:	fab2 f282 	clz	r2, r2
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	f042 0220 	orr.w	r2, r2, #32
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	f002 021f 	and.w	r2, r2, #31
 80033b8:	2101      	movs	r1, #1
 80033ba:	fa01 f202 	lsl.w	r2, r1, r2
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d13a      	bne.n	800343a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0b2      	b.n	800352e <HAL_RCC_ClockConfig+0x2de>
 80033c8:	2302      	movs	r3, #2
 80033ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	fa93 f3a3 	rbit	r3, r3
 80033d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	095b      	lsrs	r3, r3, #5
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d102      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x1a0>
 80033ea:	4b31      	ldr	r3, [pc, #196]	; (80034b0 <HAL_RCC_ClockConfig+0x260>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	e00d      	b.n	800340c <HAL_RCC_ClockConfig+0x1bc>
 80033f0:	2302      	movs	r3, #2
 80033f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f6:	fa93 f3a3 	rbit	r3, r3
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
 80033fc:	2302      	movs	r3, #2
 80033fe:	623b      	str	r3, [r7, #32]
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	fa93 f3a3 	rbit	r3, r3
 8003406:	61fb      	str	r3, [r7, #28]
 8003408:	4b29      	ldr	r3, [pc, #164]	; (80034b0 <HAL_RCC_ClockConfig+0x260>)
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	2202      	movs	r2, #2
 800340e:	61ba      	str	r2, [r7, #24]
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	fa92 f2a2 	rbit	r2, r2
 8003416:	617a      	str	r2, [r7, #20]
  return result;
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	fab2 f282 	clz	r2, r2
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	f042 0220 	orr.w	r2, r2, #32
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	f002 021f 	and.w	r2, r2, #31
 800342a:	2101      	movs	r1, #1
 800342c:	fa01 f202 	lsl.w	r2, r1, r2
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e079      	b.n	800352e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <HAL_RCC_ClockConfig+0x260>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f023 0203 	bic.w	r2, r3, #3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	491a      	ldr	r1, [pc, #104]	; (80034b0 <HAL_RCC_ClockConfig+0x260>)
 8003448:	4313      	orrs	r3, r2
 800344a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800344c:	f7fd fddc 	bl	8001008 <HAL_GetTick>
 8003450:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003452:	e00a      	b.n	800346a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003454:	f7fd fdd8 	bl	8001008 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e061      	b.n	800352e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346a:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_RCC_ClockConfig+0x260>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 020c 	and.w	r2, r3, #12
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	429a      	cmp	r2, r3
 800347a:	d1eb      	bne.n	8003454 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_RCC_ClockConfig+0x25c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d214      	bcs.n	80034b4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348a:	4b08      	ldr	r3, [pc, #32]	; (80034ac <HAL_RCC_ClockConfig+0x25c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f023 0207 	bic.w	r2, r3, #7
 8003492:	4906      	ldr	r1, [pc, #24]	; (80034ac <HAL_RCC_ClockConfig+0x25c>)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	4313      	orrs	r3, r2
 8003498:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800349a:	4b04      	ldr	r3, [pc, #16]	; (80034ac <HAL_RCC_ClockConfig+0x25c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d005      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e040      	b.n	800352e <HAL_RCC_ClockConfig+0x2de>
 80034ac:	40022000 	.word	0x40022000
 80034b0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c0:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <HAL_RCC_ClockConfig+0x2e8>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	491a      	ldr	r1, [pc, #104]	; (8003538 <HAL_RCC_ClockConfig+0x2e8>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034de:	4b16      	ldr	r3, [pc, #88]	; (8003538 <HAL_RCC_ClockConfig+0x2e8>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4912      	ldr	r1, [pc, #72]	; (8003538 <HAL_RCC_ClockConfig+0x2e8>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034f2:	f000 f829 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 80034f6:	4601      	mov	r1, r0
 80034f8:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <HAL_RCC_ClockConfig+0x2e8>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003500:	22f0      	movs	r2, #240	; 0xf0
 8003502:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	fa92 f2a2 	rbit	r2, r2
 800350a:	60fa      	str	r2, [r7, #12]
  return result;
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	fab2 f282 	clz	r2, r2
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	40d3      	lsrs	r3, r2
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <HAL_RCC_ClockConfig+0x2ec>)
 8003518:	5cd3      	ldrb	r3, [r2, r3]
 800351a:	fa21 f303 	lsr.w	r3, r1, r3
 800351e:	4a08      	ldr	r2, [pc, #32]	; (8003540 <HAL_RCC_ClockConfig+0x2f0>)
 8003520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003522:	4b08      	ldr	r3, [pc, #32]	; (8003544 <HAL_RCC_ClockConfig+0x2f4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7fd fd2a 	bl	8000f80 <HAL_InitTick>
  
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3778      	adds	r7, #120	; 0x78
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000
 800353c:	080060cc 	.word	0x080060cc
 8003540:	20000000 	.word	0x20000000
 8003544:	20000004 	.word	0x20000004

08003548 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003548:	b480      	push	{r7}
 800354a:	b08b      	sub	sp, #44	; 0x2c
 800354c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	2300      	movs	r3, #0
 8003554:	61bb      	str	r3, [r7, #24]
 8003556:	2300      	movs	r3, #0
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003562:	4b29      	ldr	r3, [pc, #164]	; (8003608 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	2b04      	cmp	r3, #4
 8003570:	d002      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x30>
 8003572:	2b08      	cmp	r3, #8
 8003574:	d003      	beq.n	800357e <HAL_RCC_GetSysClockFreq+0x36>
 8003576:	e03c      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003578:	4b24      	ldr	r3, [pc, #144]	; (800360c <HAL_RCC_GetSysClockFreq+0xc4>)
 800357a:	623b      	str	r3, [r7, #32]
      break;
 800357c:	e03c      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003584:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003588:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	fa92 f2a2 	rbit	r2, r2
 8003590:	607a      	str	r2, [r7, #4]
  return result;
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	fab2 f282 	clz	r2, r2
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	40d3      	lsrs	r3, r2
 800359c:	4a1c      	ldr	r2, [pc, #112]	; (8003610 <HAL_RCC_GetSysClockFreq+0xc8>)
 800359e:	5cd3      	ldrb	r3, [r2, r3]
 80035a0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80035a2:	4b19      	ldr	r3, [pc, #100]	; (8003608 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	220f      	movs	r2, #15
 80035ac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	fa92 f2a2 	rbit	r2, r2
 80035b4:	60fa      	str	r2, [r7, #12]
  return result;
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	fab2 f282 	clz	r2, r2
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	40d3      	lsrs	r3, r2
 80035c0:	4a14      	ldr	r2, [pc, #80]	; (8003614 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035c2:	5cd3      	ldrb	r3, [r2, r3]
 80035c4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035d0:	4a0e      	ldr	r2, [pc, #56]	; (800360c <HAL_RCC_GetSysClockFreq+0xc4>)
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	fb02 f303 	mul.w	r3, r2, r3
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
 80035e0:	e004      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	4a0c      	ldr	r2, [pc, #48]	; (8003618 <HAL_RCC_GetSysClockFreq+0xd0>)
 80035e6:	fb02 f303 	mul.w	r3, r2, r3
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	623b      	str	r3, [r7, #32]
      break;
 80035f0:	e002      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035f2:	4b0a      	ldr	r3, [pc, #40]	; (800361c <HAL_RCC_GetSysClockFreq+0xd4>)
 80035f4:	623b      	str	r3, [r7, #32]
      break;
 80035f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035f8:	6a3b      	ldr	r3, [r7, #32]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	372c      	adds	r7, #44	; 0x2c
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	00f42400 	.word	0x00f42400
 8003610:	080060e4 	.word	0x080060e4
 8003614:	080060f4 	.word	0x080060f4
 8003618:	003d0900 	.word	0x003d0900
 800361c:	007a1200 	.word	0x007a1200

08003620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003624:	4b03      	ldr	r3, [pc, #12]	; (8003634 <HAL_RCC_GetHCLKFreq+0x14>)
 8003626:	681b      	ldr	r3, [r3, #0]
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	20000000 	.word	0x20000000

08003638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800363e:	f7ff ffef 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 8003642:	4601      	mov	r1, r0
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800364c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003650:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	fa92 f2a2 	rbit	r2, r2
 8003658:	603a      	str	r2, [r7, #0]
  return result;
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	fab2 f282 	clz	r2, r2
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	40d3      	lsrs	r3, r2
 8003664:	4a04      	ldr	r2, [pc, #16]	; (8003678 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003666:	5cd3      	ldrb	r3, [r2, r3]
 8003668:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40021000 	.word	0x40021000
 8003678:	080060dc 	.word	0x080060dc

0800367c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003682:	f7ff ffcd 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 8003686:	4601      	mov	r1, r0
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003690:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003694:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	fa92 f2a2 	rbit	r2, r2
 800369c:	603a      	str	r2, [r7, #0]
  return result;
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	fab2 f282 	clz	r2, r2
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	40d3      	lsrs	r3, r2
 80036a8:	4a04      	ldr	r2, [pc, #16]	; (80036bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80036aa:	5cd3      	ldrb	r3, [r2, r3]
 80036ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40021000 	.word	0x40021000
 80036bc:	080060dc 	.word	0x080060dc

080036c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b092      	sub	sp, #72	; 0x48
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80036d0:	2300      	movs	r3, #0
 80036d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 80cd 	beq.w	800387e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036e4:	4b86      	ldr	r3, [pc, #536]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10e      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f0:	4b83      	ldr	r3, [pc, #524]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	4a82      	ldr	r2, [pc, #520]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036fa:	61d3      	str	r3, [r2, #28]
 80036fc:	4b80      	ldr	r3, [pc, #512]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003708:	2301      	movs	r3, #1
 800370a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370e:	4b7d      	ldr	r3, [pc, #500]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d118      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800371a:	4b7a      	ldr	r3, [pc, #488]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a79      	ldr	r2, [pc, #484]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003724:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003726:	f7fd fc6f 	bl	8001008 <HAL_GetTick>
 800372a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372c:	e008      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372e:	f7fd fc6b 	bl	8001008 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b64      	cmp	r3, #100	; 0x64
 800373a:	d901      	bls.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e0db      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003740:	4b70      	ldr	r3, [pc, #448]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f0      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800374c:	4b6c      	ldr	r3, [pc, #432]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003754:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d07d      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003764:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003766:	429a      	cmp	r2, r3
 8003768:	d076      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800376a:	4b65      	ldr	r3, [pc, #404]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003778:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377c:	fa93 f3a3 	rbit	r3, r3
 8003780:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003784:	fab3 f383 	clz	r3, r3
 8003788:	b2db      	uxtb	r3, r3
 800378a:	461a      	mov	r2, r3
 800378c:	4b5e      	ldr	r3, [pc, #376]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	461a      	mov	r2, r3
 8003794:	2301      	movs	r3, #1
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800379c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a0:	fa93 f3a3 	rbit	r3, r3
 80037a4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80037a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037a8:	fab3 f383 	clz	r3, r3
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	4b55      	ldr	r3, [pc, #340]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	461a      	mov	r2, r3
 80037b8:	2300      	movs	r3, #0
 80037ba:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037bc:	4a50      	ldr	r2, [pc, #320]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d045      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037cc:	f7fd fc1c 	bl	8001008 <HAL_GetTick>
 80037d0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d2:	e00a      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d4:	f7fd fc18 	bl	8001008 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e086      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80037ea:	2302      	movs	r3, #2
 80037ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	fa93 f3a3 	rbit	r3, r3
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
 80037f6:	2302      	movs	r3, #2
 80037f8:	623b      	str	r3, [r7, #32]
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	fa93 f3a3 	rbit	r3, r3
 8003800:	61fb      	str	r3, [r7, #28]
  return result;
 8003802:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003804:	fab3 f383 	clz	r3, r3
 8003808:	b2db      	uxtb	r3, r3
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f043 0302 	orr.w	r3, r3, #2
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d102      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003818:	4b39      	ldr	r3, [pc, #228]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	e007      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800381e:	2302      	movs	r3, #2
 8003820:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	fa93 f3a3 	rbit	r3, r3
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	4b35      	ldr	r3, [pc, #212]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	2202      	movs	r2, #2
 8003830:	613a      	str	r2, [r7, #16]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	fa92 f2a2 	rbit	r2, r2
 8003838:	60fa      	str	r2, [r7, #12]
  return result;
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	fab2 f282 	clz	r2, r2
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	f002 021f 	and.w	r2, r2, #31
 800384c:	2101      	movs	r1, #1
 800384e:	fa01 f202 	lsl.w	r2, r1, r2
 8003852:	4013      	ands	r3, r2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0bd      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003858:	4b29      	ldr	r3, [pc, #164]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	4926      	ldr	r1, [pc, #152]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003866:	4313      	orrs	r3, r2
 8003868:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800386a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800386e:	2b01      	cmp	r3, #1
 8003870:	d105      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003872:	4b23      	ldr	r3, [pc, #140]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	4a22      	ldr	r2, [pc, #136]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800388a:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	f023 0203 	bic.w	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	491a      	ldr	r1, [pc, #104]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003898:	4313      	orrs	r3, r2
 800389a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038a8:	4b15      	ldr	r3, [pc, #84]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	f023 0210 	bic.w	r2, r3, #16
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4912      	ldr	r1, [pc, #72]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d008      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038c6:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	490b      	ldr	r1, [pc, #44]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038e4:	4b06      	ldr	r3, [pc, #24]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	4903      	ldr	r1, [pc, #12]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3748      	adds	r7, #72	; 0x48
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40021000 	.word	0x40021000
 8003904:	40007000 	.word	0x40007000
 8003908:	10908100 	.word	0x10908100

0800390c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e049      	b.n	80039b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fd f990 	bl	8000c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3304      	adds	r3, #4
 8003948:	4619      	mov	r1, r3
 800394a:	4610      	mov	r0, r2
 800394c:	f001 f870 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e049      	b.n	8003a60 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d106      	bne.n	80039e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7fd f8d9 	bl	8000b98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2202      	movs	r2, #2
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3304      	adds	r3, #4
 80039f6:	4619      	mov	r1, r3
 80039f8:	4610      	mov	r0, r2
 80039fa:	f001 f819 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d109      	bne.n	8003a8c <HAL_TIM_PWM_Start+0x24>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	bf14      	ite	ne
 8003a84:	2301      	movne	r3, #1
 8003a86:	2300      	moveq	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	e03c      	b.n	8003b06 <HAL_TIM_PWM_Start+0x9e>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d109      	bne.n	8003aa6 <HAL_TIM_PWM_Start+0x3e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	bf14      	ite	ne
 8003a9e:	2301      	movne	r3, #1
 8003aa0:	2300      	moveq	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	e02f      	b.n	8003b06 <HAL_TIM_PWM_Start+0x9e>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d109      	bne.n	8003ac0 <HAL_TIM_PWM_Start+0x58>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	bf14      	ite	ne
 8003ab8:	2301      	movne	r3, #1
 8003aba:	2300      	moveq	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	e022      	b.n	8003b06 <HAL_TIM_PWM_Start+0x9e>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b0c      	cmp	r3, #12
 8003ac4:	d109      	bne.n	8003ada <HAL_TIM_PWM_Start+0x72>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	bf14      	ite	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	2300      	moveq	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	e015      	b.n	8003b06 <HAL_TIM_PWM_Start+0x9e>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b10      	cmp	r3, #16
 8003ade:	d109      	bne.n	8003af4 <HAL_TIM_PWM_Start+0x8c>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	bf14      	ite	ne
 8003aec:	2301      	movne	r3, #1
 8003aee:	2300      	moveq	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	e008      	b.n	8003b06 <HAL_TIM_PWM_Start+0x9e>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	bf14      	ite	ne
 8003b00:	2301      	movne	r3, #1
 8003b02:	2300      	moveq	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e088      	b.n	8003c20 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d104      	bne.n	8003b1e <HAL_TIM_PWM_Start+0xb6>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b1c:	e023      	b.n	8003b66 <HAL_TIM_PWM_Start+0xfe>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d104      	bne.n	8003b2e <HAL_TIM_PWM_Start+0xc6>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b2c:	e01b      	b.n	8003b66 <HAL_TIM_PWM_Start+0xfe>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d104      	bne.n	8003b3e <HAL_TIM_PWM_Start+0xd6>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b3c:	e013      	b.n	8003b66 <HAL_TIM_PWM_Start+0xfe>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b0c      	cmp	r3, #12
 8003b42:	d104      	bne.n	8003b4e <HAL_TIM_PWM_Start+0xe6>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b4c:	e00b      	b.n	8003b66 <HAL_TIM_PWM_Start+0xfe>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b10      	cmp	r3, #16
 8003b52:	d104      	bne.n	8003b5e <HAL_TIM_PWM_Start+0xf6>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b5c:	e003      	b.n	8003b66 <HAL_TIM_PWM_Start+0xfe>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	6839      	ldr	r1, [r7, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f001 fcbc 	bl	80054ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a2b      	ldr	r2, [pc, #172]	; (8003c28 <HAL_TIM_PWM_Start+0x1c0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00e      	beq.n	8003b9c <HAL_TIM_PWM_Start+0x134>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a2a      	ldr	r2, [pc, #168]	; (8003c2c <HAL_TIM_PWM_Start+0x1c4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d009      	beq.n	8003b9c <HAL_TIM_PWM_Start+0x134>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a28      	ldr	r2, [pc, #160]	; (8003c30 <HAL_TIM_PWM_Start+0x1c8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d004      	beq.n	8003b9c <HAL_TIM_PWM_Start+0x134>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a27      	ldr	r2, [pc, #156]	; (8003c34 <HAL_TIM_PWM_Start+0x1cc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d101      	bne.n	8003ba0 <HAL_TIM_PWM_Start+0x138>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <HAL_TIM_PWM_Start+0x13a>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d007      	beq.n	8003bb6 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1b      	ldr	r2, [pc, #108]	; (8003c28 <HAL_TIM_PWM_Start+0x1c0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00e      	beq.n	8003bde <HAL_TIM_PWM_Start+0x176>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc8:	d009      	beq.n	8003bde <HAL_TIM_PWM_Start+0x176>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1a      	ldr	r2, [pc, #104]	; (8003c38 <HAL_TIM_PWM_Start+0x1d0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d004      	beq.n	8003bde <HAL_TIM_PWM_Start+0x176>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a14      	ldr	r2, [pc, #80]	; (8003c2c <HAL_TIM_PWM_Start+0x1c4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d115      	bne.n	8003c0a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <HAL_TIM_PWM_Start+0x1d4>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b06      	cmp	r3, #6
 8003bee:	d015      	beq.n	8003c1c <HAL_TIM_PWM_Start+0x1b4>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf6:	d011      	beq.n	8003c1c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c08:	e008      	b.n	8003c1c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0201 	orr.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	e000      	b.n	8003c1e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40012c00 	.word	0x40012c00
 8003c2c:	40014000 	.word	0x40014000
 8003c30:	40014400 	.word	0x40014400
 8003c34:	40014800 	.word	0x40014800
 8003c38:	40000400 	.word	0x40000400
 8003c3c:	00010007 	.word	0x00010007

08003c40 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d109      	bne.n	8003c6c <HAL_TIM_PWM_Start_DMA+0x2c>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	bf0c      	ite	eq
 8003c64:	2301      	moveq	r3, #1
 8003c66:	2300      	movne	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	e03c      	b.n	8003ce6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d109      	bne.n	8003c86 <HAL_TIM_PWM_Start_DMA+0x46>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	bf0c      	ite	eq
 8003c7e:	2301      	moveq	r3, #1
 8003c80:	2300      	movne	r3, #0
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	e02f      	b.n	8003ce6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d109      	bne.n	8003ca0 <HAL_TIM_PWM_Start_DMA+0x60>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	e022      	b.n	8003ce6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b0c      	cmp	r3, #12
 8003ca4:	d109      	bne.n	8003cba <HAL_TIM_PWM_Start_DMA+0x7a>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	bf0c      	ite	eq
 8003cb2:	2301      	moveq	r3, #1
 8003cb4:	2300      	movne	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	e015      	b.n	8003ce6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d109      	bne.n	8003cd4 <HAL_TIM_PWM_Start_DMA+0x94>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e008      	b.n	8003ce6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	bf0c      	ite	eq
 8003ce0:	2301      	moveq	r3, #1
 8003ce2:	2300      	movne	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8003cea:	2302      	movs	r3, #2
 8003cec:	e197      	b.n	800401e <HAL_TIM_PWM_Start_DMA+0x3de>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d109      	bne.n	8003d08 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	e03c      	b.n	8003d82 <HAL_TIM_PWM_Start_DMA+0x142>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d109      	bne.n	8003d22 <HAL_TIM_PWM_Start_DMA+0xe2>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	bf0c      	ite	eq
 8003d1a:	2301      	moveq	r3, #1
 8003d1c:	2300      	movne	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	e02f      	b.n	8003d82 <HAL_TIM_PWM_Start_DMA+0x142>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d109      	bne.n	8003d3c <HAL_TIM_PWM_Start_DMA+0xfc>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	bf0c      	ite	eq
 8003d34:	2301      	moveq	r3, #1
 8003d36:	2300      	movne	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	e022      	b.n	8003d82 <HAL_TIM_PWM_Start_DMA+0x142>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b0c      	cmp	r3, #12
 8003d40:	d109      	bne.n	8003d56 <HAL_TIM_PWM_Start_DMA+0x116>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	bf0c      	ite	eq
 8003d4e:	2301      	moveq	r3, #1
 8003d50:	2300      	movne	r3, #0
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	e015      	b.n	8003d82 <HAL_TIM_PWM_Start_DMA+0x142>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b10      	cmp	r3, #16
 8003d5a:	d109      	bne.n	8003d70 <HAL_TIM_PWM_Start_DMA+0x130>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	bf0c      	ite	eq
 8003d68:	2301      	moveq	r3, #1
 8003d6a:	2300      	movne	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	e008      	b.n	8003d82 <HAL_TIM_PWM_Start_DMA+0x142>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2301      	moveq	r3, #1
 8003d7e:	2300      	movne	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d034      	beq.n	8003df0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d104      	bne.n	8003d96 <HAL_TIM_PWM_Start_DMA+0x156>
 8003d8c:	887b      	ldrh	r3, [r7, #2]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e143      	b.n	800401e <HAL_TIM_PWM_Start_DMA+0x3de>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d104      	bne.n	8003da6 <HAL_TIM_PWM_Start_DMA+0x166>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da4:	e026      	b.n	8003df4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d104      	bne.n	8003db6 <HAL_TIM_PWM_Start_DMA+0x176>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003db4:	e01e      	b.n	8003df4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d104      	bne.n	8003dc6 <HAL_TIM_PWM_Start_DMA+0x186>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dc4:	e016      	b.n	8003df4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b0c      	cmp	r3, #12
 8003dca:	d104      	bne.n	8003dd6 <HAL_TIM_PWM_Start_DMA+0x196>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dd4:	e00e      	b.n	8003df4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	d104      	bne.n	8003de6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003de4:	e006      	b.n	8003df4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2202      	movs	r2, #2
 8003dea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dee:	e001      	b.n	8003df4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e114      	b.n	800401e <HAL_TIM_PWM_Start_DMA+0x3de>
  }

  switch (Channel)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b0c      	cmp	r3, #12
 8003df8:	f200 80ae 	bhi.w	8003f58 <HAL_TIM_PWM_Start_DMA+0x318>
 8003dfc:	a201      	add	r2, pc, #4	; (adr r2, 8003e04 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e02:	bf00      	nop
 8003e04:	08003e39 	.word	0x08003e39
 8003e08:	08003f59 	.word	0x08003f59
 8003e0c:	08003f59 	.word	0x08003f59
 8003e10:	08003f59 	.word	0x08003f59
 8003e14:	08003e81 	.word	0x08003e81
 8003e18:	08003f59 	.word	0x08003f59
 8003e1c:	08003f59 	.word	0x08003f59
 8003e20:	08003f59 	.word	0x08003f59
 8003e24:	08003ec9 	.word	0x08003ec9
 8003e28:	08003f59 	.word	0x08003f59
 8003e2c:	08003f59 	.word	0x08003f59
 8003e30:	08003f59 	.word	0x08003f59
 8003e34:	08003f11 	.word	0x08003f11
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	4a7a      	ldr	r2, [pc, #488]	; (8004028 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	4a79      	ldr	r2, [pc, #484]	; (800402c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003e46:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	4a78      	ldr	r2, [pc, #480]	; (8004030 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3334      	adds	r3, #52	; 0x34
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	887b      	ldrh	r3, [r7, #2]
 8003e60:	f7fd fe86 	bl	8001b70 <HAL_DMA_Start_IT>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e0d7      	b.n	800401e <HAL_TIM_PWM_Start_DMA+0x3de>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e7c:	60da      	str	r2, [r3, #12]
      break;
 8003e7e:	e06e      	b.n	8003f5e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	4a68      	ldr	r2, [pc, #416]	; (8004028 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003e86:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	4a67      	ldr	r2, [pc, #412]	; (800402c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003e8e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	4a66      	ldr	r2, [pc, #408]	; (8004030 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3338      	adds	r3, #56	; 0x38
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	887b      	ldrh	r3, [r7, #2]
 8003ea8:	f7fd fe62 	bl	8001b70 <HAL_DMA_Start_IT>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e0b3      	b.n	800401e <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ec4:	60da      	str	r2, [r3, #12]
      break;
 8003ec6:	e04a      	b.n	8003f5e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ecc:	4a56      	ldr	r2, [pc, #344]	; (8004028 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003ece:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	4a55      	ldr	r2, [pc, #340]	; (800402c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003ed6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	4a54      	ldr	r2, [pc, #336]	; (8004030 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8003ede:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	333c      	adds	r3, #60	; 0x3c
 8003eec:	461a      	mov	r2, r3
 8003eee:	887b      	ldrh	r3, [r7, #2]
 8003ef0:	f7fd fe3e 	bl	8001b70 <HAL_DMA_Start_IT>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e08f      	b.n	800401e <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f0c:	60da      	str	r2, [r3, #12]
      break;
 8003f0e:	e026      	b.n	8003f5e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	4a44      	ldr	r2, [pc, #272]	; (8004028 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003f16:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	4a43      	ldr	r2, [pc, #268]	; (800402c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003f1e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	4a42      	ldr	r2, [pc, #264]	; (8004030 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3340      	adds	r3, #64	; 0x40
 8003f34:	461a      	mov	r2, r3
 8003f36:	887b      	ldrh	r3, [r7, #2]
 8003f38:	f7fd fe1a 	bl	8001b70 <HAL_DMA_Start_IT>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e06b      	b.n	800401e <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f54:	60da      	str	r2, [r3, #12]
      break;
 8003f56:	e002      	b.n	8003f5e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d15b      	bne.n	800401c <HAL_TIM_PWM_Start_DMA+0x3dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f001 fabd 	bl	80054ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a2f      	ldr	r2, [pc, #188]	; (8004034 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00e      	beq.n	8003f9a <HAL_TIM_PWM_Start_DMA+0x35a>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a2d      	ldr	r2, [pc, #180]	; (8004038 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d009      	beq.n	8003f9a <HAL_TIM_PWM_Start_DMA+0x35a>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a2c      	ldr	r2, [pc, #176]	; (800403c <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d004      	beq.n	8003f9a <HAL_TIM_PWM_Start_DMA+0x35a>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a2a      	ldr	r2, [pc, #168]	; (8004040 <HAL_TIM_PWM_Start_DMA+0x400>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d101      	bne.n	8003f9e <HAL_TIM_PWM_Start_DMA+0x35e>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <HAL_TIM_PWM_Start_DMA+0x360>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fb2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1e      	ldr	r2, [pc, #120]	; (8004034 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00e      	beq.n	8003fdc <HAL_TIM_PWM_Start_DMA+0x39c>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc6:	d009      	beq.n	8003fdc <HAL_TIM_PWM_Start_DMA+0x39c>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <HAL_TIM_PWM_Start_DMA+0x404>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d004      	beq.n	8003fdc <HAL_TIM_PWM_Start_DMA+0x39c>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a18      	ldr	r2, [pc, #96]	; (8004038 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d115      	bne.n	8004008 <HAL_TIM_PWM_Start_DMA+0x3c8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	4b19      	ldr	r3, [pc, #100]	; (8004048 <HAL_TIM_PWM_Start_DMA+0x408>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	2b06      	cmp	r3, #6
 8003fec:	d015      	beq.n	800401a <HAL_TIM_PWM_Start_DMA+0x3da>
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff4:	d011      	beq.n	800401a <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        __HAL_TIM_ENABLE(htim);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004006:	e008      	b.n	800401a <HAL_TIM_PWM_Start_DMA+0x3da>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	e000      	b.n	800401c <HAL_TIM_PWM_Start_DMA+0x3dc>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800401c:	7dfb      	ldrb	r3, [r7, #23]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	08004921 	.word	0x08004921
 800402c:	080049c9 	.word	0x080049c9
 8004030:	0800488f 	.word	0x0800488f
 8004034:	40012c00 	.word	0x40012c00
 8004038:	40014000 	.word	0x40014000
 800403c:	40014400 	.word	0x40014400
 8004040:	40014800 	.word	0x40014800
 8004044:	40000400 	.word	0x40000400
 8004048:	00010007 	.word	0x00010007

0800404c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b0c      	cmp	r3, #12
 800405e:	d855      	bhi.n	800410c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004060:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004066:	bf00      	nop
 8004068:	0800409d 	.word	0x0800409d
 800406c:	0800410d 	.word	0x0800410d
 8004070:	0800410d 	.word	0x0800410d
 8004074:	0800410d 	.word	0x0800410d
 8004078:	080040b9 	.word	0x080040b9
 800407c:	0800410d 	.word	0x0800410d
 8004080:	0800410d 	.word	0x0800410d
 8004084:	0800410d 	.word	0x0800410d
 8004088:	080040d5 	.word	0x080040d5
 800408c:	0800410d 	.word	0x0800410d
 8004090:	0800410d 	.word	0x0800410d
 8004094:	0800410d 	.word	0x0800410d
 8004098:	080040f1 	.word	0x080040f1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fd fdbc 	bl	8001c2e <HAL_DMA_Abort_IT>
      break;
 80040b6:	e02c      	b.n	8004112 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fd fdae 	bl	8001c2e <HAL_DMA_Abort_IT>
      break;
 80040d2:	e01e      	b.n	8004112 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fd fda0 	bl	8001c2e <HAL_DMA_Abort_IT>
      break;
 80040ee:	e010      	b.n	8004112 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004104:	4618      	mov	r0, r3
 8004106:	f7fd fd92 	bl	8001c2e <HAL_DMA_Abort_IT>
      break;
 800410a:	e002      	b.n	8004112 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
      break;
 8004110:	bf00      	nop
  }

  if (status == HAL_OK)
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d17b      	bne.n	8004210 <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2200      	movs	r2, #0
 800411e:	6839      	ldr	r1, [r7, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f001 f9e3 	bl	80054ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a3c      	ldr	r2, [pc, #240]	; (800421c <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00e      	beq.n	800414e <HAL_TIM_PWM_Stop_DMA+0x102>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a3a      	ldr	r2, [pc, #232]	; (8004220 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d009      	beq.n	800414e <HAL_TIM_PWM_Stop_DMA+0x102>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a39      	ldr	r2, [pc, #228]	; (8004224 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d004      	beq.n	800414e <HAL_TIM_PWM_Stop_DMA+0x102>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a37      	ldr	r2, [pc, #220]	; (8004228 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d101      	bne.n	8004152 <HAL_TIM_PWM_Stop_DMA+0x106>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <HAL_TIM_PWM_Stop_DMA+0x108>
 8004152:	2300      	movs	r3, #0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d017      	beq.n	8004188 <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6a1a      	ldr	r2, [r3, #32]
 800415e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004162:	4013      	ands	r3, r2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10f      	bne.n	8004188 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6a1a      	ldr	r2, [r3, #32]
 800416e:	f240 4344 	movw	r3, #1092	; 0x444
 8004172:	4013      	ands	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d107      	bne.n	8004188 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004186:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6a1a      	ldr	r2, [r3, #32]
 800418e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004192:	4013      	ands	r3, r2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10f      	bne.n	80041b8 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6a1a      	ldr	r2, [r3, #32]
 800419e:	f240 4344 	movw	r3, #1092	; 0x444
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d107      	bne.n	80041b8 <HAL_TIM_PWM_Stop_DMA+0x16c>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0201 	bic.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d104      	bne.n	80041c8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c6:	e023      	b.n	8004210 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d104      	bne.n	80041d8 <HAL_TIM_PWM_Stop_DMA+0x18c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041d6:	e01b      	b.n	8004210 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d104      	bne.n	80041e8 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e6:	e013      	b.n	8004210 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b0c      	cmp	r3, #12
 80041ec:	d104      	bne.n	80041f8 <HAL_TIM_PWM_Stop_DMA+0x1ac>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041f6:	e00b      	b.n	8004210 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b10      	cmp	r3, #16
 80041fc:	d104      	bne.n	8004208 <HAL_TIM_PWM_Stop_DMA+0x1bc>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004206:	e003      	b.n	8004210 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8004210:	7bfb      	ldrb	r3, [r7, #15]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40012c00 	.word	0x40012c00
 8004220:	40014000 	.word	0x40014000
 8004224:	40014400 	.word	0x40014400
 8004228:	40014800 	.word	0x40014800

0800422c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e049      	b.n	80042d2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d106      	bne.n	8004258 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fc fcc0 	bl	8000bd8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3304      	adds	r3, #4
 8004268:	4619      	mov	r1, r3
 800426a:	4610      	mov	r0, r2
 800426c:	f000 fbe0 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b086      	sub	sp, #24
 80042de:	af00      	add	r7, sp, #0
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e088      	b.n	800440a <HAL_TIM_IC_ConfigChannel+0x130>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d11b      	bne.n	800433e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	6819      	ldr	r1, [r3, #0]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f000 ff3d 	bl	8005194 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699a      	ldr	r2, [r3, #24]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 020c 	bic.w	r2, r2, #12
 8004328:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6999      	ldr	r1, [r3, #24]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	619a      	str	r2, [r3, #24]
 800433c:	e060      	b.n	8004400 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b04      	cmp	r3, #4
 8004342:	d11c      	bne.n	800437e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	6819      	ldr	r1, [r3, #0]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f000 ffa9 	bl	80052aa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004366:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6999      	ldr	r1, [r3, #24]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	021a      	lsls	r2, r3, #8
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	619a      	str	r2, [r3, #24]
 800437c:	e040      	b.n	8004400 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b08      	cmp	r3, #8
 8004382:	d11b      	bne.n	80043bc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	6819      	ldr	r1, [r3, #0]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f000 fff6 	bl	8005384 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	69da      	ldr	r2, [r3, #28]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 020c 	bic.w	r2, r2, #12
 80043a6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	69d9      	ldr	r1, [r3, #28]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	61da      	str	r2, [r3, #28]
 80043ba:	e021      	b.n	8004400 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b0c      	cmp	r3, #12
 80043c0:	d11c      	bne.n	80043fc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	6819      	ldr	r1, [r3, #0]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f001 f813 	bl	80053fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69da      	ldr	r2, [r3, #28]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043e4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69d9      	ldr	r1, [r3, #28]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	021a      	lsls	r2, r3, #8
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	61da      	str	r2, [r3, #28]
 80043fa:	e001      	b.n	8004400 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004408:	7dfb      	ldrb	r3, [r7, #23]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800442e:	2302      	movs	r3, #2
 8004430:	e0ff      	b.n	8004632 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b14      	cmp	r3, #20
 800443e:	f200 80f0 	bhi.w	8004622 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004442:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004448:	0800449d 	.word	0x0800449d
 800444c:	08004623 	.word	0x08004623
 8004450:	08004623 	.word	0x08004623
 8004454:	08004623 	.word	0x08004623
 8004458:	080044dd 	.word	0x080044dd
 800445c:	08004623 	.word	0x08004623
 8004460:	08004623 	.word	0x08004623
 8004464:	08004623 	.word	0x08004623
 8004468:	0800451f 	.word	0x0800451f
 800446c:	08004623 	.word	0x08004623
 8004470:	08004623 	.word	0x08004623
 8004474:	08004623 	.word	0x08004623
 8004478:	0800455f 	.word	0x0800455f
 800447c:	08004623 	.word	0x08004623
 8004480:	08004623 	.word	0x08004623
 8004484:	08004623 	.word	0x08004623
 8004488:	080045a1 	.word	0x080045a1
 800448c:	08004623 	.word	0x08004623
 8004490:	08004623 	.word	0x08004623
 8004494:	08004623 	.word	0x08004623
 8004498:	080045e1 	.word	0x080045e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fb3c 	bl	8004b20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0208 	orr.w	r2, r2, #8
 80044b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0204 	bic.w	r2, r2, #4
 80044c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6999      	ldr	r1, [r3, #24]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	691a      	ldr	r2, [r3, #16]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	619a      	str	r2, [r3, #24]
      break;
 80044da:	e0a5      	b.n	8004628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fba2 	bl	8004c2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6999      	ldr	r1, [r3, #24]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	021a      	lsls	r2, r3, #8
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	619a      	str	r2, [r3, #24]
      break;
 800451c:	e084      	b.n	8004628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fc01 	bl	8004d2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0208 	orr.w	r2, r2, #8
 8004538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0204 	bic.w	r2, r2, #4
 8004548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69d9      	ldr	r1, [r3, #28]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	61da      	str	r2, [r3, #28]
      break;
 800455c:	e064      	b.n	8004628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68b9      	ldr	r1, [r7, #8]
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fc5f 	bl	8004e28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69d9      	ldr	r1, [r3, #28]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	021a      	lsls	r2, r3, #8
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	61da      	str	r2, [r3, #28]
      break;
 800459e:	e043      	b.n	8004628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fca2 	bl	8004ef0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0208 	orr.w	r2, r2, #8
 80045ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0204 	bic.w	r2, r2, #4
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	691a      	ldr	r2, [r3, #16]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045de:	e023      	b.n	8004628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68b9      	ldr	r1, [r7, #8]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fce0 	bl	8004fac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	021a      	lsls	r2, r3, #8
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004620:	e002      	b.n	8004628 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	75fb      	strb	r3, [r7, #23]
      break;
 8004626:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004630:	7dfb      	ldrb	r3, [r7, #23]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop

0800463c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_TIM_ConfigClockSource+0x1c>
 8004654:	2302      	movs	r3, #2
 8004656:	e0b6      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x18a>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800467a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004682:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004694:	d03e      	beq.n	8004714 <HAL_TIM_ConfigClockSource+0xd8>
 8004696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800469a:	f200 8087 	bhi.w	80047ac <HAL_TIM_ConfigClockSource+0x170>
 800469e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a2:	f000 8086 	beq.w	80047b2 <HAL_TIM_ConfigClockSource+0x176>
 80046a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046aa:	d87f      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x170>
 80046ac:	2b70      	cmp	r3, #112	; 0x70
 80046ae:	d01a      	beq.n	80046e6 <HAL_TIM_ConfigClockSource+0xaa>
 80046b0:	2b70      	cmp	r3, #112	; 0x70
 80046b2:	d87b      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x170>
 80046b4:	2b60      	cmp	r3, #96	; 0x60
 80046b6:	d050      	beq.n	800475a <HAL_TIM_ConfigClockSource+0x11e>
 80046b8:	2b60      	cmp	r3, #96	; 0x60
 80046ba:	d877      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x170>
 80046bc:	2b50      	cmp	r3, #80	; 0x50
 80046be:	d03c      	beq.n	800473a <HAL_TIM_ConfigClockSource+0xfe>
 80046c0:	2b50      	cmp	r3, #80	; 0x50
 80046c2:	d873      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x170>
 80046c4:	2b40      	cmp	r3, #64	; 0x40
 80046c6:	d058      	beq.n	800477a <HAL_TIM_ConfigClockSource+0x13e>
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	d86f      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x170>
 80046cc:	2b30      	cmp	r3, #48	; 0x30
 80046ce:	d064      	beq.n	800479a <HAL_TIM_ConfigClockSource+0x15e>
 80046d0:	2b30      	cmp	r3, #48	; 0x30
 80046d2:	d86b      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x170>
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d060      	beq.n	800479a <HAL_TIM_ConfigClockSource+0x15e>
 80046d8:	2b20      	cmp	r3, #32
 80046da:	d867      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x170>
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d05c      	beq.n	800479a <HAL_TIM_ConfigClockSource+0x15e>
 80046e0:	2b10      	cmp	r3, #16
 80046e2:	d05a      	beq.n	800479a <HAL_TIM_ConfigClockSource+0x15e>
 80046e4:	e062      	b.n	80047ac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	6899      	ldr	r1, [r3, #8]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f000 fed9 	bl	80054ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004708:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	609a      	str	r2, [r3, #8]
      break;
 8004712:	e04f      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	6899      	ldr	r1, [r3, #8]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f000 fec2 	bl	80054ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004736:	609a      	str	r2, [r3, #8]
      break;
 8004738:	e03c      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	6859      	ldr	r1, [r3, #4]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	461a      	mov	r2, r3
 8004748:	f000 fd80 	bl	800524c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2150      	movs	r1, #80	; 0x50
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fe8f 	bl	8005476 <TIM_ITRx_SetConfig>
      break;
 8004758:	e02c      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6859      	ldr	r1, [r3, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	461a      	mov	r2, r3
 8004768:	f000 fddc 	bl	8005324 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2160      	movs	r1, #96	; 0x60
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fe7f 	bl	8005476 <TIM_ITRx_SetConfig>
      break;
 8004778:	e01c      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6859      	ldr	r1, [r3, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	461a      	mov	r2, r3
 8004788:	f000 fd60 	bl	800524c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2140      	movs	r1, #64	; 0x40
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fe6f 	bl	8005476 <TIM_ITRx_SetConfig>
      break;
 8004798:	e00c      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4619      	mov	r1, r3
 80047a4:	4610      	mov	r0, r2
 80047a6:	f000 fe66 	bl	8005476 <TIM_ITRx_SetConfig>
      break;
 80047aa:	e003      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	73fb      	strb	r3, [r7, #15]
      break;
 80047b0:	e000      	b.n	80047b4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80047b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b082      	sub	sp, #8
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e031      	b.n	800484a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80047f6:	6839      	ldr	r1, [r7, #0]
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fc37 	bl	800506c <TIM_SlaveTimer_SetConfig>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d009      	beq.n	8004818 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e018      	b.n	800484a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004826:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004836:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d107      	bne.n	80048b6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b4:	e02a      	b.n	800490c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d107      	bne.n	80048d0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2202      	movs	r2, #2
 80048c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ce:	e01d      	b.n	800490c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d107      	bne.n	80048ea <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2204      	movs	r2, #4
 80048de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e8:	e010      	b.n	800490c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d107      	bne.n	8004904 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2208      	movs	r2, #8
 80048f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004902:	e003      	b.n	800490c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f7ff ffb4 	bl	800487a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	771a      	strb	r2, [r3, #28]
}
 8004918:	bf00      	nop
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	429a      	cmp	r2, r3
 8004936:	d10b      	bne.n	8004950 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d136      	bne.n	80049b4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800494e:	e031      	b.n	80049b4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	429a      	cmp	r2, r3
 8004958:	d10b      	bne.n	8004972 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2202      	movs	r2, #2
 800495e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d125      	bne.n	80049b4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004970:	e020      	b.n	80049b4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	429a      	cmp	r2, r3
 800497a:	d10b      	bne.n	8004994 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2204      	movs	r2, #4
 8004980:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d114      	bne.n	80049b4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004992:	e00f      	b.n	80049b4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	429a      	cmp	r2, r3
 800499c:	d10a      	bne.n	80049b4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2208      	movs	r2, #8
 80049a2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d103      	bne.n	80049b4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f7ff ff4c 	bl	8004852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	771a      	strb	r2, [r3, #28]
}
 80049c0:	bf00      	nop
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d103      	bne.n	80049e8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2201      	movs	r2, #1
 80049e4:	771a      	strb	r2, [r3, #28]
 80049e6:	e019      	b.n	8004a1c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d103      	bne.n	80049fa <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2202      	movs	r2, #2
 80049f6:	771a      	strb	r2, [r3, #28]
 80049f8:	e010      	b.n	8004a1c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d103      	bne.n	8004a0c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2204      	movs	r2, #4
 8004a08:	771a      	strb	r2, [r3, #28]
 8004a0a:	e007      	b.n	8004a1c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d102      	bne.n	8004a1c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2208      	movs	r2, #8
 8004a1a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f7ff ff22 	bl	8004866 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	771a      	strb	r2, [r3, #28]
}
 8004a28:	bf00      	nop
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a32      	ldr	r2, [pc, #200]	; (8004b0c <TIM_Base_SetConfig+0xdc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d007      	beq.n	8004a58 <TIM_Base_SetConfig+0x28>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4e:	d003      	beq.n	8004a58 <TIM_Base_SetConfig+0x28>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a2f      	ldr	r2, [pc, #188]	; (8004b10 <TIM_Base_SetConfig+0xe0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d108      	bne.n	8004a6a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a27      	ldr	r2, [pc, #156]	; (8004b0c <TIM_Base_SetConfig+0xdc>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <TIM_Base_SetConfig+0x6a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a78:	d00f      	beq.n	8004a9a <TIM_Base_SetConfig+0x6a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a24      	ldr	r2, [pc, #144]	; (8004b10 <TIM_Base_SetConfig+0xe0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00b      	beq.n	8004a9a <TIM_Base_SetConfig+0x6a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a23      	ldr	r2, [pc, #140]	; (8004b14 <TIM_Base_SetConfig+0xe4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d007      	beq.n	8004a9a <TIM_Base_SetConfig+0x6a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a22      	ldr	r2, [pc, #136]	; (8004b18 <TIM_Base_SetConfig+0xe8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d003      	beq.n	8004a9a <TIM_Base_SetConfig+0x6a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a21      	ldr	r2, [pc, #132]	; (8004b1c <TIM_Base_SetConfig+0xec>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d108      	bne.n	8004aac <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a0e      	ldr	r2, [pc, #56]	; (8004b0c <TIM_Base_SetConfig+0xdc>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00b      	beq.n	8004af0 <TIM_Base_SetConfig+0xc0>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a0e      	ldr	r2, [pc, #56]	; (8004b14 <TIM_Base_SetConfig+0xe4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d007      	beq.n	8004af0 <TIM_Base_SetConfig+0xc0>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a0d      	ldr	r2, [pc, #52]	; (8004b18 <TIM_Base_SetConfig+0xe8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <TIM_Base_SetConfig+0xc0>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a0c      	ldr	r2, [pc, #48]	; (8004b1c <TIM_Base_SetConfig+0xec>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d103      	bne.n	8004af8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	615a      	str	r2, [r3, #20]
}
 8004afe:	bf00      	nop
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40012c00 	.word	0x40012c00
 8004b10:	40000400 	.word	0x40000400
 8004b14:	40014000 	.word	0x40014000
 8004b18:	40014400 	.word	0x40014400
 8004b1c:	40014800 	.word	0x40014800

08004b20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	f023 0201 	bic.w	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0303 	bic.w	r3, r3, #3
 8004b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f023 0302 	bic.w	r3, r3, #2
 8004b6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a28      	ldr	r2, [pc, #160]	; (8004c1c <TIM_OC1_SetConfig+0xfc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00b      	beq.n	8004b98 <TIM_OC1_SetConfig+0x78>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a27      	ldr	r2, [pc, #156]	; (8004c20 <TIM_OC1_SetConfig+0x100>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d007      	beq.n	8004b98 <TIM_OC1_SetConfig+0x78>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a26      	ldr	r2, [pc, #152]	; (8004c24 <TIM_OC1_SetConfig+0x104>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d003      	beq.n	8004b98 <TIM_OC1_SetConfig+0x78>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a25      	ldr	r2, [pc, #148]	; (8004c28 <TIM_OC1_SetConfig+0x108>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d10c      	bne.n	8004bb2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 0308 	bic.w	r3, r3, #8
 8004b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f023 0304 	bic.w	r3, r3, #4
 8004bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a19      	ldr	r2, [pc, #100]	; (8004c1c <TIM_OC1_SetConfig+0xfc>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00b      	beq.n	8004bd2 <TIM_OC1_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a18      	ldr	r2, [pc, #96]	; (8004c20 <TIM_OC1_SetConfig+0x100>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d007      	beq.n	8004bd2 <TIM_OC1_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a17      	ldr	r2, [pc, #92]	; (8004c24 <TIM_OC1_SetConfig+0x104>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d003      	beq.n	8004bd2 <TIM_OC1_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a16      	ldr	r2, [pc, #88]	; (8004c28 <TIM_OC1_SetConfig+0x108>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d111      	bne.n	8004bf6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	621a      	str	r2, [r3, #32]
}
 8004c10:	bf00      	nop
 8004c12:	371c      	adds	r7, #28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	40012c00 	.word	0x40012c00
 8004c20:	40014000 	.word	0x40014000
 8004c24:	40014400 	.word	0x40014400
 8004c28:	40014800 	.word	0x40014800

08004c2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	f023 0210 	bic.w	r2, r3, #16
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f023 0320 	bic.w	r3, r3, #32
 8004c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a24      	ldr	r2, [pc, #144]	; (8004d1c <TIM_OC2_SetConfig+0xf0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d10d      	bne.n	8004cac <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004caa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a1b      	ldr	r2, [pc, #108]	; (8004d1c <TIM_OC2_SetConfig+0xf0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00b      	beq.n	8004ccc <TIM_OC2_SetConfig+0xa0>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a1a      	ldr	r2, [pc, #104]	; (8004d20 <TIM_OC2_SetConfig+0xf4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d007      	beq.n	8004ccc <TIM_OC2_SetConfig+0xa0>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a19      	ldr	r2, [pc, #100]	; (8004d24 <TIM_OC2_SetConfig+0xf8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d003      	beq.n	8004ccc <TIM_OC2_SetConfig+0xa0>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a18      	ldr	r2, [pc, #96]	; (8004d28 <TIM_OC2_SetConfig+0xfc>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d113      	bne.n	8004cf4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cd2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cda:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	621a      	str	r2, [r3, #32]
}
 8004d0e:	bf00      	nop
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	40014000 	.word	0x40014000
 8004d24:	40014400 	.word	0x40014400
 8004d28:	40014800 	.word	0x40014800

08004d2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0303 	bic.w	r3, r3, #3
 8004d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	021b      	lsls	r3, r3, #8
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a23      	ldr	r2, [pc, #140]	; (8004e18 <TIM_OC3_SetConfig+0xec>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d10d      	bne.n	8004daa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	021b      	lsls	r3, r3, #8
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004da8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a1a      	ldr	r2, [pc, #104]	; (8004e18 <TIM_OC3_SetConfig+0xec>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00b      	beq.n	8004dca <TIM_OC3_SetConfig+0x9e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a19      	ldr	r2, [pc, #100]	; (8004e1c <TIM_OC3_SetConfig+0xf0>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d007      	beq.n	8004dca <TIM_OC3_SetConfig+0x9e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a18      	ldr	r2, [pc, #96]	; (8004e20 <TIM_OC3_SetConfig+0xf4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d003      	beq.n	8004dca <TIM_OC3_SetConfig+0x9e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <TIM_OC3_SetConfig+0xf8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d113      	bne.n	8004df2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	621a      	str	r2, [r3, #32]
}
 8004e0c:	bf00      	nop
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	40012c00 	.word	0x40012c00
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	40014400 	.word	0x40014400
 8004e24:	40014800 	.word	0x40014800

08004e28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	021b      	lsls	r3, r3, #8
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	031b      	lsls	r3, r3, #12
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a16      	ldr	r2, [pc, #88]	; (8004ee0 <TIM_OC4_SetConfig+0xb8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00b      	beq.n	8004ea4 <TIM_OC4_SetConfig+0x7c>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a15      	ldr	r2, [pc, #84]	; (8004ee4 <TIM_OC4_SetConfig+0xbc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d007      	beq.n	8004ea4 <TIM_OC4_SetConfig+0x7c>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a14      	ldr	r2, [pc, #80]	; (8004ee8 <TIM_OC4_SetConfig+0xc0>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <TIM_OC4_SetConfig+0x7c>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a13      	ldr	r2, [pc, #76]	; (8004eec <TIM_OC4_SetConfig+0xc4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d109      	bne.n	8004eb8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	019b      	lsls	r3, r3, #6
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	621a      	str	r2, [r3, #32]
}
 8004ed2:	bf00      	nop
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40012c00 	.word	0x40012c00
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	40014400 	.word	0x40014400
 8004eec:	40014800 	.word	0x40014800

08004ef0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	041b      	lsls	r3, r3, #16
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a15      	ldr	r2, [pc, #84]	; (8004f9c <TIM_OC5_SetConfig+0xac>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d00b      	beq.n	8004f62 <TIM_OC5_SetConfig+0x72>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a14      	ldr	r2, [pc, #80]	; (8004fa0 <TIM_OC5_SetConfig+0xb0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d007      	beq.n	8004f62 <TIM_OC5_SetConfig+0x72>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a13      	ldr	r2, [pc, #76]	; (8004fa4 <TIM_OC5_SetConfig+0xb4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d003      	beq.n	8004f62 <TIM_OC5_SetConfig+0x72>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a12      	ldr	r2, [pc, #72]	; (8004fa8 <TIM_OC5_SetConfig+0xb8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d109      	bne.n	8004f76 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	021b      	lsls	r3, r3, #8
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	621a      	str	r2, [r3, #32]
}
 8004f90:	bf00      	nop
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	40012c00 	.word	0x40012c00
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40014400 	.word	0x40014400
 8004fa8:	40014800 	.word	0x40014800

08004fac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	051b      	lsls	r3, r3, #20
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a16      	ldr	r2, [pc, #88]	; (800505c <TIM_OC6_SetConfig+0xb0>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00b      	beq.n	8005020 <TIM_OC6_SetConfig+0x74>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a15      	ldr	r2, [pc, #84]	; (8005060 <TIM_OC6_SetConfig+0xb4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d007      	beq.n	8005020 <TIM_OC6_SetConfig+0x74>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a14      	ldr	r2, [pc, #80]	; (8005064 <TIM_OC6_SetConfig+0xb8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d003      	beq.n	8005020 <TIM_OC6_SetConfig+0x74>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a13      	ldr	r2, [pc, #76]	; (8005068 <TIM_OC6_SetConfig+0xbc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d109      	bne.n	8005034 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005026:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	029b      	lsls	r3, r3, #10
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	4313      	orrs	r3, r2
 8005032:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	621a      	str	r2, [r3, #32]
}
 800504e:	bf00      	nop
 8005050:	371c      	adds	r7, #28
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40012c00 	.word	0x40012c00
 8005060:	40014000 	.word	0x40014000
 8005064:	40014400 	.word	0x40014400
 8005068:	40014800 	.word	0x40014800

0800506c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005088:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800509a:	f023 0307 	bic.w	r3, r3, #7
 800509e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b70      	cmp	r3, #112	; 0x70
 80050b8:	d01a      	beq.n	80050f0 <TIM_SlaveTimer_SetConfig+0x84>
 80050ba:	2b70      	cmp	r3, #112	; 0x70
 80050bc:	d860      	bhi.n	8005180 <TIM_SlaveTimer_SetConfig+0x114>
 80050be:	2b60      	cmp	r3, #96	; 0x60
 80050c0:	d054      	beq.n	800516c <TIM_SlaveTimer_SetConfig+0x100>
 80050c2:	2b60      	cmp	r3, #96	; 0x60
 80050c4:	d85c      	bhi.n	8005180 <TIM_SlaveTimer_SetConfig+0x114>
 80050c6:	2b50      	cmp	r3, #80	; 0x50
 80050c8:	d046      	beq.n	8005158 <TIM_SlaveTimer_SetConfig+0xec>
 80050ca:	2b50      	cmp	r3, #80	; 0x50
 80050cc:	d858      	bhi.n	8005180 <TIM_SlaveTimer_SetConfig+0x114>
 80050ce:	2b40      	cmp	r3, #64	; 0x40
 80050d0:	d019      	beq.n	8005106 <TIM_SlaveTimer_SetConfig+0x9a>
 80050d2:	2b40      	cmp	r3, #64	; 0x40
 80050d4:	d854      	bhi.n	8005180 <TIM_SlaveTimer_SetConfig+0x114>
 80050d6:	2b30      	cmp	r3, #48	; 0x30
 80050d8:	d055      	beq.n	8005186 <TIM_SlaveTimer_SetConfig+0x11a>
 80050da:	2b30      	cmp	r3, #48	; 0x30
 80050dc:	d850      	bhi.n	8005180 <TIM_SlaveTimer_SetConfig+0x114>
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d051      	beq.n	8005186 <TIM_SlaveTimer_SetConfig+0x11a>
 80050e2:	2b20      	cmp	r3, #32
 80050e4:	d84c      	bhi.n	8005180 <TIM_SlaveTimer_SetConfig+0x114>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d04d      	beq.n	8005186 <TIM_SlaveTimer_SetConfig+0x11a>
 80050ea:	2b10      	cmp	r3, #16
 80050ec:	d04b      	beq.n	8005186 <TIM_SlaveTimer_SetConfig+0x11a>
 80050ee:	e047      	b.n	8005180 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	68d9      	ldr	r1, [r3, #12]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	f000 f9d4 	bl	80054ac <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005104:	e040      	b.n	8005188 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b05      	cmp	r3, #5
 800510c:	d101      	bne.n	8005112 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e03b      	b.n	800518a <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6a1a      	ldr	r2, [r3, #32]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0201 	bic.w	r2, r2, #1
 8005128:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005138:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	4313      	orrs	r3, r2
 8005144:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	621a      	str	r2, [r3, #32]
      break;
 8005156:	e017      	b.n	8005188 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	6899      	ldr	r1, [r3, #8]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	461a      	mov	r2, r3
 8005166:	f000 f871 	bl	800524c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800516a:	e00d      	b.n	8005188 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	6899      	ldr	r1, [r3, #8]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	461a      	mov	r2, r3
 800517a:	f000 f8d3 	bl	8005324 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800517e:	e003      	b.n	8005188 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	75fb      	strb	r3, [r7, #23]
      break;
 8005184:	e000      	b.n	8005188 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8005186:	bf00      	nop
  }

  return status;
 8005188:	7dfb      	ldrb	r3, [r7, #23]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f023 0201 	bic.w	r2, r3, #1
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4a20      	ldr	r2, [pc, #128]	; (8005240 <TIM_TI1_SetConfig+0xac>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00b      	beq.n	80051da <TIM_TI1_SetConfig+0x46>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c8:	d007      	beq.n	80051da <TIM_TI1_SetConfig+0x46>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4a1d      	ldr	r2, [pc, #116]	; (8005244 <TIM_TI1_SetConfig+0xb0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d003      	beq.n	80051da <TIM_TI1_SetConfig+0x46>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4a1c      	ldr	r2, [pc, #112]	; (8005248 <TIM_TI1_SetConfig+0xb4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d101      	bne.n	80051de <TIM_TI1_SetConfig+0x4a>
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <TIM_TI1_SetConfig+0x4c>
 80051de:	2300      	movs	r3, #0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d008      	beq.n	80051f6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f023 0303 	bic.w	r3, r3, #3
 80051ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	e003      	b.n	80051fe <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f043 0301 	orr.w	r3, r3, #1
 80051fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005204:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	b2db      	uxtb	r3, r3
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f023 030a 	bic.w	r3, r3, #10
 8005218:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f003 030a 	and.w	r3, r3, #10
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	621a      	str	r2, [r3, #32]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40012c00 	.word	0x40012c00
 8005244:	40000400 	.word	0x40000400
 8005248:	40014000 	.word	0x40014000

0800524c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f023 0201 	bic.w	r2, r3, #1
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f023 030a 	bic.w	r3, r3, #10
 8005288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b087      	sub	sp, #28
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	607a      	str	r2, [r7, #4]
 80052b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	f023 0210 	bic.w	r2, r3, #16
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	021b      	lsls	r3, r3, #8
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	4313      	orrs	r3, r2
 80052e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	031b      	lsls	r3, r3, #12
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4313      	orrs	r3, r2
 800530a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	621a      	str	r2, [r3, #32]
}
 8005318:	bf00      	nop
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	f023 0210 	bic.w	r2, r3, #16
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800534e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	031b      	lsls	r3, r3, #12
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005360:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	621a      	str	r2, [r3, #32]
}
 8005378:	bf00      	nop
 800537a:	371c      	adds	r7, #28
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f023 0303 	bic.w	r3, r3, #3
 80053b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80053d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	021b      	lsls	r3, r3, #8
 80053da:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	621a      	str	r2, [r3, #32]
}
 80053f0:	bf00      	nop
 80053f2:	371c      	adds	r7, #28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005428:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	021b      	lsls	r3, r3, #8
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4313      	orrs	r3, r2
 8005432:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800543a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	031b      	lsls	r3, r3, #12
 8005440:	b29b      	uxth	r3, r3
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800544e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	031b      	lsls	r3, r3, #12
 8005454:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	621a      	str	r2, [r3, #32]
}
 800546a:	bf00      	nop
 800546c:	371c      	adds	r7, #28
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005476:	b480      	push	{r7}
 8005478:	b085      	sub	sp, #20
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	f043 0307 	orr.w	r3, r3, #7
 8005498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	609a      	str	r2, [r3, #8]
}
 80054a0:	bf00      	nop
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
 80054b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	021a      	lsls	r2, r3, #8
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	431a      	orrs	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	609a      	str	r2, [r3, #8]
}
 80054e0:	bf00      	nop
 80054e2:	371c      	adds	r7, #28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f003 031f 	and.w	r3, r3, #31
 80054fe:	2201      	movs	r2, #1
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a1a      	ldr	r2, [r3, #32]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	43db      	mvns	r3, r3
 800550e:	401a      	ands	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a1a      	ldr	r2, [r3, #32]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f003 031f 	and.w	r3, r3, #31
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	fa01 f303 	lsl.w	r3, r1, r3
 8005524:	431a      	orrs	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	621a      	str	r2, [r3, #32]
}
 800552a:	bf00      	nop
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
	...

08005538 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d109      	bne.n	800555c <HAL_TIMEx_PWMN_Start+0x24>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b01      	cmp	r3, #1
 8005552:	bf14      	ite	ne
 8005554:	2301      	movne	r3, #1
 8005556:	2300      	moveq	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	e022      	b.n	80055a2 <HAL_TIMEx_PWMN_Start+0x6a>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2b04      	cmp	r3, #4
 8005560:	d109      	bne.n	8005576 <HAL_TIMEx_PWMN_Start+0x3e>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b01      	cmp	r3, #1
 800556c:	bf14      	ite	ne
 800556e:	2301      	movne	r3, #1
 8005570:	2300      	moveq	r3, #0
 8005572:	b2db      	uxtb	r3, r3
 8005574:	e015      	b.n	80055a2 <HAL_TIMEx_PWMN_Start+0x6a>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b08      	cmp	r3, #8
 800557a:	d109      	bne.n	8005590 <HAL_TIMEx_PWMN_Start+0x58>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b01      	cmp	r3, #1
 8005586:	bf14      	ite	ne
 8005588:	2301      	movne	r3, #1
 800558a:	2300      	moveq	r3, #0
 800558c:	b2db      	uxtb	r3, r3
 800558e:	e008      	b.n	80055a2 <HAL_TIMEx_PWMN_Start+0x6a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b01      	cmp	r3, #1
 800559a:	bf14      	ite	ne
 800559c:	2301      	movne	r3, #1
 800559e:	2300      	moveq	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e05f      	b.n	800566a <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d104      	bne.n	80055ba <HAL_TIMEx_PWMN_Start+0x82>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055b8:	e013      	b.n	80055e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d104      	bne.n	80055ca <HAL_TIMEx_PWMN_Start+0x92>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055c8:	e00b      	b.n	80055e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d104      	bne.n	80055da <HAL_TIMEx_PWMN_Start+0xa2>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055d8:	e003      	b.n	80055e2 <HAL_TIMEx_PWMN_Start+0xaa>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2202      	movs	r2, #2
 80055de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2204      	movs	r2, #4
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 f930 	bl	8005850 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a1b      	ldr	r2, [pc, #108]	; (8005674 <HAL_TIMEx_PWMN_Start+0x13c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d00e      	beq.n	8005628 <HAL_TIMEx_PWMN_Start+0xf0>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005612:	d009      	beq.n	8005628 <HAL_TIMEx_PWMN_Start+0xf0>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a17      	ldr	r2, [pc, #92]	; (8005678 <HAL_TIMEx_PWMN_Start+0x140>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d004      	beq.n	8005628 <HAL_TIMEx_PWMN_Start+0xf0>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a16      	ldr	r2, [pc, #88]	; (800567c <HAL_TIMEx_PWMN_Start+0x144>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d115      	bne.n	8005654 <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	4b14      	ldr	r3, [pc, #80]	; (8005680 <HAL_TIMEx_PWMN_Start+0x148>)
 8005630:	4013      	ands	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b06      	cmp	r3, #6
 8005638:	d015      	beq.n	8005666 <HAL_TIMEx_PWMN_Start+0x12e>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005640:	d011      	beq.n	8005666 <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0201 	orr.w	r2, r2, #1
 8005650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005652:	e008      	b.n	8005666 <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	e000      	b.n	8005668 <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005666:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40012c00 	.word	0x40012c00
 8005678:	40000400 	.word	0x40000400
 800567c:	40014000 	.word	0x40014000
 8005680:	00010007 	.word	0x00010007

08005684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005698:	2302      	movs	r3, #2
 800569a:	e054      	b.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a24      	ldr	r2, [pc, #144]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d108      	bne.n	80056d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80056cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a17      	ldr	r2, [pc, #92]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00e      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005704:	d009      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a13      	ldr	r2, [pc, #76]	; (8005758 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d004      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a11      	ldr	r2, [pc, #68]	; (800575c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d10c      	bne.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005720:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	4313      	orrs	r3, r2
 800572a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40012c00 	.word	0x40012c00
 8005758:	40000400 	.word	0x40000400
 800575c:	40014000 	.word	0x40014000

08005760 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005778:	2302      	movs	r3, #2
 800577a:	e060      	b.n	800583e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	041b      	lsls	r3, r3, #16
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a14      	ldr	r2, [pc, #80]	; (800584c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d115      	bne.n	800582c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	051b      	lsls	r3, r3, #20
 800580c:	4313      	orrs	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40012c00 	.word	0x40012c00

08005850 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 031f 	and.w	r3, r3, #31
 8005862:	2204      	movs	r2, #4
 8005864:	fa02 f303 	lsl.w	r3, r2, r3
 8005868:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a1a      	ldr	r2, [r3, #32]
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	43db      	mvns	r3, r3
 8005872:	401a      	ands	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a1a      	ldr	r2, [r3, #32]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f003 031f 	and.w	r3, r3, #31
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	fa01 f303 	lsl.w	r3, r1, r3
 8005888:	431a      	orrs	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	621a      	str	r2, [r3, #32]
}
 800588e:	bf00      	nop
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b082      	sub	sp, #8
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e040      	b.n	800592e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d106      	bne.n	80058c2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7fb fa95 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2224      	movs	r2, #36	; 0x24
 80058c6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0201 	bic.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f8c1 	bl	8005a60 <UART_SetConfig>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d101      	bne.n	80058e8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e022      	b.n	800592e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f9eb 	bl	8005ccc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005904:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005914:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f042 0201 	orr.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 fa72 	bl	8005e10 <UART_CheckIdleState>
 800592c:	4603      	mov	r3, r0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b08a      	sub	sp, #40	; 0x28
 800593a:	af02      	add	r7, sp, #8
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	603b      	str	r3, [r7, #0]
 8005942:	4613      	mov	r3, r2
 8005944:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800594a:	2b20      	cmp	r3, #32
 800594c:	f040 8082 	bne.w	8005a54 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <HAL_UART_Transmit+0x26>
 8005956:	88fb      	ldrh	r3, [r7, #6]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e07a      	b.n	8005a56 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <HAL_UART_Transmit+0x38>
 800596a:	2302      	movs	r3, #2
 800596c:	e073      	b.n	8005a56 <HAL_UART_Transmit+0x120>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2221      	movs	r2, #33	; 0x21
 8005982:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005984:	f7fb fb40 	bl	8001008 <HAL_GetTick>
 8005988:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	88fa      	ldrh	r2, [r7, #6]
 800598e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	88fa      	ldrh	r2, [r7, #6]
 8005996:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a2:	d108      	bne.n	80059b6 <HAL_UART_Transmit+0x80>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d104      	bne.n	80059b6 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	61bb      	str	r3, [r7, #24]
 80059b4:	e003      	b.n	80059be <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80059c6:	e02d      	b.n	8005a24 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2200      	movs	r2, #0
 80059d0:	2180      	movs	r1, #128	; 0x80
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 fa65 	bl	8005ea2 <UART_WaitOnFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e039      	b.n	8005a56 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10b      	bne.n	8005a00 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	881a      	ldrh	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059f4:	b292      	uxth	r2, r2
 80059f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	3302      	adds	r3, #2
 80059fc:	61bb      	str	r3, [r7, #24]
 80059fe:	e008      	b.n	8005a12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	781a      	ldrb	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	b292      	uxth	r2, r2
 8005a0a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1cb      	bne.n	80059c8 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	2200      	movs	r2, #0
 8005a38:	2140      	movs	r1, #64	; 0x40
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fa31 	bl	8005ea2 <UART_WaitOnFlagUntilTimeout>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e005      	b.n	8005a56 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	e000      	b.n	8005a56 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005a54:	2302      	movs	r3, #2
  }
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3720      	adds	r7, #32
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b088      	sub	sp, #32
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	4b8a      	ldr	r3, [pc, #552]	; (8005cb4 <UART_SetConfig+0x254>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	6979      	ldr	r1, [r7, #20]
 8005a94:	430b      	orrs	r3, r1
 8005a96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a78      	ldr	r2, [pc, #480]	; (8005cb8 <UART_SetConfig+0x258>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d120      	bne.n	8005b1e <UART_SetConfig+0xbe>
 8005adc:	4b77      	ldr	r3, [pc, #476]	; (8005cbc <UART_SetConfig+0x25c>)
 8005ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae0:	f003 0303 	and.w	r3, r3, #3
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d817      	bhi.n	8005b18 <UART_SetConfig+0xb8>
 8005ae8:	a201      	add	r2, pc, #4	; (adr r2, 8005af0 <UART_SetConfig+0x90>)
 8005aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aee:	bf00      	nop
 8005af0:	08005b01 	.word	0x08005b01
 8005af4:	08005b0d 	.word	0x08005b0d
 8005af8:	08005b13 	.word	0x08005b13
 8005afc:	08005b07 	.word	0x08005b07
 8005b00:	2300      	movs	r3, #0
 8005b02:	77fb      	strb	r3, [r7, #31]
 8005b04:	e01d      	b.n	8005b42 <UART_SetConfig+0xe2>
 8005b06:	2302      	movs	r3, #2
 8005b08:	77fb      	strb	r3, [r7, #31]
 8005b0a:	e01a      	b.n	8005b42 <UART_SetConfig+0xe2>
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	77fb      	strb	r3, [r7, #31]
 8005b10:	e017      	b.n	8005b42 <UART_SetConfig+0xe2>
 8005b12:	2308      	movs	r3, #8
 8005b14:	77fb      	strb	r3, [r7, #31]
 8005b16:	e014      	b.n	8005b42 <UART_SetConfig+0xe2>
 8005b18:	2310      	movs	r3, #16
 8005b1a:	77fb      	strb	r3, [r7, #31]
 8005b1c:	e011      	b.n	8005b42 <UART_SetConfig+0xe2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a67      	ldr	r2, [pc, #412]	; (8005cc0 <UART_SetConfig+0x260>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d102      	bne.n	8005b2e <UART_SetConfig+0xce>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	77fb      	strb	r3, [r7, #31]
 8005b2c:	e009      	b.n	8005b42 <UART_SetConfig+0xe2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a64      	ldr	r2, [pc, #400]	; (8005cc4 <UART_SetConfig+0x264>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d102      	bne.n	8005b3e <UART_SetConfig+0xde>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	77fb      	strb	r3, [r7, #31]
 8005b3c:	e001      	b.n	8005b42 <UART_SetConfig+0xe2>
 8005b3e:	2310      	movs	r3, #16
 8005b40:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b4a:	d15b      	bne.n	8005c04 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005b4c:	7ffb      	ldrb	r3, [r7, #31]
 8005b4e:	2b08      	cmp	r3, #8
 8005b50:	d827      	bhi.n	8005ba2 <UART_SetConfig+0x142>
 8005b52:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <UART_SetConfig+0xf8>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b7d 	.word	0x08005b7d
 8005b5c:	08005b85 	.word	0x08005b85
 8005b60:	08005b8d 	.word	0x08005b8d
 8005b64:	08005ba3 	.word	0x08005ba3
 8005b68:	08005b93 	.word	0x08005b93
 8005b6c:	08005ba3 	.word	0x08005ba3
 8005b70:	08005ba3 	.word	0x08005ba3
 8005b74:	08005ba3 	.word	0x08005ba3
 8005b78:	08005b9b 	.word	0x08005b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b7c:	f7fd fd5c 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 8005b80:	61b8      	str	r0, [r7, #24]
        break;
 8005b82:	e013      	b.n	8005bac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b84:	f7fd fd7a 	bl	800367c <HAL_RCC_GetPCLK2Freq>
 8005b88:	61b8      	str	r0, [r7, #24]
        break;
 8005b8a:	e00f      	b.n	8005bac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b8c:	4b4e      	ldr	r3, [pc, #312]	; (8005cc8 <UART_SetConfig+0x268>)
 8005b8e:	61bb      	str	r3, [r7, #24]
        break;
 8005b90:	e00c      	b.n	8005bac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b92:	f7fd fcd9 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8005b96:	61b8      	str	r0, [r7, #24]
        break;
 8005b98:	e008      	b.n	8005bac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b9e:	61bb      	str	r3, [r7, #24]
        break;
 8005ba0:	e004      	b.n	8005bac <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	77bb      	strb	r3, [r7, #30]
        break;
 8005baa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d074      	beq.n	8005c9c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	005a      	lsls	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	085b      	lsrs	r3, r3, #1
 8005bbc:	441a      	add	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	2b0f      	cmp	r3, #15
 8005bce:	d916      	bls.n	8005bfe <UART_SetConfig+0x19e>
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd6:	d212      	bcs.n	8005bfe <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	f023 030f 	bic.w	r3, r3, #15
 8005be0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	085b      	lsrs	r3, r3, #1
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	89fb      	ldrh	r3, [r7, #14]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	89fa      	ldrh	r2, [r7, #14]
 8005bfa:	60da      	str	r2, [r3, #12]
 8005bfc:	e04e      	b.n	8005c9c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	77bb      	strb	r3, [r7, #30]
 8005c02:	e04b      	b.n	8005c9c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c04:	7ffb      	ldrb	r3, [r7, #31]
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d827      	bhi.n	8005c5a <UART_SetConfig+0x1fa>
 8005c0a:	a201      	add	r2, pc, #4	; (adr r2, 8005c10 <UART_SetConfig+0x1b0>)
 8005c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c10:	08005c35 	.word	0x08005c35
 8005c14:	08005c3d 	.word	0x08005c3d
 8005c18:	08005c45 	.word	0x08005c45
 8005c1c:	08005c5b 	.word	0x08005c5b
 8005c20:	08005c4b 	.word	0x08005c4b
 8005c24:	08005c5b 	.word	0x08005c5b
 8005c28:	08005c5b 	.word	0x08005c5b
 8005c2c:	08005c5b 	.word	0x08005c5b
 8005c30:	08005c53 	.word	0x08005c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c34:	f7fd fd00 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 8005c38:	61b8      	str	r0, [r7, #24]
        break;
 8005c3a:	e013      	b.n	8005c64 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c3c:	f7fd fd1e 	bl	800367c <HAL_RCC_GetPCLK2Freq>
 8005c40:	61b8      	str	r0, [r7, #24]
        break;
 8005c42:	e00f      	b.n	8005c64 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c44:	4b20      	ldr	r3, [pc, #128]	; (8005cc8 <UART_SetConfig+0x268>)
 8005c46:	61bb      	str	r3, [r7, #24]
        break;
 8005c48:	e00c      	b.n	8005c64 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c4a:	f7fd fc7d 	bl	8003548 <HAL_RCC_GetSysClockFreq>
 8005c4e:	61b8      	str	r0, [r7, #24]
        break;
 8005c50:	e008      	b.n	8005c64 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c56:	61bb      	str	r3, [r7, #24]
        break;
 8005c58:	e004      	b.n	8005c64 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	77bb      	strb	r3, [r7, #30]
        break;
 8005c62:	bf00      	nop
    }

    if (pclk != 0U)
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d018      	beq.n	8005c9c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	085a      	lsrs	r2, r3, #1
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	441a      	add	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	2b0f      	cmp	r3, #15
 8005c84:	d908      	bls.n	8005c98 <UART_SetConfig+0x238>
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c8c:	d204      	bcs.n	8005c98 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	60da      	str	r2, [r3, #12]
 8005c96:	e001      	b.n	8005c9c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ca8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3720      	adds	r7, #32
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	efff69f3 	.word	0xefff69f3
 8005cb8:	40013800 	.word	0x40013800
 8005cbc:	40021000 	.word	0x40021000
 8005cc0:	40004400 	.word	0x40004400
 8005cc4:	40004800 	.word	0x40004800
 8005cc8:	007a1200 	.word	0x007a1200

08005ccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00a      	beq.n	8005cf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00a      	beq.n	8005d3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	f003 0308 	and.w	r3, r3, #8
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00a      	beq.n	8005d5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	f003 0310 	and.w	r3, r3, #16
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00a      	beq.n	8005d7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d01a      	beq.n	8005de2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dca:	d10a      	bne.n	8005de2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	605a      	str	r2, [r3, #4]
  }
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af02      	add	r7, sp, #8
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e20:	f7fb f8f2 	bl	8001008 <HAL_GetTick>
 8005e24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0308 	and.w	r3, r3, #8
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d10e      	bne.n	8005e52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f82d 	bl	8005ea2 <UART_WaitOnFlagUntilTimeout>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e023      	b.n	8005e9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0304 	and.w	r3, r3, #4
 8005e5c:	2b04      	cmp	r3, #4
 8005e5e:	d10e      	bne.n	8005e7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f817 	bl	8005ea2 <UART_WaitOnFlagUntilTimeout>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e00d      	b.n	8005e9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2220      	movs	r2, #32
 8005e82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2220      	movs	r2, #32
 8005e88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b09c      	sub	sp, #112	; 0x70
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	603b      	str	r3, [r7, #0]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb2:	e0a5      	b.n	8006000 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eba:	f000 80a1 	beq.w	8006000 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ebe:	f7fb f8a3 	bl	8001008 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d302      	bcc.n	8005ed4 <UART_WaitOnFlagUntilTimeout+0x32>
 8005ece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d13e      	bne.n	8005f52 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005edc:	e853 3f00 	ldrex	r3, [r3]
 8005ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ee8:	667b      	str	r3, [r7, #100]	; 0x64
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ef4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ef8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e6      	bne.n	8005ed4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f18:	f023 0301 	bic.w	r3, r3, #1
 8005f1c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3308      	adds	r3, #8
 8005f24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f26:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f2e:	e841 2300 	strex	r3, r2, [r1]
 8005f32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e5      	bne.n	8005f06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2220      	movs	r2, #32
 8005f44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e067      	b.n	8006022 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d04f      	beq.n	8006000 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f6e:	d147      	bne.n	8006000 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	e853 3f00 	ldrex	r3, [r3]
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fa0:	e841 2300 	strex	r3, r2, [r1]
 8005fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1e6      	bne.n	8005f7a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	613b      	str	r3, [r7, #16]
   return(result);
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f023 0301 	bic.w	r3, r3, #1
 8005fc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3308      	adds	r3, #8
 8005fca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005fcc:	623a      	str	r2, [r7, #32]
 8005fce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	69f9      	ldr	r1, [r7, #28]
 8005fd2:	6a3a      	ldr	r2, [r7, #32]
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e5      	bne.n	8005fac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e010      	b.n	8006022 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	69da      	ldr	r2, [r3, #28]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	4013      	ands	r3, r2
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	429a      	cmp	r2, r3
 800600e:	bf0c      	ite	eq
 8006010:	2301      	moveq	r3, #1
 8006012:	2300      	movne	r3, #0
 8006014:	b2db      	uxtb	r3, r3
 8006016:	461a      	mov	r2, r3
 8006018:	79fb      	ldrb	r3, [r7, #7]
 800601a:	429a      	cmp	r2, r3
 800601c:	f43f af4a 	beq.w	8005eb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3770      	adds	r7, #112	; 0x70
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
	...

0800602c <__libc_init_array>:
 800602c:	b570      	push	{r4, r5, r6, lr}
 800602e:	4d0d      	ldr	r5, [pc, #52]	; (8006064 <__libc_init_array+0x38>)
 8006030:	4c0d      	ldr	r4, [pc, #52]	; (8006068 <__libc_init_array+0x3c>)
 8006032:	1b64      	subs	r4, r4, r5
 8006034:	10a4      	asrs	r4, r4, #2
 8006036:	2600      	movs	r6, #0
 8006038:	42a6      	cmp	r6, r4
 800603a:	d109      	bne.n	8006050 <__libc_init_array+0x24>
 800603c:	4d0b      	ldr	r5, [pc, #44]	; (800606c <__libc_init_array+0x40>)
 800603e:	4c0c      	ldr	r4, [pc, #48]	; (8006070 <__libc_init_array+0x44>)
 8006040:	f000 f820 	bl	8006084 <_init>
 8006044:	1b64      	subs	r4, r4, r5
 8006046:	10a4      	asrs	r4, r4, #2
 8006048:	2600      	movs	r6, #0
 800604a:	42a6      	cmp	r6, r4
 800604c:	d105      	bne.n	800605a <__libc_init_array+0x2e>
 800604e:	bd70      	pop	{r4, r5, r6, pc}
 8006050:	f855 3b04 	ldr.w	r3, [r5], #4
 8006054:	4798      	blx	r3
 8006056:	3601      	adds	r6, #1
 8006058:	e7ee      	b.n	8006038 <__libc_init_array+0xc>
 800605a:	f855 3b04 	ldr.w	r3, [r5], #4
 800605e:	4798      	blx	r3
 8006060:	3601      	adds	r6, #1
 8006062:	e7f2      	b.n	800604a <__libc_init_array+0x1e>
 8006064:	08006104 	.word	0x08006104
 8006068:	08006104 	.word	0x08006104
 800606c:	08006104 	.word	0x08006104
 8006070:	08006108 	.word	0x08006108

08006074 <memset>:
 8006074:	4402      	add	r2, r0
 8006076:	4603      	mov	r3, r0
 8006078:	4293      	cmp	r3, r2
 800607a:	d100      	bne.n	800607e <memset+0xa>
 800607c:	4770      	bx	lr
 800607e:	f803 1b01 	strb.w	r1, [r3], #1
 8006082:	e7f9      	b.n	8006078 <memset+0x4>

08006084 <_init>:
 8006084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006086:	bf00      	nop
 8006088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608a:	bc08      	pop	{r3}
 800608c:	469e      	mov	lr, r3
 800608e:	4770      	bx	lr

08006090 <_fini>:
 8006090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006092:	bf00      	nop
 8006094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006096:	bc08      	pop	{r3}
 8006098:	469e      	mov	lr, r3
 800609a:	4770      	bx	lr
