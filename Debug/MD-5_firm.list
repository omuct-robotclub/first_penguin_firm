
MD-5_firm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dc8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08006f50  08006f50  00016f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000090  08006fbc  08006fbc  00016fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000118  0800704c  0800704c  0001704c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007164  08007164  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007164  08007164  00017164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007168  08007168  00017168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800716c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000220  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000290  20000290  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000115ad  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002331  00000000  00000000  0003164d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e30  00000000  00000000  00033980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d68  00000000  00000000  000347b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d91c  00000000  00000000  00035518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f47  00000000  00000000  00052e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3d4a  00000000  00000000  00063d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00107ac5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c08  00000000  00000000  00107b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006f38 	.word	0x08006f38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08006f38 	.word	0x08006f38

080001c8 <selfrel_offset31>:
 80001c8:	6803      	ldr	r3, [r0, #0]
 80001ca:	005a      	lsls	r2, r3, #1
 80001cc:	bf4c      	ite	mi
 80001ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80001d2:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80001d6:	4418      	add	r0, r3
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop

080001dc <search_EIT_table>:
 80001dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80001e0:	b329      	cbz	r1, 800022e <search_EIT_table+0x52>
 80001e2:	1e4f      	subs	r7, r1, #1
 80001e4:	4604      	mov	r4, r0
 80001e6:	4615      	mov	r5, r2
 80001e8:	463e      	mov	r6, r7
 80001ea:	f04f 0800 	mov.w	r8, #0
 80001ee:	eb08 0106 	add.w	r1, r8, r6
 80001f2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001f6:	1049      	asrs	r1, r1, #1
 80001f8:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 80001fc:	4648      	mov	r0, r9
 80001fe:	f7ff ffe3 	bl	80001c8 <selfrel_offset31>
 8000202:	4603      	mov	r3, r0
 8000204:	00c8      	lsls	r0, r1, #3
 8000206:	3008      	adds	r0, #8
 8000208:	428f      	cmp	r7, r1
 800020a:	4420      	add	r0, r4
 800020c:	d009      	beq.n	8000222 <search_EIT_table+0x46>
 800020e:	42ab      	cmp	r3, r5
 8000210:	d809      	bhi.n	8000226 <search_EIT_table+0x4a>
 8000212:	f7ff ffd9 	bl	80001c8 <selfrel_offset31>
 8000216:	3801      	subs	r0, #1
 8000218:	42a8      	cmp	r0, r5
 800021a:	d20a      	bcs.n	8000232 <search_EIT_table+0x56>
 800021c:	f101 0801 	add.w	r8, r1, #1
 8000220:	e7e5      	b.n	80001ee <search_EIT_table+0x12>
 8000222:	42ab      	cmp	r3, r5
 8000224:	d905      	bls.n	8000232 <search_EIT_table+0x56>
 8000226:	4588      	cmp	r8, r1
 8000228:	d001      	beq.n	800022e <search_EIT_table+0x52>
 800022a:	1e4e      	subs	r6, r1, #1
 800022c:	e7df      	b.n	80001ee <search_EIT_table+0x12>
 800022e:	f04f 0900 	mov.w	r9, #0
 8000232:	4648      	mov	r0, r9
 8000234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000238 <__gnu_unwind_get_pr_addr>:
 8000238:	2801      	cmp	r0, #1
 800023a:	d007      	beq.n	800024c <__gnu_unwind_get_pr_addr+0x14>
 800023c:	2802      	cmp	r0, #2
 800023e:	d007      	beq.n	8000250 <__gnu_unwind_get_pr_addr+0x18>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__gnu_unwind_get_pr_addr+0x1c>)
 8000242:	2800      	cmp	r0, #0
 8000244:	bf0c      	ite	eq
 8000246:	4618      	moveq	r0, r3
 8000248:	2000      	movne	r0, #0
 800024a:	4770      	bx	lr
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__gnu_unwind_get_pr_addr+0x20>)
 800024e:	4770      	bx	lr
 8000250:	4802      	ldr	r0, [pc, #8]	; (800025c <__gnu_unwind_get_pr_addr+0x24>)
 8000252:	4770      	bx	lr
 8000254:	080008fd 	.word	0x080008fd
 8000258:	08000901 	.word	0x08000901
 800025c:	08000905 	.word	0x08000905

08000260 <get_eit_entry>:
 8000260:	b530      	push	{r4, r5, lr}
 8000262:	4b23      	ldr	r3, [pc, #140]	; (80002f0 <get_eit_entry+0x90>)
 8000264:	b083      	sub	sp, #12
 8000266:	4604      	mov	r4, r0
 8000268:	1e8d      	subs	r5, r1, #2
 800026a:	b33b      	cbz	r3, 80002bc <get_eit_entry+0x5c>
 800026c:	a901      	add	r1, sp, #4
 800026e:	4628      	mov	r0, r5
 8000270:	f3af 8000 	nop.w
 8000274:	b1e8      	cbz	r0, 80002b2 <get_eit_entry+0x52>
 8000276:	9901      	ldr	r1, [sp, #4]
 8000278:	462a      	mov	r2, r5
 800027a:	f7ff ffaf 	bl	80001dc <search_EIT_table>
 800027e:	4601      	mov	r1, r0
 8000280:	b1b8      	cbz	r0, 80002b2 <get_eit_entry+0x52>
 8000282:	f7ff ffa1 	bl	80001c8 <selfrel_offset31>
 8000286:	684b      	ldr	r3, [r1, #4]
 8000288:	64a0      	str	r0, [r4, #72]	; 0x48
 800028a:	2b01      	cmp	r3, #1
 800028c:	d02b      	beq.n	80002e6 <get_eit_entry+0x86>
 800028e:	2b00      	cmp	r3, #0
 8000290:	f101 0004 	add.w	r0, r1, #4
 8000294:	db23      	blt.n	80002de <get_eit_entry+0x7e>
 8000296:	f7ff ff97 	bl	80001c8 <selfrel_offset31>
 800029a:	2300      	movs	r3, #0
 800029c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80002a0:	6803      	ldr	r3, [r0, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	db10      	blt.n	80002c8 <get_eit_entry+0x68>
 80002a6:	f7ff ff8f 	bl	80001c8 <selfrel_offset31>
 80002aa:	6120      	str	r0, [r4, #16]
 80002ac:	2000      	movs	r0, #0
 80002ae:	b003      	add	sp, #12
 80002b0:	bd30      	pop	{r4, r5, pc}
 80002b2:	2300      	movs	r3, #0
 80002b4:	2009      	movs	r0, #9
 80002b6:	6123      	str	r3, [r4, #16]
 80002b8:	b003      	add	sp, #12
 80002ba:	bd30      	pop	{r4, r5, pc}
 80002bc:	490d      	ldr	r1, [pc, #52]	; (80002f4 <get_eit_entry+0x94>)
 80002be:	480e      	ldr	r0, [pc, #56]	; (80002f8 <get_eit_entry+0x98>)
 80002c0:	1a09      	subs	r1, r1, r0
 80002c2:	10c9      	asrs	r1, r1, #3
 80002c4:	9101      	str	r1, [sp, #4]
 80002c6:	e7d7      	b.n	8000278 <get_eit_entry+0x18>
 80002c8:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80002cc:	f7ff ffb4 	bl	8000238 <__gnu_unwind_get_pr_addr>
 80002d0:	2800      	cmp	r0, #0
 80002d2:	6120      	str	r0, [r4, #16]
 80002d4:	bf14      	ite	ne
 80002d6:	2000      	movne	r0, #0
 80002d8:	2009      	moveq	r0, #9
 80002da:	b003      	add	sp, #12
 80002dc:	bd30      	pop	{r4, r5, pc}
 80002de:	2301      	movs	r3, #1
 80002e0:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80002e4:	e7dc      	b.n	80002a0 <get_eit_entry+0x40>
 80002e6:	2300      	movs	r3, #0
 80002e8:	6123      	str	r3, [r4, #16]
 80002ea:	2005      	movs	r0, #5
 80002ec:	e7df      	b.n	80002ae <get_eit_entry+0x4e>
 80002ee:	bf00      	nop
 80002f0:	00000000 	.word	0x00000000
 80002f4:	08007164 	.word	0x08007164
 80002f8:	0800704c 	.word	0x0800704c

080002fc <restore_non_core_regs>:
 80002fc:	6803      	ldr	r3, [r0, #0]
 80002fe:	07da      	lsls	r2, r3, #31
 8000300:	b510      	push	{r4, lr}
 8000302:	4604      	mov	r4, r0
 8000304:	d406      	bmi.n	8000314 <restore_non_core_regs+0x18>
 8000306:	079b      	lsls	r3, r3, #30
 8000308:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800030c:	d509      	bpl.n	8000322 <restore_non_core_regs+0x26>
 800030e:	f000 fc4b 	bl	8000ba8 <__gnu_Unwind_Restore_VFP_D>
 8000312:	6823      	ldr	r3, [r4, #0]
 8000314:	0759      	lsls	r1, r3, #29
 8000316:	d509      	bpl.n	800032c <restore_non_core_regs+0x30>
 8000318:	071a      	lsls	r2, r3, #28
 800031a:	d50e      	bpl.n	800033a <restore_non_core_regs+0x3e>
 800031c:	06db      	lsls	r3, r3, #27
 800031e:	d513      	bpl.n	8000348 <restore_non_core_regs+0x4c>
 8000320:	bd10      	pop	{r4, pc}
 8000322:	f000 fc39 	bl	8000b98 <__gnu_Unwind_Restore_VFP>
 8000326:	6823      	ldr	r3, [r4, #0]
 8000328:	0759      	lsls	r1, r3, #29
 800032a:	d4f5      	bmi.n	8000318 <restore_non_core_regs+0x1c>
 800032c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000330:	f000 fc42 	bl	8000bb8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000334:	6823      	ldr	r3, [r4, #0]
 8000336:	071a      	lsls	r2, r3, #28
 8000338:	d4f0      	bmi.n	800031c <restore_non_core_regs+0x20>
 800033a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800033e:	f000 fc43 	bl	8000bc8 <__gnu_Unwind_Restore_WMMXD>
 8000342:	6823      	ldr	r3, [r4, #0]
 8000344:	06db      	lsls	r3, r3, #27
 8000346:	d4eb      	bmi.n	8000320 <restore_non_core_regs+0x24>
 8000348:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800034c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000350:	f000 bc7e 	b.w	8000c50 <__gnu_Unwind_Restore_WMMXC>

08000354 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000354:	4603      	mov	r3, r0
 8000356:	6800      	ldr	r0, [r0, #0]
 8000358:	b100      	cbz	r0, 800035c <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 800035a:	4418      	add	r0, r3
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__gnu_unwind_24bit.isra.0>:
 8000360:	2009      	movs	r0, #9
 8000362:	4770      	bx	lr

08000364 <_Unwind_DebugHook>:
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop

08000368 <unwind_phase2>:
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	4604      	mov	r4, r0
 800036c:	460e      	mov	r6, r1
 800036e:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000370:	4620      	mov	r0, r4
 8000372:	f7ff ff75 	bl	8000260 <get_eit_entry>
 8000376:	4605      	mov	r5, r0
 8000378:	b988      	cbnz	r0, 800039e <unwind_phase2+0x36>
 800037a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800037c:	6163      	str	r3, [r4, #20]
 800037e:	4632      	mov	r2, r6
 8000380:	6923      	ldr	r3, [r4, #16]
 8000382:	4621      	mov	r1, r4
 8000384:	2001      	movs	r0, #1
 8000386:	4798      	blx	r3
 8000388:	2808      	cmp	r0, #8
 800038a:	d0f0      	beq.n	800036e <unwind_phase2+0x6>
 800038c:	2807      	cmp	r0, #7
 800038e:	d106      	bne.n	800039e <unwind_phase2+0x36>
 8000390:	4628      	mov	r0, r5
 8000392:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000394:	f7ff ffe6 	bl	8000364 <_Unwind_DebugHook>
 8000398:	1d30      	adds	r0, r6, #4
 800039a:	f000 fbf1 	bl	8000b80 <__restore_core_regs>
 800039e:	f006 fd71 	bl	8006e84 <abort>
 80003a2:	bf00      	nop

080003a4 <unwind_phase2_forced>:
 80003a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003a8:	1d0d      	adds	r5, r1, #4
 80003aa:	4606      	mov	r6, r0
 80003ac:	4614      	mov	r4, r2
 80003ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003b0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80003b4:	f10d 0c0c 	add.w	ip, sp, #12
 80003b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80003cc:	ad02      	add	r5, sp, #8
 80003ce:	68f7      	ldr	r7, [r6, #12]
 80003d0:	f8d6 8018 	ldr.w	r8, [r6, #24]
 80003d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80003d8:	2300      	movs	r3, #0
 80003da:	602b      	str	r3, [r5, #0]
 80003dc:	e021      	b.n	8000422 <unwind_phase2_forced+0x7e>
 80003de:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80003e0:	6173      	str	r3, [r6, #20]
 80003e2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003e6:	4629      	mov	r1, r5
 80003e8:	a87a      	add	r0, sp, #488	; 0x1e8
 80003ea:	f006 fd52 	bl	8006e92 <memcpy>
 80003ee:	6933      	ldr	r3, [r6, #16]
 80003f0:	aa7a      	add	r2, sp, #488	; 0x1e8
 80003f2:	4631      	mov	r1, r6
 80003f4:	4650      	mov	r0, sl
 80003f6:	4798      	blx	r3
 80003f8:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80003fa:	e9cd 5800 	strd	r5, r8, [sp]
 80003fe:	4621      	mov	r1, r4
 8000400:	646b      	str	r3, [r5, #68]	; 0x44
 8000402:	4681      	mov	r9, r0
 8000404:	4633      	mov	r3, r6
 8000406:	4632      	mov	r2, r6
 8000408:	2001      	movs	r0, #1
 800040a:	47b8      	blx	r7
 800040c:	4604      	mov	r4, r0
 800040e:	b9e8      	cbnz	r0, 800044c <unwind_phase2_forced+0xa8>
 8000410:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000414:	a97a      	add	r1, sp, #488	; 0x1e8
 8000416:	4628      	mov	r0, r5
 8000418:	f006 fd3b 	bl	8006e92 <memcpy>
 800041c:	f1b9 0f08 	cmp.w	r9, #8
 8000420:	d11b      	bne.n	800045a <unwind_phase2_forced+0xb6>
 8000422:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000424:	4630      	mov	r0, r6
 8000426:	f7ff ff1b 	bl	8000260 <get_eit_entry>
 800042a:	3409      	adds	r4, #9
 800042c:	fa5f fa84 	uxtb.w	sl, r4
 8000430:	4681      	mov	r9, r0
 8000432:	2800      	cmp	r0, #0
 8000434:	d0d3      	beq.n	80003de <unwind_phase2_forced+0x3a>
 8000436:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000438:	f04a 0110 	orr.w	r1, sl, #16
 800043c:	e9cd 5800 	strd	r5, r8, [sp]
 8000440:	4632      	mov	r2, r6
 8000442:	646b      	str	r3, [r5, #68]	; 0x44
 8000444:	2001      	movs	r0, #1
 8000446:	4633      	mov	r3, r6
 8000448:	47b8      	blx	r7
 800044a:	b108      	cbz	r0, 8000450 <unwind_phase2_forced+0xac>
 800044c:	f04f 0909 	mov.w	r9, #9
 8000450:	4648      	mov	r0, r9
 8000452:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1b9 0f07 	cmp.w	r9, #7
 800045e:	d1f5      	bne.n	800044c <unwind_phase2_forced+0xa8>
 8000460:	4620      	mov	r0, r4
 8000462:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000464:	f7ff ff7e 	bl	8000364 <_Unwind_DebugHook>
 8000468:	a803      	add	r0, sp, #12
 800046a:	f000 fb89 	bl	8000b80 <__restore_core_regs>
 800046e:	bf00      	nop

08000470 <_Unwind_GetCFA>:
 8000470:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000472:	4770      	bx	lr

08000474 <__gnu_Unwind_RaiseException>:
 8000474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000476:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000478:	640b      	str	r3, [r1, #64]	; 0x40
 800047a:	1d0e      	adds	r6, r1, #4
 800047c:	460f      	mov	r7, r1
 800047e:	4605      	mov	r5, r0
 8000480:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000482:	b0f9      	sub	sp, #484	; 0x1e4
 8000484:	ac01      	add	r4, sp, #4
 8000486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000488:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800048a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800048c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800048e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000490:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000494:	f04f 36ff 	mov.w	r6, #4294967295
 8000498:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800049c:	9600      	str	r6, [sp, #0]
 800049e:	e006      	b.n	80004ae <__gnu_Unwind_RaiseException+0x3a>
 80004a0:	692b      	ldr	r3, [r5, #16]
 80004a2:	466a      	mov	r2, sp
 80004a4:	4629      	mov	r1, r5
 80004a6:	4798      	blx	r3
 80004a8:	2808      	cmp	r0, #8
 80004aa:	4604      	mov	r4, r0
 80004ac:	d108      	bne.n	80004c0 <__gnu_Unwind_RaiseException+0x4c>
 80004ae:	9910      	ldr	r1, [sp, #64]	; 0x40
 80004b0:	4628      	mov	r0, r5
 80004b2:	f7ff fed5 	bl	8000260 <get_eit_entry>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d0f2      	beq.n	80004a0 <__gnu_Unwind_RaiseException+0x2c>
 80004ba:	2009      	movs	r0, #9
 80004bc:	b079      	add	sp, #484	; 0x1e4
 80004be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c0:	4668      	mov	r0, sp
 80004c2:	f7ff ff1b 	bl	80002fc <restore_non_core_regs>
 80004c6:	2c06      	cmp	r4, #6
 80004c8:	d1f7      	bne.n	80004ba <__gnu_Unwind_RaiseException+0x46>
 80004ca:	4639      	mov	r1, r7
 80004cc:	4628      	mov	r0, r5
 80004ce:	f7ff ff4b 	bl	8000368 <unwind_phase2>
 80004d2:	bf00      	nop

080004d4 <__gnu_Unwind_ForcedUnwind>:
 80004d4:	b430      	push	{r4, r5}
 80004d6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80004d8:	60c1      	str	r1, [r0, #12]
 80004da:	6182      	str	r2, [r0, #24]
 80004dc:	4619      	mov	r1, r3
 80004de:	641d      	str	r5, [r3, #64]	; 0x40
 80004e0:	2200      	movs	r2, #0
 80004e2:	bc30      	pop	{r4, r5}
 80004e4:	e75e      	b.n	80003a4 <unwind_phase2_forced>
 80004e6:	bf00      	nop

080004e8 <__gnu_Unwind_Resume>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	68c6      	ldr	r6, [r0, #12]
 80004ec:	6943      	ldr	r3, [r0, #20]
 80004ee:	640b      	str	r3, [r1, #64]	; 0x40
 80004f0:	b9ae      	cbnz	r6, 800051e <__gnu_Unwind_Resume+0x36>
 80004f2:	6903      	ldr	r3, [r0, #16]
 80004f4:	460a      	mov	r2, r1
 80004f6:	4604      	mov	r4, r0
 80004f8:	460d      	mov	r5, r1
 80004fa:	4601      	mov	r1, r0
 80004fc:	2002      	movs	r0, #2
 80004fe:	4798      	blx	r3
 8000500:	2807      	cmp	r0, #7
 8000502:	d005      	beq.n	8000510 <__gnu_Unwind_Resume+0x28>
 8000504:	2808      	cmp	r0, #8
 8000506:	d10f      	bne.n	8000528 <__gnu_Unwind_Resume+0x40>
 8000508:	4629      	mov	r1, r5
 800050a:	4620      	mov	r0, r4
 800050c:	f7ff ff2c 	bl	8000368 <unwind_phase2>
 8000510:	4630      	mov	r0, r6
 8000512:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000514:	f7ff ff26 	bl	8000364 <_Unwind_DebugHook>
 8000518:	1d28      	adds	r0, r5, #4
 800051a:	f000 fb31 	bl	8000b80 <__restore_core_regs>
 800051e:	2201      	movs	r2, #1
 8000520:	f7ff ff40 	bl	80003a4 <unwind_phase2_forced>
 8000524:	f006 fcae 	bl	8006e84 <abort>
 8000528:	f006 fcac 	bl	8006e84 <abort>

0800052c <__gnu_Unwind_Resume_or_Rethrow>:
 800052c:	68c2      	ldr	r2, [r0, #12]
 800052e:	b11a      	cbz	r2, 8000538 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000530:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000532:	640a      	str	r2, [r1, #64]	; 0x40
 8000534:	2200      	movs	r2, #0
 8000536:	e735      	b.n	80003a4 <unwind_phase2_forced>
 8000538:	e79c      	b.n	8000474 <__gnu_Unwind_RaiseException>
 800053a:	bf00      	nop

0800053c <_Unwind_Complete>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <_Unwind_DeleteException>:
 8000540:	6883      	ldr	r3, [r0, #8]
 8000542:	4601      	mov	r1, r0
 8000544:	b10b      	cbz	r3, 800054a <_Unwind_DeleteException+0xa>
 8000546:	2001      	movs	r0, #1
 8000548:	4718      	bx	r3
 800054a:	4770      	bx	lr

0800054c <_Unwind_VRS_Get>:
 800054c:	2901      	cmp	r1, #1
 800054e:	d012      	beq.n	8000576 <_Unwind_VRS_Get+0x2a>
 8000550:	d809      	bhi.n	8000566 <_Unwind_VRS_Get+0x1a>
 8000552:	b973      	cbnz	r3, 8000572 <_Unwind_VRS_Get+0x26>
 8000554:	2a0f      	cmp	r2, #15
 8000556:	d80c      	bhi.n	8000572 <_Unwind_VRS_Get+0x26>
 8000558:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800055c:	4618      	mov	r0, r3
 800055e:	6853      	ldr	r3, [r2, #4]
 8000560:	9a00      	ldr	r2, [sp, #0]
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4770      	bx	lr
 8000566:	3903      	subs	r1, #3
 8000568:	2901      	cmp	r1, #1
 800056a:	bf94      	ite	ls
 800056c:	2001      	movls	r0, #1
 800056e:	2002      	movhi	r0, #2
 8000570:	4770      	bx	lr
 8000572:	2002      	movs	r0, #2
 8000574:	4770      	bx	lr
 8000576:	4608      	mov	r0, r1
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <_Unwind_GetGR>:
 800057c:	b510      	push	{r4, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	2300      	movs	r3, #0
 8000582:	ac03      	add	r4, sp, #12
 8000584:	460a      	mov	r2, r1
 8000586:	9400      	str	r4, [sp, #0]
 8000588:	4619      	mov	r1, r3
 800058a:	f7ff ffdf 	bl	800054c <_Unwind_VRS_Get>
 800058e:	9803      	ldr	r0, [sp, #12]
 8000590:	b004      	add	sp, #16
 8000592:	bd10      	pop	{r4, pc}

08000594 <_Unwind_VRS_Set>:
 8000594:	2901      	cmp	r1, #1
 8000596:	d012      	beq.n	80005be <_Unwind_VRS_Set+0x2a>
 8000598:	d809      	bhi.n	80005ae <_Unwind_VRS_Set+0x1a>
 800059a:	b973      	cbnz	r3, 80005ba <_Unwind_VRS_Set+0x26>
 800059c:	2a0f      	cmp	r2, #15
 800059e:	d80c      	bhi.n	80005ba <_Unwind_VRS_Set+0x26>
 80005a0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80005a4:	9a00      	ldr	r2, [sp, #0]
 80005a6:	6812      	ldr	r2, [r2, #0]
 80005a8:	6042      	str	r2, [r0, #4]
 80005aa:	4618      	mov	r0, r3
 80005ac:	4770      	bx	lr
 80005ae:	3903      	subs	r1, #3
 80005b0:	2901      	cmp	r1, #1
 80005b2:	bf94      	ite	ls
 80005b4:	2001      	movls	r0, #1
 80005b6:	2002      	movhi	r0, #2
 80005b8:	4770      	bx	lr
 80005ba:	2002      	movs	r0, #2
 80005bc:	4770      	bx	lr
 80005be:	4608      	mov	r0, r1
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <_Unwind_SetGR>:
 80005c4:	b510      	push	{r4, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	2300      	movs	r3, #0
 80005ca:	ac03      	add	r4, sp, #12
 80005cc:	9203      	str	r2, [sp, #12]
 80005ce:	9400      	str	r4, [sp, #0]
 80005d0:	460a      	mov	r2, r1
 80005d2:	4619      	mov	r1, r3
 80005d4:	f7ff ffde 	bl	8000594 <_Unwind_VRS_Set>
 80005d8:	b004      	add	sp, #16
 80005da:	bd10      	pop	{r4, pc}

080005dc <__gnu_Unwind_Backtrace>:
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80005e0:	6413      	str	r3, [r2, #64]	; 0x40
 80005e2:	1d15      	adds	r5, r2, #4
 80005e4:	468c      	mov	ip, r1
 80005e6:	4606      	mov	r6, r0
 80005e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ea:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80005ee:	ac17      	add	r4, sp, #92	; 0x5c
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005fe:	f04f 37ff 	mov.w	r7, #4294967295
 8000602:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000606:	4665      	mov	r5, ip
 8000608:	9716      	str	r7, [sp, #88]	; 0x58
 800060a:	e010      	b.n	800062e <__gnu_Unwind_Backtrace+0x52>
 800060c:	f7ff ffda 	bl	80005c4 <_Unwind_SetGR>
 8000610:	4629      	mov	r1, r5
 8000612:	a816      	add	r0, sp, #88	; 0x58
 8000614:	47b0      	blx	r6
 8000616:	4603      	mov	r3, r0
 8000618:	aa16      	add	r2, sp, #88	; 0x58
 800061a:	4669      	mov	r1, sp
 800061c:	2008      	movs	r0, #8
 800061e:	b983      	cbnz	r3, 8000642 <__gnu_Unwind_Backtrace+0x66>
 8000620:	9b04      	ldr	r3, [sp, #16]
 8000622:	4798      	blx	r3
 8000624:	2805      	cmp	r0, #5
 8000626:	4604      	mov	r4, r0
 8000628:	d00c      	beq.n	8000644 <__gnu_Unwind_Backtrace+0x68>
 800062a:	2809      	cmp	r0, #9
 800062c:	d009      	beq.n	8000642 <__gnu_Unwind_Backtrace+0x66>
 800062e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000630:	4668      	mov	r0, sp
 8000632:	f7ff fe15 	bl	8000260 <get_eit_entry>
 8000636:	4603      	mov	r3, r0
 8000638:	466a      	mov	r2, sp
 800063a:	210c      	movs	r1, #12
 800063c:	a816      	add	r0, sp, #88	; 0x58
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0e4      	beq.n	800060c <__gnu_Unwind_Backtrace+0x30>
 8000642:	2409      	movs	r4, #9
 8000644:	a816      	add	r0, sp, #88	; 0x58
 8000646:	f7ff fe59 	bl	80002fc <restore_non_core_regs>
 800064a:	4620      	mov	r0, r4
 800064c:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000652:	bf00      	nop

08000654 <__gnu_unwind_pr_common>:
 8000654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000658:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	460d      	mov	r5, r1
 800065e:	f854 1b04 	ldr.w	r1, [r4], #4
 8000662:	9406      	str	r4, [sp, #24]
 8000664:	4617      	mov	r7, r2
 8000666:	f000 0803 	and.w	r8, r0, #3
 800066a:	461e      	mov	r6, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	d079      	beq.n	8000764 <__gnu_unwind_pr_common+0x110>
 8000670:	0c0b      	lsrs	r3, r1, #16
 8000672:	b2da      	uxtb	r2, r3
 8000674:	0409      	lsls	r1, r1, #16
 8000676:	f88d 301d 	strb.w	r3, [sp, #29]
 800067a:	2302      	movs	r3, #2
 800067c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000680:	9105      	str	r1, [sp, #20]
 8000682:	f88d 301c 	strb.w	r3, [sp, #28]
 8000686:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000688:	f1b8 0f02 	cmp.w	r8, #2
 800068c:	bf08      	it	eq
 800068e:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000690:	f013 0301 	ands.w	r3, r3, #1
 8000694:	d00c      	beq.n	80006b0 <__gnu_unwind_pr_common+0x5c>
 8000696:	4638      	mov	r0, r7
 8000698:	a905      	add	r1, sp, #20
 800069a:	f000 fb73 	bl	8000d84 <__gnu_unwind_execute>
 800069e:	b918      	cbnz	r0, 80006a8 <__gnu_unwind_pr_common+0x54>
 80006a0:	2008      	movs	r0, #8
 80006a2:	b009      	add	sp, #36	; 0x24
 80006a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006a8:	2009      	movs	r0, #9
 80006aa:	b009      	add	sp, #36	; 0x24
 80006ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006b0:	f8d4 a000 	ldr.w	sl, [r4]
 80006b4:	f1ba 0f00 	cmp.w	sl, #0
 80006b8:	d0ed      	beq.n	8000696 <__gnu_unwind_pr_common+0x42>
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	f000 0308 	and.w	r3, r0, #8
 80006c0:	9302      	str	r3, [sp, #8]
 80006c2:	2e02      	cmp	r6, #2
 80006c4:	d04a      	beq.n	800075c <__gnu_unwind_pr_common+0x108>
 80006c6:	f8b4 a000 	ldrh.w	sl, [r4]
 80006ca:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80006ce:	3404      	adds	r4, #4
 80006d0:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80006d2:	f029 0b01 	bic.w	fp, r9, #1
 80006d6:	210f      	movs	r1, #15
 80006d8:	4638      	mov	r0, r7
 80006da:	4493      	add	fp, r2
 80006dc:	f7ff ff4e 	bl	800057c <_Unwind_GetGR>
 80006e0:	4583      	cmp	fp, r0
 80006e2:	d839      	bhi.n	8000758 <__gnu_unwind_pr_common+0x104>
 80006e4:	f02a 0201 	bic.w	r2, sl, #1
 80006e8:	445a      	add	r2, fp
 80006ea:	4282      	cmp	r2, r0
 80006ec:	bf94      	ite	ls
 80006ee:	2000      	movls	r0, #0
 80006f0:	2001      	movhi	r0, #1
 80006f2:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	f00a 0a01 	and.w	sl, sl, #1
 80006fe:	ea43 030a 	orr.w	r3, r3, sl
 8000702:	2b01      	cmp	r3, #1
 8000704:	d049      	beq.n	800079a <__gnu_unwind_pr_common+0x146>
 8000706:	2b02      	cmp	r3, #2
 8000708:	d032      	beq.n	8000770 <__gnu_unwind_pr_common+0x11c>
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1cc      	bne.n	80006a8 <__gnu_unwind_pr_common+0x54>
 800070e:	f1b8 0f00 	cmp.w	r8, #0
 8000712:	d002      	beq.n	800071a <__gnu_unwind_pr_common+0xc6>
 8000714:	2800      	cmp	r0, #0
 8000716:	f040 80cd 	bne.w	80008b4 <__gnu_unwind_pr_common+0x260>
 800071a:	3404      	adds	r4, #4
 800071c:	f8d4 a000 	ldr.w	sl, [r4]
 8000720:	f1ba 0f00 	cmp.w	sl, #0
 8000724:	d1cd      	bne.n	80006c2 <__gnu_unwind_pr_common+0x6e>
 8000726:	a905      	add	r1, sp, #20
 8000728:	4638      	mov	r0, r7
 800072a:	f000 fb2b 	bl	8000d84 <__gnu_unwind_execute>
 800072e:	2800      	cmp	r0, #0
 8000730:	d1ba      	bne.n	80006a8 <__gnu_unwind_pr_common+0x54>
 8000732:	9b01      	ldr	r3, [sp, #4]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d0b3      	beq.n	80006a0 <__gnu_unwind_pr_common+0x4c>
 8000738:	210f      	movs	r1, #15
 800073a:	4638      	mov	r0, r7
 800073c:	f7ff ff1e 	bl	800057c <_Unwind_GetGR>
 8000740:	210e      	movs	r1, #14
 8000742:	4602      	mov	r2, r0
 8000744:	4638      	mov	r0, r7
 8000746:	f7ff ff3d 	bl	80005c4 <_Unwind_SetGR>
 800074a:	4638      	mov	r0, r7
 800074c:	4a6a      	ldr	r2, [pc, #424]	; (80008f8 <__gnu_unwind_pr_common+0x2a4>)
 800074e:	210f      	movs	r1, #15
 8000750:	f7ff ff38 	bl	80005c4 <_Unwind_SetGR>
 8000754:	2007      	movs	r0, #7
 8000756:	e7a8      	b.n	80006aa <__gnu_unwind_pr_common+0x56>
 8000758:	2000      	movs	r0, #0
 800075a:	e7ca      	b.n	80006f2 <__gnu_unwind_pr_common+0x9e>
 800075c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000760:	3408      	adds	r4, #8
 8000762:	e7b5      	b.n	80006d0 <__gnu_unwind_pr_common+0x7c>
 8000764:	0209      	lsls	r1, r1, #8
 8000766:	2303      	movs	r3, #3
 8000768:	9105      	str	r1, [sp, #20]
 800076a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800076e:	e78a      	b.n	8000686 <__gnu_unwind_pr_common+0x32>
 8000770:	6823      	ldr	r3, [r4, #0]
 8000772:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8000776:	f1b8 0f00 	cmp.w	r8, #0
 800077a:	d145      	bne.n	8000808 <__gnu_unwind_pr_common+0x1b4>
 800077c:	b128      	cbz	r0, 800078a <__gnu_unwind_pr_common+0x136>
 800077e:	9a02      	ldr	r2, [sp, #8]
 8000780:	2a00      	cmp	r2, #0
 8000782:	d05c      	beq.n	800083e <__gnu_unwind_pr_common+0x1ea>
 8000784:	f1bb 0f00 	cmp.w	fp, #0
 8000788:	d074      	beq.n	8000874 <__gnu_unwind_pr_common+0x220>
 800078a:	2b00      	cmp	r3, #0
 800078c:	da00      	bge.n	8000790 <__gnu_unwind_pr_common+0x13c>
 800078e:	3404      	adds	r4, #4
 8000790:	f10b 0b01 	add.w	fp, fp, #1
 8000794:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000798:	e7c0      	b.n	800071c <__gnu_unwind_pr_common+0xc8>
 800079a:	f1b8 0f00 	cmp.w	r8, #0
 800079e:	d119      	bne.n	80007d4 <__gnu_unwind_pr_common+0x180>
 80007a0:	b1b0      	cbz	r0, 80007d0 <__gnu_unwind_pr_common+0x17c>
 80007a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80007a6:	1c99      	adds	r1, r3, #2
 80007a8:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80007ac:	f43f af7c 	beq.w	80006a8 <__gnu_unwind_pr_common+0x54>
 80007b0:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80007b4:	3301      	adds	r3, #1
 80007b6:	9104      	str	r1, [sp, #16]
 80007b8:	f000 8090 	beq.w	80008dc <__gnu_unwind_pr_common+0x288>
 80007bc:	1d20      	adds	r0, r4, #4
 80007be:	f7ff fdc9 	bl	8000354 <_Unwind_decode_typeinfo_ptr.isra.0>
 80007c2:	ab04      	add	r3, sp, #16
 80007c4:	4601      	mov	r1, r0
 80007c6:	4628      	mov	r0, r5
 80007c8:	f3af 8000 	nop.w
 80007cc:	2800      	cmp	r0, #0
 80007ce:	d15b      	bne.n	8000888 <__gnu_unwind_pr_common+0x234>
 80007d0:	3408      	adds	r4, #8
 80007d2:	e7a3      	b.n	800071c <__gnu_unwind_pr_common+0xc8>
 80007d4:	210d      	movs	r1, #13
 80007d6:	4638      	mov	r0, r7
 80007d8:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80007dc:	f7ff fece 	bl	800057c <_Unwind_GetGR>
 80007e0:	4581      	cmp	r9, r0
 80007e2:	d1f5      	bne.n	80007d0 <__gnu_unwind_pr_common+0x17c>
 80007e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80007e6:	429c      	cmp	r4, r3
 80007e8:	d1f2      	bne.n	80007d0 <__gnu_unwind_pr_common+0x17c>
 80007ea:	4620      	mov	r0, r4
 80007ec:	f7ff fcec 	bl	80001c8 <selfrel_offset31>
 80007f0:	210f      	movs	r1, #15
 80007f2:	4602      	mov	r2, r0
 80007f4:	4638      	mov	r0, r7
 80007f6:	f7ff fee5 	bl	80005c4 <_Unwind_SetGR>
 80007fa:	4638      	mov	r0, r7
 80007fc:	462a      	mov	r2, r5
 80007fe:	2100      	movs	r1, #0
 8000800:	f7ff fee0 	bl	80005c4 <_Unwind_SetGR>
 8000804:	2007      	movs	r0, #7
 8000806:	e750      	b.n	80006aa <__gnu_unwind_pr_common+0x56>
 8000808:	210d      	movs	r1, #13
 800080a:	4638      	mov	r0, r7
 800080c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000810:	f7ff feb4 	bl	800057c <_Unwind_GetGR>
 8000814:	4581      	cmp	r9, r0
 8000816:	d001      	beq.n	800081c <__gnu_unwind_pr_common+0x1c8>
 8000818:	6823      	ldr	r3, [r4, #0]
 800081a:	e7b6      	b.n	800078a <__gnu_unwind_pr_common+0x136>
 800081c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800081e:	429c      	cmp	r4, r3
 8000820:	d1fa      	bne.n	8000818 <__gnu_unwind_pr_common+0x1c4>
 8000822:	2204      	movs	r2, #4
 8000824:	2100      	movs	r1, #0
 8000826:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
 800082a:	18a3      	adds	r3, r4, r2
 800082c:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000830:	636b      	str	r3, [r5, #52]	; 0x34
 8000832:	6823      	ldr	r3, [r4, #0]
 8000834:	428b      	cmp	r3, r1
 8000836:	db59      	blt.n	80008ec <__gnu_unwind_pr_common+0x298>
 8000838:	2301      	movs	r3, #1
 800083a:	9301      	str	r3, [sp, #4]
 800083c:	e7a8      	b.n	8000790 <__gnu_unwind_pr_common+0x13c>
 800083e:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000842:	f8cd 800c 	str.w	r8, [sp, #12]
 8000846:	f104 0a04 	add.w	sl, r4, #4
 800084a:	46b0      	mov	r8, r6
 800084c:	4691      	mov	r9, r2
 800084e:	461e      	mov	r6, r3
 8000850:	e00d      	b.n	800086e <__gnu_unwind_pr_common+0x21a>
 8000852:	9604      	str	r6, [sp, #16]
 8000854:	f7ff fd7e 	bl	8000354 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000858:	ab04      	add	r3, sp, #16
 800085a:	4601      	mov	r1, r0
 800085c:	2200      	movs	r2, #0
 800085e:	4628      	mov	r0, r5
 8000860:	f3af 8000 	nop.w
 8000864:	f109 0901 	add.w	r9, r9, #1
 8000868:	f10a 0a04 	add.w	sl, sl, #4
 800086c:	b9e8      	cbnz	r0, 80008aa <__gnu_unwind_pr_common+0x256>
 800086e:	45d9      	cmp	r9, fp
 8000870:	4650      	mov	r0, sl
 8000872:	d1ee      	bne.n	8000852 <__gnu_unwind_pr_common+0x1fe>
 8000874:	4638      	mov	r0, r7
 8000876:	210d      	movs	r1, #13
 8000878:	f7ff fe80 	bl	800057c <_Unwind_GetGR>
 800087c:	9b04      	ldr	r3, [sp, #16]
 800087e:	6228      	str	r0, [r5, #32]
 8000880:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8000884:	2006      	movs	r0, #6
 8000886:	e710      	b.n	80006aa <__gnu_unwind_pr_common+0x56>
 8000888:	4681      	mov	r9, r0
 800088a:	210d      	movs	r1, #13
 800088c:	4638      	mov	r0, r7
 800088e:	f7ff fe75 	bl	800057c <_Unwind_GetGR>
 8000892:	f1b9 0f02 	cmp.w	r9, #2
 8000896:	6228      	str	r0, [r5, #32]
 8000898:	d125      	bne.n	80008e6 <__gnu_unwind_pr_common+0x292>
 800089a:	462b      	mov	r3, r5
 800089c:	9a04      	ldr	r2, [sp, #16]
 800089e:	f843 2f2c 	str.w	r2, [r3, #44]!
 80008a2:	626b      	str	r3, [r5, #36]	; 0x24
 80008a4:	62ac      	str	r4, [r5, #40]	; 0x28
 80008a6:	2006      	movs	r0, #6
 80008a8:	e6ff      	b.n	80006aa <__gnu_unwind_pr_common+0x56>
 80008aa:	4646      	mov	r6, r8
 80008ac:	6823      	ldr	r3, [r4, #0]
 80008ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80008b2:	e76a      	b.n	800078a <__gnu_unwind_pr_common+0x136>
 80008b4:	4620      	mov	r0, r4
 80008b6:	f7ff fc87 	bl	80001c8 <selfrel_offset31>
 80008ba:	3404      	adds	r4, #4
 80008bc:	4602      	mov	r2, r0
 80008be:	63ac      	str	r4, [r5, #56]	; 0x38
 80008c0:	4628      	mov	r0, r5
 80008c2:	4614      	mov	r4, r2
 80008c4:	f3af 8000 	nop.w
 80008c8:	2800      	cmp	r0, #0
 80008ca:	f43f aeed 	beq.w	80006a8 <__gnu_unwind_pr_common+0x54>
 80008ce:	4638      	mov	r0, r7
 80008d0:	4622      	mov	r2, r4
 80008d2:	210f      	movs	r1, #15
 80008d4:	f7ff fe76 	bl	80005c4 <_Unwind_SetGR>
 80008d8:	2007      	movs	r0, #7
 80008da:	e6e6      	b.n	80006aa <__gnu_unwind_pr_common+0x56>
 80008dc:	4638      	mov	r0, r7
 80008de:	210d      	movs	r1, #13
 80008e0:	f7ff fe4c 	bl	800057c <_Unwind_GetGR>
 80008e4:	6228      	str	r0, [r5, #32]
 80008e6:	9b04      	ldr	r3, [sp, #16]
 80008e8:	626b      	str	r3, [r5, #36]	; 0x24
 80008ea:	e7db      	b.n	80008a4 <__gnu_unwind_pr_common+0x250>
 80008ec:	f10b 0001 	add.w	r0, fp, #1
 80008f0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80008f4:	e77a      	b.n	80007ec <__gnu_unwind_pr_common+0x198>
 80008f6:	bf00      	nop
 80008f8:	00000000 	.word	0x00000000

080008fc <__aeabi_unwind_cpp_pr0>:
 80008fc:	2300      	movs	r3, #0
 80008fe:	e6a9      	b.n	8000654 <__gnu_unwind_pr_common>

08000900 <__aeabi_unwind_cpp_pr1>:
 8000900:	2301      	movs	r3, #1
 8000902:	e6a7      	b.n	8000654 <__gnu_unwind_pr_common>

08000904 <__aeabi_unwind_cpp_pr2>:
 8000904:	2302      	movs	r3, #2
 8000906:	e6a5      	b.n	8000654 <__gnu_unwind_pr_common>

08000908 <_Unwind_VRS_Pop>:
 8000908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800090c:	4606      	mov	r6, r0
 800090e:	b0c3      	sub	sp, #268	; 0x10c
 8000910:	4615      	mov	r5, r2
 8000912:	461c      	mov	r4, r3
 8000914:	2904      	cmp	r1, #4
 8000916:	f200 80b9 	bhi.w	8000a8c <_Unwind_VRS_Pop+0x184>
 800091a:	e8df f001 	tbb	[pc, r1]
 800091e:	539a      	.short	0x539a
 8000920:	29b7      	.short	0x29b7
 8000922:	03          	.byte	0x03
 8000923:	00          	.byte	0x00
 8000924:	2c00      	cmp	r4, #0
 8000926:	f040 80b1 	bne.w	8000a8c <_Unwind_VRS_Pop+0x184>
 800092a:	2a10      	cmp	r2, #16
 800092c:	f200 80ae 	bhi.w	8000a8c <_Unwind_VRS_Pop+0x184>
 8000930:	6803      	ldr	r3, [r0, #0]
 8000932:	06d8      	lsls	r0, r3, #27
 8000934:	f100 80f3 	bmi.w	8000b1e <_Unwind_VRS_Pop+0x216>
 8000938:	af20      	add	r7, sp, #128	; 0x80
 800093a:	4638      	mov	r0, r7
 800093c:	f000 f992 	bl	8000c64 <__gnu_Unwind_Save_WMMXC>
 8000940:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8000942:	2300      	movs	r3, #0
 8000944:	2401      	movs	r4, #1
 8000946:	fa04 f203 	lsl.w	r2, r4, r3
 800094a:	422a      	tst	r2, r5
 800094c:	4601      	mov	r1, r0
 800094e:	d004      	beq.n	800095a <_Unwind_VRS_Pop+0x52>
 8000950:	f851 2b04 	ldr.w	r2, [r1], #4
 8000954:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8000958:	4608      	mov	r0, r1
 800095a:	3301      	adds	r3, #1
 800095c:	2b04      	cmp	r3, #4
 800095e:	d1f2      	bne.n	8000946 <_Unwind_VRS_Pop+0x3e>
 8000960:	63b0      	str	r0, [r6, #56]	; 0x38
 8000962:	4638      	mov	r0, r7
 8000964:	f000 f974 	bl	8000c50 <__gnu_Unwind_Restore_WMMXC>
 8000968:	2000      	movs	r0, #0
 800096a:	b043      	add	sp, #268	; 0x10c
 800096c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000970:	2c03      	cmp	r4, #3
 8000972:	f040 808b 	bne.w	8000a8c <_Unwind_VRS_Pop+0x184>
 8000976:	b294      	uxth	r4, r2
 8000978:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 800097c:	2b10      	cmp	r3, #16
 800097e:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000982:	f200 8083 	bhi.w	8000a8c <_Unwind_VRS_Pop+0x184>
 8000986:	6803      	ldr	r3, [r0, #0]
 8000988:	071f      	lsls	r7, r3, #28
 800098a:	f100 80d0 	bmi.w	8000b2e <_Unwind_VRS_Pop+0x226>
 800098e:	af20      	add	r7, sp, #128	; 0x80
 8000990:	4638      	mov	r0, r7
 8000992:	f000 f93b 	bl	8000c0c <__gnu_Unwind_Save_WMMXD>
 8000996:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 800099a:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 800099c:	b154      	cbz	r4, 80009b4 <_Unwind_VRS_Pop+0xac>
 800099e:	460b      	mov	r3, r1
 80009a0:	1ae8      	subs	r0, r5, r3
 80009a2:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80009a6:	00e4      	lsls	r4, r4, #3
 80009a8:	581a      	ldr	r2, [r3, r0]
 80009aa:	f843 2b04 	str.w	r2, [r3], #4
 80009ae:	428b      	cmp	r3, r1
 80009b0:	d1fa      	bne.n	80009a8 <_Unwind_VRS_Pop+0xa0>
 80009b2:	4425      	add	r5, r4
 80009b4:	4638      	mov	r0, r7
 80009b6:	63b5      	str	r5, [r6, #56]	; 0x38
 80009b8:	f000 f906 	bl	8000bc8 <__gnu_Unwind_Restore_WMMXD>
 80009bc:	2000      	movs	r0, #0
 80009be:	b043      	add	sp, #268	; 0x10c
 80009c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009c4:	2c01      	cmp	r4, #1
 80009c6:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80009ca:	b295      	uxth	r5, r2
 80009cc:	d05a      	beq.n	8000a84 <_Unwind_VRS_Pop+0x17c>
 80009ce:	2c05      	cmp	r4, #5
 80009d0:	d15c      	bne.n	8000a8c <_Unwind_VRS_Pop+0x184>
 80009d2:	eb08 0905 	add.w	r9, r8, r5
 80009d6:	f1b9 0f20 	cmp.w	r9, #32
 80009da:	d857      	bhi.n	8000a8c <_Unwind_VRS_Pop+0x184>
 80009dc:	f1b8 0f0f 	cmp.w	r8, #15
 80009e0:	d977      	bls.n	8000ad2 <_Unwind_VRS_Pop+0x1ca>
 80009e2:	46a9      	mov	r9, r5
 80009e4:	2d00      	cmp	r5, #0
 80009e6:	f040 8088 	bne.w	8000afa <_Unwind_VRS_Pop+0x1f2>
 80009ea:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80009ec:	b36d      	cbz	r5, 8000a4a <_Unwind_VRS_Pop+0x142>
 80009ee:	af20      	add	r7, sp, #128	; 0x80
 80009f0:	f04f 0900 	mov.w	r9, #0
 80009f4:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 80009f8:	3f04      	subs	r7, #4
 80009fa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80009fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8000a02:	f847 1f04 	str.w	r1, [r7, #4]!
 8000a06:	42ab      	cmp	r3, r5
 8000a08:	d1f9      	bne.n	80009fe <_Unwind_VRS_Pop+0xf6>
 8000a0a:	f1b9 0f00 	cmp.w	r9, #0
 8000a0e:	d00f      	beq.n	8000a30 <_Unwind_VRS_Pop+0x128>
 8000a10:	466f      	mov	r7, sp
 8000a12:	4641      	mov	r1, r8
 8000a14:	2910      	cmp	r1, #16
 8000a16:	bf38      	it	cc
 8000a18:	2110      	movcc	r1, #16
 8000a1a:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000a1e:	3984      	subs	r1, #132	; 0x84
 8000a20:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000a24:	f853 0b04 	ldr.w	r0, [r3], #4
 8000a28:	f841 0f04 	str.w	r0, [r1, #4]!
 8000a2c:	42ab      	cmp	r3, r5
 8000a2e:	d1f9      	bne.n	8000a24 <_Unwind_VRS_Pop+0x11c>
 8000a30:	2c01      	cmp	r4, #1
 8000a32:	f000 8084 	beq.w	8000b3e <_Unwind_VRS_Pop+0x236>
 8000a36:	f1b8 0f0f 	cmp.w	r8, #15
 8000a3a:	63b5      	str	r5, [r6, #56]	; 0x38
 8000a3c:	d945      	bls.n	8000aca <_Unwind_VRS_Pop+0x1c2>
 8000a3e:	f1b9 0f00 	cmp.w	r9, #0
 8000a42:	d002      	beq.n	8000a4a <_Unwind_VRS_Pop+0x142>
 8000a44:	4668      	mov	r0, sp
 8000a46:	f000 f8b7 	bl	8000bb8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	b043      	add	sp, #268	; 0x10c
 8000a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a52:	b9dc      	cbnz	r4, 8000a8c <_Unwind_VRS_Pop+0x184>
 8000a54:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8000a56:	4623      	mov	r3, r4
 8000a58:	2001      	movs	r0, #1
 8000a5a:	b294      	uxth	r4, r2
 8000a5c:	f106 0c04 	add.w	ip, r6, #4
 8000a60:	fa00 f203 	lsl.w	r2, r0, r3
 8000a64:	4222      	tst	r2, r4
 8000a66:	4639      	mov	r1, r7
 8000a68:	d004      	beq.n	8000a74 <_Unwind_VRS_Pop+0x16c>
 8000a6a:	f851 2b04 	ldr.w	r2, [r1], #4
 8000a6e:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
 8000a72:	460f      	mov	r7, r1
 8000a74:	3301      	adds	r3, #1
 8000a76:	2b10      	cmp	r3, #16
 8000a78:	d1f2      	bne.n	8000a60 <_Unwind_VRS_Pop+0x158>
 8000a7a:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000a7e:	d1e4      	bne.n	8000a4a <_Unwind_VRS_Pop+0x142>
 8000a80:	63b7      	str	r7, [r6, #56]	; 0x38
 8000a82:	e004      	b.n	8000a8e <_Unwind_VRS_Pop+0x186>
 8000a84:	eb08 0305 	add.w	r3, r8, r5
 8000a88:	2b10      	cmp	r3, #16
 8000a8a:	d903      	bls.n	8000a94 <_Unwind_VRS_Pop+0x18c>
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	b043      	add	sp, #268	; 0x10c
 8000a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a94:	f1b8 0f0f 	cmp.w	r8, #15
 8000a98:	d8f8      	bhi.n	8000a8c <_Unwind_VRS_Pop+0x184>
 8000a9a:	6833      	ldr	r3, [r6, #0]
 8000a9c:	07da      	lsls	r2, r3, #31
 8000a9e:	d506      	bpl.n	8000aae <_Unwind_VRS_Pop+0x1a6>
 8000aa0:	4630      	mov	r0, r6
 8000aa2:	f023 0303 	bic.w	r3, r3, #3
 8000aa6:	f840 3b48 	str.w	r3, [r0], #72
 8000aaa:	f000 f879 	bl	8000ba0 <__gnu_Unwind_Save_VFP>
 8000aae:	af20      	add	r7, sp, #128	; 0x80
 8000ab0:	4638      	mov	r0, r7
 8000ab2:	f000 f875 	bl	8000ba0 <__gnu_Unwind_Save_VFP>
 8000ab6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000ab8:	2d00      	cmp	r5, #0
 8000aba:	d199      	bne.n	80009f0 <_Unwind_VRS_Pop+0xe8>
 8000abc:	461d      	mov	r5, r3
 8000abe:	3504      	adds	r5, #4
 8000ac0:	63b5      	str	r5, [r6, #56]	; 0x38
 8000ac2:	4638      	mov	r0, r7
 8000ac4:	f000 f868 	bl	8000b98 <__gnu_Unwind_Restore_VFP>
 8000ac8:	e7bf      	b.n	8000a4a <_Unwind_VRS_Pop+0x142>
 8000aca:	a820      	add	r0, sp, #128	; 0x80
 8000acc:	f000 f86c 	bl	8000ba8 <__gnu_Unwind_Restore_VFP_D>
 8000ad0:	e7b5      	b.n	8000a3e <_Unwind_VRS_Pop+0x136>
 8000ad2:	f1b9 0f10 	cmp.w	r9, #16
 8000ad6:	d940      	bls.n	8000b5a <_Unwind_VRS_Pop+0x252>
 8000ad8:	f1a9 0910 	sub.w	r9, r9, #16
 8000adc:	6833      	ldr	r3, [r6, #0]
 8000ade:	07d9      	lsls	r1, r3, #31
 8000ae0:	d508      	bpl.n	8000af4 <_Unwind_VRS_Pop+0x1ec>
 8000ae2:	f023 0301 	bic.w	r3, r3, #1
 8000ae6:	4630      	mov	r0, r6
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	f840 3b48 	str.w	r3, [r0], #72
 8000af0:	f000 f85e 	bl	8000bb0 <__gnu_Unwind_Save_VFP_D>
 8000af4:	f1b9 0f00 	cmp.w	r9, #0
 8000af8:	d032      	beq.n	8000b60 <_Unwind_VRS_Pop+0x258>
 8000afa:	6833      	ldr	r3, [r6, #0]
 8000afc:	075a      	lsls	r2, r3, #29
 8000afe:	d420      	bmi.n	8000b42 <_Unwind_VRS_Pop+0x23a>
 8000b00:	f1b8 0f0f 	cmp.w	r8, #15
 8000b04:	d925      	bls.n	8000b52 <_Unwind_VRS_Pop+0x24a>
 8000b06:	466f      	mov	r7, sp
 8000b08:	4638      	mov	r0, r7
 8000b0a:	f1c8 0510 	rsb	r5, r8, #16
 8000b0e:	f000 f857 	bl	8000bc0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b16:	f77f af7c 	ble.w	8000a12 <_Unwind_VRS_Pop+0x10a>
 8000b1a:	af20      	add	r7, sp, #128	; 0x80
 8000b1c:	e76a      	b.n	80009f4 <_Unwind_VRS_Pop+0xec>
 8000b1e:	f023 0310 	bic.w	r3, r3, #16
 8000b22:	6033      	str	r3, [r6, #0]
 8000b24:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000b28:	f000 f89c 	bl	8000c64 <__gnu_Unwind_Save_WMMXC>
 8000b2c:	e704      	b.n	8000938 <_Unwind_VRS_Pop+0x30>
 8000b2e:	f023 0308 	bic.w	r3, r3, #8
 8000b32:	6003      	str	r3, [r0, #0]
 8000b34:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000b38:	f000 f868 	bl	8000c0c <__gnu_Unwind_Save_WMMXD>
 8000b3c:	e727      	b.n	800098e <_Unwind_VRS_Pop+0x86>
 8000b3e:	af20      	add	r7, sp, #128	; 0x80
 8000b40:	e7bd      	b.n	8000abe <_Unwind_VRS_Pop+0x1b6>
 8000b42:	4630      	mov	r0, r6
 8000b44:	f023 0304 	bic.w	r3, r3, #4
 8000b48:	f840 3bd0 	str.w	r3, [r0], #208
 8000b4c:	f000 f838 	bl	8000bc0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b50:	e7d6      	b.n	8000b00 <_Unwind_VRS_Pop+0x1f8>
 8000b52:	a820      	add	r0, sp, #128	; 0x80
 8000b54:	f000 f82c 	bl	8000bb0 <__gnu_Unwind_Save_VFP_D>
 8000b58:	e7d5      	b.n	8000b06 <_Unwind_VRS_Pop+0x1fe>
 8000b5a:	f04f 0900 	mov.w	r9, #0
 8000b5e:	e7bd      	b.n	8000adc <_Unwind_VRS_Pop+0x1d4>
 8000b60:	f1b8 0f0f 	cmp.w	r8, #15
 8000b64:	f63f af41 	bhi.w	80009ea <_Unwind_VRS_Pop+0xe2>
 8000b68:	af20      	add	r7, sp, #128	; 0x80
 8000b6a:	4638      	mov	r0, r7
 8000b6c:	f000 f820 	bl	8000bb0 <__gnu_Unwind_Save_VFP_D>
 8000b70:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b72:	2d00      	cmp	r5, #0
 8000b74:	f47f af3c 	bne.w	80009f0 <_Unwind_VRS_Pop+0xe8>
 8000b78:	4638      	mov	r0, r7
 8000b7a:	f000 f815 	bl	8000ba8 <__gnu_Unwind_Restore_VFP_D>
 8000b7e:	e764      	b.n	8000a4a <_Unwind_VRS_Pop+0x142>

08000b80 <__restore_core_regs>:
 8000b80:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000b84:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000b88:	469c      	mov	ip, r3
 8000b8a:	46a6      	mov	lr, r4
 8000b8c:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000b90:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000b94:	46e5      	mov	sp, ip
 8000b96:	bd00      	pop	{pc}

08000b98 <__gnu_Unwind_Restore_VFP>:
 8000b98:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__gnu_Unwind_Save_VFP>:
 8000ba0:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__gnu_Unwind_Restore_VFP_D>:
 8000ba8:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__gnu_Unwind_Save_VFP_D>:
 8000bb0:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000bb8:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000bc0:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__gnu_Unwind_Restore_WMMXD>:
 8000bc8:	ecf0 0102 	ldfe	f0, [r0], #8
 8000bcc:	ecf0 1102 	ldfe	f1, [r0], #8
 8000bd0:	ecf0 2102 	ldfe	f2, [r0], #8
 8000bd4:	ecf0 3102 	ldfe	f3, [r0], #8
 8000bd8:	ecf0 4102 	ldfe	f4, [r0], #8
 8000bdc:	ecf0 5102 	ldfe	f5, [r0], #8
 8000be0:	ecf0 6102 	ldfe	f6, [r0], #8
 8000be4:	ecf0 7102 	ldfe	f7, [r0], #8
 8000be8:	ecf0 8102 	ldfp	f0, [r0], #8
 8000bec:	ecf0 9102 	ldfp	f1, [r0], #8
 8000bf0:	ecf0 a102 	ldfp	f2, [r0], #8
 8000bf4:	ecf0 b102 	ldfp	f3, [r0], #8
 8000bf8:	ecf0 c102 	ldfp	f4, [r0], #8
 8000bfc:	ecf0 d102 	ldfp	f5, [r0], #8
 8000c00:	ecf0 e102 	ldfp	f6, [r0], #8
 8000c04:	ecf0 f102 	ldfp	f7, [r0], #8
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__gnu_Unwind_Save_WMMXD>:
 8000c0c:	ece0 0102 	stfe	f0, [r0], #8
 8000c10:	ece0 1102 	stfe	f1, [r0], #8
 8000c14:	ece0 2102 	stfe	f2, [r0], #8
 8000c18:	ece0 3102 	stfe	f3, [r0], #8
 8000c1c:	ece0 4102 	stfe	f4, [r0], #8
 8000c20:	ece0 5102 	stfe	f5, [r0], #8
 8000c24:	ece0 6102 	stfe	f6, [r0], #8
 8000c28:	ece0 7102 	stfe	f7, [r0], #8
 8000c2c:	ece0 8102 	stfp	f0, [r0], #8
 8000c30:	ece0 9102 	stfp	f1, [r0], #8
 8000c34:	ece0 a102 	stfp	f2, [r0], #8
 8000c38:	ece0 b102 	stfp	f3, [r0], #8
 8000c3c:	ece0 c102 	stfp	f4, [r0], #8
 8000c40:	ece0 d102 	stfp	f5, [r0], #8
 8000c44:	ece0 e102 	stfp	f6, [r0], #8
 8000c48:	ece0 f102 	stfp	f7, [r0], #8
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__gnu_Unwind_Restore_WMMXC>:
 8000c50:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000c54:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000c58:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000c5c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <__gnu_Unwind_Save_WMMXC>:
 8000c64:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000c68:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000c6c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000c70:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <_Unwind_RaiseException>:
 8000c78:	46ec      	mov	ip, sp
 8000c7a:	b500      	push	{lr}
 8000c7c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c80:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c8c:	a901      	add	r1, sp, #4
 8000c8e:	f7ff fbf1 	bl	8000474 <__gnu_Unwind_RaiseException>
 8000c92:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c96:	b012      	add	sp, #72	; 0x48
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <_Unwind_Resume>:
 8000c9c:	46ec      	mov	ip, sp
 8000c9e:	b500      	push	{lr}
 8000ca0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ca4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cb0:	a901      	add	r1, sp, #4
 8000cb2:	f7ff fc19 	bl	80004e8 <__gnu_Unwind_Resume>
 8000cb6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cba:	b012      	add	sp, #72	; 0x48
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <_Unwind_Resume_or_Rethrow>:
 8000cc0:	46ec      	mov	ip, sp
 8000cc2:	b500      	push	{lr}
 8000cc4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cc8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cd4:	a901      	add	r1, sp, #4
 8000cd6:	f7ff fc29 	bl	800052c <__gnu_Unwind_Resume_or_Rethrow>
 8000cda:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cde:	b012      	add	sp, #72	; 0x48
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <_Unwind_ForcedUnwind>:
 8000ce4:	46ec      	mov	ip, sp
 8000ce6:	b500      	push	{lr}
 8000ce8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cf8:	ab01      	add	r3, sp, #4
 8000cfa:	f7ff fbeb 	bl	80004d4 <__gnu_Unwind_ForcedUnwind>
 8000cfe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d02:	b012      	add	sp, #72	; 0x48
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <_Unwind_Backtrace>:
 8000d08:	46ec      	mov	ip, sp
 8000d0a:	b500      	push	{lr}
 8000d0c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d10:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d1c:	aa01      	add	r2, sp, #4
 8000d1e:	f7ff fc5d 	bl	80005dc <__gnu_Unwind_Backtrace>
 8000d22:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d26:	b012      	add	sp, #72	; 0x48
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <next_unwind_byte>:
 8000d2c:	7a02      	ldrb	r2, [r0, #8]
 8000d2e:	b97a      	cbnz	r2, 8000d50 <next_unwind_byte+0x24>
 8000d30:	7a43      	ldrb	r3, [r0, #9]
 8000d32:	b1a3      	cbz	r3, 8000d5e <next_unwind_byte+0x32>
 8000d34:	6842      	ldr	r2, [r0, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	b410      	push	{r4}
 8000d3a:	7243      	strb	r3, [r0, #9]
 8000d3c:	6813      	ldr	r3, [r2, #0]
 8000d3e:	2103      	movs	r1, #3
 8000d40:	1d14      	adds	r4, r2, #4
 8000d42:	7201      	strb	r1, [r0, #8]
 8000d44:	021a      	lsls	r2, r3, #8
 8000d46:	6044      	str	r4, [r0, #4]
 8000d48:	6002      	str	r2, [r0, #0]
 8000d4a:	bc10      	pop	{r4}
 8000d4c:	0e18      	lsrs	r0, r3, #24
 8000d4e:	4770      	bx	lr
 8000d50:	6803      	ldr	r3, [r0, #0]
 8000d52:	3a01      	subs	r2, #1
 8000d54:	7202      	strb	r2, [r0, #8]
 8000d56:	021a      	lsls	r2, r3, #8
 8000d58:	6002      	str	r2, [r0, #0]
 8000d5a:	0e18      	lsrs	r0, r3, #24
 8000d5c:	4770      	bx	lr
 8000d5e:	20b0      	movs	r0, #176	; 0xb0
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <_Unwind_GetGR.constprop.0>:
 8000d64:	b500      	push	{lr}
 8000d66:	b085      	sub	sp, #20
 8000d68:	aa03      	add	r2, sp, #12
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	9200      	str	r2, [sp, #0]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	220c      	movs	r2, #12
 8000d72:	f7ff fbeb 	bl	800054c <_Unwind_VRS_Get>
 8000d76:	9803      	ldr	r0, [sp, #12]
 8000d78:	b005      	add	sp, #20
 8000d7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d7e:	bf00      	nop

08000d80 <unwind_UCB_from_context>:
 8000d80:	e7f0      	b.n	8000d64 <_Unwind_GetGR.constprop.0>
 8000d82:	bf00      	nop

08000d84 <__gnu_unwind_execute>:
 8000d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d88:	4605      	mov	r5, r0
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	460e      	mov	r6, r1
 8000d8e:	f04f 0800 	mov.w	r8, #0
 8000d92:	4630      	mov	r0, r6
 8000d94:	f7ff ffca 	bl	8000d2c <next_unwind_byte>
 8000d98:	28b0      	cmp	r0, #176	; 0xb0
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f000 80b2 	beq.w	8000f04 <__gnu_unwind_execute+0x180>
 8000da0:	0607      	lsls	r7, r0, #24
 8000da2:	d520      	bpl.n	8000de6 <__gnu_unwind_execute+0x62>
 8000da4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000da8:	2b80      	cmp	r3, #128	; 0x80
 8000daa:	d04d      	beq.n	8000e48 <__gnu_unwind_execute+0xc4>
 8000dac:	2b90      	cmp	r3, #144	; 0x90
 8000dae:	d036      	beq.n	8000e1e <__gnu_unwind_execute+0x9a>
 8000db0:	2ba0      	cmp	r3, #160	; 0xa0
 8000db2:	d060      	beq.n	8000e76 <__gnu_unwind_execute+0xf2>
 8000db4:	2bb0      	cmp	r3, #176	; 0xb0
 8000db6:	d074      	beq.n	8000ea2 <__gnu_unwind_execute+0x11e>
 8000db8:	2bc0      	cmp	r3, #192	; 0xc0
 8000dba:	f000 808b 	beq.w	8000ed4 <__gnu_unwind_execute+0x150>
 8000dbe:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000dc2:	2bd0      	cmp	r3, #208	; 0xd0
 8000dc4:	d10b      	bne.n	8000dde <__gnu_unwind_execute+0x5a>
 8000dc6:	f000 0207 	and.w	r2, r0, #7
 8000dca:	3201      	adds	r2, #1
 8000dcc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000dd0:	2305      	movs	r3, #5
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	4628      	mov	r0, r5
 8000dd6:	f7ff fd97 	bl	8000908 <_Unwind_VRS_Pop>
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	d0d9      	beq.n	8000d92 <__gnu_unwind_execute+0xe>
 8000dde:	2009      	movs	r0, #9
 8000de0:	b005      	add	sp, #20
 8000de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000de6:	f10d 090c 	add.w	r9, sp, #12
 8000dea:	2300      	movs	r3, #0
 8000dec:	4619      	mov	r1, r3
 8000dee:	0087      	lsls	r7, r0, #2
 8000df0:	f8cd 9000 	str.w	r9, [sp]
 8000df4:	220d      	movs	r2, #13
 8000df6:	4628      	mov	r0, r5
 8000df8:	f7ff fba8 	bl	800054c <_Unwind_VRS_Get>
 8000dfc:	b2ff      	uxtb	r7, r7
 8000dfe:	9b03      	ldr	r3, [sp, #12]
 8000e00:	f8cd 9000 	str.w	r9, [sp]
 8000e04:	3704      	adds	r7, #4
 8000e06:	0660      	lsls	r0, r4, #25
 8000e08:	bf4c      	ite	mi
 8000e0a:	1bdf      	submi	r7, r3, r7
 8000e0c:	18ff      	addpl	r7, r7, r3
 8000e0e:	2300      	movs	r3, #0
 8000e10:	4619      	mov	r1, r3
 8000e12:	220d      	movs	r2, #13
 8000e14:	4628      	mov	r0, r5
 8000e16:	9703      	str	r7, [sp, #12]
 8000e18:	f7ff fbbc 	bl	8000594 <_Unwind_VRS_Set>
 8000e1c:	e7b9      	b.n	8000d92 <__gnu_unwind_execute+0xe>
 8000e1e:	f000 030d 	and.w	r3, r0, #13
 8000e22:	2b0d      	cmp	r3, #13
 8000e24:	d0db      	beq.n	8000dde <__gnu_unwind_execute+0x5a>
 8000e26:	af03      	add	r7, sp, #12
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f000 020f 	and.w	r2, r0, #15
 8000e2e:	4619      	mov	r1, r3
 8000e30:	9700      	str	r7, [sp, #0]
 8000e32:	4628      	mov	r0, r5
 8000e34:	f7ff fb8a 	bl	800054c <_Unwind_VRS_Get>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	9700      	str	r7, [sp, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	220d      	movs	r2, #13
 8000e40:	4628      	mov	r0, r5
 8000e42:	f7ff fba7 	bl	8000594 <_Unwind_VRS_Set>
 8000e46:	e7a4      	b.n	8000d92 <__gnu_unwind_execute+0xe>
 8000e48:	4630      	mov	r0, r6
 8000e4a:	f7ff ff6f 	bl	8000d2c <next_unwind_byte>
 8000e4e:	0224      	lsls	r4, r4, #8
 8000e50:	4320      	orrs	r0, r4
 8000e52:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000e56:	d0c2      	beq.n	8000dde <__gnu_unwind_execute+0x5a>
 8000e58:	0104      	lsls	r4, r0, #4
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	b2a2      	uxth	r2, r4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4628      	mov	r0, r5
 8000e62:	f7ff fd51 	bl	8000908 <_Unwind_VRS_Pop>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	d1b9      	bne.n	8000dde <__gnu_unwind_execute+0x5a>
 8000e6a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000e6e:	bf18      	it	ne
 8000e70:	f04f 0801 	movne.w	r8, #1
 8000e74:	e78d      	b.n	8000d92 <__gnu_unwind_execute+0xe>
 8000e76:	43c2      	mvns	r2, r0
 8000e78:	f002 0307 	and.w	r3, r2, #7
 8000e7c:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000e80:	411a      	asrs	r2, r3
 8000e82:	0701      	lsls	r1, r0, #28
 8000e84:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	bf48      	it	mi
 8000e8e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000e92:	4619      	mov	r1, r3
 8000e94:	4628      	mov	r0, r5
 8000e96:	f7ff fd37 	bl	8000908 <_Unwind_VRS_Pop>
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	f43f af79 	beq.w	8000d92 <__gnu_unwind_execute+0xe>
 8000ea0:	e79d      	b.n	8000dde <__gnu_unwind_execute+0x5a>
 8000ea2:	28b1      	cmp	r0, #177	; 0xb1
 8000ea4:	d033      	beq.n	8000f0e <__gnu_unwind_execute+0x18a>
 8000ea6:	28b2      	cmp	r0, #178	; 0xb2
 8000ea8:	f000 808b 	beq.w	8000fc2 <__gnu_unwind_execute+0x23e>
 8000eac:	28b3      	cmp	r0, #179	; 0xb3
 8000eae:	d039      	beq.n	8000f24 <__gnu_unwind_execute+0x1a0>
 8000eb0:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000eb4:	2bb4      	cmp	r3, #180	; 0xb4
 8000eb6:	d092      	beq.n	8000dde <__gnu_unwind_execute+0x5a>
 8000eb8:	f000 0207 	and.w	r2, r0, #7
 8000ebc:	3201      	adds	r2, #1
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4628      	mov	r0, r5
 8000ec8:	f7ff fd1e 	bl	8000908 <_Unwind_VRS_Pop>
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	f43f af60 	beq.w	8000d92 <__gnu_unwind_execute+0xe>
 8000ed2:	e784      	b.n	8000dde <__gnu_unwind_execute+0x5a>
 8000ed4:	28c6      	cmp	r0, #198	; 0xc6
 8000ed6:	d042      	beq.n	8000f5e <__gnu_unwind_execute+0x1da>
 8000ed8:	28c7      	cmp	r0, #199	; 0xc7
 8000eda:	d04c      	beq.n	8000f76 <__gnu_unwind_execute+0x1f2>
 8000edc:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000ee0:	2bc0      	cmp	r3, #192	; 0xc0
 8000ee2:	d05b      	beq.n	8000f9c <__gnu_unwind_execute+0x218>
 8000ee4:	28c8      	cmp	r0, #200	; 0xc8
 8000ee6:	d060      	beq.n	8000faa <__gnu_unwind_execute+0x226>
 8000ee8:	28c9      	cmp	r0, #201	; 0xc9
 8000eea:	f47f af78 	bne.w	8000dde <__gnu_unwind_execute+0x5a>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	f7ff ff1c 	bl	8000d2c <next_unwind_byte>
 8000ef4:	0302      	lsls	r2, r0, #12
 8000ef6:	f000 000f 	and.w	r0, r0, #15
 8000efa:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000efe:	3001      	adds	r0, #1
 8000f00:	4302      	orrs	r2, r0
 8000f02:	e765      	b.n	8000dd0 <__gnu_unwind_execute+0x4c>
 8000f04:	f1b8 0f00 	cmp.w	r8, #0
 8000f08:	d018      	beq.n	8000f3c <__gnu_unwind_execute+0x1b8>
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	e768      	b.n	8000de0 <__gnu_unwind_execute+0x5c>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	f7ff ff0c 	bl	8000d2c <next_unwind_byte>
 8000f14:	4602      	mov	r2, r0
 8000f16:	2800      	cmp	r0, #0
 8000f18:	f43f af61 	beq.w	8000dde <__gnu_unwind_execute+0x5a>
 8000f1c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f20:	d0d0      	beq.n	8000ec4 <__gnu_unwind_execute+0x140>
 8000f22:	e75c      	b.n	8000dde <__gnu_unwind_execute+0x5a>
 8000f24:	4630      	mov	r0, r6
 8000f26:	f7ff ff01 	bl	8000d2c <next_unwind_byte>
 8000f2a:	0301      	lsls	r1, r0, #12
 8000f2c:	f000 000f 	and.w	r0, r0, #15
 8000f30:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000f34:	1c42      	adds	r2, r0, #1
 8000f36:	2301      	movs	r3, #1
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	e7c3      	b.n	8000ec4 <__gnu_unwind_execute+0x140>
 8000f3c:	ac03      	add	r4, sp, #12
 8000f3e:	4643      	mov	r3, r8
 8000f40:	220e      	movs	r2, #14
 8000f42:	4641      	mov	r1, r8
 8000f44:	9400      	str	r4, [sp, #0]
 8000f46:	4628      	mov	r0, r5
 8000f48:	f7ff fb00 	bl	800054c <_Unwind_VRS_Get>
 8000f4c:	9400      	str	r4, [sp, #0]
 8000f4e:	4628      	mov	r0, r5
 8000f50:	4643      	mov	r3, r8
 8000f52:	220f      	movs	r2, #15
 8000f54:	4641      	mov	r1, r8
 8000f56:	f7ff fb1d 	bl	8000594 <_Unwind_VRS_Set>
 8000f5a:	4640      	mov	r0, r8
 8000f5c:	e740      	b.n	8000de0 <__gnu_unwind_execute+0x5c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	f7ff fee4 	bl	8000d2c <next_unwind_byte>
 8000f64:	0301      	lsls	r1, r0, #12
 8000f66:	f000 000f 	and.w	r0, r0, #15
 8000f6a:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000f6e:	1c42      	adds	r2, r0, #1
 8000f70:	2303      	movs	r3, #3
 8000f72:	430a      	orrs	r2, r1
 8000f74:	e7a6      	b.n	8000ec4 <__gnu_unwind_execute+0x140>
 8000f76:	4630      	mov	r0, r6
 8000f78:	f7ff fed8 	bl	8000d2c <next_unwind_byte>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	2800      	cmp	r0, #0
 8000f80:	f43f af2d 	beq.w	8000dde <__gnu_unwind_execute+0x5a>
 8000f84:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f88:	f47f af29 	bne.w	8000dde <__gnu_unwind_execute+0x5a>
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	4628      	mov	r0, r5
 8000f90:	f7ff fcba 	bl	8000908 <_Unwind_VRS_Pop>
 8000f94:	2800      	cmp	r0, #0
 8000f96:	f43f aefc 	beq.w	8000d92 <__gnu_unwind_execute+0xe>
 8000f9a:	e720      	b.n	8000dde <__gnu_unwind_execute+0x5a>
 8000f9c:	f000 020f 	and.w	r2, r0, #15
 8000fa0:	3201      	adds	r2, #1
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000fa8:	e78c      	b.n	8000ec4 <__gnu_unwind_execute+0x140>
 8000faa:	4630      	mov	r0, r6
 8000fac:	f7ff febe 	bl	8000d2c <next_unwind_byte>
 8000fb0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8000fb4:	f000 030f 	and.w	r3, r0, #15
 8000fb8:	3210      	adds	r2, #16
 8000fba:	3301      	adds	r3, #1
 8000fbc:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8000fc0:	e706      	b.n	8000dd0 <__gnu_unwind_execute+0x4c>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f10d 090c 	add.w	r9, sp, #12
 8000fc8:	220d      	movs	r2, #13
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f8cd 9000 	str.w	r9, [sp]
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	f7ff fabb 	bl	800054c <_Unwind_VRS_Get>
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	f7ff fea8 	bl	8000d2c <next_unwind_byte>
 8000fdc:	0602      	lsls	r2, r0, #24
 8000fde:	f04f 0702 	mov.w	r7, #2
 8000fe2:	d50c      	bpl.n	8000ffe <__gnu_unwind_execute+0x27a>
 8000fe4:	9b03      	ldr	r3, [sp, #12]
 8000fe6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000fea:	40b8      	lsls	r0, r7
 8000fec:	4403      	add	r3, r0
 8000fee:	4630      	mov	r0, r6
 8000ff0:	9303      	str	r3, [sp, #12]
 8000ff2:	f7ff fe9b 	bl	8000d2c <next_unwind_byte>
 8000ff6:	0603      	lsls	r3, r0, #24
 8000ff8:	f107 0707 	add.w	r7, r7, #7
 8000ffc:	d4f2      	bmi.n	8000fe4 <__gnu_unwind_execute+0x260>
 8000ffe:	9b03      	ldr	r3, [sp, #12]
 8001000:	f8cd 9000 	str.w	r9, [sp]
 8001004:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8001008:	f503 7201 	add.w	r2, r3, #516	; 0x204
 800100c:	40bc      	lsls	r4, r7
 800100e:	2300      	movs	r3, #0
 8001010:	4414      	add	r4, r2
 8001012:	4619      	mov	r1, r3
 8001014:	220d      	movs	r2, #13
 8001016:	4628      	mov	r0, r5
 8001018:	9403      	str	r4, [sp, #12]
 800101a:	f7ff fabb 	bl	8000594 <_Unwind_VRS_Set>
 800101e:	e6b8      	b.n	8000d92 <__gnu_unwind_execute+0xe>

08001020 <__gnu_unwind_frame>:
 8001020:	b510      	push	{r4, lr}
 8001022:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001024:	b084      	sub	sp, #16
 8001026:	6853      	ldr	r3, [r2, #4]
 8001028:	2403      	movs	r4, #3
 800102a:	f88d 400c 	strb.w	r4, [sp, #12]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	f102 0408 	add.w	r4, r2, #8
 8001034:	4608      	mov	r0, r1
 8001036:	79d2      	ldrb	r2, [r2, #7]
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	a901      	add	r1, sp, #4
 800103c:	9402      	str	r4, [sp, #8]
 800103e:	f88d 200d 	strb.w	r2, [sp, #13]
 8001042:	f7ff fe9f 	bl	8000d84 <__gnu_unwind_execute>
 8001046:	b004      	add	sp, #16
 8001048:	bd10      	pop	{r4, pc}
 800104a:	bf00      	nop

0800104c <_Unwind_GetRegionStart>:
 800104c:	b508      	push	{r3, lr}
 800104e:	f7ff fe97 	bl	8000d80 <unwind_UCB_from_context>
 8001052:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001054:	bd08      	pop	{r3, pc}
 8001056:	bf00      	nop

08001058 <_Unwind_GetLanguageSpecificData>:
 8001058:	b508      	push	{r3, lr}
 800105a:	f7ff fe91 	bl	8000d80 <unwind_UCB_from_context>
 800105e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001060:	79c3      	ldrb	r3, [r0, #7]
 8001062:	3302      	adds	r3, #2
 8001064:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001068:	bd08      	pop	{r3, pc}
 800106a:	bf00      	nop

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b098      	sub	sp, #96	; 0x60
 8001070:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001072:	f000 ff9f 	bl	8001fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001076:	f000 f8b1 	bl	80011dc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107a:	f000 fb89 	bl	8001790 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800107e:	f000 fb69 	bl	8001754 <_ZL11MX_DMA_Initv>
  MX_CAN_Init();
 8001082:	f000 f919 	bl	80012b8 <_ZL11MX_CAN_Initv>
  MX_TIM1_Init();
 8001086:	f000 f953 	bl	8001330 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 800108a:	f000 fa05 	bl	8001498 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800108e:	f000 fa9d 	bl	80015cc <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 8001092:	f000 fb2b 	bl	80016ec <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  setup_fillter_CAN();
 8001096:	f000 fbc5 	bl	8001824 <_Z17setup_fillter_CANv>
  HAL_CAN_Start(&hcan);
 800109a:	4847      	ldr	r0, [pc, #284]	; (80011b8 <main+0x14c>)
 800109c:	f001 f9d9 	bl	8002452 <HAL_CAN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010a0:	2100      	movs	r1, #0
 80010a2:	4846      	ldr	r0, [pc, #280]	; (80011bc <main+0x150>)
 80010a4:	f003 fbda 	bl	800485c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80010a8:	2100      	movs	r1, #0
 80010aa:	4844      	ldr	r0, [pc, #272]	; (80011bc <main+0x150>)
 80010ac:	f005 f93e 	bl	800632c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80010b0:	2104      	movs	r1, #4
 80010b2:	4842      	ldr	r0, [pc, #264]	; (80011bc <main+0x150>)
 80010b4:	f003 fbd2 	bl	800485c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80010b8:	2104      	movs	r1, #4
 80010ba:	4840      	ldr	r0, [pc, #256]	; (80011bc <main+0x150>)
 80010bc:	f005 f936 	bl	800632c <HAL_TIMEx_PWMN_Start>

  ws2812::ws2812_double pixels(&htim3, TIM_CHANNEL_4, &hdma_tim3_ch4_up, 45, 22);
 80010c0:	f107 0010 	add.w	r0, r7, #16
 80010c4:	2316      	movs	r3, #22
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	232d      	movs	r3, #45	; 0x2d
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	4b3c      	ldr	r3, [pc, #240]	; (80011c0 <main+0x154>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	493c      	ldr	r1, [pc, #240]	; (80011c4 <main+0x158>)
 80010d2:	f000 ff23 	bl	8001f1c <_ZN6ws281213ws2812_doubleC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>

  uint8_t hello[] = "hello";
 80010d6:	4a3c      	ldr	r2, [pc, #240]	; (80011c8 <main+0x15c>)
 80010d8:	f107 0308 	add.w	r3, r7, #8
 80010dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010e0:	6018      	str	r0, [r3, #0]
 80010e2:	3304      	adds	r3, #4
 80010e4:	8019      	strh	r1, [r3, #0]
  uint8_t world[] = "world";
 80010e6:	4a39      	ldr	r2, [pc, #228]	; (80011cc <main+0x160>)
 80010e8:	463b      	mov	r3, r7
 80010ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010ee:	6018      	str	r0, [r3, #0]
 80010f0:	3304      	adds	r3, #4
 80010f2:	8019      	strh	r1, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart1, hello, 5, 1);
 80010f4:	f107 0108 	add.w	r1, r7, #8
 80010f8:	2301      	movs	r3, #1
 80010fa:	2205      	movs	r2, #5
 80010fc:	4834      	ldr	r0, [pc, #208]	; (80011d0 <main+0x164>)
 80010fe:	f005 fb14 	bl	800672a <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001102:	2120      	movs	r1, #32
 8001104:	4833      	ldr	r0, [pc, #204]	; (80011d4 <main+0x168>)
 8001106:	f002 f87b 	bl	8003200 <HAL_GPIO_TogglePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1600);
 800110a:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <main+0x150>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001112:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 300);
 8001114:	4b29      	ldr	r3, [pc, #164]	; (80011bc <main+0x150>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800111c:	639a      	str	r2, [r3, #56]	; 0x38
//	  led_set_RGB(0, 32, 0, 0);
//	  led_set_RGB(1, 0, 32, 0);
//	  led_render_all();
	  pixels.colors[0] = {32, 0, 0};
 800111e:	2320      	movs	r3, #32
 8001120:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001124:	2300      	movs	r3, #0
 8001126:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800112a:	2300      	movs	r3, #0
 800112c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	  pixels.colors[1] = {0, 32, 0};
 8001130:	2300      	movs	r3, #0
 8001132:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8001136:	2320      	movs	r3, #32
 8001138:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800113c:	2300      	movs	r3, #0
 800113e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	  pixels.rend();
 8001142:	f107 0310 	add.w	r3, r7, #16
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fec5 	bl	8001ed6 <_ZN6ws281213ws2812_double4rendEv>
	  send_message_CAN();
 800114c:	f000 fba8 	bl	80018a0 <_Z16send_message_CANv>
	  HAL_Delay(1000);
 8001150:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001154:	f000 ff94 	bl	8002080 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, world, 5, 1);
 8001158:	4639      	mov	r1, r7
 800115a:	2301      	movs	r3, #1
 800115c:	2205      	movs	r2, #5
 800115e:	481c      	ldr	r0, [pc, #112]	; (80011d0 <main+0x164>)
 8001160:	f005 fae3 	bl	800672a <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001164:	2120      	movs	r1, #32
 8001166:	481b      	ldr	r0, [pc, #108]	; (80011d4 <main+0x168>)
 8001168:	f002 f84a 	bl	8003200 <HAL_GPIO_TogglePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 300);
 800116c:	4b13      	ldr	r3, [pc, #76]	; (80011bc <main+0x150>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001174:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1600);
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <main+0x150>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800117e:	639a      	str	r2, [r3, #56]	; 0x38
//	  led_set_RGB(0, 0, 0, 32);
//	  led_set_RGB(1, 16, 16, 16);
//	  led_render_all();
	  pixels.colors[0] = {0, 0, 32};
 8001180:	2300      	movs	r3, #0
 8001182:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001186:	2300      	movs	r3, #0
 8001188:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800118c:	2320      	movs	r3, #32
 800118e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	  pixels.colors[1] = {16, 16, 16};
 8001192:	4a11      	ldr	r2, [pc, #68]	; (80011d8 <main+0x16c>)
 8001194:	f107 0352 	add.w	r3, r7, #82	; 0x52
 8001198:	8811      	ldrh	r1, [r2, #0]
 800119a:	7892      	ldrb	r2, [r2, #2]
 800119c:	8019      	strh	r1, [r3, #0]
 800119e:	709a      	strb	r2, [r3, #2]
	  pixels.rend();
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fe96 	bl	8001ed6 <_ZN6ws281213ws2812_double4rendEv>
	  send_usart1_CAN_mailbox();
 80011aa:	f000 fbb3 	bl	8001914 <_Z23send_usart1_CAN_mailboxv>
	  HAL_Delay(1000);
 80011ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b2:	f000 ff65 	bl	8002080 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, hello, 5, 1);
 80011b6:	e79d      	b.n	80010f4 <main+0x88>
 80011b8:	2000008c 	.word	0x2000008c
 80011bc:	200000b4 	.word	0x200000b4
 80011c0:	20000198 	.word	0x20000198
 80011c4:	2000014c 	.word	0x2000014c
 80011c8:	08006f50 	.word	0x08006f50
 80011cc:	08006f58 	.word	0x08006f58
 80011d0:	200001dc 	.word	0x200001dc
 80011d4:	48000400 	.word	0x48000400
 80011d8:	08006f60 	.word	0x08006f60

080011dc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b096      	sub	sp, #88	; 0x58
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011e6:	2228      	movs	r2, #40	; 0x28
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f005 fe42 	bl	8006e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]
 800120e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001210:	2301      	movs	r3, #1
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001214:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800121a:	2301      	movs	r3, #1
 800121c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121e:	2301      	movs	r3, #1
 8001220:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001222:	2302      	movs	r3, #2
 8001224:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001226:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800122a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800122c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001230:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001232:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001236:	4618      	mov	r0, r3
 8001238:	f001 fffc 	bl	8003234 <HAL_RCC_OscConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	bf14      	ite	ne
 8001242:	2301      	movne	r3, #1
 8001244:	2300      	moveq	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 800124c:	f000 fb9a 	bl	8001984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001250:	230f      	movs	r3, #15
 8001252:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001254:	2302      	movs	r3, #2
 8001256:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800125c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	2102      	movs	r1, #2
 800126c:	4618      	mov	r0, r3
 800126e:	f002 fee9 	bl	8004044 <HAL_RCC_ClockConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf14      	ite	ne
 8001278:	2301      	movne	r3, #1
 800127a:	2300      	moveq	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 8001282:	f000 fb7f 	bl	8001984 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8001286:	f241 0301 	movw	r3, #4097	; 0x1001
 800128a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	4618      	mov	r0, r3
 8001298:	f003 f90c 	bl	80044b4 <HAL_RCCEx_PeriphCLKConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	bf14      	ite	ne
 80012a2:	2301      	movne	r3, #1
 80012a4:	2300      	moveq	r3, #0
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80012ac:	f000 fb6a 	bl	8001984 <Error_Handler>
  }
}
 80012b0:	bf00      	nop
 80012b2:	3758      	adds	r7, #88	; 0x58
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <_ZL11MX_CAN_Initv+0x70>)
 80012be:	4a1b      	ldr	r2, [pc, #108]	; (800132c <_ZL11MX_CAN_Initv+0x74>)
 80012c0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <_ZL11MX_CAN_Initv+0x70>)
 80012c4:	2202      	movs	r2, #2
 80012c6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <_ZL11MX_CAN_Initv+0x70>)
 80012ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ce:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <_ZL11MX_CAN_Initv+0x70>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <_ZL11MX_CAN_Initv+0x70>)
 80012d8:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 80012dc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <_ZL11MX_CAN_Initv+0x70>)
 80012e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80012e4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <_ZL11MX_CAN_Initv+0x70>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <_ZL11MX_CAN_Initv+0x70>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <_ZL11MX_CAN_Initv+0x70>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <_ZL11MX_CAN_Initv+0x70>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <_ZL11MX_CAN_Initv+0x70>)
 8001300:	2200      	movs	r2, #0
 8001302:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <_ZL11MX_CAN_Initv+0x70>)
 8001306:	2200      	movs	r2, #0
 8001308:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800130a:	4807      	ldr	r0, [pc, #28]	; (8001328 <_ZL11MX_CAN_Initv+0x70>)
 800130c:	f000 fedc 	bl	80020c8 <HAL_CAN_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	bf14      	ite	ne
 8001316:	2301      	movne	r3, #1
 8001318:	2300      	moveq	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <_ZL11MX_CAN_Initv+0x6c>
  {
    Error_Handler();
 8001320:	f000 fb30 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2000008c 	.word	0x2000008c
 800132c:	40006400 	.word	0x40006400

08001330 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b096      	sub	sp, #88	; 0x58
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001336:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001342:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	615a      	str	r2, [r3, #20]
 8001354:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	222c      	movs	r2, #44	; 0x2c
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f005 fd89 	bl	8006e74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001362:	4b4b      	ldr	r3, [pc, #300]	; (8001490 <_ZL12MX_TIM1_Initv+0x160>)
 8001364:	4a4b      	ldr	r2, [pc, #300]	; (8001494 <_ZL12MX_TIM1_Initv+0x164>)
 8001366:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001368:	4b49      	ldr	r3, [pc, #292]	; (8001490 <_ZL12MX_TIM1_Initv+0x160>)
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800136e:	4b48      	ldr	r3, [pc, #288]	; (8001490 <_ZL12MX_TIM1_Initv+0x160>)
 8001370:	2220      	movs	r2, #32
 8001372:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 8001374:	4b46      	ldr	r3, [pc, #280]	; (8001490 <_ZL12MX_TIM1_Initv+0x160>)
 8001376:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800137a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137c:	4b44      	ldr	r3, [pc, #272]	; (8001490 <_ZL12MX_TIM1_Initv+0x160>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001382:	4b43      	ldr	r3, [pc, #268]	; (8001490 <_ZL12MX_TIM1_Initv+0x160>)
 8001384:	2200      	movs	r2, #0
 8001386:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001388:	4b41      	ldr	r3, [pc, #260]	; (8001490 <_ZL12MX_TIM1_Initv+0x160>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800138e:	4840      	ldr	r0, [pc, #256]	; (8001490 <_ZL12MX_TIM1_Initv+0x160>)
 8001390:	f003 fa0d 	bl	80047ae <HAL_TIM_PWM_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	bf14      	ite	ne
 800139a:	2301      	movne	r3, #1
 800139c:	2300      	moveq	r3, #0
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 80013a4:	f000 faee 	bl	8001984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a8:	2300      	movs	r3, #0
 80013aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013b8:	4619      	mov	r1, r3
 80013ba:	4835      	ldr	r0, [pc, #212]	; (8001490 <_ZL12MX_TIM1_Initv+0x160>)
 80013bc:	f005 f85c 	bl	8006478 <HAL_TIMEx_MasterConfigSynchronization>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	bf14      	ite	ne
 80013c6:	2301      	movne	r3, #1
 80013c8:	2300      	moveq	r3, #0
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <_ZL12MX_TIM1_Initv+0xa4>
  {
    Error_Handler();
 80013d0:	f000 fad8 	bl	8001984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d4:	2360      	movs	r3, #96	; 0x60
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013dc:	2300      	movs	r3, #0
 80013de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013e0:	2300      	movs	r3, #0
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013ec:	2300      	movs	r3, #0
 80013ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013f4:	2200      	movs	r2, #0
 80013f6:	4619      	mov	r1, r3
 80013f8:	4825      	ldr	r0, [pc, #148]	; (8001490 <_ZL12MX_TIM1_Initv+0x160>)
 80013fa:	f003 ff05 	bl	8005208 <HAL_TIM_PWM_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	bf14      	ite	ne
 8001404:	2301      	movne	r3, #1
 8001406:	2300      	moveq	r3, #0
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <_ZL12MX_TIM1_Initv+0xe2>
  {
    Error_Handler();
 800140e:	f000 fab9 	bl	8001984 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001412:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001416:	2204      	movs	r2, #4
 8001418:	4619      	mov	r1, r3
 800141a:	481d      	ldr	r0, [pc, #116]	; (8001490 <_ZL12MX_TIM1_Initv+0x160>)
 800141c:	f003 fef4 	bl	8005208 <HAL_TIM_PWM_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	bf14      	ite	ne
 8001426:	2301      	movne	r3, #1
 8001428:	2300      	moveq	r3, #0
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <_ZL12MX_TIM1_Initv+0x104>
  {
    Error_Handler();
 8001430:	f000 faa8 	bl	8001984 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 16;
 8001440:	2310      	movs	r3, #16
 8001442:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800144c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	4619      	mov	r1, r3
 8001468:	4809      	ldr	r0, [pc, #36]	; (8001490 <_ZL12MX_TIM1_Initv+0x160>)
 800146a:	f005 f873 	bl	8006554 <HAL_TIMEx_ConfigBreakDeadTime>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	bf14      	ite	ne
 8001474:	2301      	movne	r3, #1
 8001476:	2300      	moveq	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <_ZL12MX_TIM1_Initv+0x152>
  {
    Error_Handler();
 800147e:	f000 fa81 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001482:	4803      	ldr	r0, [pc, #12]	; (8001490 <_ZL12MX_TIM1_Initv+0x160>)
 8001484:	f000 fb9c 	bl	8001bc0 <HAL_TIM_MspPostInit>

}
 8001488:	bf00      	nop
 800148a:	3758      	adds	r7, #88	; 0x58
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200000b4 	.word	0x200000b4
 8001494:	40012c00 	.word	0x40012c00

08001498 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08c      	sub	sp, #48	; 0x30
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c6:	4b40      	ldr	r3, [pc, #256]	; (80015c8 <_ZL12MX_TIM2_Initv+0x130>)
 80014c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014ce:	4b3e      	ldr	r3, [pc, #248]	; (80015c8 <_ZL12MX_TIM2_Initv+0x130>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b3c      	ldr	r3, [pc, #240]	; (80015c8 <_ZL12MX_TIM2_Initv+0x130>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014da:	4b3b      	ldr	r3, [pc, #236]	; (80015c8 <_ZL12MX_TIM2_Initv+0x130>)
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295
 80014e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b39      	ldr	r3, [pc, #228]	; (80015c8 <_ZL12MX_TIM2_Initv+0x130>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e8:	4b37      	ldr	r3, [pc, #220]	; (80015c8 <_ZL12MX_TIM2_Initv+0x130>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80014ee:	4836      	ldr	r0, [pc, #216]	; (80015c8 <_ZL12MX_TIM2_Initv+0x130>)
 80014f0:	f003 fd96 	bl	8005020 <HAL_TIM_IC_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	bf14      	ite	ne
 80014fa:	2301      	movne	r3, #1
 80014fc:	2300      	moveq	r3, #0
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <_ZL12MX_TIM2_Initv+0x70>
  {
    Error_Handler();
 8001504:	f000 fa3e 	bl	8001984 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001508:	2304      	movs	r3, #4
 800150a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800150c:	2350      	movs	r3, #80	; 0x50
 800150e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	4619      	mov	r1, r3
 8001522:	4829      	ldr	r0, [pc, #164]	; (80015c8 <_ZL12MX_TIM2_Initv+0x130>)
 8001524:	f004 f84d 	bl	80055c2 <HAL_TIM_SlaveConfigSynchro>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	bf14      	ite	ne
 800152e:	2301      	movne	r3, #1
 8001530:	2300      	moveq	r3, #0
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <_ZL12MX_TIM2_Initv+0xa4>
  {
    Error_Handler();
 8001538:	f000 fa24 	bl	8001984 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001540:	2301      	movs	r3, #1
 8001542:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2200      	movs	r2, #0
 8001552:	4619      	mov	r1, r3
 8001554:	481c      	ldr	r0, [pc, #112]	; (80015c8 <_ZL12MX_TIM2_Initv+0x130>)
 8001556:	f003 fdba 	bl	80050ce <HAL_TIM_IC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	bf14      	ite	ne
 8001560:	2301      	movne	r3, #1
 8001562:	2300      	moveq	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <_ZL12MX_TIM2_Initv+0xd6>
  {
    Error_Handler();
 800156a:	f000 fa0b 	bl	8001984 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800156e:	2302      	movs	r3, #2
 8001570:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001572:	2302      	movs	r3, #2
 8001574:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	2204      	movs	r2, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4812      	ldr	r0, [pc, #72]	; (80015c8 <_ZL12MX_TIM2_Initv+0x130>)
 8001580:	f003 fda5 	bl	80050ce <HAL_TIM_IC_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	bf14      	ite	ne
 800158a:	2301      	movne	r3, #1
 800158c:	2300      	moveq	r3, #0
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <_ZL12MX_TIM2_Initv+0x100>
  {
    Error_Handler();
 8001594:	f000 f9f6 	bl	8001984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015a0:	463b      	mov	r3, r7
 80015a2:	4619      	mov	r1, r3
 80015a4:	4808      	ldr	r0, [pc, #32]	; (80015c8 <_ZL12MX_TIM2_Initv+0x130>)
 80015a6:	f004 ff67 	bl	8006478 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf14      	ite	ne
 80015b0:	2301      	movne	r3, #1
 80015b2:	2300      	moveq	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <_ZL12MX_TIM2_Initv+0x126>
  {
    Error_Handler();
 80015ba:	f000 f9e3 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	3730      	adds	r7, #48	; 0x30
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000100 	.word	0x20000100

080015cc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08e      	sub	sp, #56	; 0x38
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ec:	463b      	mov	r3, r7
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]
 80015fa:	615a      	str	r2, [r3, #20]
 80015fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015fe:	4b39      	ldr	r3, [pc, #228]	; (80016e4 <_ZL12MX_TIM3_Initv+0x118>)
 8001600:	4a39      	ldr	r2, [pc, #228]	; (80016e8 <_ZL12MX_TIM3_Initv+0x11c>)
 8001602:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001604:	4b37      	ldr	r3, [pc, #220]	; (80016e4 <_ZL12MX_TIM3_Initv+0x118>)
 8001606:	2200      	movs	r2, #0
 8001608:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160a:	4b36      	ldr	r3, [pc, #216]	; (80016e4 <_ZL12MX_TIM3_Initv+0x118>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 8001610:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <_ZL12MX_TIM3_Initv+0x118>)
 8001612:	2259      	movs	r2, #89	; 0x59
 8001614:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001616:	4b33      	ldr	r3, [pc, #204]	; (80016e4 <_ZL12MX_TIM3_Initv+0x118>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161c:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <_ZL12MX_TIM3_Initv+0x118>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001622:	4830      	ldr	r0, [pc, #192]	; (80016e4 <_ZL12MX_TIM3_Initv+0x118>)
 8001624:	f003 f86c 	bl	8004700 <HAL_TIM_Base_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	bf14      	ite	ne
 800162e:	2301      	movne	r3, #1
 8001630:	2300      	moveq	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8001638:	f000 f9a4 	bl	8001984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001646:	4619      	mov	r1, r3
 8001648:	4826      	ldr	r0, [pc, #152]	; (80016e4 <_ZL12MX_TIM3_Initv+0x118>)
 800164a:	f003 fef1 	bl	8005430 <HAL_TIM_ConfigClockSource>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf14      	ite	ne
 8001654:	2301      	movne	r3, #1
 8001656:	2300      	moveq	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 800165e:	f000 f991 	bl	8001984 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001662:	4820      	ldr	r0, [pc, #128]	; (80016e4 <_ZL12MX_TIM3_Initv+0x118>)
 8001664:	f003 f8a3 	bl	80047ae <HAL_TIM_PWM_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	bf14      	ite	ne
 800166e:	2301      	movne	r3, #1
 8001670:	2300      	moveq	r3, #0
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8001678:	f000 f984 	bl	8001984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	4816      	ldr	r0, [pc, #88]	; (80016e4 <_ZL12MX_TIM3_Initv+0x118>)
 800168c:	f004 fef4 	bl	8006478 <HAL_TIMEx_MasterConfigSynchronization>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	bf14      	ite	ne
 8001696:	2301      	movne	r3, #1
 8001698:	2300      	moveq	r3, #0
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 80016a0:	f000 f970 	bl	8001984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a4:	2360      	movs	r3, #96	; 0x60
 80016a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016b4:	463b      	mov	r3, r7
 80016b6:	220c      	movs	r2, #12
 80016b8:	4619      	mov	r1, r3
 80016ba:	480a      	ldr	r0, [pc, #40]	; (80016e4 <_ZL12MX_TIM3_Initv+0x118>)
 80016bc:	f003 fda4 	bl	8005208 <HAL_TIM_PWM_ConfigChannel>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	bf14      	ite	ne
 80016c6:	2301      	movne	r3, #1
 80016c8:	2300      	moveq	r3, #0
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 80016d0:	f000 f958 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <_ZL12MX_TIM3_Initv+0x118>)
 80016d6:	f000 fa73 	bl	8001bc0 <HAL_TIM_MspPostInit>

}
 80016da:	bf00      	nop
 80016dc:	3738      	adds	r7, #56	; 0x38
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000014c 	.word	0x2000014c
 80016e8:	40000400 	.word	0x40000400

080016ec <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016f0:	4b16      	ldr	r3, [pc, #88]	; (800174c <_ZL19MX_USART1_UART_Initv+0x60>)
 80016f2:	4a17      	ldr	r2, [pc, #92]	; (8001750 <_ZL19MX_USART1_UART_Initv+0x64>)
 80016f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <_ZL19MX_USART1_UART_Initv+0x60>)
 80016f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <_ZL19MX_USART1_UART_Initv+0x60>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <_ZL19MX_USART1_UART_Initv+0x60>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <_ZL19MX_USART1_UART_Initv+0x60>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800172e:	4807      	ldr	r0, [pc, #28]	; (800174c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001730:	f004 ffad 	bl	800668e <HAL_UART_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	bf14      	ite	ne
 800173a:	2301      	movne	r3, #1
 800173c:	2300      	moveq	r3, #0
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8001744:	f000 f91e 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200001dc 	.word	0x200001dc
 8001750:	40013800 	.word	0x40013800

08001754 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <_ZL11MX_DMA_Initv+0x38>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <_ZL11MX_DMA_Initv+0x38>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6153      	str	r3, [r2, #20]
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <_ZL11MX_DMA_Initv+0x38>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	200d      	movs	r0, #13
 8001778:	f001 f9ad 	bl	8002ad6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800177c:	200d      	movs	r0, #13
 800177e:	f001 f9c6 	bl	8002b0e <HAL_NVIC_EnableIRQ>

}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000

08001790 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017a6:	4b1d      	ldr	r3, [pc, #116]	; (800181c <_ZL12MX_GPIO_Initv+0x8c>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	4a1c      	ldr	r2, [pc, #112]	; (800181c <_ZL12MX_GPIO_Initv+0x8c>)
 80017ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017b0:	6153      	str	r3, [r2, #20]
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <_ZL12MX_GPIO_Initv+0x8c>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <_ZL12MX_GPIO_Initv+0x8c>)
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	4a16      	ldr	r2, [pc, #88]	; (800181c <_ZL12MX_GPIO_Initv+0x8c>)
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c8:	6153      	str	r3, [r2, #20]
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <_ZL12MX_GPIO_Initv+0x8c>)
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <_ZL12MX_GPIO_Initv+0x8c>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <_ZL12MX_GPIO_Initv+0x8c>)
 80017dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e0:	6153      	str	r3, [r2, #20]
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <_ZL12MX_GPIO_Initv+0x8c>)
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISABLE_GPIO_Port, DISABLE_Pin, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2120      	movs	r1, #32
 80017f2:	480b      	ldr	r0, [pc, #44]	; (8001820 <_ZL12MX_GPIO_Initv+0x90>)
 80017f4:	f001 fcec 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISABLE_Pin */
  GPIO_InitStruct.Pin = DISABLE_Pin;
 80017f8:	2320      	movs	r3, #32
 80017fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISABLE_GPIO_Port, &GPIO_InitStruct);
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	4619      	mov	r1, r3
 800180e:	4804      	ldr	r0, [pc, #16]	; (8001820 <_ZL12MX_GPIO_Initv+0x90>)
 8001810:	f001 fb6c 	bl	8002eec <HAL_GPIO_Init>

}
 8001814:	bf00      	nop
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40021000 	.word	0x40021000
 8001820:	48000400 	.word	0x48000400

08001824 <_Z17setup_fillter_CANv>:
	  }
  }
  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t *)wr_buf, WRITE_BUF_LEN);
}

void setup_fillter_CAN(){
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
	uint16_t filterID[4] = {0x000, 0x200, 0x400, 0x500};
 800182a:	4a1a      	ldr	r2, [pc, #104]	; (8001894 <_Z17setup_fillter_CANv+0x70>)
 800182c:	463b      	mov	r3, r7
 800182e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001832:	e883 0003 	stmia.w	r3, {r0, r1}

	filter.FilterIdHigh         = filterID[0] << 5;                        // フィルターID(上�?16ビッ�?)
 8001836:	883b      	ldrh	r3, [r7, #0]
 8001838:	015b      	lsls	r3, r3, #5
 800183a:	461a      	mov	r2, r3
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <_Z17setup_fillter_CANv+0x74>)
 800183e:	601a      	str	r2, [r3, #0]
	filter.FilterIdLow          = filterID[1] << 5;                        // フィルターID(下�?16ビッ�?)
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	015b      	lsls	r3, r3, #5
 8001844:	461a      	mov	r2, r3
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <_Z17setup_fillter_CANv+0x74>)
 8001848:	605a      	str	r2, [r3, #4]
	filter.FilterMaskIdHigh     = filterID[2] << 5;                        // フィルターマスク(上�?16ビッ�?)
 800184a:	88bb      	ldrh	r3, [r7, #4]
 800184c:	015b      	lsls	r3, r3, #5
 800184e:	461a      	mov	r2, r3
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <_Z17setup_fillter_CANv+0x74>)
 8001852:	609a      	str	r2, [r3, #8]
	filter.FilterMaskIdLow      = filterID[3] << 5;                        // フィルターマスク(下�?16ビッ�?)
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	015b      	lsls	r3, r3, #5
 8001858:	461a      	mov	r2, r3
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <_Z17setup_fillter_CANv+0x74>)
 800185c:	60da      	str	r2, [r3, #12]
	filter.FilterScale          = CAN_FILTERSCALE_16BIT;    // フィルタースケール
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <_Z17setup_fillter_CANv+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	61da      	str	r2, [r3, #28]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <_Z17setup_fillter_CANv+0x74>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
	filter.FilterBank           = 0;                        // フィルターバンクNo
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <_Z17setup_fillter_CANv+0x74>)
 800186c:	2200      	movs	r2, #0
 800186e:	615a      	str	r2, [r3, #20]
	filter.FilterMode           = CAN_FILTERMODE_IDLIST;    // フィルターモー�?
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <_Z17setup_fillter_CANv+0x74>)
 8001872:	2201      	movs	r2, #1
 8001874:	619a      	str	r2, [r3, #24]
	filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <_Z17setup_fillter_CANv+0x74>)
 8001878:	220e      	movs	r2, #14
 800187a:	625a      	str	r2, [r3, #36]	; 0x24
	filter.FilterActivation     = ENABLE;                   // フィルター無効?��有効
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <_Z17setup_fillter_CANv+0x74>)
 800187e:	2201      	movs	r2, #1
 8001880:	621a      	str	r2, [r3, #32]
	HAL_CAN_ConfigFilter(&hcan, &filter);
 8001882:	4905      	ldr	r1, [pc, #20]	; (8001898 <_Z17setup_fillter_CANv+0x74>)
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <_Z17setup_fillter_CANv+0x78>)
 8001886:	f000 fd1a 	bl	80022be <HAL_CAN_ConfigFilter>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	08006f64 	.word	0x08006f64
 8001898:	20000260 	.word	0x20000260
 800189c:	2000008c 	.word	0x2000008c

080018a0 <_Z16send_message_CANv>:

int send_message_CAN(){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	uint8_t TxData[8];
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80018a6:	481a      	ldr	r0, [pc, #104]	; (8001910 <_Z16send_message_CANv+0x70>)
 80018a8:	f000 fef2 	bl	8002690 <HAL_CAN_GetTxMailboxesFreeLevel>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	bf14      	ite	ne
 80018b2:	2301      	movne	r3, #1
 80018b4:	2300      	moveq	r3, #0
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d024      	beq.n	8001906 <_Z16send_message_CANv+0x66>
	    TxHeader.StdId = 0x000;                 // CAN ID
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]
	    TxHeader.RTR = CAN_RTR_DATA;            // フレー�?タイプ�?��?ータフレー�?
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
	    TxHeader.IDE = CAN_ID_STD;              // 標準ID(11?��ﾞｯ?�?)
 80018c4:	2300      	movs	r3, #0
 80018c6:	61bb      	str	r3, [r7, #24]
	    TxHeader.DLC = 8;                       // �?ータ長は8バイトに
 80018c8:	2308      	movs	r3, #8
 80018ca:	623b      	str	r3, [r7, #32]
	    TxHeader.TransmitGlobalTime = DISABLE;  // ???
 80018cc:	2300      	movs	r3, #0
 80018ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    TxData[0] = 0x11;
 80018d2:	2311      	movs	r3, #17
 80018d4:	713b      	strb	r3, [r7, #4]
	    TxData[1] = 0x22;
 80018d6:	2322      	movs	r3, #34	; 0x22
 80018d8:	717b      	strb	r3, [r7, #5]
	    TxData[2] = 0x33;
 80018da:	2333      	movs	r3, #51	; 0x33
 80018dc:	71bb      	strb	r3, [r7, #6]
	    TxData[3] = 0x44;
 80018de:	2344      	movs	r3, #68	; 0x44
 80018e0:	71fb      	strb	r3, [r7, #7]
	    TxData[4] = 0x55;
 80018e2:	2355      	movs	r3, #85	; 0x55
 80018e4:	723b      	strb	r3, [r7, #8]
	    TxData[5] = 0x66;
 80018e6:	2366      	movs	r3, #102	; 0x66
 80018e8:	727b      	strb	r3, [r7, #9]
	    TxData[6] = 0x77;
 80018ea:	2377      	movs	r3, #119	; 0x77
 80018ec:	72bb      	strb	r3, [r7, #10]
	    TxData[7] = 0x88;
 80018ee:	2388      	movs	r3, #136	; 0x88
 80018f0:	72fb      	strb	r3, [r7, #11]
	    HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	1d3a      	adds	r2, r7, #4
 80018f8:	f107 0110 	add.w	r1, r7, #16
 80018fc:	4804      	ldr	r0, [pc, #16]	; (8001910 <_Z16send_message_CANv+0x70>)
 80018fe:	f000 fdec 	bl	80024da <HAL_CAN_AddTxMessage>
	    return 0;
 8001902:	2300      	movs	r3, #0
 8001904:	e000      	b.n	8001908 <_Z16send_message_CANv+0x68>
	}
	return 1;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	3728      	adds	r7, #40	; 0x28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	2000008c 	.word	0x2000008c

08001914 <_Z23send_usart1_CAN_mailboxv>:

void send_usart1_CAN_mailbox(){
 8001914:	b580      	push	{r7, lr}
 8001916:	b08c      	sub	sp, #48	; 0x30
 8001918:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef RxHeader;
	uint32_t id;
	uint32_t dlc;
	uint8_t RxData[] = "nnnnnnnn";
 800191a:	4a16      	ldr	r2, [pc, #88]	; (8001974 <_Z23send_usart1_CAN_mailboxv+0x60>)
 800191c:	463b      	mov	r3, r7
 800191e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001920:	c303      	stmia	r3!, {r0, r1}
 8001922:	701a      	strb	r2, [r3, #0]
	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8001924:	463b      	mov	r3, r7
 8001926:	f107 020c 	add.w	r2, r7, #12
 800192a:	2100      	movs	r1, #0
 800192c:	4812      	ldr	r0, [pc, #72]	; (8001978 <_Z23send_usart1_CAN_mailboxv+0x64>)
 800192e:	f000 fee4 	bl	80026fa <HAL_CAN_GetRxMessage>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf0c      	ite	eq
 8001938:	2301      	moveq	r3, #1
 800193a:	2300      	movne	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00e      	beq.n	8001960 <_Z23send_usart1_CAN_mailboxv+0x4c>
	{
		id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;     // ID
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <_Z23send_usart1_CAN_mailboxv+0x38>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	e000      	b.n	800194e <_Z23send_usart1_CAN_mailboxv+0x3a>
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
		dlc = RxHeader.DLC;
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_UART_Transmit(&huart1, (uint8_t*)"Received", 8, 1);
 8001954:	2301      	movs	r3, #1
 8001956:	2208      	movs	r2, #8
 8001958:	4908      	ldr	r1, [pc, #32]	; (800197c <_Z23send_usart1_CAN_mailboxv+0x68>)
 800195a:	4809      	ldr	r0, [pc, #36]	; (8001980 <_Z23send_usart1_CAN_mailboxv+0x6c>)
 800195c:	f004 fee5 	bl	800672a <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart1, RxData, 8, 1);
 8001960:	4639      	mov	r1, r7
 8001962:	2301      	movs	r3, #1
 8001964:	2208      	movs	r2, #8
 8001966:	4806      	ldr	r0, [pc, #24]	; (8001980 <_Z23send_usart1_CAN_mailboxv+0x6c>)
 8001968:	f004 fedf 	bl	800672a <HAL_UART_Transmit>
}
 800196c:	bf00      	nop
 800196e:	3730      	adds	r7, #48	; 0x30
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	08006f78 	.word	0x08006f78
 8001978:	2000008c 	.word	0x2000008c
 800197c:	08006f6c 	.word	0x08006f6c
 8001980:	200001dc 	.word	0x200001dc

08001984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001988:	b672      	cpsid	i
}
 800198a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800198c:	e7fe      	b.n	800198c <Error_Handler+0x8>
	...

08001990 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <HAL_MspInit+0x44>)
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <HAL_MspInit+0x44>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6193      	str	r3, [r2, #24]
 80019a2:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <HAL_MspInit+0x44>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_MspInit+0x44>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <HAL_MspInit+0x44>)
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b8:	61d3      	str	r3, [r2, #28]
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_MspInit+0x44>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000

080019d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a18      	ldr	r2, [pc, #96]	; (8001a58 <HAL_CAN_MspInit+0x80>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d129      	bne.n	8001a4e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <HAL_CAN_MspInit+0x84>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <HAL_CAN_MspInit+0x84>)
 8001a00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a04:	61d3      	str	r3, [r2, #28]
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_CAN_MspInit+0x84>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_CAN_MspInit+0x84>)
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <HAL_CAN_MspInit+0x84>)
 8001a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1c:	6153      	str	r3, [r2, #20]
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_CAN_MspInit+0x84>)
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a30:	2302      	movs	r3, #2
 8001a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001a3c:	2309      	movs	r3, #9
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4a:	f001 fa4f 	bl	8002eec <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001a4e:	bf00      	nop
 8001a50:	3728      	adds	r7, #40	; 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40006400 	.word	0x40006400
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <HAL_TIM_PWM_MspInit+0x38>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d10b      	bne.n	8001a8a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_TIM_PWM_MspInit+0x3c>)
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <HAL_TIM_PWM_MspInit+0x3c>)
 8001a78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a7c:	6193      	str	r3, [r2, #24]
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <HAL_TIM_PWM_MspInit+0x3c>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40012c00 	.word	0x40012c00
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac0:	d128      	bne.n	8001b14 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac2:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <HAL_TIM_IC_MspInit+0x7c>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	4a15      	ldr	r2, [pc, #84]	; (8001b1c <HAL_TIM_IC_MspInit+0x7c>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	61d3      	str	r3, [r2, #28]
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <HAL_TIM_IC_MspInit+0x7c>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <HAL_TIM_IC_MspInit+0x7c>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	4a0f      	ldr	r2, [pc, #60]	; (8001b1c <HAL_TIM_IC_MspInit+0x7c>)
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae4:	6153      	str	r3, [r2, #20]
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <HAL_TIM_IC_MspInit+0x7c>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001af2:	2320      	movs	r3, #32
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b02:	2301      	movs	r3, #1
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b10:	f001 f9ec 	bl	8002eec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b14:	bf00      	nop
 8001b16:	3728      	adds	r7, #40	; 0x28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000

08001b20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a20      	ldr	r2, [pc, #128]	; (8001bb0 <HAL_TIM_Base_MspInit+0x90>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d139      	bne.n	8001ba6 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_TIM_Base_MspInit+0x94>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <HAL_TIM_Base_MspInit+0x94>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	61d3      	str	r3, [r2, #28]
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <HAL_TIM_Base_MspInit+0x94>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <HAL_TIM_Base_MspInit+0x98>)
 8001b4c:	4a1b      	ldr	r2, [pc, #108]	; (8001bbc <HAL_TIM_Base_MspInit+0x9c>)
 8001b4e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_TIM_Base_MspInit+0x98>)
 8001b52:	2210      	movs	r2, #16
 8001b54:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b56:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <HAL_TIM_Base_MspInit+0x98>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001b5c:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <HAL_TIM_Base_MspInit+0x98>)
 8001b5e:	2280      	movs	r2, #128	; 0x80
 8001b60:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_TIM_Base_MspInit+0x98>)
 8001b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b68:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b6a:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <HAL_TIM_Base_MspInit+0x98>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_TIM_Base_MspInit+0x98>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <HAL_TIM_Base_MspInit+0x98>)
 8001b78:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001b7c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001b7e:	480e      	ldr	r0, [pc, #56]	; (8001bb8 <HAL_TIM_Base_MspInit+0x98>)
 8001b80:	f000 ffdf 	bl	8002b42 <HAL_DMA_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001b8a:	f7ff fefb 	bl	8001984 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <HAL_TIM_Base_MspInit+0x98>)
 8001b92:	631a      	str	r2, [r3, #48]	; 0x30
 8001b94:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <HAL_TIM_Base_MspInit+0x98>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <HAL_TIM_Base_MspInit+0x98>)
 8001b9e:	621a      	str	r2, [r3, #32]
 8001ba0:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <HAL_TIM_Base_MspInit+0x98>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40000400 	.word	0x40000400
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	20000198 	.word	0x20000198
 8001bbc:	40020030 	.word	0x40020030

08001bc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a31      	ldr	r2, [pc, #196]	; (8001ca4 <HAL_TIM_MspPostInit+0xe4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d13a      	bne.n	8001c58 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	4b31      	ldr	r3, [pc, #196]	; (8001ca8 <HAL_TIM_MspPostInit+0xe8>)
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	4a30      	ldr	r2, [pc, #192]	; (8001ca8 <HAL_TIM_MspPostInit+0xe8>)
 8001be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bec:	6153      	str	r3, [r2, #20]
 8001bee:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <HAL_TIM_MspPostInit+0xe8>)
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <HAL_TIM_MspPostInit+0xe8>)
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	4a2a      	ldr	r2, [pc, #168]	; (8001ca8 <HAL_TIM_MspPostInit+0xe8>)
 8001c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c04:	6153      	str	r3, [r2, #20]
 8001c06:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <HAL_TIM_MspPostInit+0xe8>)
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001c12:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001c24:	2306      	movs	r3, #6
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c32:	f001 f95b 	bl	8002eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c36:	2301      	movs	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001c46:	2306      	movs	r3, #6
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4816      	ldr	r0, [pc, #88]	; (8001cac <HAL_TIM_MspPostInit+0xec>)
 8001c52:	f001 f94b 	bl	8002eec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c56:	e020      	b.n	8001c9a <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM3)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <HAL_TIM_MspPostInit+0xf0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d11b      	bne.n	8001c9a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <HAL_TIM_MspPostInit+0xe8>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	4a10      	ldr	r2, [pc, #64]	; (8001ca8 <HAL_TIM_MspPostInit+0xe8>)
 8001c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c6c:	6153      	str	r3, [r2, #20]
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_TIM_MspPostInit+0xe8>)
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4805      	ldr	r0, [pc, #20]	; (8001cac <HAL_TIM_MspPostInit+0xec>)
 8001c96:	f001 f929 	bl	8002eec <HAL_GPIO_Init>
}
 8001c9a:	bf00      	nop
 8001c9c:	3728      	adds	r7, #40	; 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40012c00 	.word	0x40012c00
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	48000400 	.word	0x48000400
 8001cb0:	40000400 	.word	0x40000400

08001cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <HAL_UART_MspInit+0x7c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d127      	bne.n	8001d26 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_UART_MspInit+0x80>)
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	4a16      	ldr	r2, [pc, #88]	; (8001d34 <HAL_UART_MspInit+0x80>)
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce0:	6193      	str	r3, [r2, #24]
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <HAL_UART_MspInit+0x80>)
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_UART_MspInit+0x80>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	4a10      	ldr	r2, [pc, #64]	; (8001d34 <HAL_UART_MspInit+0x80>)
 8001cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf8:	6153      	str	r3, [r2, #20]
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <HAL_UART_MspInit+0x80>)
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d06:	23c0      	movs	r3, #192	; 0xc0
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d16:	2307      	movs	r3, #7
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4805      	ldr	r0, [pc, #20]	; (8001d38 <HAL_UART_MspInit+0x84>)
 8001d22:	f001 f8e3 	bl	8002eec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d26:	bf00      	nop
 8001d28:	3728      	adds	r7, #40	; 0x28
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40013800 	.word	0x40013800
 8001d34:	40021000 	.word	0x40021000
 8001d38:	48000400 	.word	0x48000400

08001d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <NMI_Handler+0x4>

08001d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <MemManage_Handler+0x4>

08001d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <BusFault_Handler+0x4>

08001d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <UsageFault_Handler+0x4>

08001d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d88:	f000 f95a 	bl	8002040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <DMA1_Channel3_IRQHandler+0x10>)
 8001d96:	f000 ffb8 	bl	8002d0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000198 	.word	0x20000198

08001da4 <_getpid>:
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	2301      	movs	r3, #1
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <_kill>:
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
 8001dbe:	f005 f82f 	bl	8006e20 <__errno>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2216      	movs	r2, #22
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_exit>:
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ffe7 	bl	8001db4 <_kill>
 8001de6:	e7fe      	b.n	8001de6 <_exit+0x12>

08001de8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <SystemInit+0x20>)
 8001dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df2:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <SystemInit+0x20>)
 8001df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <_ZN6ws281213ws2812_double19update_write_bufferEv>:

#include "ws2812double.h"

namespace ws2812 {

void ws2812_double::update_write_buffer(){
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < pixel_num; i++){
 8001e14:	2300      	movs	r3, #0
 8001e16:	73fb      	strb	r3, [r7, #15]
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d855      	bhi.n	8001eca <_ZN6ws281213ws2812_double19update_write_bufferEv+0xbe>
		for(uint8_t j = 0; j < color_num; j++){
 8001e1e:	2300      	movs	r3, #0
 8001e20:	73bb      	strb	r3, [r7, #14]
 8001e22:	7bbb      	ldrb	r3, [r7, #14]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d84c      	bhi.n	8001ec2 <_ZN6ws281213ws2812_double19update_write_bufferEv+0xb6>
			uint8_t color = 	(j == 0) ? ws2812_double::colors[i].green
 8001e28:	7bbb      	ldrb	r3, [r7, #14]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d108      	bne.n	8001e40 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x34>
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4413      	add	r3, r2
 8001e38:	440b      	add	r3, r1
 8001e3a:	3340      	adds	r3, #64	; 0x40
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	e018      	b.n	8001e72 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x66>
 8001e40:	7bbb      	ldrb	r3, [r7, #14]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d108      	bne.n	8001e58 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x4c>
							: 	(j == 1) ? ws2812_double::colors[i].red
 8001e46:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? ws2812_double::colors[i].green
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	440b      	add	r3, r1
 8001e52:	333f      	adds	r3, #63	; 0x3f
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	e00c      	b.n	8001e72 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x66>
 8001e58:	7bbb      	ldrb	r3, [r7, #14]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d108      	bne.n	8001e70 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x64>
							: 	(j == 2) ? ws2812_double::colors[i].blue : 0;
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? ws2812_double::colors[i].green
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	440b      	add	r3, r1
 8001e6a:	3341      	adds	r3, #65	; 0x41
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	e000      	b.n	8001e72 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x66>
 8001e70:	2300      	movs	r3, #0
 8001e72:	733b      	strb	r3, [r7, #12]
			for(uint8_t k = 0; k < byte; k++){
 8001e74:	2300      	movs	r3, #0
 8001e76:	737b      	strb	r3, [r7, #13]
 8001e78:	7b7b      	ldrb	r3, [r7, #13]
 8001e7a:	2b07      	cmp	r3, #7
 8001e7c:	d81d      	bhi.n	8001eba <_ZN6ws281213ws2812_double19update_write_bufferEv+0xae>
				ws2812_double::write_buffer[(i * color_num + j) * byte + k] = ((color >> (byte -1 + k)) & 1) && 1 ? ws2812_double::high : ws2812_double::low;
 8001e7e:	7b3a      	ldrb	r2, [r7, #12]
 8001e80:	7b7b      	ldrb	r3, [r7, #13]
 8001e82:	3307      	adds	r3, #7
 8001e84:	fa42 f303 	asr.w	r3, r2, r3
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x8a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7b1a      	ldrb	r2, [r3, #12]
 8001e94:	e001      	b.n	8001e9a <_ZN6ws281213ws2812_double19update_write_bufferEv+0x8e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	7b5a      	ldrb	r2, [r3, #13]
 8001e9a:	7bf9      	ldrb	r1, [r7, #15]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4419      	add	r1, r3
 8001ea2:	7bbb      	ldrb	r3, [r7, #14]
 8001ea4:	440b      	add	r3, r1
 8001ea6:	00d9      	lsls	r1, r3, #3
 8001ea8:	7b7b      	ldrb	r3, [r7, #13]
 8001eaa:	440b      	add	r3, r1
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	440b      	add	r3, r1
 8001eb0:	739a      	strb	r2, [r3, #14]
			for(uint8_t k = 0; k < byte; k++){
 8001eb2:	7b7b      	ldrb	r3, [r7, #13]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	737b      	strb	r3, [r7, #13]
 8001eb8:	e7de      	b.n	8001e78 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x6c>
		for(uint8_t j = 0; j < color_num; j++){
 8001eba:	7bbb      	ldrb	r3, [r7, #14]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	73bb      	strb	r3, [r7, #14]
 8001ec0:	e7af      	b.n	8001e22 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x16>
	for(uint8_t i = 0; i < pixel_num; i++){
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
 8001ec8:	e7a6      	b.n	8001e18 <_ZN6ws281213ws2812_double19update_write_bufferEv+0xc>
			}
		}
	}
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <_ZN6ws281213ws2812_double4rendEv>:

void ws2812_double::rend(){
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
	update_write_buffer();
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ff94 	bl	8001e0c <_ZN6ws281213ws2812_double19update_write_bufferEv>
	if(ws2812_double::hdma->State != HAL_DMA_STATE_READY) {
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d007      	beq.n	8001f00 <_ZN6ws281213ws2812_double4rendEv+0x2a>
    	HAL_TIM_PWM_Stop_DMA(ws2812_double::htim, ws2812_double::Channel);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f002 ffa0 	bl	8004e40 <HAL_TIM_PWM_Stop_DMA>
  	}
	HAL_TIM_PWM_Start_DMA(ws2812_double::htim, ws2812_double::Channel, (uint32_t*)ws2812_double::write_buffer, data_len + reset_bit);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6859      	ldr	r1, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f103 020e 	add.w	r2, r3, #14
 8001f0e:	2331      	movs	r3, #49	; 0x31
 8001f10:	f002 fd90 	bl	8004a34 <HAL_TIM_PWM_Start_DMA>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_ZN6ws281213ws2812_doubleC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>:

ws2812_double::ws2812_double(TIM_HandleTypeDef *htim, uint32_t Channel, DMA_HandleTypeDef *hdma, uint8_t high_level_pulse_len, uint8_t low_level_pulse_len) {
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	333f      	adds	r3, #63	; 0x3f
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	809a      	strh	r2, [r3, #4]
	// TODO Auto-generated constructor stub
	ws2812_double::htim = htim;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	601a      	str	r2, [r3, #0]
	ws2812_double::Channel = Channel;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	605a      	str	r2, [r3, #4]
	ws2812_double::hdma = hdma;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	609a      	str	r2, [r3, #8]
	ws2812_double::high = high_level_pulse_len;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	7e3a      	ldrb	r2, [r7, #24]
 8001f4a:	731a      	strb	r2, [r3, #12]
	ws2812_double::low = low_level_pulse_len;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	7f3a      	ldrb	r2, [r7, #28]
 8001f50:	735a      	strb	r2, [r3, #13]
}
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f98 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f64:	480d      	ldr	r0, [pc, #52]	; (8001f9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f66:	490e      	ldr	r1, [pc, #56]	; (8001fa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f68:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <LoopForever+0xe>)
  movs r3, #0
 8001f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f6c:	e002      	b.n	8001f74 <LoopCopyDataInit>

08001f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f72:	3304      	adds	r3, #4

08001f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f78:	d3f9      	bcc.n	8001f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7a:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f7c:	4c0b      	ldr	r4, [pc, #44]	; (8001fac <LoopForever+0x16>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f80:	e001      	b.n	8001f86 <LoopFillZerobss>

08001f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f84:	3204      	adds	r2, #4

08001f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f88:	d3fb      	bcc.n	8001f82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f8a:	f7ff ff2d 	bl	8001de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f8e:	f004 ff4d 	bl	8006e2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f92:	f7ff f86b 	bl	800106c <main>

08001f96 <LoopForever>:

LoopForever:
    b LoopForever
 8001f96:	e7fe      	b.n	8001f96 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f98:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001fa4:	0800716c 	.word	0x0800716c
  ldr r2, =_sbss
 8001fa8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001fac:	20000290 	.word	0x20000290

08001fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fb0:	e7fe      	b.n	8001fb0 <ADC1_2_IRQHandler>
	...

08001fb4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <HAL_Init+0x28>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <HAL_Init+0x28>)
 8001fbe:	f043 0310 	orr.w	r3, r3, #16
 8001fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f000 fd7b 	bl	8002ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fca:	200f      	movs	r0, #15
 8001fcc:	f000 f808 	bl	8001fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd0:	f7ff fcde 	bl	8001990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40022000 	.word	0x40022000

08001fe0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_InitTick+0x54>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_InitTick+0x58>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 fd93 	bl	8002b2a <HAL_SYSTICK_Config>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e00e      	b.n	800202c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b0f      	cmp	r3, #15
 8002012:	d80a      	bhi.n	800202a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002014:	2200      	movs	r2, #0
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f000 fd5b 	bl	8002ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002020:	4a06      	ldr	r2, [pc, #24]	; (800203c <HAL_InitTick+0x5c>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000000 	.word	0x20000000
 8002038:	20000008 	.word	0x20000008
 800203c:	20000004 	.word	0x20000004

08002040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_IncTick+0x20>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_IncTick+0x24>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4413      	add	r3, r2
 8002050:	4a04      	ldr	r2, [pc, #16]	; (8002064 <HAL_IncTick+0x24>)
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000008 	.word	0x20000008
 8002064:	20000288 	.word	0x20000288

08002068 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return uwTick;  
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_GetTick+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000288 	.word	0x20000288

08002080 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002088:	f7ff ffee 	bl	8002068 <HAL_GetTick>
 800208c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d005      	beq.n	80020a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_Delay+0x44>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80020a6:	bf00      	nop
 80020a8:	f7ff ffde 	bl	8002068 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d8f7      	bhi.n	80020a8 <HAL_Delay+0x28>
  {
  }
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000008 	.word	0x20000008

080020c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0ed      	b.n	80022b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d102      	bne.n	80020ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff fc76 	bl	80019d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020fc:	f7ff ffb4 	bl	8002068 <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002102:	e012      	b.n	800212a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002104:	f7ff ffb0 	bl	8002068 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b0a      	cmp	r3, #10
 8002110:	d90b      	bls.n	800212a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2205      	movs	r2, #5
 8002122:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e0c5      	b.n	80022b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0e5      	beq.n	8002104 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0202 	bic.w	r2, r2, #2
 8002146:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002148:	f7ff ff8e 	bl	8002068 <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800214e:	e012      	b.n	8002176 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002150:	f7ff ff8a 	bl	8002068 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b0a      	cmp	r3, #10
 800215c:	d90b      	bls.n	8002176 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2205      	movs	r2, #5
 800216e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e09f      	b.n	80022b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1e5      	bne.n	8002150 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	7e1b      	ldrb	r3, [r3, #24]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d108      	bne.n	800219e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	e007      	b.n	80021ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	7e5b      	ldrb	r3, [r3, #25]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d108      	bne.n	80021c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	e007      	b.n	80021d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7e9b      	ldrb	r3, [r3, #26]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d108      	bne.n	80021f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0220 	orr.w	r2, r2, #32
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	e007      	b.n	8002202 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0220 	bic.w	r2, r2, #32
 8002200:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	7edb      	ldrb	r3, [r3, #27]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d108      	bne.n	800221c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0210 	bic.w	r2, r2, #16
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	e007      	b.n	800222c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0210 	orr.w	r2, r2, #16
 800222a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	7f1b      	ldrb	r3, [r3, #28]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d108      	bne.n	8002246 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0208 	orr.w	r2, r2, #8
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	e007      	b.n	8002256 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0208 	bic.w	r2, r2, #8
 8002254:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7f5b      	ldrb	r3, [r3, #29]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d108      	bne.n	8002270 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0204 	orr.w	r2, r2, #4
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	e007      	b.n	8002280 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0204 	bic.w	r2, r2, #4
 800227e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	ea42 0103 	orr.w	r1, r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	1e5a      	subs	r2, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80022be:	b480      	push	{r7}
 80022c0:	b087      	sub	sp, #28
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80022d6:	7cfb      	ldrb	r3, [r7, #19]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d003      	beq.n	80022e4 <HAL_CAN_ConfigFilter+0x26>
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	f040 80aa 	bne.w	8002438 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022ea:	f043 0201 	orr.w	r2, r3, #1
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	2201      	movs	r2, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	43db      	mvns	r3, r3
 800230e:	401a      	ands	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d123      	bne.n	8002366 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	43db      	mvns	r3, r3
 8002328:	401a      	ands	r2, r3
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002340:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	3248      	adds	r2, #72	; 0x48
 8002346:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800235a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800235c:	6979      	ldr	r1, [r7, #20]
 800235e:	3348      	adds	r3, #72	; 0x48
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	440b      	add	r3, r1
 8002364:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d122      	bne.n	80023b4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	431a      	orrs	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800238e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3248      	adds	r2, #72	; 0x48
 8002394:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023a8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023aa:	6979      	ldr	r1, [r7, #20]
 80023ac:	3348      	adds	r3, #72	; 0x48
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	440b      	add	r3, r1
 80023b2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d109      	bne.n	80023d0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	401a      	ands	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80023ce:	e007      	b.n	80023e0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	431a      	orrs	r2, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d109      	bne.n	80023fc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80023fa:	e007      	b.n	800240c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	431a      	orrs	r2, r3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d107      	bne.n	8002424 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	431a      	orrs	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800242a:	f023 0201 	bic.w	r2, r3, #1
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	e006      	b.n	8002446 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
  }
}
 8002446:	4618      	mov	r0, r3
 8002448:	371c      	adds	r7, #28
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b01      	cmp	r3, #1
 8002464:	d12e      	bne.n	80024c4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2202      	movs	r2, #2
 800246a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800247e:	f7ff fdf3 	bl	8002068 <HAL_GetTick>
 8002482:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002484:	e012      	b.n	80024ac <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002486:	f7ff fdef 	bl	8002068 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b0a      	cmp	r3, #10
 8002492:	d90b      	bls.n	80024ac <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2205      	movs	r2, #5
 80024a4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e012      	b.n	80024d2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1e5      	bne.n	8002486 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	e006      	b.n	80024d2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
  }
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80024da:	b480      	push	{r7}
 80024dc:	b089      	sub	sp, #36	; 0x24
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80024f8:	7ffb      	ldrb	r3, [r7, #31]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d003      	beq.n	8002506 <HAL_CAN_AddTxMessage+0x2c>
 80024fe:	7ffb      	ldrb	r3, [r7, #31]
 8002500:	2b02      	cmp	r3, #2
 8002502:	f040 80b8 	bne.w	8002676 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10a      	bne.n	8002526 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002516:	2b00      	cmp	r3, #0
 8002518:	d105      	bne.n	8002526 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80a0 	beq.w	8002666 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	0e1b      	lsrs	r3, r3, #24
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d907      	bls.n	8002546 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e09e      	b.n	8002684 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002546:	2201      	movs	r2, #1
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	409a      	lsls	r2, r3
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10d      	bne.n	8002574 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002562:	68f9      	ldr	r1, [r7, #12]
 8002564:	6809      	ldr	r1, [r1, #0]
 8002566:	431a      	orrs	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3318      	adds	r3, #24
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	440b      	add	r3, r1
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e00f      	b.n	8002594 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800257e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002584:	68f9      	ldr	r1, [r7, #12]
 8002586:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002588:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	3318      	adds	r3, #24
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	440b      	add	r3, r1
 8002592:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6819      	ldr	r1, [r3, #0]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	3318      	adds	r3, #24
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	440b      	add	r3, r1
 80025a4:	3304      	adds	r3, #4
 80025a6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	7d1b      	ldrb	r3, [r3, #20]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d111      	bne.n	80025d4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	3318      	adds	r3, #24
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	4413      	add	r3, r2
 80025bc:	3304      	adds	r3, #4
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	6811      	ldr	r1, [r2, #0]
 80025c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	3318      	adds	r3, #24
 80025cc:	011b      	lsls	r3, r3, #4
 80025ce:	440b      	add	r3, r1
 80025d0:	3304      	adds	r3, #4
 80025d2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3307      	adds	r3, #7
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	061a      	lsls	r2, r3, #24
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3306      	adds	r3, #6
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	041b      	lsls	r3, r3, #16
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3305      	adds	r3, #5
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	021b      	lsls	r3, r3, #8
 80025ee:	4313      	orrs	r3, r2
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	3204      	adds	r2, #4
 80025f4:	7812      	ldrb	r2, [r2, #0]
 80025f6:	4610      	mov	r0, r2
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	6811      	ldr	r1, [r2, #0]
 80025fc:	ea43 0200 	orr.w	r2, r3, r0
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	440b      	add	r3, r1
 8002606:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800260a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3303      	adds	r3, #3
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	061a      	lsls	r2, r3, #24
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3302      	adds	r3, #2
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	041b      	lsls	r3, r3, #16
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3301      	adds	r3, #1
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	4313      	orrs	r3, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	7812      	ldrb	r2, [r2, #0]
 800262c:	4610      	mov	r0, r2
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	6811      	ldr	r1, [r2, #0]
 8002632:	ea43 0200 	orr.w	r2, r3, r0
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	440b      	add	r3, r1
 800263c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002640:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3318      	adds	r3, #24
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	4413      	add	r3, r2
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	6811      	ldr	r1, [r2, #0]
 8002654:	f043 0201 	orr.w	r2, r3, #1
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	3318      	adds	r3, #24
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	440b      	add	r3, r1
 8002660:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e00e      	b.n	8002684 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e006      	b.n	8002684 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
  }
}
 8002684:	4618      	mov	r0, r3
 8002686:	3724      	adds	r7, #36	; 0x24
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80026a4:	7afb      	ldrb	r3, [r7, #11]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d002      	beq.n	80026b0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80026aa:	7afb      	ldrb	r3, [r7, #11]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d11d      	bne.n	80026ec <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3301      	adds	r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	3301      	adds	r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3301      	adds	r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80026ec:	68fb      	ldr	r3, [r7, #12]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80026fa:	b480      	push	{r7}
 80026fc:	b087      	sub	sp, #28
 80026fe:	af00      	add	r7, sp, #0
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800270e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002710:	7dfb      	ldrb	r3, [r7, #23]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d003      	beq.n	800271e <HAL_CAN_GetRxMessage+0x24>
 8002716:	7dfb      	ldrb	r3, [r7, #23]
 8002718:	2b02      	cmp	r3, #2
 800271a:	f040 80f3 	bne.w	8002904 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10e      	bne.n	8002742 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d116      	bne.n	8002760 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e0e7      	b.n	8002912 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d107      	bne.n	8002760 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0d8      	b.n	8002912 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	331b      	adds	r3, #27
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	4413      	add	r3, r2
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0204 	and.w	r2, r3, #4
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10c      	bne.n	8002798 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	331b      	adds	r3, #27
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	4413      	add	r3, r2
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	0d5b      	lsrs	r3, r3, #21
 800278e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	e00b      	b.n	80027b0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	331b      	adds	r3, #27
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	4413      	add	r3, r2
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	08db      	lsrs	r3, r3, #3
 80027a8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	331b      	adds	r3, #27
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	4413      	add	r3, r2
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0202 	and.w	r2, r3, #2
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	331b      	adds	r3, #27
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	4413      	add	r3, r2
 80027d2:	3304      	adds	r3, #4
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 020f 	and.w	r2, r3, #15
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	331b      	adds	r3, #27
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	4413      	add	r3, r2
 80027ea:	3304      	adds	r3, #4
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	0a1b      	lsrs	r3, r3, #8
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	331b      	adds	r3, #27
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	4413      	add	r3, r2
 8002802:	3304      	adds	r3, #4
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	0c1b      	lsrs	r3, r3, #16
 8002808:	b29a      	uxth	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	4413      	add	r3, r2
 8002818:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	4413      	add	r3, r2
 800282e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	0a1a      	lsrs	r2, r3, #8
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	3301      	adds	r3, #1
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	4413      	add	r3, r2
 8002848:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	0c1a      	lsrs	r2, r3, #16
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	3302      	adds	r3, #2
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	4413      	add	r3, r2
 8002862:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	0e1a      	lsrs	r2, r3, #24
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	3303      	adds	r3, #3
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	4413      	add	r3, r2
 800287c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	3304      	adds	r3, #4
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	4413      	add	r3, r2
 8002894:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	0a1a      	lsrs	r2, r3, #8
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	3305      	adds	r3, #5
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	0c1a      	lsrs	r2, r3, #16
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	3306      	adds	r3, #6
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	0e1a      	lsrs	r2, r3, #24
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	3307      	adds	r3, #7
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d108      	bne.n	80028f0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0220 	orr.w	r2, r2, #32
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	e007      	b.n	8002900 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0220 	orr.w	r2, r2, #32
 80028fe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	e006      	b.n	8002912 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
  }
}
 8002912:	4618      	mov	r0, r3
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002930:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800293c:	4013      	ands	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800294c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002952:	4a04      	ldr	r2, [pc, #16]	; (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	60d3      	str	r3, [r2, #12]
}
 8002958:	bf00      	nop
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <__NVIC_GetPriorityGrouping+0x18>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	f003 0307 	and.w	r3, r3, #7
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	2b00      	cmp	r3, #0
 8002994:	db0b      	blt.n	80029ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	f003 021f 	and.w	r2, r3, #31
 800299c:	4907      	ldr	r1, [pc, #28]	; (80029bc <__NVIC_EnableIRQ+0x38>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	2001      	movs	r0, #1
 80029a6:	fa00 f202 	lsl.w	r2, r0, r2
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000e100 	.word	0xe000e100

080029c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	6039      	str	r1, [r7, #0]
 80029ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	db0a      	blt.n	80029ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	490c      	ldr	r1, [pc, #48]	; (8002a0c <__NVIC_SetPriority+0x4c>)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	0112      	lsls	r2, r2, #4
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	440b      	add	r3, r1
 80029e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e8:	e00a      	b.n	8002a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	4908      	ldr	r1, [pc, #32]	; (8002a10 <__NVIC_SetPriority+0x50>)
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	3b04      	subs	r3, #4
 80029f8:	0112      	lsls	r2, r2, #4
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	440b      	add	r3, r1
 80029fe:	761a      	strb	r2, [r3, #24]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	e000e100 	.word	0xe000e100
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b089      	sub	sp, #36	; 0x24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f1c3 0307 	rsb	r3, r3, #7
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	bf28      	it	cs
 8002a32:	2304      	movcs	r3, #4
 8002a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	2b06      	cmp	r3, #6
 8002a3c:	d902      	bls.n	8002a44 <NVIC_EncodePriority+0x30>
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3b03      	subs	r3, #3
 8002a42:	e000      	b.n	8002a46 <NVIC_EncodePriority+0x32>
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a48:	f04f 32ff 	mov.w	r2, #4294967295
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43da      	mvns	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	401a      	ands	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	fa01 f303 	lsl.w	r3, r1, r3
 8002a66:	43d9      	mvns	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a6c:	4313      	orrs	r3, r2
         );
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3724      	adds	r7, #36	; 0x24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a8c:	d301      	bcc.n	8002a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e00f      	b.n	8002ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a92:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <SysTick_Config+0x40>)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a9a:	210f      	movs	r1, #15
 8002a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa0:	f7ff ff8e 	bl	80029c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa4:	4b05      	ldr	r3, [pc, #20]	; (8002abc <SysTick_Config+0x40>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aaa:	4b04      	ldr	r3, [pc, #16]	; (8002abc <SysTick_Config+0x40>)
 8002aac:	2207      	movs	r2, #7
 8002aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	e000e010 	.word	0xe000e010

08002ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff ff29 	bl	8002920 <__NVIC_SetPriorityGrouping>
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b086      	sub	sp, #24
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	4603      	mov	r3, r0
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae8:	f7ff ff3e 	bl	8002968 <__NVIC_GetPriorityGrouping>
 8002aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	6978      	ldr	r0, [r7, #20]
 8002af4:	f7ff ff8e 	bl	8002a14 <NVIC_EncodePriority>
 8002af8:	4602      	mov	r2, r0
 8002afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff5d 	bl	80029c0 <__NVIC_SetPriority>
}
 8002b06:	bf00      	nop
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	4603      	mov	r3, r0
 8002b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff31 	bl	8002984 <__NVIC_EnableIRQ>
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff ffa2 	bl	8002a7c <SysTick_Config>
 8002b38:	4603      	mov	r3, r0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e037      	b.n	8002bc8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f97e 	bl	8002eac <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}  
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_DMA_Start_IT+0x20>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e04a      	b.n	8002c86 <HAL_DMA_Start_IT+0xb6>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d13a      	bne.n	8002c78 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2202      	movs	r2, #2
 8002c06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0201 	bic.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f912 	bl	8002e50 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 020e 	orr.w	r2, r2, #14
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	e00f      	b.n	8002c66 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 020a 	orr.w	r2, r2, #10
 8002c54:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0204 	bic.w	r2, r2, #4
 8002c64:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0201 	orr.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	e005      	b.n	8002c84 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002c80:	2302      	movs	r3, #2
 8002c82:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d005      	beq.n	8002cb0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
 8002cae:	e027      	b.n	8002d00 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 020e 	bic.w	r2, r2, #14
 8002cbe:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd8:	2101      	movs	r1, #1
 8002cda:	fa01 f202 	lsl.w	r2, r1, r2
 8002cde:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	4798      	blx	r3
    } 
  }
  return status;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	2204      	movs	r2, #4
 8002d28:	409a      	lsls	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d024      	beq.n	8002d7c <HAL_DMA_IRQHandler+0x72>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01f      	beq.n	8002d7c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d107      	bne.n	8002d5a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0204 	bic.w	r2, r2, #4
 8002d58:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d62:	2104      	movs	r1, #4
 8002d64:	fa01 f202 	lsl.w	r2, r1, r2
 8002d68:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d06a      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002d7a:	e065      	b.n	8002e48 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	2202      	movs	r2, #2
 8002d82:	409a      	lsls	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d02c      	beq.n	8002de6 <HAL_DMA_IRQHandler+0xdc>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d027      	beq.n	8002de6 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 020a 	bic.w	r2, r2, #10
 8002db2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dca:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d035      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002de4:	e030      	b.n	8002e48 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2208      	movs	r2, #8
 8002dec:	409a      	lsls	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d028      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x13e>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d023      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 020e 	bic.w	r2, r2, #14
 8002e0e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e18:	2101      	movs	r1, #1
 8002e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d004      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	4798      	blx	r3
    }
  }
}  
 8002e46:	e7ff      	b.n	8002e48 <HAL_DMA_IRQHandler+0x13e>
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e66:	2101      	movs	r1, #1
 8002e68:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b10      	cmp	r3, #16
 8002e7c:	d108      	bne.n	8002e90 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e8e:	e007      	b.n	8002ea0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	60da      	str	r2, [r3, #12]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <DMA_CalcBaseAndBitshift+0x34>)
 8002ebc:	4413      	add	r3, r2
 8002ebe:	4a09      	ldr	r2, [pc, #36]	; (8002ee4 <DMA_CalcBaseAndBitshift+0x38>)
 8002ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	009a      	lsls	r2, r3, #2
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a06      	ldr	r2, [pc, #24]	; (8002ee8 <DMA_CalcBaseAndBitshift+0x3c>)
 8002ed0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	bffdfff8 	.word	0xbffdfff8
 8002ee4:	cccccccd 	.word	0xcccccccd
 8002ee8:	40020000 	.word	0x40020000

08002eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002efa:	e14e      	b.n	800319a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	2101      	movs	r1, #1
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	fa01 f303 	lsl.w	r3, r1, r3
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 8140 	beq.w	8003194 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d005      	beq.n	8002f2c <HAL_GPIO_Init+0x40>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d130      	bne.n	8002f8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	2203      	movs	r2, #3
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f62:	2201      	movs	r2, #1
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	f003 0201 	and.w	r2, r3, #1
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d017      	beq.n	8002fca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d123      	bne.n	800301e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	08da      	lsrs	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3208      	adds	r2, #8
 8002fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	220f      	movs	r2, #15
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	08da      	lsrs	r2, r3, #3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3208      	adds	r2, #8
 8003018:	6939      	ldr	r1, [r7, #16]
 800301a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	2203      	movs	r2, #3
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43db      	mvns	r3, r3
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4013      	ands	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 0203 	and.w	r2, r3, #3
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 809a 	beq.w	8003194 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003060:	4b55      	ldr	r3, [pc, #340]	; (80031b8 <HAL_GPIO_Init+0x2cc>)
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	4a54      	ldr	r2, [pc, #336]	; (80031b8 <HAL_GPIO_Init+0x2cc>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	6193      	str	r3, [r2, #24]
 800306c:	4b52      	ldr	r3, [pc, #328]	; (80031b8 <HAL_GPIO_Init+0x2cc>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003078:	4a50      	ldr	r2, [pc, #320]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	089b      	lsrs	r3, r3, #2
 800307e:	3302      	adds	r3, #2
 8003080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003084:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f003 0303 	and.w	r3, r3, #3
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	220f      	movs	r2, #15
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4013      	ands	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030a2:	d013      	beq.n	80030cc <HAL_GPIO_Init+0x1e0>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a46      	ldr	r2, [pc, #280]	; (80031c0 <HAL_GPIO_Init+0x2d4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d00d      	beq.n	80030c8 <HAL_GPIO_Init+0x1dc>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a45      	ldr	r2, [pc, #276]	; (80031c4 <HAL_GPIO_Init+0x2d8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d007      	beq.n	80030c4 <HAL_GPIO_Init+0x1d8>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a44      	ldr	r2, [pc, #272]	; (80031c8 <HAL_GPIO_Init+0x2dc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d101      	bne.n	80030c0 <HAL_GPIO_Init+0x1d4>
 80030bc:	2303      	movs	r3, #3
 80030be:	e006      	b.n	80030ce <HAL_GPIO_Init+0x1e2>
 80030c0:	2305      	movs	r3, #5
 80030c2:	e004      	b.n	80030ce <HAL_GPIO_Init+0x1e2>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e002      	b.n	80030ce <HAL_GPIO_Init+0x1e2>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <HAL_GPIO_Init+0x1e2>
 80030cc:	2300      	movs	r3, #0
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	f002 0203 	and.w	r2, r2, #3
 80030d4:	0092      	lsls	r2, r2, #2
 80030d6:	4093      	lsls	r3, r2
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030de:	4937      	ldr	r1, [pc, #220]	; (80031bc <HAL_GPIO_Init+0x2d0>)
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	089b      	lsrs	r3, r3, #2
 80030e4:	3302      	adds	r3, #2
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030ec:	4b37      	ldr	r3, [pc, #220]	; (80031cc <HAL_GPIO_Init+0x2e0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003110:	4a2e      	ldr	r2, [pc, #184]	; (80031cc <HAL_GPIO_Init+0x2e0>)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003116:	4b2d      	ldr	r3, [pc, #180]	; (80031cc <HAL_GPIO_Init+0x2e0>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	43db      	mvns	r3, r3
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4013      	ands	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800313a:	4a24      	ldr	r2, [pc, #144]	; (80031cc <HAL_GPIO_Init+0x2e0>)
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003140:	4b22      	ldr	r3, [pc, #136]	; (80031cc <HAL_GPIO_Init+0x2e0>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	43db      	mvns	r3, r3
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4013      	ands	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003164:	4a19      	ldr	r2, [pc, #100]	; (80031cc <HAL_GPIO_Init+0x2e0>)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800316a:	4b18      	ldr	r3, [pc, #96]	; (80031cc <HAL_GPIO_Init+0x2e0>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800318e:	4a0f      	ldr	r2, [pc, #60]	; (80031cc <HAL_GPIO_Init+0x2e0>)
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3301      	adds	r3, #1
 8003198:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f47f aea9 	bne.w	8002efc <HAL_GPIO_Init+0x10>
  }
}
 80031aa:	bf00      	nop
 80031ac:	bf00      	nop
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40010000 	.word	0x40010000
 80031c0:	48000400 	.word	0x48000400
 80031c4:	48000800 	.word	0x48000800
 80031c8:	48000c00 	.word	0x48000c00
 80031cc:	40010400 	.word	0x40010400

080031d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	807b      	strh	r3, [r7, #2]
 80031dc:	4613      	mov	r3, r2
 80031de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031e0:	787b      	ldrb	r3, [r7, #1]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031e6:	887a      	ldrh	r2, [r7, #2]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031ec:	e002      	b.n	80031f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031ee:	887a      	ldrh	r2, [r7, #2]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003212:	887a      	ldrh	r2, [r7, #2]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4013      	ands	r3, r2
 8003218:	041a      	lsls	r2, r3, #16
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	43d9      	mvns	r1, r3
 800321e:	887b      	ldrh	r3, [r7, #2]
 8003220:	400b      	ands	r3, r1
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	619a      	str	r2, [r3, #24]
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800323a:	af00      	add	r7, sp, #0
 800323c:	1d3b      	adds	r3, r7, #4
 800323e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d102      	bne.n	800324e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	f000 bef4 	b.w	8004036 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800324e:	1d3b      	adds	r3, r7, #4
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 816a 	beq.w	8003532 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800325e:	4bb3      	ldr	r3, [pc, #716]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 030c 	and.w	r3, r3, #12
 8003266:	2b04      	cmp	r3, #4
 8003268:	d00c      	beq.n	8003284 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800326a:	4bb0      	ldr	r3, [pc, #704]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	2b08      	cmp	r3, #8
 8003274:	d159      	bne.n	800332a <HAL_RCC_OscConfig+0xf6>
 8003276:	4bad      	ldr	r3, [pc, #692]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003282:	d152      	bne.n	800332a <HAL_RCC_OscConfig+0xf6>
 8003284:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003288:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003298:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329c:	fab3 f383 	clz	r3, r3
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d102      	bne.n	80032b6 <HAL_RCC_OscConfig+0x82>
 80032b0:	4b9e      	ldr	r3, [pc, #632]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	e015      	b.n	80032e2 <HAL_RCC_OscConfig+0xae>
 80032b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ba:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80032c2:	fa93 f3a3 	rbit	r3, r3
 80032c6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80032ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ce:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80032d2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80032de:	4b93      	ldr	r3, [pc, #588]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032e6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80032ea:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80032ee:	fa92 f2a2 	rbit	r2, r2
 80032f2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80032f6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80032fa:	fab2 f282 	clz	r2, r2
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	f042 0220 	orr.w	r2, r2, #32
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	f002 021f 	and.w	r2, r2, #31
 800330a:	2101      	movs	r1, #1
 800330c:	fa01 f202 	lsl.w	r2, r1, r2
 8003310:	4013      	ands	r3, r2
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 810c 	beq.w	8003530 <HAL_RCC_OscConfig+0x2fc>
 8003318:	1d3b      	adds	r3, r7, #4
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	f040 8106 	bne.w	8003530 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	f000 be86 	b.w	8004036 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800332a:	1d3b      	adds	r3, r7, #4
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003334:	d106      	bne.n	8003344 <HAL_RCC_OscConfig+0x110>
 8003336:	4b7d      	ldr	r3, [pc, #500]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a7c      	ldr	r2, [pc, #496]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	e030      	b.n	80033a6 <HAL_RCC_OscConfig+0x172>
 8003344:	1d3b      	adds	r3, r7, #4
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x134>
 800334e:	4b77      	ldr	r3, [pc, #476]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a76      	ldr	r2, [pc, #472]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 8003354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	4b74      	ldr	r3, [pc, #464]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a73      	ldr	r2, [pc, #460]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 8003360:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	e01e      	b.n	80033a6 <HAL_RCC_OscConfig+0x172>
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003372:	d10c      	bne.n	800338e <HAL_RCC_OscConfig+0x15a>
 8003374:	4b6d      	ldr	r3, [pc, #436]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a6c      	ldr	r2, [pc, #432]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 800337a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	4b6a      	ldr	r3, [pc, #424]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a69      	ldr	r2, [pc, #420]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 8003386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	e00b      	b.n	80033a6 <HAL_RCC_OscConfig+0x172>
 800338e:	4b67      	ldr	r3, [pc, #412]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a66      	ldr	r2, [pc, #408]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 8003394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4b64      	ldr	r3, [pc, #400]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a63      	ldr	r2, [pc, #396]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 80033a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033a6:	4b61      	ldr	r3, [pc, #388]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	f023 020f 	bic.w	r2, r3, #15
 80033ae:	1d3b      	adds	r3, r7, #4
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	495d      	ldr	r1, [pc, #372]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ba:	1d3b      	adds	r3, r7, #4
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d059      	beq.n	8003478 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fe fe50 	bl	8002068 <HAL_GetTick>
 80033c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033cc:	e00a      	b.n	80033e4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ce:	f7fe fe4b 	bl	8002068 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	; 0x64
 80033dc:	d902      	bls.n	80033e4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	f000 be29 	b.w	8004036 <HAL_RCC_OscConfig+0xe02>
 80033e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033e8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80033f8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fc:	fab3 f383 	clz	r3, r3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d102      	bne.n	8003416 <HAL_RCC_OscConfig+0x1e2>
 8003410:	4b46      	ldr	r3, [pc, #280]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	e015      	b.n	8003442 <HAL_RCC_OscConfig+0x20e>
 8003416:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800341a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003422:	fa93 f3a3 	rbit	r3, r3
 8003426:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800342a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800342e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003432:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003436:	fa93 f3a3 	rbit	r3, r3
 800343a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800343e:	4b3b      	ldr	r3, [pc, #236]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003446:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800344a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800344e:	fa92 f2a2 	rbit	r2, r2
 8003452:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003456:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800345a:	fab2 f282 	clz	r2, r2
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	f042 0220 	orr.w	r2, r2, #32
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	f002 021f 	and.w	r2, r2, #31
 800346a:	2101      	movs	r1, #1
 800346c:	fa01 f202 	lsl.w	r2, r1, r2
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0ab      	beq.n	80033ce <HAL_RCC_OscConfig+0x19a>
 8003476:	e05c      	b.n	8003532 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003478:	f7fe fdf6 	bl	8002068 <HAL_GetTick>
 800347c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003482:	f7fe fdf1 	bl	8002068 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b64      	cmp	r3, #100	; 0x64
 8003490:	d902      	bls.n	8003498 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	f000 bdcf 	b.w	8004036 <HAL_RCC_OscConfig+0xe02>
 8003498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800349c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80034ac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b0:	fab3 f383 	clz	r3, r3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d102      	bne.n	80034ca <HAL_RCC_OscConfig+0x296>
 80034c4:	4b19      	ldr	r3, [pc, #100]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	e015      	b.n	80034f6 <HAL_RCC_OscConfig+0x2c2>
 80034ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80034d6:	fa93 f3a3 	rbit	r3, r3
 80034da:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80034de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034e2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80034e6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80034ea:	fa93 f3a3 	rbit	r3, r3
 80034ee:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80034f2:	4b0e      	ldr	r3, [pc, #56]	; (800352c <HAL_RCC_OscConfig+0x2f8>)
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034fa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80034fe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003502:	fa92 f2a2 	rbit	r2, r2
 8003506:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800350a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800350e:	fab2 f282 	clz	r2, r2
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	f042 0220 	orr.w	r2, r2, #32
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	f002 021f 	and.w	r2, r2, #31
 800351e:	2101      	movs	r1, #1
 8003520:	fa01 f202 	lsl.w	r2, r1, r2
 8003524:	4013      	ands	r3, r2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1ab      	bne.n	8003482 <HAL_RCC_OscConfig+0x24e>
 800352a:	e002      	b.n	8003532 <HAL_RCC_OscConfig+0x2fe>
 800352c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003532:	1d3b      	adds	r3, r7, #4
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 816f 	beq.w	8003820 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003542:	4bd0      	ldr	r3, [pc, #832]	; (8003884 <HAL_RCC_OscConfig+0x650>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800354e:	4bcd      	ldr	r3, [pc, #820]	; (8003884 <HAL_RCC_OscConfig+0x650>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b08      	cmp	r3, #8
 8003558:	d16c      	bne.n	8003634 <HAL_RCC_OscConfig+0x400>
 800355a:	4bca      	ldr	r3, [pc, #808]	; (8003884 <HAL_RCC_OscConfig+0x650>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d166      	bne.n	8003634 <HAL_RCC_OscConfig+0x400>
 8003566:	2302      	movs	r3, #2
 8003568:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003570:	fa93 f3a3 	rbit	r3, r3
 8003574:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003578:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800357c:	fab3 f383 	clz	r3, r3
 8003580:	b2db      	uxtb	r3, r3
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	b2db      	uxtb	r3, r3
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b01      	cmp	r3, #1
 800358e:	d102      	bne.n	8003596 <HAL_RCC_OscConfig+0x362>
 8003590:	4bbc      	ldr	r3, [pc, #752]	; (8003884 <HAL_RCC_OscConfig+0x650>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	e013      	b.n	80035be <HAL_RCC_OscConfig+0x38a>
 8003596:	2302      	movs	r3, #2
 8003598:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80035a0:	fa93 f3a3 	rbit	r3, r3
 80035a4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80035a8:	2302      	movs	r3, #2
 80035aa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80035ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80035b2:	fa93 f3a3 	rbit	r3, r3
 80035b6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80035ba:	4bb2      	ldr	r3, [pc, #712]	; (8003884 <HAL_RCC_OscConfig+0x650>)
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	2202      	movs	r2, #2
 80035c0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80035c4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80035c8:	fa92 f2a2 	rbit	r2, r2
 80035cc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80035d0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80035d4:	fab2 f282 	clz	r2, r2
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	f042 0220 	orr.w	r2, r2, #32
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	f002 021f 	and.w	r2, r2, #31
 80035e4:	2101      	movs	r1, #1
 80035e6:	fa01 f202 	lsl.w	r2, r1, r2
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d007      	beq.n	8003600 <HAL_RCC_OscConfig+0x3cc>
 80035f0:	1d3b      	adds	r3, r7, #4
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d002      	beq.n	8003600 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	f000 bd1b 	b.w	8004036 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003600:	4ba0      	ldr	r3, [pc, #640]	; (8003884 <HAL_RCC_OscConfig+0x650>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003608:	1d3b      	adds	r3, r7, #4
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	21f8      	movs	r1, #248	; 0xf8
 8003610:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003618:	fa91 f1a1 	rbit	r1, r1
 800361c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003620:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003624:	fab1 f181 	clz	r1, r1
 8003628:	b2c9      	uxtb	r1, r1
 800362a:	408b      	lsls	r3, r1
 800362c:	4995      	ldr	r1, [pc, #596]	; (8003884 <HAL_RCC_OscConfig+0x650>)
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003632:	e0f5      	b.n	8003820 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003634:	1d3b      	adds	r3, r7, #4
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 8085 	beq.w	800374a <HAL_RCC_OscConfig+0x516>
 8003640:	2301      	movs	r3, #1
 8003642:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003652:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003656:	fab3 f383 	clz	r3, r3
 800365a:	b2db      	uxtb	r3, r3
 800365c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003660:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	461a      	mov	r2, r3
 8003668:	2301      	movs	r3, #1
 800366a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7fe fcfc 	bl	8002068 <HAL_GetTick>
 8003670:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003674:	e00a      	b.n	800368c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003676:	f7fe fcf7 	bl	8002068 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d902      	bls.n	800368c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	f000 bcd5 	b.w	8004036 <HAL_RCC_OscConfig+0xe02>
 800368c:	2302      	movs	r3, #2
 800368e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003696:	fa93 f3a3 	rbit	r3, r3
 800369a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800369e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a2:	fab3 f383 	clz	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	095b      	lsrs	r3, r3, #5
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d102      	bne.n	80036bc <HAL_RCC_OscConfig+0x488>
 80036b6:	4b73      	ldr	r3, [pc, #460]	; (8003884 <HAL_RCC_OscConfig+0x650>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	e013      	b.n	80036e4 <HAL_RCC_OscConfig+0x4b0>
 80036bc:	2302      	movs	r3, #2
 80036be:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80036c6:	fa93 f3a3 	rbit	r3, r3
 80036ca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80036ce:	2302      	movs	r3, #2
 80036d0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80036d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80036e0:	4b68      	ldr	r3, [pc, #416]	; (8003884 <HAL_RCC_OscConfig+0x650>)
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	2202      	movs	r2, #2
 80036e6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80036ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80036ee:	fa92 f2a2 	rbit	r2, r2
 80036f2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80036f6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80036fa:	fab2 f282 	clz	r2, r2
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	f042 0220 	orr.w	r2, r2, #32
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	f002 021f 	and.w	r2, r2, #31
 800370a:	2101      	movs	r1, #1
 800370c:	fa01 f202 	lsl.w	r2, r1, r2
 8003710:	4013      	ands	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0af      	beq.n	8003676 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003716:	4b5b      	ldr	r3, [pc, #364]	; (8003884 <HAL_RCC_OscConfig+0x650>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800371e:	1d3b      	adds	r3, r7, #4
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	21f8      	movs	r1, #248	; 0xf8
 8003726:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800372e:	fa91 f1a1 	rbit	r1, r1
 8003732:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003736:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800373a:	fab1 f181 	clz	r1, r1
 800373e:	b2c9      	uxtb	r1, r1
 8003740:	408b      	lsls	r3, r1
 8003742:	4950      	ldr	r1, [pc, #320]	; (8003884 <HAL_RCC_OscConfig+0x650>)
 8003744:	4313      	orrs	r3, r2
 8003746:	600b      	str	r3, [r1, #0]
 8003748:	e06a      	b.n	8003820 <HAL_RCC_OscConfig+0x5ec>
 800374a:	2301      	movs	r3, #1
 800374c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003754:	fa93 f3a3 	rbit	r3, r3
 8003758:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800375c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003760:	fab3 f383 	clz	r3, r3
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800376a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	461a      	mov	r2, r3
 8003772:	2300      	movs	r3, #0
 8003774:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003776:	f7fe fc77 	bl	8002068 <HAL_GetTick>
 800377a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377e:	e00a      	b.n	8003796 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003780:	f7fe fc72 	bl	8002068 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d902      	bls.n	8003796 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	f000 bc50 	b.w	8004036 <HAL_RCC_OscConfig+0xe02>
 8003796:	2302      	movs	r3, #2
 8003798:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80037a0:	fa93 f3a3 	rbit	r3, r3
 80037a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80037a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ac:	fab3 f383 	clz	r3, r3
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d102      	bne.n	80037c6 <HAL_RCC_OscConfig+0x592>
 80037c0:	4b30      	ldr	r3, [pc, #192]	; (8003884 <HAL_RCC_OscConfig+0x650>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	e013      	b.n	80037ee <HAL_RCC_OscConfig+0x5ba>
 80037c6:	2302      	movs	r3, #2
 80037c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037d0:	fa93 f3a3 	rbit	r3, r3
 80037d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80037d8:	2302      	movs	r3, #2
 80037da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80037de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80037e2:	fa93 f3a3 	rbit	r3, r3
 80037e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80037ea:	4b26      	ldr	r3, [pc, #152]	; (8003884 <HAL_RCC_OscConfig+0x650>)
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	2202      	movs	r2, #2
 80037f0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80037f4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80037f8:	fa92 f2a2 	rbit	r2, r2
 80037fc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003800:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003804:	fab2 f282 	clz	r2, r2
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	f042 0220 	orr.w	r2, r2, #32
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	f002 021f 	and.w	r2, r2, #31
 8003814:	2101      	movs	r1, #1
 8003816:	fa01 f202 	lsl.w	r2, r1, r2
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1af      	bne.n	8003780 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003820:	1d3b      	adds	r3, r7, #4
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 80da 	beq.w	80039e4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003830:	1d3b      	adds	r3, r7, #4
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d069      	beq.n	800390e <HAL_RCC_OscConfig+0x6da>
 800383a:	2301      	movs	r3, #1
 800383c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003840:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003844:	fa93 f3a3 	rbit	r3, r3
 8003848:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800384c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003850:	fab3 f383 	clz	r3, r3
 8003854:	b2db      	uxtb	r3, r3
 8003856:	461a      	mov	r2, r3
 8003858:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <HAL_RCC_OscConfig+0x654>)
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	461a      	mov	r2, r3
 8003860:	2301      	movs	r3, #1
 8003862:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003864:	f7fe fc00 	bl	8002068 <HAL_GetTick>
 8003868:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386c:	e00e      	b.n	800388c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800386e:	f7fe fbfb 	bl	8002068 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d906      	bls.n	800388c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e3d9      	b.n	8004036 <HAL_RCC_OscConfig+0xe02>
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	10908120 	.word	0x10908120
 800388c:	2302      	movs	r3, #2
 800388e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003892:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800389e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80038a2:	2202      	movs	r2, #2
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	fa93 f2a3 	rbit	r2, r3
 80038b0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80038ba:	2202      	movs	r2, #2
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	fa93 f2a3 	rbit	r2, r3
 80038c8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80038cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ce:	4ba5      	ldr	r3, [pc, #660]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 80038d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038d2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80038d6:	2102      	movs	r1, #2
 80038d8:	6019      	str	r1, [r3, #0]
 80038da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	fa93 f1a3 	rbit	r1, r3
 80038e4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80038e8:	6019      	str	r1, [r3, #0]
  return result;
 80038ea:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	fab3 f383 	clz	r3, r3
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	2101      	movs	r1, #1
 8003902:	fa01 f303 	lsl.w	r3, r1, r3
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0b0      	beq.n	800386e <HAL_RCC_OscConfig+0x63a>
 800390c:	e06a      	b.n	80039e4 <HAL_RCC_OscConfig+0x7b0>
 800390e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	fa93 f2a3 	rbit	r2, r3
 8003920:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003924:	601a      	str	r2, [r3, #0]
  return result;
 8003926:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800392a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800392c:	fab3 f383 	clz	r3, r3
 8003930:	b2db      	uxtb	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	4b8c      	ldr	r3, [pc, #560]	; (8003b68 <HAL_RCC_OscConfig+0x934>)
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	461a      	mov	r2, r3
 800393c:	2300      	movs	r3, #0
 800393e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003940:	f7fe fb92 	bl	8002068 <HAL_GetTick>
 8003944:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003948:	e009      	b.n	800395e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800394a:	f7fe fb8d 	bl	8002068 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e36b      	b.n	8004036 <HAL_RCC_OscConfig+0xe02>
 800395e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003962:	2202      	movs	r2, #2
 8003964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	fa93 f2a3 	rbit	r2, r3
 8003970:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800397a:	2202      	movs	r2, #2
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	fa93 f2a3 	rbit	r2, r3
 8003988:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003992:	2202      	movs	r2, #2
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	fa93 f2a3 	rbit	r2, r3
 80039a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a6:	4b6f      	ldr	r3, [pc, #444]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 80039a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80039ae:	2102      	movs	r1, #2
 80039b0:	6019      	str	r1, [r3, #0]
 80039b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	fa93 f1a3 	rbit	r1, r3
 80039bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80039c0:	6019      	str	r1, [r3, #0]
  return result;
 80039c2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	fab3 f383 	clz	r3, r3
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	2101      	movs	r1, #1
 80039da:	fa01 f303 	lsl.w	r3, r1, r3
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1b2      	bne.n	800394a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e4:	1d3b      	adds	r3, r7, #4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 8158 	beq.w	8003ca4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f4:	2300      	movs	r3, #0
 80039f6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fa:	4b5a      	ldr	r3, [pc, #360]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d112      	bne.n	8003a2c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a06:	4b57      	ldr	r3, [pc, #348]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	4a56      	ldr	r2, [pc, #344]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 8003a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a10:	61d3      	str	r3, [r2, #28]
 8003a12:	4b54      	ldr	r3, [pc, #336]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a1a:	f107 0308 	add.w	r3, r7, #8
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	f107 0308 	add.w	r3, r7, #8
 8003a24:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a26:	2301      	movs	r3, #1
 8003a28:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2c:	4b4f      	ldr	r3, [pc, #316]	; (8003b6c <HAL_RCC_OscConfig+0x938>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d11a      	bne.n	8003a6e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a38:	4b4c      	ldr	r3, [pc, #304]	; (8003b6c <HAL_RCC_OscConfig+0x938>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a4b      	ldr	r2, [pc, #300]	; (8003b6c <HAL_RCC_OscConfig+0x938>)
 8003a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a42:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a44:	f7fe fb10 	bl	8002068 <HAL_GetTick>
 8003a48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4c:	e009      	b.n	8003a62 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4e:	f7fe fb0b 	bl	8002068 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	; 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e2e9      	b.n	8004036 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a62:	4b42      	ldr	r3, [pc, #264]	; (8003b6c <HAL_RCC_OscConfig+0x938>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0ef      	beq.n	8003a4e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a6e:	1d3b      	adds	r3, r7, #4
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d106      	bne.n	8003a86 <HAL_RCC_OscConfig+0x852>
 8003a78:	4b3a      	ldr	r3, [pc, #232]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	4a39      	ldr	r2, [pc, #228]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	6213      	str	r3, [r2, #32]
 8003a84:	e02f      	b.n	8003ae6 <HAL_RCC_OscConfig+0x8b2>
 8003a86:	1d3b      	adds	r3, r7, #4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10c      	bne.n	8003aaa <HAL_RCC_OscConfig+0x876>
 8003a90:	4b34      	ldr	r3, [pc, #208]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	4a33      	ldr	r2, [pc, #204]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 8003a96:	f023 0301 	bic.w	r3, r3, #1
 8003a9a:	6213      	str	r3, [r2, #32]
 8003a9c:	4b31      	ldr	r3, [pc, #196]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	4a30      	ldr	r2, [pc, #192]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 8003aa2:	f023 0304 	bic.w	r3, r3, #4
 8003aa6:	6213      	str	r3, [r2, #32]
 8003aa8:	e01d      	b.n	8003ae6 <HAL_RCC_OscConfig+0x8b2>
 8003aaa:	1d3b      	adds	r3, r7, #4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b05      	cmp	r3, #5
 8003ab2:	d10c      	bne.n	8003ace <HAL_RCC_OscConfig+0x89a>
 8003ab4:	4b2b      	ldr	r3, [pc, #172]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	4a2a      	ldr	r2, [pc, #168]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 8003aba:	f043 0304 	orr.w	r3, r3, #4
 8003abe:	6213      	str	r3, [r2, #32]
 8003ac0:	4b28      	ldr	r3, [pc, #160]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	4a27      	ldr	r2, [pc, #156]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	6213      	str	r3, [r2, #32]
 8003acc:	e00b      	b.n	8003ae6 <HAL_RCC_OscConfig+0x8b2>
 8003ace:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	4a24      	ldr	r2, [pc, #144]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 8003ad4:	f023 0301 	bic.w	r3, r3, #1
 8003ad8:	6213      	str	r3, [r2, #32]
 8003ada:	4b22      	ldr	r3, [pc, #136]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 8003ae0:	f023 0304 	bic.w	r3, r3, #4
 8003ae4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ae6:	1d3b      	adds	r3, r7, #4
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d06b      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af0:	f7fe faba 	bl	8002068 <HAL_GetTick>
 8003af4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af8:	e00b      	b.n	8003b12 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003afa:	f7fe fab5 	bl	8002068 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e291      	b.n	8004036 <HAL_RCC_OscConfig+0xe02>
 8003b12:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b16:	2202      	movs	r2, #2
 8003b18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	fa93 f2a3 	rbit	r2, r3
 8003b24:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003b2e:	2202      	movs	r2, #2
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	fa93 f2a3 	rbit	r2, r3
 8003b3c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b40:	601a      	str	r2, [r3, #0]
  return result;
 8003b42:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003b46:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b48:	fab3 f383 	clz	r3, r3
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f043 0302 	orr.w	r3, r3, #2
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d109      	bne.n	8003b70 <HAL_RCC_OscConfig+0x93c>
 8003b5c:	4b01      	ldr	r3, [pc, #4]	; (8003b64 <HAL_RCC_OscConfig+0x930>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	e014      	b.n	8003b8c <HAL_RCC_OscConfig+0x958>
 8003b62:	bf00      	nop
 8003b64:	40021000 	.word	0x40021000
 8003b68:	10908120 	.word	0x10908120
 8003b6c:	40007000 	.word	0x40007000
 8003b70:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b74:	2202      	movs	r2, #2
 8003b76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	fa93 f2a3 	rbit	r2, r3
 8003b82:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	4bbb      	ldr	r3, [pc, #748]	; (8003e78 <HAL_RCC_OscConfig+0xc44>)
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003b90:	2102      	movs	r1, #2
 8003b92:	6011      	str	r1, [r2, #0]
 8003b94:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	fa92 f1a2 	rbit	r1, r2
 8003b9e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003ba2:	6011      	str	r1, [r2, #0]
  return result;
 8003ba4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	fab2 f282 	clz	r2, r2
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	f002 021f 	and.w	r2, r2, #31
 8003bba:	2101      	movs	r1, #1
 8003bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d099      	beq.n	8003afa <HAL_RCC_OscConfig+0x8c6>
 8003bc6:	e063      	b.n	8003c90 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc8:	f7fe fa4e 	bl	8002068 <HAL_GetTick>
 8003bcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd0:	e00b      	b.n	8003bea <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bd2:	f7fe fa49 	bl	8002068 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e225      	b.n	8004036 <HAL_RCC_OscConfig+0xe02>
 8003bea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003bee:	2202      	movs	r2, #2
 8003bf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	fa93 f2a3 	rbit	r2, r3
 8003bfc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c06:	2202      	movs	r2, #2
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	fa93 f2a3 	rbit	r2, r3
 8003c14:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003c18:	601a      	str	r2, [r3, #0]
  return result;
 8003c1a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003c1e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c20:	fab3 f383 	clz	r3, r3
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	f043 0302 	orr.w	r3, r3, #2
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d102      	bne.n	8003c3a <HAL_RCC_OscConfig+0xa06>
 8003c34:	4b90      	ldr	r3, [pc, #576]	; (8003e78 <HAL_RCC_OscConfig+0xc44>)
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	e00d      	b.n	8003c56 <HAL_RCC_OscConfig+0xa22>
 8003c3a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003c3e:	2202      	movs	r2, #2
 8003c40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c42:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	fa93 f2a3 	rbit	r2, r3
 8003c4c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	4b89      	ldr	r3, [pc, #548]	; (8003e78 <HAL_RCC_OscConfig+0xc44>)
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	6011      	str	r1, [r2, #0]
 8003c5e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	fa92 f1a2 	rbit	r1, r2
 8003c68:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003c6c:	6011      	str	r1, [r2, #0]
  return result;
 8003c6e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	fab2 f282 	clz	r2, r2
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	f002 021f 	and.w	r2, r2, #31
 8003c84:	2101      	movs	r1, #1
 8003c86:	fa01 f202 	lsl.w	r2, r1, r2
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1a0      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c90:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d105      	bne.n	8003ca4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c98:	4b77      	ldr	r3, [pc, #476]	; (8003e78 <HAL_RCC_OscConfig+0xc44>)
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	4a76      	ldr	r2, [pc, #472]	; (8003e78 <HAL_RCC_OscConfig+0xc44>)
 8003c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca4:	1d3b      	adds	r3, r7, #4
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 81c2 	beq.w	8004034 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cb0:	4b71      	ldr	r3, [pc, #452]	; (8003e78 <HAL_RCC_OscConfig+0xc44>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 030c 	and.w	r3, r3, #12
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	f000 819c 	beq.w	8003ff6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cbe:	1d3b      	adds	r3, r7, #4
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	f040 8114 	bne.w	8003ef2 <HAL_RCC_OscConfig+0xcbe>
 8003cca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003cce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	fa93 f2a3 	rbit	r2, r3
 8003cde:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003ce2:	601a      	str	r2, [r3, #0]
  return result;
 8003ce4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003ce8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cea:	fab3 f383 	clz	r3, r3
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cf4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d00:	f7fe f9b2 	bl	8002068 <HAL_GetTick>
 8003d04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d08:	e009      	b.n	8003d1e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0a:	f7fe f9ad 	bl	8002068 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e18b      	b.n	8004036 <HAL_RCC_OscConfig+0xe02>
 8003d1e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003d22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d28:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	fa93 f2a3 	rbit	r2, r3
 8003d32:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d36:	601a      	str	r2, [r3, #0]
  return result;
 8003d38:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003d3c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d3e:	fab3 f383 	clz	r3, r3
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	095b      	lsrs	r3, r3, #5
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d102      	bne.n	8003d58 <HAL_RCC_OscConfig+0xb24>
 8003d52:	4b49      	ldr	r3, [pc, #292]	; (8003e78 <HAL_RCC_OscConfig+0xc44>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	e01b      	b.n	8003d90 <HAL_RCC_OscConfig+0xb5c>
 8003d58:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	fa93 f2a3 	rbit	r2, r3
 8003d6c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003d76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	fa93 f2a3 	rbit	r2, r3
 8003d86:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	4b3a      	ldr	r3, [pc, #232]	; (8003e78 <HAL_RCC_OscConfig+0xc44>)
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d98:	6011      	str	r1, [r2, #0]
 8003d9a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	fa92 f1a2 	rbit	r1, r2
 8003da4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003da8:	6011      	str	r1, [r2, #0]
  return result;
 8003daa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	fab2 f282 	clz	r2, r2
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	f042 0220 	orr.w	r2, r2, #32
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	f002 021f 	and.w	r2, r2, #31
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d19e      	bne.n	8003d0a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dcc:	4b2a      	ldr	r3, [pc, #168]	; (8003e78 <HAL_RCC_OscConfig+0xc44>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003dd4:	1d3b      	adds	r3, r7, #4
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003dda:	1d3b      	adds	r3, r7, #4
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	430b      	orrs	r3, r1
 8003de2:	4925      	ldr	r1, [pc, #148]	; (8003e78 <HAL_RCC_OscConfig+0xc44>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	604b      	str	r3, [r1, #4]
 8003de8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003dec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003df0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	fa93 f2a3 	rbit	r2, r3
 8003dfc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e00:	601a      	str	r2, [r3, #0]
  return result;
 8003e02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e06:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e08:	fab3 f383 	clz	r3, r3
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e12:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	461a      	mov	r2, r3
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1e:	f7fe f923 	bl	8002068 <HAL_GetTick>
 8003e22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e26:	e009      	b.n	8003e3c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e28:	f7fe f91e 	bl	8002068 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e0fc      	b.n	8004036 <HAL_RCC_OscConfig+0xe02>
 8003e3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003e40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	fa93 f2a3 	rbit	r2, r3
 8003e50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e54:	601a      	str	r2, [r3, #0]
  return result;
 8003e56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e5c:	fab3 f383 	clz	r3, r3
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d105      	bne.n	8003e7c <HAL_RCC_OscConfig+0xc48>
 8003e70:	4b01      	ldr	r3, [pc, #4]	; (8003e78 <HAL_RCC_OscConfig+0xc44>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	e01e      	b.n	8003eb4 <HAL_RCC_OscConfig+0xc80>
 8003e76:	bf00      	nop
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	fa93 f2a3 	rbit	r2, r3
 8003e90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	fa93 f2a3 	rbit	r2, r3
 8003eaa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	4b63      	ldr	r3, [pc, #396]	; (8004040 <HAL_RCC_OscConfig+0xe0c>)
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003eb8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ebc:	6011      	str	r1, [r2, #0]
 8003ebe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	fa92 f1a2 	rbit	r1, r2
 8003ec8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003ecc:	6011      	str	r1, [r2, #0]
  return result;
 8003ece:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	fab2 f282 	clz	r2, r2
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	f042 0220 	orr.w	r2, r2, #32
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	f002 021f 	and.w	r2, r2, #31
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d09b      	beq.n	8003e28 <HAL_RCC_OscConfig+0xbf4>
 8003ef0:	e0a0      	b.n	8004034 <HAL_RCC_OscConfig+0xe00>
 8003ef2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ef6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003efa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	fa93 f2a3 	rbit	r2, r3
 8003f06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f0a:	601a      	str	r2, [r3, #0]
  return result;
 8003f0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f10:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f12:	fab3 f383 	clz	r3, r3
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	461a      	mov	r2, r3
 8003f24:	2300      	movs	r3, #0
 8003f26:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f28:	f7fe f89e 	bl	8002068 <HAL_GetTick>
 8003f2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f30:	e009      	b.n	8003f46 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f32:	f7fe f899 	bl	8002068 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e077      	b.n	8004036 <HAL_RCC_OscConfig+0xe02>
 8003f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	fa93 f2a3 	rbit	r2, r3
 8003f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f5e:	601a      	str	r2, [r3, #0]
  return result;
 8003f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d102      	bne.n	8003f80 <HAL_RCC_OscConfig+0xd4c>
 8003f7a:	4b31      	ldr	r3, [pc, #196]	; (8004040 <HAL_RCC_OscConfig+0xe0c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	e01b      	b.n	8003fb8 <HAL_RCC_OscConfig+0xd84>
 8003f80:	f107 0320 	add.w	r3, r7, #32
 8003f84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	f107 0320 	add.w	r3, r7, #32
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	fa93 f2a3 	rbit	r2, r3
 8003f94:	f107 031c 	add.w	r3, r7, #28
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	f107 0318 	add.w	r3, r7, #24
 8003f9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	f107 0318 	add.w	r3, r7, #24
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	fa93 f2a3 	rbit	r2, r3
 8003fae:	f107 0314 	add.w	r3, r7, #20
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	4b22      	ldr	r3, [pc, #136]	; (8004040 <HAL_RCC_OscConfig+0xe0c>)
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	f107 0210 	add.w	r2, r7, #16
 8003fbc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fc0:	6011      	str	r1, [r2, #0]
 8003fc2:	f107 0210 	add.w	r2, r7, #16
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	fa92 f1a2 	rbit	r1, r2
 8003fcc:	f107 020c 	add.w	r2, r7, #12
 8003fd0:	6011      	str	r1, [r2, #0]
  return result;
 8003fd2:	f107 020c 	add.w	r2, r7, #12
 8003fd6:	6812      	ldr	r2, [r2, #0]
 8003fd8:	fab2 f282 	clz	r2, r2
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	f042 0220 	orr.w	r2, r2, #32
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	f002 021f 	and.w	r2, r2, #31
 8003fe8:	2101      	movs	r1, #1
 8003fea:	fa01 f202 	lsl.w	r2, r1, r2
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d19e      	bne.n	8003f32 <HAL_RCC_OscConfig+0xcfe>
 8003ff4:	e01e      	b.n	8004034 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff6:	1d3b      	adds	r3, r7, #4
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e018      	b.n	8004036 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004004:	4b0e      	ldr	r3, [pc, #56]	; (8004040 <HAL_RCC_OscConfig+0xe0c>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800400c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004010:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004014:	1d3b      	adds	r3, r7, #4
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	429a      	cmp	r2, r3
 800401c:	d108      	bne.n	8004030 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800401e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004022:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004026:	1d3b      	adds	r3, r7, #4
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800402c:	429a      	cmp	r2, r3
 800402e:	d001      	beq.n	8004034 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40021000 	.word	0x40021000

08004044 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b09e      	sub	sp, #120	; 0x78
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e162      	b.n	8004322 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800405c:	4b90      	ldr	r3, [pc, #576]	; (80042a0 <HAL_RCC_ClockConfig+0x25c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d910      	bls.n	800408c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406a:	4b8d      	ldr	r3, [pc, #564]	; (80042a0 <HAL_RCC_ClockConfig+0x25c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 0207 	bic.w	r2, r3, #7
 8004072:	498b      	ldr	r1, [pc, #556]	; (80042a0 <HAL_RCC_ClockConfig+0x25c>)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	4b89      	ldr	r3, [pc, #548]	; (80042a0 <HAL_RCC_ClockConfig+0x25c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e14a      	b.n	8004322 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004098:	4b82      	ldr	r3, [pc, #520]	; (80042a4 <HAL_RCC_ClockConfig+0x260>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	497f      	ldr	r1, [pc, #508]	; (80042a4 <HAL_RCC_ClockConfig+0x260>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 80dc 	beq.w	8004270 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d13c      	bne.n	800413a <HAL_RCC_ClockConfig+0xf6>
 80040c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040c4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040c8:	fa93 f3a3 	rbit	r3, r3
 80040cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80040ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d0:	fab3 f383 	clz	r3, r3
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d102      	bne.n	80040ea <HAL_RCC_ClockConfig+0xa6>
 80040e4:	4b6f      	ldr	r3, [pc, #444]	; (80042a4 <HAL_RCC_ClockConfig+0x260>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	e00f      	b.n	800410a <HAL_RCC_ClockConfig+0xc6>
 80040ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040f2:	fa93 f3a3 	rbit	r3, r3
 80040f6:	667b      	str	r3, [r7, #100]	; 0x64
 80040f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040fc:	663b      	str	r3, [r7, #96]	; 0x60
 80040fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004100:	fa93 f3a3 	rbit	r3, r3
 8004104:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004106:	4b67      	ldr	r3, [pc, #412]	; (80042a4 <HAL_RCC_ClockConfig+0x260>)
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800410e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004110:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004112:	fa92 f2a2 	rbit	r2, r2
 8004116:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004118:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800411a:	fab2 f282 	clz	r2, r2
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	f042 0220 	orr.w	r2, r2, #32
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	f002 021f 	and.w	r2, r2, #31
 800412a:	2101      	movs	r1, #1
 800412c:	fa01 f202 	lsl.w	r2, r1, r2
 8004130:	4013      	ands	r3, r2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d17b      	bne.n	800422e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e0f3      	b.n	8004322 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d13c      	bne.n	80041bc <HAL_RCC_ClockConfig+0x178>
 8004142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004146:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800414a:	fa93 f3a3 	rbit	r3, r3
 800414e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004152:	fab3 f383 	clz	r3, r3
 8004156:	b2db      	uxtb	r3, r3
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	b2db      	uxtb	r3, r3
 800415c:	f043 0301 	orr.w	r3, r3, #1
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b01      	cmp	r3, #1
 8004164:	d102      	bne.n	800416c <HAL_RCC_ClockConfig+0x128>
 8004166:	4b4f      	ldr	r3, [pc, #316]	; (80042a4 <HAL_RCC_ClockConfig+0x260>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	e00f      	b.n	800418c <HAL_RCC_ClockConfig+0x148>
 800416c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004170:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004174:	fa93 f3a3 	rbit	r3, r3
 8004178:	647b      	str	r3, [r7, #68]	; 0x44
 800417a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800417e:	643b      	str	r3, [r7, #64]	; 0x40
 8004180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004182:	fa93 f3a3 	rbit	r3, r3
 8004186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004188:	4b46      	ldr	r3, [pc, #280]	; (80042a4 <HAL_RCC_ClockConfig+0x260>)
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004190:	63ba      	str	r2, [r7, #56]	; 0x38
 8004192:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004194:	fa92 f2a2 	rbit	r2, r2
 8004198:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800419a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800419c:	fab2 f282 	clz	r2, r2
 80041a0:	b2d2      	uxtb	r2, r2
 80041a2:	f042 0220 	orr.w	r2, r2, #32
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	f002 021f 	and.w	r2, r2, #31
 80041ac:	2101      	movs	r1, #1
 80041ae:	fa01 f202 	lsl.w	r2, r1, r2
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d13a      	bne.n	800422e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0b2      	b.n	8004322 <HAL_RCC_ClockConfig+0x2de>
 80041bc:	2302      	movs	r3, #2
 80041be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	fa93 f3a3 	rbit	r3, r3
 80041c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80041c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ca:	fab3 f383 	clz	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d102      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x1a0>
 80041de:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <HAL_RCC_ClockConfig+0x260>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	e00d      	b.n	8004200 <HAL_RCC_ClockConfig+0x1bc>
 80041e4:	2302      	movs	r3, #2
 80041e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ea:	fa93 f3a3 	rbit	r3, r3
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
 80041f0:	2302      	movs	r3, #2
 80041f2:	623b      	str	r3, [r7, #32]
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	fa93 f3a3 	rbit	r3, r3
 80041fa:	61fb      	str	r3, [r7, #28]
 80041fc:	4b29      	ldr	r3, [pc, #164]	; (80042a4 <HAL_RCC_ClockConfig+0x260>)
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	2202      	movs	r2, #2
 8004202:	61ba      	str	r2, [r7, #24]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	fa92 f2a2 	rbit	r2, r2
 800420a:	617a      	str	r2, [r7, #20]
  return result;
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	fab2 f282 	clz	r2, r2
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	f042 0220 	orr.w	r2, r2, #32
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	f002 021f 	and.w	r2, r2, #31
 800421e:	2101      	movs	r1, #1
 8004220:	fa01 f202 	lsl.w	r2, r1, r2
 8004224:	4013      	ands	r3, r2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e079      	b.n	8004322 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800422e:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <HAL_RCC_ClockConfig+0x260>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f023 0203 	bic.w	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	491a      	ldr	r1, [pc, #104]	; (80042a4 <HAL_RCC_ClockConfig+0x260>)
 800423c:	4313      	orrs	r3, r2
 800423e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004240:	f7fd ff12 	bl	8002068 <HAL_GetTick>
 8004244:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004246:	e00a      	b.n	800425e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004248:	f7fd ff0e 	bl	8002068 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	f241 3288 	movw	r2, #5000	; 0x1388
 8004256:	4293      	cmp	r3, r2
 8004258:	d901      	bls.n	800425e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e061      	b.n	8004322 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425e:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <HAL_RCC_ClockConfig+0x260>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f003 020c 	and.w	r2, r3, #12
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	429a      	cmp	r2, r3
 800426e:	d1eb      	bne.n	8004248 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <HAL_RCC_ClockConfig+0x25c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d214      	bcs.n	80042a8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427e:	4b08      	ldr	r3, [pc, #32]	; (80042a0 <HAL_RCC_ClockConfig+0x25c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f023 0207 	bic.w	r2, r3, #7
 8004286:	4906      	ldr	r1, [pc, #24]	; (80042a0 <HAL_RCC_ClockConfig+0x25c>)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	4313      	orrs	r3, r2
 800428c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800428e:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <HAL_RCC_ClockConfig+0x25c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d005      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e040      	b.n	8004322 <HAL_RCC_ClockConfig+0x2de>
 80042a0:	40022000 	.word	0x40022000
 80042a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b4:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_RCC_ClockConfig+0x2e8>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	491a      	ldr	r1, [pc, #104]	; (800432c <HAL_RCC_ClockConfig+0x2e8>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d009      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042d2:	4b16      	ldr	r3, [pc, #88]	; (800432c <HAL_RCC_ClockConfig+0x2e8>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	4912      	ldr	r1, [pc, #72]	; (800432c <HAL_RCC_ClockConfig+0x2e8>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042e6:	f000 f829 	bl	800433c <HAL_RCC_GetSysClockFreq>
 80042ea:	4601      	mov	r1, r0
 80042ec:	4b0f      	ldr	r3, [pc, #60]	; (800432c <HAL_RCC_ClockConfig+0x2e8>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042f4:	22f0      	movs	r2, #240	; 0xf0
 80042f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	fa92 f2a2 	rbit	r2, r2
 80042fe:	60fa      	str	r2, [r7, #12]
  return result;
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	fab2 f282 	clz	r2, r2
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	40d3      	lsrs	r3, r2
 800430a:	4a09      	ldr	r2, [pc, #36]	; (8004330 <HAL_RCC_ClockConfig+0x2ec>)
 800430c:	5cd3      	ldrb	r3, [r2, r3]
 800430e:	fa21 f303 	lsr.w	r3, r1, r3
 8004312:	4a08      	ldr	r2, [pc, #32]	; (8004334 <HAL_RCC_ClockConfig+0x2f0>)
 8004314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004316:	4b08      	ldr	r3, [pc, #32]	; (8004338 <HAL_RCC_ClockConfig+0x2f4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7fd fe60 	bl	8001fe0 <HAL_InitTick>
  
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3778      	adds	r7, #120	; 0x78
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40021000 	.word	0x40021000
 8004330:	08006f84 	.word	0x08006f84
 8004334:	20000000 	.word	0x20000000
 8004338:	20000004 	.word	0x20000004

0800433c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800433c:	b480      	push	{r7}
 800433e:	b08b      	sub	sp, #44	; 0x2c
 8004340:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	2300      	movs	r3, #0
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	2300      	movs	r3, #0
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
 800434e:	2300      	movs	r3, #0
 8004350:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004356:	4b29      	ldr	r3, [pc, #164]	; (80043fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b04      	cmp	r3, #4
 8004364:	d002      	beq.n	800436c <HAL_RCC_GetSysClockFreq+0x30>
 8004366:	2b08      	cmp	r3, #8
 8004368:	d003      	beq.n	8004372 <HAL_RCC_GetSysClockFreq+0x36>
 800436a:	e03c      	b.n	80043e6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800436c:	4b24      	ldr	r3, [pc, #144]	; (8004400 <HAL_RCC_GetSysClockFreq+0xc4>)
 800436e:	623b      	str	r3, [r7, #32]
      break;
 8004370:	e03c      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004378:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800437c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	fa92 f2a2 	rbit	r2, r2
 8004384:	607a      	str	r2, [r7, #4]
  return result;
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	fab2 f282 	clz	r2, r2
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	40d3      	lsrs	r3, r2
 8004390:	4a1c      	ldr	r2, [pc, #112]	; (8004404 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004392:	5cd3      	ldrb	r3, [r2, r3]
 8004394:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004396:	4b19      	ldr	r3, [pc, #100]	; (80043fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	220f      	movs	r2, #15
 80043a0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	fa92 f2a2 	rbit	r2, r2
 80043a8:	60fa      	str	r2, [r7, #12]
  return result;
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	fab2 f282 	clz	r2, r2
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	40d3      	lsrs	r3, r2
 80043b4:	4a14      	ldr	r2, [pc, #80]	; (8004408 <HAL_RCC_GetSysClockFreq+0xcc>)
 80043b6:	5cd3      	ldrb	r3, [r2, r3]
 80043b8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d008      	beq.n	80043d6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043c4:	4a0e      	ldr	r2, [pc, #56]	; (8004400 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	fb02 f303 	mul.w	r3, r2, r3
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
 80043d4:	e004      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	4a0c      	ldr	r2, [pc, #48]	; (800440c <HAL_RCC_GetSysClockFreq+0xd0>)
 80043da:	fb02 f303 	mul.w	r3, r2, r3
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	623b      	str	r3, [r7, #32]
      break;
 80043e4:	e002      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <HAL_RCC_GetSysClockFreq+0xd4>)
 80043e8:	623b      	str	r3, [r7, #32]
      break;
 80043ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ec:	6a3b      	ldr	r3, [r7, #32]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	372c      	adds	r7, #44	; 0x2c
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40021000 	.word	0x40021000
 8004400:	00f42400 	.word	0x00f42400
 8004404:	08006f9c 	.word	0x08006f9c
 8004408:	08006fac 	.word	0x08006fac
 800440c:	003d0900 	.word	0x003d0900
 8004410:	007a1200 	.word	0x007a1200

08004414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004418:	4b03      	ldr	r3, [pc, #12]	; (8004428 <HAL_RCC_GetHCLKFreq+0x14>)
 800441a:	681b      	ldr	r3, [r3, #0]
}
 800441c:	4618      	mov	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	20000000 	.word	0x20000000

0800442c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004432:	f7ff ffef 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 8004436:	4601      	mov	r1, r0
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004440:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004444:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	fa92 f2a2 	rbit	r2, r2
 800444c:	603a      	str	r2, [r7, #0]
  return result;
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	fab2 f282 	clz	r2, r2
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	40d3      	lsrs	r3, r2
 8004458:	4a04      	ldr	r2, [pc, #16]	; (800446c <HAL_RCC_GetPCLK1Freq+0x40>)
 800445a:	5cd3      	ldrb	r3, [r2, r3]
 800445c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004460:	4618      	mov	r0, r3
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40021000 	.word	0x40021000
 800446c:	08006f94 	.word	0x08006f94

08004470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004476:	f7ff ffcd 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 800447a:	4601      	mov	r1, r0
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004484:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004488:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	fa92 f2a2 	rbit	r2, r2
 8004490:	603a      	str	r2, [r7, #0]
  return result;
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	fab2 f282 	clz	r2, r2
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	40d3      	lsrs	r3, r2
 800449c:	4a04      	ldr	r2, [pc, #16]	; (80044b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800449e:	5cd3      	ldrb	r3, [r2, r3]
 80044a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40021000 	.word	0x40021000
 80044b0:	08006f94 	.word	0x08006f94

080044b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b092      	sub	sp, #72	; 0x48
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80044c4:	2300      	movs	r3, #0
 80044c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 80cd 	beq.w	8004672 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d8:	4b86      	ldr	r3, [pc, #536]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10e      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044e4:	4b83      	ldr	r3, [pc, #524]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	4a82      	ldr	r2, [pc, #520]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ee:	61d3      	str	r3, [r2, #28]
 80044f0:	4b80      	ldr	r3, [pc, #512]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004502:	4b7d      	ldr	r3, [pc, #500]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450a:	2b00      	cmp	r3, #0
 800450c:	d118      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800450e:	4b7a      	ldr	r3, [pc, #488]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a79      	ldr	r2, [pc, #484]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004518:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800451a:	f7fd fda5 	bl	8002068 <HAL_GetTick>
 800451e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004520:	e008      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004522:	f7fd fda1 	bl	8002068 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b64      	cmp	r3, #100	; 0x64
 800452e:	d901      	bls.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e0db      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004534:	4b70      	ldr	r3, [pc, #448]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0f0      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004540:	4b6c      	ldr	r3, [pc, #432]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004548:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800454a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800454c:	2b00      	cmp	r3, #0
 800454e:	d07d      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004558:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800455a:	429a      	cmp	r2, r3
 800455c:	d076      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800455e:	4b65      	ldr	r3, [pc, #404]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800456c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	fa93 f3a3 	rbit	r3, r3
 8004574:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004578:	fab3 f383 	clz	r3, r3
 800457c:	b2db      	uxtb	r3, r3
 800457e:	461a      	mov	r2, r3
 8004580:	4b5e      	ldr	r3, [pc, #376]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	461a      	mov	r2, r3
 8004588:	2301      	movs	r3, #1
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004590:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004594:	fa93 f3a3 	rbit	r3, r3
 8004598:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800459a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800459c:	fab3 f383 	clz	r3, r3
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	461a      	mov	r2, r3
 80045a4:	4b55      	ldr	r3, [pc, #340]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045a6:	4413      	add	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	461a      	mov	r2, r3
 80045ac:	2300      	movs	r3, #0
 80045ae:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045b0:	4a50      	ldr	r2, [pc, #320]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d045      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fd fd52 	bl	8002068 <HAL_GetTick>
 80045c4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c6:	e00a      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c8:	f7fd fd4e 	bl	8002068 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d901      	bls.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e086      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x238>
 80045de:	2302      	movs	r3, #2
 80045e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e4:	fa93 f3a3 	rbit	r3, r3
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ea:	2302      	movs	r3, #2
 80045ec:	623b      	str	r3, [r7, #32]
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	fa93 f3a3 	rbit	r3, r3
 80045f4:	61fb      	str	r3, [r7, #28]
  return result;
 80045f6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f8:	fab3 f383 	clz	r3, r3
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	b2db      	uxtb	r3, r3
 8004602:	f043 0302 	orr.w	r3, r3, #2
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d102      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800460c:	4b39      	ldr	r3, [pc, #228]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	e007      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004612:	2302      	movs	r3, #2
 8004614:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	fa93 f3a3 	rbit	r3, r3
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	4b35      	ldr	r3, [pc, #212]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	2202      	movs	r2, #2
 8004624:	613a      	str	r2, [r7, #16]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	fa92 f2a2 	rbit	r2, r2
 800462c:	60fa      	str	r2, [r7, #12]
  return result;
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	fab2 f282 	clz	r2, r2
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	f002 021f 	and.w	r2, r2, #31
 8004640:	2101      	movs	r1, #1
 8004642:	fa01 f202 	lsl.w	r2, r1, r2
 8004646:	4013      	ands	r3, r2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0bd      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800464c:	4b29      	ldr	r3, [pc, #164]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4926      	ldr	r1, [pc, #152]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800465a:	4313      	orrs	r3, r2
 800465c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800465e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004662:	2b01      	cmp	r3, #1
 8004664:	d105      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004666:	4b23      	ldr	r3, [pc, #140]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	4a22      	ldr	r2, [pc, #136]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800466c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004670:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d008      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800467e:	4b1d      	ldr	r3, [pc, #116]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	f023 0203 	bic.w	r2, r3, #3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	491a      	ldr	r1, [pc, #104]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800468c:	4313      	orrs	r3, r2
 800468e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800469c:	4b15      	ldr	r3, [pc, #84]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	f023 0210 	bic.w	r2, r3, #16
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	4912      	ldr	r1, [pc, #72]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d008      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80046ba:	4b0e      	ldr	r3, [pc, #56]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046be:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	490b      	ldr	r1, [pc, #44]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d008      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80046d8:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	4903      	ldr	r1, [pc, #12]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3748      	adds	r7, #72	; 0x48
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	40021000 	.word	0x40021000
 80046f8:	40007000 	.word	0x40007000
 80046fc:	10908100 	.word	0x10908100

08004700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e049      	b.n	80047a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fd f9fa 	bl	8001b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3304      	adds	r3, #4
 800473c:	4619      	mov	r1, r3
 800473e:	4610      	mov	r0, r2
 8004740:	f001 f870 	bl	8005824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e049      	b.n	8004854 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d106      	bne.n	80047da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7fd f943 	bl	8001a60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2202      	movs	r2, #2
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3304      	adds	r3, #4
 80047ea:	4619      	mov	r1, r3
 80047ec:	4610      	mov	r0, r2
 80047ee:	f001 f819 	bl	8005824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d109      	bne.n	8004880 <HAL_TIM_PWM_Start+0x24>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b01      	cmp	r3, #1
 8004876:	bf14      	ite	ne
 8004878:	2301      	movne	r3, #1
 800487a:	2300      	moveq	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	e03c      	b.n	80048fa <HAL_TIM_PWM_Start+0x9e>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b04      	cmp	r3, #4
 8004884:	d109      	bne.n	800489a <HAL_TIM_PWM_Start+0x3e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b01      	cmp	r3, #1
 8004890:	bf14      	ite	ne
 8004892:	2301      	movne	r3, #1
 8004894:	2300      	moveq	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	e02f      	b.n	80048fa <HAL_TIM_PWM_Start+0x9e>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b08      	cmp	r3, #8
 800489e:	d109      	bne.n	80048b4 <HAL_TIM_PWM_Start+0x58>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	bf14      	ite	ne
 80048ac:	2301      	movne	r3, #1
 80048ae:	2300      	moveq	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	e022      	b.n	80048fa <HAL_TIM_PWM_Start+0x9e>
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2b0c      	cmp	r3, #12
 80048b8:	d109      	bne.n	80048ce <HAL_TIM_PWM_Start+0x72>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	bf14      	ite	ne
 80048c6:	2301      	movne	r3, #1
 80048c8:	2300      	moveq	r3, #0
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	e015      	b.n	80048fa <HAL_TIM_PWM_Start+0x9e>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b10      	cmp	r3, #16
 80048d2:	d109      	bne.n	80048e8 <HAL_TIM_PWM_Start+0x8c>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	bf14      	ite	ne
 80048e0:	2301      	movne	r3, #1
 80048e2:	2300      	moveq	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	e008      	b.n	80048fa <HAL_TIM_PWM_Start+0x9e>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	bf14      	ite	ne
 80048f4:	2301      	movne	r3, #1
 80048f6:	2300      	moveq	r3, #0
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e088      	b.n	8004a14 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d104      	bne.n	8004912 <HAL_TIM_PWM_Start+0xb6>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004910:	e023      	b.n	800495a <HAL_TIM_PWM_Start+0xfe>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b04      	cmp	r3, #4
 8004916:	d104      	bne.n	8004922 <HAL_TIM_PWM_Start+0xc6>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004920:	e01b      	b.n	800495a <HAL_TIM_PWM_Start+0xfe>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b08      	cmp	r3, #8
 8004926:	d104      	bne.n	8004932 <HAL_TIM_PWM_Start+0xd6>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004930:	e013      	b.n	800495a <HAL_TIM_PWM_Start+0xfe>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b0c      	cmp	r3, #12
 8004936:	d104      	bne.n	8004942 <HAL_TIM_PWM_Start+0xe6>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004940:	e00b      	b.n	800495a <HAL_TIM_PWM_Start+0xfe>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b10      	cmp	r3, #16
 8004946:	d104      	bne.n	8004952 <HAL_TIM_PWM_Start+0xf6>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004950:	e003      	b.n	800495a <HAL_TIM_PWM_Start+0xfe>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2202      	movs	r2, #2
 8004956:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2201      	movs	r2, #1
 8004960:	6839      	ldr	r1, [r7, #0]
 8004962:	4618      	mov	r0, r3
 8004964:	f001 fcbc 	bl	80062e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a2b      	ldr	r2, [pc, #172]	; (8004a1c <HAL_TIM_PWM_Start+0x1c0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00e      	beq.n	8004990 <HAL_TIM_PWM_Start+0x134>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a2a      	ldr	r2, [pc, #168]	; (8004a20 <HAL_TIM_PWM_Start+0x1c4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d009      	beq.n	8004990 <HAL_TIM_PWM_Start+0x134>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a28      	ldr	r2, [pc, #160]	; (8004a24 <HAL_TIM_PWM_Start+0x1c8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d004      	beq.n	8004990 <HAL_TIM_PWM_Start+0x134>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a27      	ldr	r2, [pc, #156]	; (8004a28 <HAL_TIM_PWM_Start+0x1cc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d101      	bne.n	8004994 <HAL_TIM_PWM_Start+0x138>
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <HAL_TIM_PWM_Start+0x13a>
 8004994:	2300      	movs	r3, #0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d007      	beq.n	80049aa <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a1b      	ldr	r2, [pc, #108]	; (8004a1c <HAL_TIM_PWM_Start+0x1c0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00e      	beq.n	80049d2 <HAL_TIM_PWM_Start+0x176>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049bc:	d009      	beq.n	80049d2 <HAL_TIM_PWM_Start+0x176>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1a      	ldr	r2, [pc, #104]	; (8004a2c <HAL_TIM_PWM_Start+0x1d0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d004      	beq.n	80049d2 <HAL_TIM_PWM_Start+0x176>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a14      	ldr	r2, [pc, #80]	; (8004a20 <HAL_TIM_PWM_Start+0x1c4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d115      	bne.n	80049fe <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	4b15      	ldr	r3, [pc, #84]	; (8004a30 <HAL_TIM_PWM_Start+0x1d4>)
 80049da:	4013      	ands	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2b06      	cmp	r3, #6
 80049e2:	d015      	beq.n	8004a10 <HAL_TIM_PWM_Start+0x1b4>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ea:	d011      	beq.n	8004a10 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0201 	orr.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fc:	e008      	b.n	8004a10 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0201 	orr.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	e000      	b.n	8004a12 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40012c00 	.word	0x40012c00
 8004a20:	40014000 	.word	0x40014000
 8004a24:	40014400 	.word	0x40014400
 8004a28:	40014800 	.word	0x40014800
 8004a2c:	40000400 	.word	0x40000400
 8004a30:	00010007 	.word	0x00010007

08004a34 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d109      	bne.n	8004a60 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	bf0c      	ite	eq
 8004a58:	2301      	moveq	r3, #1
 8004a5a:	2300      	movne	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	e03c      	b.n	8004ada <HAL_TIM_PWM_Start_DMA+0xa6>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d109      	bne.n	8004a7a <HAL_TIM_PWM_Start_DMA+0x46>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	bf0c      	ite	eq
 8004a72:	2301      	moveq	r3, #1
 8004a74:	2300      	movne	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	e02f      	b.n	8004ada <HAL_TIM_PWM_Start_DMA+0xa6>
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d109      	bne.n	8004a94 <HAL_TIM_PWM_Start_DMA+0x60>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	bf0c      	ite	eq
 8004a8c:	2301      	moveq	r3, #1
 8004a8e:	2300      	movne	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	e022      	b.n	8004ada <HAL_TIM_PWM_Start_DMA+0xa6>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b0c      	cmp	r3, #12
 8004a98:	d109      	bne.n	8004aae <HAL_TIM_PWM_Start_DMA+0x7a>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	bf0c      	ite	eq
 8004aa6:	2301      	moveq	r3, #1
 8004aa8:	2300      	movne	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	e015      	b.n	8004ada <HAL_TIM_PWM_Start_DMA+0xa6>
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b10      	cmp	r3, #16
 8004ab2:	d109      	bne.n	8004ac8 <HAL_TIM_PWM_Start_DMA+0x94>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	bf0c      	ite	eq
 8004ac0:	2301      	moveq	r3, #1
 8004ac2:	2300      	movne	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	e008      	b.n	8004ada <HAL_TIM_PWM_Start_DMA+0xa6>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	bf0c      	ite	eq
 8004ad4:	2301      	moveq	r3, #1
 8004ad6:	2300      	movne	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e197      	b.n	8004e12 <HAL_TIM_PWM_Start_DMA+0x3de>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d109      	bne.n	8004afc <HAL_TIM_PWM_Start_DMA+0xc8>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	bf0c      	ite	eq
 8004af4:	2301      	moveq	r3, #1
 8004af6:	2300      	movne	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	e03c      	b.n	8004b76 <HAL_TIM_PWM_Start_DMA+0x142>
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d109      	bne.n	8004b16 <HAL_TIM_PWM_Start_DMA+0xe2>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	bf0c      	ite	eq
 8004b0e:	2301      	moveq	r3, #1
 8004b10:	2300      	movne	r3, #0
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	e02f      	b.n	8004b76 <HAL_TIM_PWM_Start_DMA+0x142>
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d109      	bne.n	8004b30 <HAL_TIM_PWM_Start_DMA+0xfc>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	bf0c      	ite	eq
 8004b28:	2301      	moveq	r3, #1
 8004b2a:	2300      	movne	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	e022      	b.n	8004b76 <HAL_TIM_PWM_Start_DMA+0x142>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b0c      	cmp	r3, #12
 8004b34:	d109      	bne.n	8004b4a <HAL_TIM_PWM_Start_DMA+0x116>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	bf0c      	ite	eq
 8004b42:	2301      	moveq	r3, #1
 8004b44:	2300      	movne	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	e015      	b.n	8004b76 <HAL_TIM_PWM_Start_DMA+0x142>
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2b10      	cmp	r3, #16
 8004b4e:	d109      	bne.n	8004b64 <HAL_TIM_PWM_Start_DMA+0x130>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	bf0c      	ite	eq
 8004b5c:	2301      	moveq	r3, #1
 8004b5e:	2300      	movne	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	e008      	b.n	8004b76 <HAL_TIM_PWM_Start_DMA+0x142>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	bf0c      	ite	eq
 8004b70:	2301      	moveq	r3, #1
 8004b72:	2300      	movne	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d034      	beq.n	8004be4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d104      	bne.n	8004b8a <HAL_TIM_PWM_Start_DMA+0x156>
 8004b80:	887b      	ldrh	r3, [r7, #2]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e143      	b.n	8004e12 <HAL_TIM_PWM_Start_DMA+0x3de>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_PWM_Start_DMA+0x166>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b98:	e026      	b.n	8004be8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_PWM_Start_DMA+0x176>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ba8:	e01e      	b.n	8004be8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d104      	bne.n	8004bba <HAL_TIM_PWM_Start_DMA+0x186>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bb8:	e016      	b.n	8004be8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b0c      	cmp	r3, #12
 8004bbe:	d104      	bne.n	8004bca <HAL_TIM_PWM_Start_DMA+0x196>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bc8:	e00e      	b.n	8004be8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d104      	bne.n	8004bda <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bd8:	e006      	b.n	8004be8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2202      	movs	r2, #2
 8004bde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004be2:	e001      	b.n	8004be8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e114      	b.n	8004e12 <HAL_TIM_PWM_Start_DMA+0x3de>
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b0c      	cmp	r3, #12
 8004bec:	f200 80ae 	bhi.w	8004d4c <HAL_TIM_PWM_Start_DMA+0x318>
 8004bf0:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8004bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf6:	bf00      	nop
 8004bf8:	08004c2d 	.word	0x08004c2d
 8004bfc:	08004d4d 	.word	0x08004d4d
 8004c00:	08004d4d 	.word	0x08004d4d
 8004c04:	08004d4d 	.word	0x08004d4d
 8004c08:	08004c75 	.word	0x08004c75
 8004c0c:	08004d4d 	.word	0x08004d4d
 8004c10:	08004d4d 	.word	0x08004d4d
 8004c14:	08004d4d 	.word	0x08004d4d
 8004c18:	08004cbd 	.word	0x08004cbd
 8004c1c:	08004d4d 	.word	0x08004d4d
 8004c20:	08004d4d 	.word	0x08004d4d
 8004c24:	08004d4d 	.word	0x08004d4d
 8004c28:	08004d05 	.word	0x08004d05
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	4a7a      	ldr	r2, [pc, #488]	; (8004e1c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004c32:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	4a79      	ldr	r2, [pc, #484]	; (8004e20 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004c3a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	4a78      	ldr	r2, [pc, #480]	; (8004e24 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8004c42:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3334      	adds	r3, #52	; 0x34
 8004c50:	461a      	mov	r2, r3
 8004c52:	887b      	ldrh	r3, [r7, #2]
 8004c54:	f7fd ffbc 	bl	8002bd0 <HAL_DMA_Start_IT>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e0d7      	b.n	8004e12 <HAL_TIM_PWM_Start_DMA+0x3de>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c70:	60da      	str	r2, [r3, #12]
      break;
 8004c72:	e06e      	b.n	8004d52 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c78:	4a68      	ldr	r2, [pc, #416]	; (8004e1c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004c7a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c80:	4a67      	ldr	r2, [pc, #412]	; (8004e20 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004c82:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c88:	4a66      	ldr	r2, [pc, #408]	; (8004e24 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3338      	adds	r3, #56	; 0x38
 8004c98:	461a      	mov	r2, r3
 8004c9a:	887b      	ldrh	r3, [r7, #2]
 8004c9c:	f7fd ff98 	bl	8002bd0 <HAL_DMA_Start_IT>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e0b3      	b.n	8004e12 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cb8:	60da      	str	r2, [r3, #12]
      break;
 8004cba:	e04a      	b.n	8004d52 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	4a56      	ldr	r2, [pc, #344]	; (8004e1c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004cc2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	4a55      	ldr	r2, [pc, #340]	; (8004e20 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004cca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	4a54      	ldr	r2, [pc, #336]	; (8004e24 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	333c      	adds	r3, #60	; 0x3c
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	887b      	ldrh	r3, [r7, #2]
 8004ce4:	f7fd ff74 	bl	8002bd0 <HAL_DMA_Start_IT>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e08f      	b.n	8004e12 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d00:	60da      	str	r2, [r3, #12]
      break;
 8004d02:	e026      	b.n	8004d52 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d08:	4a44      	ldr	r2, [pc, #272]	; (8004e1c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004d0a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	4a43      	ldr	r2, [pc, #268]	; (8004e20 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004d12:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	4a42      	ldr	r2, [pc, #264]	; (8004e24 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3340      	adds	r3, #64	; 0x40
 8004d28:	461a      	mov	r2, r3
 8004d2a:	887b      	ldrh	r3, [r7, #2]
 8004d2c:	f7fd ff50 	bl	8002bd0 <HAL_DMA_Start_IT>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e06b      	b.n	8004e12 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d48:	60da      	str	r2, [r3, #12]
      break;
 8004d4a:	e002      	b.n	8004d52 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d50:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d52:	7dfb      	ldrb	r3, [r7, #23]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d15b      	bne.n	8004e10 <HAL_TIM_PWM_Start_DMA+0x3dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	68b9      	ldr	r1, [r7, #8]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f001 fabd 	bl	80062e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a2f      	ldr	r2, [pc, #188]	; (8004e28 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d00e      	beq.n	8004d8e <HAL_TIM_PWM_Start_DMA+0x35a>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a2d      	ldr	r2, [pc, #180]	; (8004e2c <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d009      	beq.n	8004d8e <HAL_TIM_PWM_Start_DMA+0x35a>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a2c      	ldr	r2, [pc, #176]	; (8004e30 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d004      	beq.n	8004d8e <HAL_TIM_PWM_Start_DMA+0x35a>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a2a      	ldr	r2, [pc, #168]	; (8004e34 <HAL_TIM_PWM_Start_DMA+0x400>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d101      	bne.n	8004d92 <HAL_TIM_PWM_Start_DMA+0x35e>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e000      	b.n	8004d94 <HAL_TIM_PWM_Start_DMA+0x360>
 8004d92:	2300      	movs	r3, #0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d007      	beq.n	8004da8 <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004da6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a1e      	ldr	r2, [pc, #120]	; (8004e28 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00e      	beq.n	8004dd0 <HAL_TIM_PWM_Start_DMA+0x39c>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dba:	d009      	beq.n	8004dd0 <HAL_TIM_PWM_Start_DMA+0x39c>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a1d      	ldr	r2, [pc, #116]	; (8004e38 <HAL_TIM_PWM_Start_DMA+0x404>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d004      	beq.n	8004dd0 <HAL_TIM_PWM_Start_DMA+0x39c>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a18      	ldr	r2, [pc, #96]	; (8004e2c <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d115      	bne.n	8004dfc <HAL_TIM_PWM_Start_DMA+0x3c8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <HAL_TIM_PWM_Start_DMA+0x408>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b06      	cmp	r3, #6
 8004de0:	d015      	beq.n	8004e0e <HAL_TIM_PWM_Start_DMA+0x3da>
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de8:	d011      	beq.n	8004e0e <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        __HAL_TIM_ENABLE(htim);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 0201 	orr.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfa:	e008      	b.n	8004e0e <HAL_TIM_PWM_Start_DMA+0x3da>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0201 	orr.w	r2, r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	e000      	b.n	8004e10 <HAL_TIM_PWM_Start_DMA+0x3dc>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	08005715 	.word	0x08005715
 8004e20:	080057bd 	.word	0x080057bd
 8004e24:	08005683 	.word	0x08005683
 8004e28:	40012c00 	.word	0x40012c00
 8004e2c:	40014000 	.word	0x40014000
 8004e30:	40014400 	.word	0x40014400
 8004e34:	40014800 	.word	0x40014800
 8004e38:	40000400 	.word	0x40000400
 8004e3c:	00010007 	.word	0x00010007

08004e40 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	73fb      	strb	r3, [r7, #15]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b0c      	cmp	r3, #12
 8004e52:	d855      	bhi.n	8004f00 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004e54:	a201      	add	r2, pc, #4	; (adr r2, 8004e5c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5a:	bf00      	nop
 8004e5c:	08004e91 	.word	0x08004e91
 8004e60:	08004f01 	.word	0x08004f01
 8004e64:	08004f01 	.word	0x08004f01
 8004e68:	08004f01 	.word	0x08004f01
 8004e6c:	08004ead 	.word	0x08004ead
 8004e70:	08004f01 	.word	0x08004f01
 8004e74:	08004f01 	.word	0x08004f01
 8004e78:	08004f01 	.word	0x08004f01
 8004e7c:	08004ec9 	.word	0x08004ec9
 8004e80:	08004f01 	.word	0x08004f01
 8004e84:	08004f01 	.word	0x08004f01
 8004e88:	08004f01 	.word	0x08004f01
 8004e8c:	08004ee5 	.word	0x08004ee5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e9e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fd fef2 	bl	8002c8e <HAL_DMA_Abort_IT>
      break;
 8004eaa:	e02c      	b.n	8004f06 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fd fee4 	bl	8002c8e <HAL_DMA_Abort_IT>
      break;
 8004ec6:	e01e      	b.n	8004f06 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ed6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fd fed6 	bl	8002c8e <HAL_DMA_Abort_IT>
      break;
 8004ee2:	e010      	b.n	8004f06 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ef2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fd fec8 	bl	8002c8e <HAL_DMA_Abort_IT>
      break;
 8004efe:	e002      	b.n	8004f06 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	73fb      	strb	r3, [r7, #15]
      break;
 8004f04:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d17b      	bne.n	8005004 <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2200      	movs	r2, #0
 8004f12:	6839      	ldr	r1, [r7, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f001 f9e3 	bl	80062e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a3c      	ldr	r2, [pc, #240]	; (8005010 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00e      	beq.n	8004f42 <HAL_TIM_PWM_Stop_DMA+0x102>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a3a      	ldr	r2, [pc, #232]	; (8005014 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d009      	beq.n	8004f42 <HAL_TIM_PWM_Stop_DMA+0x102>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a39      	ldr	r2, [pc, #228]	; (8005018 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d004      	beq.n	8004f42 <HAL_TIM_PWM_Stop_DMA+0x102>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a37      	ldr	r2, [pc, #220]	; (800501c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d101      	bne.n	8004f46 <HAL_TIM_PWM_Stop_DMA+0x106>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <HAL_TIM_PWM_Stop_DMA+0x108>
 8004f46:	2300      	movs	r3, #0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d017      	beq.n	8004f7c <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6a1a      	ldr	r2, [r3, #32]
 8004f52:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f56:	4013      	ands	r3, r2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10f      	bne.n	8004f7c <HAL_TIM_PWM_Stop_DMA+0x13c>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6a1a      	ldr	r2, [r3, #32]
 8004f62:	f240 4344 	movw	r3, #1092	; 0x444
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d107      	bne.n	8004f7c <HAL_TIM_PWM_Stop_DMA+0x13c>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f7a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6a1a      	ldr	r2, [r3, #32]
 8004f82:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10f      	bne.n	8004fac <HAL_TIM_PWM_Stop_DMA+0x16c>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6a1a      	ldr	r2, [r3, #32]
 8004f92:	f240 4344 	movw	r3, #1092	; 0x444
 8004f96:	4013      	ands	r3, r2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d107      	bne.n	8004fac <HAL_TIM_PWM_Stop_DMA+0x16c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0201 	bic.w	r2, r2, #1
 8004faa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d104      	bne.n	8004fbc <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fba:	e023      	b.n	8005004 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d104      	bne.n	8004fcc <HAL_TIM_PWM_Stop_DMA+0x18c>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fca:	e01b      	b.n	8005004 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	d104      	bne.n	8004fdc <HAL_TIM_PWM_Stop_DMA+0x19c>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fda:	e013      	b.n	8005004 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b0c      	cmp	r3, #12
 8004fe0:	d104      	bne.n	8004fec <HAL_TIM_PWM_Stop_DMA+0x1ac>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fea:	e00b      	b.n	8005004 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	2b10      	cmp	r3, #16
 8004ff0:	d104      	bne.n	8004ffc <HAL_TIM_PWM_Stop_DMA+0x1bc>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ffa:	e003      	b.n	8005004 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8005004:	7bfb      	ldrb	r3, [r7, #15]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40012c00 	.word	0x40012c00
 8005014:	40014000 	.word	0x40014000
 8005018:	40014400 	.word	0x40014400
 800501c:	40014800 	.word	0x40014800

08005020 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e049      	b.n	80050c6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d106      	bne.n	800504c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7fc fd2a 	bl	8001aa0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3304      	adds	r3, #4
 800505c:	4619      	mov	r1, r3
 800505e:	4610      	mov	r0, r2
 8005060:	f000 fbe0 	bl	8005824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b086      	sub	sp, #24
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_TIM_IC_ConfigChannel+0x1e>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e088      	b.n	80051fe <HAL_TIM_IC_ConfigChannel+0x130>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d11b      	bne.n	8005132 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	6819      	ldr	r1, [r3, #0]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f000 ff3d 	bl	8005f88 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	699a      	ldr	r2, [r3, #24]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 020c 	bic.w	r2, r2, #12
 800511c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6999      	ldr	r1, [r3, #24]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	619a      	str	r2, [r3, #24]
 8005130:	e060      	b.n	80051f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b04      	cmp	r3, #4
 8005136:	d11c      	bne.n	8005172 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6818      	ldr	r0, [r3, #0]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	6819      	ldr	r1, [r3, #0]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f000 ffa9 	bl	800609e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800515a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6999      	ldr	r1, [r3, #24]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	021a      	lsls	r2, r3, #8
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	619a      	str	r2, [r3, #24]
 8005170:	e040      	b.n	80051f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b08      	cmp	r3, #8
 8005176:	d11b      	bne.n	80051b0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6818      	ldr	r0, [r3, #0]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	6819      	ldr	r1, [r3, #0]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f000 fff6 	bl	8006178 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69da      	ldr	r2, [r3, #28]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 020c 	bic.w	r2, r2, #12
 800519a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	69d9      	ldr	r1, [r3, #28]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	61da      	str	r2, [r3, #28]
 80051ae:	e021      	b.n	80051f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b0c      	cmp	r3, #12
 80051b4:	d11c      	bne.n	80051f0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	6819      	ldr	r1, [r3, #0]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f001 f813 	bl	80061f0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69da      	ldr	r2, [r3, #28]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80051d8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69d9      	ldr	r1, [r3, #28]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	021a      	lsls	r2, r3, #8
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	61da      	str	r2, [r3, #28]
 80051ee:	e001      	b.n	80051f4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005222:	2302      	movs	r3, #2
 8005224:	e0ff      	b.n	8005426 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b14      	cmp	r3, #20
 8005232:	f200 80f0 	bhi.w	8005416 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005236:	a201      	add	r2, pc, #4	; (adr r2, 800523c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523c:	08005291 	.word	0x08005291
 8005240:	08005417 	.word	0x08005417
 8005244:	08005417 	.word	0x08005417
 8005248:	08005417 	.word	0x08005417
 800524c:	080052d1 	.word	0x080052d1
 8005250:	08005417 	.word	0x08005417
 8005254:	08005417 	.word	0x08005417
 8005258:	08005417 	.word	0x08005417
 800525c:	08005313 	.word	0x08005313
 8005260:	08005417 	.word	0x08005417
 8005264:	08005417 	.word	0x08005417
 8005268:	08005417 	.word	0x08005417
 800526c:	08005353 	.word	0x08005353
 8005270:	08005417 	.word	0x08005417
 8005274:	08005417 	.word	0x08005417
 8005278:	08005417 	.word	0x08005417
 800527c:	08005395 	.word	0x08005395
 8005280:	08005417 	.word	0x08005417
 8005284:	08005417 	.word	0x08005417
 8005288:	08005417 	.word	0x08005417
 800528c:	080053d5 	.word	0x080053d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fb3c 	bl	8005914 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0208 	orr.w	r2, r2, #8
 80052aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0204 	bic.w	r2, r2, #4
 80052ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6999      	ldr	r1, [r3, #24]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	619a      	str	r2, [r3, #24]
      break;
 80052ce:	e0a5      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fba2 	bl	8005a20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6999      	ldr	r1, [r3, #24]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	021a      	lsls	r2, r3, #8
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	619a      	str	r2, [r3, #24]
      break;
 8005310:	e084      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68b9      	ldr	r1, [r7, #8]
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fc01 	bl	8005b20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69da      	ldr	r2, [r3, #28]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0208 	orr.w	r2, r2, #8
 800532c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0204 	bic.w	r2, r2, #4
 800533c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69d9      	ldr	r1, [r3, #28]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	61da      	str	r2, [r3, #28]
      break;
 8005350:	e064      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fc5f 	bl	8005c1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69da      	ldr	r2, [r3, #28]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800536c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800537c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69d9      	ldr	r1, [r3, #28]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	021a      	lsls	r2, r3, #8
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	61da      	str	r2, [r3, #28]
      break;
 8005392:	e043      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68b9      	ldr	r1, [r7, #8]
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fca2 	bl	8005ce4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0208 	orr.w	r2, r2, #8
 80053ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0204 	bic.w	r2, r2, #4
 80053be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80053d2:	e023      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fce0 	bl	8005da0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	021a      	lsls	r2, r3, #8
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005414:	e002      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	75fb      	strb	r3, [r7, #23]
      break;
 800541a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005424:	7dfb      	ldrb	r3, [r7, #23]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop

08005430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005444:	2b01      	cmp	r3, #1
 8005446:	d101      	bne.n	800544c <HAL_TIM_ConfigClockSource+0x1c>
 8005448:	2302      	movs	r3, #2
 800544a:	e0b6      	b.n	80055ba <HAL_TIM_ConfigClockSource+0x18a>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800546a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800546e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005476:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005488:	d03e      	beq.n	8005508 <HAL_TIM_ConfigClockSource+0xd8>
 800548a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800548e:	f200 8087 	bhi.w	80055a0 <HAL_TIM_ConfigClockSource+0x170>
 8005492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005496:	f000 8086 	beq.w	80055a6 <HAL_TIM_ConfigClockSource+0x176>
 800549a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549e:	d87f      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x170>
 80054a0:	2b70      	cmp	r3, #112	; 0x70
 80054a2:	d01a      	beq.n	80054da <HAL_TIM_ConfigClockSource+0xaa>
 80054a4:	2b70      	cmp	r3, #112	; 0x70
 80054a6:	d87b      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x170>
 80054a8:	2b60      	cmp	r3, #96	; 0x60
 80054aa:	d050      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x11e>
 80054ac:	2b60      	cmp	r3, #96	; 0x60
 80054ae:	d877      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x170>
 80054b0:	2b50      	cmp	r3, #80	; 0x50
 80054b2:	d03c      	beq.n	800552e <HAL_TIM_ConfigClockSource+0xfe>
 80054b4:	2b50      	cmp	r3, #80	; 0x50
 80054b6:	d873      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x170>
 80054b8:	2b40      	cmp	r3, #64	; 0x40
 80054ba:	d058      	beq.n	800556e <HAL_TIM_ConfigClockSource+0x13e>
 80054bc:	2b40      	cmp	r3, #64	; 0x40
 80054be:	d86f      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x170>
 80054c0:	2b30      	cmp	r3, #48	; 0x30
 80054c2:	d064      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15e>
 80054c4:	2b30      	cmp	r3, #48	; 0x30
 80054c6:	d86b      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x170>
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	d060      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15e>
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	d867      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x170>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d05c      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15e>
 80054d4:	2b10      	cmp	r3, #16
 80054d6:	d05a      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15e>
 80054d8:	e062      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6899      	ldr	r1, [r3, #8]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f000 fed9 	bl	80062a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	609a      	str	r2, [r3, #8]
      break;
 8005506:	e04f      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6818      	ldr	r0, [r3, #0]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	6899      	ldr	r1, [r3, #8]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f000 fec2 	bl	80062a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800552a:	609a      	str	r2, [r3, #8]
      break;
 800552c:	e03c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6859      	ldr	r1, [r3, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	461a      	mov	r2, r3
 800553c:	f000 fd80 	bl	8006040 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2150      	movs	r1, #80	; 0x50
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fe8f 	bl	800626a <TIM_ITRx_SetConfig>
      break;
 800554c:	e02c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6859      	ldr	r1, [r3, #4]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	461a      	mov	r2, r3
 800555c:	f000 fddc 	bl	8006118 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2160      	movs	r1, #96	; 0x60
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fe7f 	bl	800626a <TIM_ITRx_SetConfig>
      break;
 800556c:	e01c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	6859      	ldr	r1, [r3, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	461a      	mov	r2, r3
 800557c:	f000 fd60 	bl	8006040 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2140      	movs	r1, #64	; 0x40
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fe6f 	bl	800626a <TIM_ITRx_SetConfig>
      break;
 800558c:	e00c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4619      	mov	r1, r3
 8005598:	4610      	mov	r0, r2
 800559a:	f000 fe66 	bl	800626a <TIM_ITRx_SetConfig>
      break;
 800559e:	e003      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	73fb      	strb	r3, [r7, #15]
      break;
 80055a4:	e000      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80055a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b082      	sub	sp, #8
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_TIM_SlaveConfigSynchro+0x18>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e031      	b.n	800563e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2202      	movs	r2, #2
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80055ea:	6839      	ldr	r1, [r7, #0]
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fc37 	bl	8005e60 <TIM_SlaveTimer_SetConfig>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d009      	beq.n	800560c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e018      	b.n	800563e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68da      	ldr	r2, [r3, #12]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800561a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800562a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	429a      	cmp	r2, r3
 8005698:	d107      	bne.n	80056aa <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056a8:	e02a      	b.n	8005700 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d107      	bne.n	80056c4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2202      	movs	r2, #2
 80056b8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056c2:	e01d      	b.n	8005700 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d107      	bne.n	80056de <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2204      	movs	r2, #4
 80056d2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056dc:	e010      	b.n	8005700 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d107      	bne.n	80056f8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2208      	movs	r2, #8
 80056ec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056f6:	e003      	b.n	8005700 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7ff ffb4 	bl	800566e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	771a      	strb	r2, [r3, #28]
}
 800570c:	bf00      	nop
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	429a      	cmp	r2, r3
 800572a:	d10b      	bne.n	8005744 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2201      	movs	r2, #1
 8005730:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d136      	bne.n	80057a8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005742:	e031      	b.n	80057a8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	429a      	cmp	r2, r3
 800574c:	d10b      	bne.n	8005766 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2202      	movs	r2, #2
 8005752:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d125      	bne.n	80057a8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005764:	e020      	b.n	80057a8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	429a      	cmp	r2, r3
 800576e:	d10b      	bne.n	8005788 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2204      	movs	r2, #4
 8005774:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d114      	bne.n	80057a8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005786:	e00f      	b.n	80057a8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	429a      	cmp	r2, r3
 8005790:	d10a      	bne.n	80057a8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2208      	movs	r2, #8
 8005796:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d103      	bne.n	80057a8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f7ff ff4c 	bl	8005646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	771a      	strb	r2, [r3, #28]
}
 80057b4:	bf00      	nop
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d103      	bne.n	80057dc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	771a      	strb	r2, [r3, #28]
 80057da:	e019      	b.n	8005810 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d103      	bne.n	80057ee <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2202      	movs	r2, #2
 80057ea:	771a      	strb	r2, [r3, #28]
 80057ec:	e010      	b.n	8005810 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d103      	bne.n	8005800 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2204      	movs	r2, #4
 80057fc:	771a      	strb	r2, [r3, #28]
 80057fe:	e007      	b.n	8005810 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	429a      	cmp	r2, r3
 8005808:	d102      	bne.n	8005810 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2208      	movs	r2, #8
 800580e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f7ff ff22 	bl	800565a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	771a      	strb	r2, [r3, #28]
}
 800581c:	bf00      	nop
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a32      	ldr	r2, [pc, #200]	; (8005900 <TIM_Base_SetConfig+0xdc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d007      	beq.n	800584c <TIM_Base_SetConfig+0x28>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005842:	d003      	beq.n	800584c <TIM_Base_SetConfig+0x28>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a2f      	ldr	r2, [pc, #188]	; (8005904 <TIM_Base_SetConfig+0xe0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d108      	bne.n	800585e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a27      	ldr	r2, [pc, #156]	; (8005900 <TIM_Base_SetConfig+0xdc>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d013      	beq.n	800588e <TIM_Base_SetConfig+0x6a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586c:	d00f      	beq.n	800588e <TIM_Base_SetConfig+0x6a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a24      	ldr	r2, [pc, #144]	; (8005904 <TIM_Base_SetConfig+0xe0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00b      	beq.n	800588e <TIM_Base_SetConfig+0x6a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a23      	ldr	r2, [pc, #140]	; (8005908 <TIM_Base_SetConfig+0xe4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d007      	beq.n	800588e <TIM_Base_SetConfig+0x6a>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a22      	ldr	r2, [pc, #136]	; (800590c <TIM_Base_SetConfig+0xe8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d003      	beq.n	800588e <TIM_Base_SetConfig+0x6a>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a21      	ldr	r2, [pc, #132]	; (8005910 <TIM_Base_SetConfig+0xec>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d108      	bne.n	80058a0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4313      	orrs	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a0e      	ldr	r2, [pc, #56]	; (8005900 <TIM_Base_SetConfig+0xdc>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00b      	beq.n	80058e4 <TIM_Base_SetConfig+0xc0>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a0e      	ldr	r2, [pc, #56]	; (8005908 <TIM_Base_SetConfig+0xe4>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d007      	beq.n	80058e4 <TIM_Base_SetConfig+0xc0>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a0d      	ldr	r2, [pc, #52]	; (800590c <TIM_Base_SetConfig+0xe8>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d003      	beq.n	80058e4 <TIM_Base_SetConfig+0xc0>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a0c      	ldr	r2, [pc, #48]	; (8005910 <TIM_Base_SetConfig+0xec>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d103      	bne.n	80058ec <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	615a      	str	r2, [r3, #20]
}
 80058f2:	bf00      	nop
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	40012c00 	.word	0x40012c00
 8005904:	40000400 	.word	0x40000400
 8005908:	40014000 	.word	0x40014000
 800590c:	40014400 	.word	0x40014400
 8005910:	40014800 	.word	0x40014800

08005914 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	f023 0201 	bic.w	r2, r3, #1
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0303 	bic.w	r3, r3, #3
 800594e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f023 0302 	bic.w	r3, r3, #2
 8005960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a28      	ldr	r2, [pc, #160]	; (8005a10 <TIM_OC1_SetConfig+0xfc>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00b      	beq.n	800598c <TIM_OC1_SetConfig+0x78>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a27      	ldr	r2, [pc, #156]	; (8005a14 <TIM_OC1_SetConfig+0x100>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d007      	beq.n	800598c <TIM_OC1_SetConfig+0x78>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a26      	ldr	r2, [pc, #152]	; (8005a18 <TIM_OC1_SetConfig+0x104>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_OC1_SetConfig+0x78>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a25      	ldr	r2, [pc, #148]	; (8005a1c <TIM_OC1_SetConfig+0x108>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d10c      	bne.n	80059a6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f023 0308 	bic.w	r3, r3, #8
 8005992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f023 0304 	bic.w	r3, r3, #4
 80059a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a19      	ldr	r2, [pc, #100]	; (8005a10 <TIM_OC1_SetConfig+0xfc>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00b      	beq.n	80059c6 <TIM_OC1_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a18      	ldr	r2, [pc, #96]	; (8005a14 <TIM_OC1_SetConfig+0x100>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d007      	beq.n	80059c6 <TIM_OC1_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <TIM_OC1_SetConfig+0x104>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d003      	beq.n	80059c6 <TIM_OC1_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a16      	ldr	r2, [pc, #88]	; (8005a1c <TIM_OC1_SetConfig+0x108>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d111      	bne.n	80059ea <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	621a      	str	r2, [r3, #32]
}
 8005a04:	bf00      	nop
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	40012c00 	.word	0x40012c00
 8005a14:	40014000 	.word	0x40014000
 8005a18:	40014400 	.word	0x40014400
 8005a1c:	40014800 	.word	0x40014800

08005a20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	f023 0210 	bic.w	r2, r3, #16
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	021b      	lsls	r3, r3, #8
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f023 0320 	bic.w	r3, r3, #32
 8005a6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	011b      	lsls	r3, r3, #4
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a24      	ldr	r2, [pc, #144]	; (8005b10 <TIM_OC2_SetConfig+0xf0>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d10d      	bne.n	8005aa0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	011b      	lsls	r3, r3, #4
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a1b      	ldr	r2, [pc, #108]	; (8005b10 <TIM_OC2_SetConfig+0xf0>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00b      	beq.n	8005ac0 <TIM_OC2_SetConfig+0xa0>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a1a      	ldr	r2, [pc, #104]	; (8005b14 <TIM_OC2_SetConfig+0xf4>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d007      	beq.n	8005ac0 <TIM_OC2_SetConfig+0xa0>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a19      	ldr	r2, [pc, #100]	; (8005b18 <TIM_OC2_SetConfig+0xf8>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d003      	beq.n	8005ac0 <TIM_OC2_SetConfig+0xa0>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a18      	ldr	r2, [pc, #96]	; (8005b1c <TIM_OC2_SetConfig+0xfc>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d113      	bne.n	8005ae8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ac6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ace:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	621a      	str	r2, [r3, #32]
}
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40012c00 	.word	0x40012c00
 8005b14:	40014000 	.word	0x40014000
 8005b18:	40014400 	.word	0x40014400
 8005b1c:	40014800 	.word	0x40014800

08005b20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0303 	bic.w	r3, r3, #3
 8005b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a23      	ldr	r2, [pc, #140]	; (8005c0c <TIM_OC3_SetConfig+0xec>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d10d      	bne.n	8005b9e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b9c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a1a      	ldr	r2, [pc, #104]	; (8005c0c <TIM_OC3_SetConfig+0xec>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00b      	beq.n	8005bbe <TIM_OC3_SetConfig+0x9e>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a19      	ldr	r2, [pc, #100]	; (8005c10 <TIM_OC3_SetConfig+0xf0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d007      	beq.n	8005bbe <TIM_OC3_SetConfig+0x9e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a18      	ldr	r2, [pc, #96]	; (8005c14 <TIM_OC3_SetConfig+0xf4>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d003      	beq.n	8005bbe <TIM_OC3_SetConfig+0x9e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a17      	ldr	r2, [pc, #92]	; (8005c18 <TIM_OC3_SetConfig+0xf8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d113      	bne.n	8005be6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	011b      	lsls	r3, r3, #4
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	621a      	str	r2, [r3, #32]
}
 8005c00:	bf00      	nop
 8005c02:	371c      	adds	r7, #28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	40012c00 	.word	0x40012c00
 8005c10:	40014000 	.word	0x40014000
 8005c14:	40014400 	.word	0x40014400
 8005c18:	40014800 	.word	0x40014800

08005c1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	021b      	lsls	r3, r3, #8
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	031b      	lsls	r3, r3, #12
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a16      	ldr	r2, [pc, #88]	; (8005cd4 <TIM_OC4_SetConfig+0xb8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00b      	beq.n	8005c98 <TIM_OC4_SetConfig+0x7c>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <TIM_OC4_SetConfig+0xbc>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d007      	beq.n	8005c98 <TIM_OC4_SetConfig+0x7c>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a14      	ldr	r2, [pc, #80]	; (8005cdc <TIM_OC4_SetConfig+0xc0>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d003      	beq.n	8005c98 <TIM_OC4_SetConfig+0x7c>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a13      	ldr	r2, [pc, #76]	; (8005ce0 <TIM_OC4_SetConfig+0xc4>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d109      	bne.n	8005cac <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	019b      	lsls	r3, r3, #6
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	621a      	str	r2, [r3, #32]
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40012c00 	.word	0x40012c00
 8005cd8:	40014000 	.word	0x40014000
 8005cdc:	40014400 	.word	0x40014400
 8005ce0:	40014800 	.word	0x40014800

08005ce4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	041b      	lsls	r3, r3, #16
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <TIM_OC5_SetConfig+0xac>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00b      	beq.n	8005d56 <TIM_OC5_SetConfig+0x72>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a14      	ldr	r2, [pc, #80]	; (8005d94 <TIM_OC5_SetConfig+0xb0>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d007      	beq.n	8005d56 <TIM_OC5_SetConfig+0x72>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a13      	ldr	r2, [pc, #76]	; (8005d98 <TIM_OC5_SetConfig+0xb4>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d003      	beq.n	8005d56 <TIM_OC5_SetConfig+0x72>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a12      	ldr	r2, [pc, #72]	; (8005d9c <TIM_OC5_SetConfig+0xb8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d109      	bne.n	8005d6a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	021b      	lsls	r3, r3, #8
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	621a      	str	r2, [r3, #32]
}
 8005d84:	bf00      	nop
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	40012c00 	.word	0x40012c00
 8005d94:	40014000 	.word	0x40014000
 8005d98:	40014400 	.word	0x40014400
 8005d9c:	40014800 	.word	0x40014800

08005da0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	021b      	lsls	r3, r3, #8
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005de6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	051b      	lsls	r3, r3, #20
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a16      	ldr	r2, [pc, #88]	; (8005e50 <TIM_OC6_SetConfig+0xb0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00b      	beq.n	8005e14 <TIM_OC6_SetConfig+0x74>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a15      	ldr	r2, [pc, #84]	; (8005e54 <TIM_OC6_SetConfig+0xb4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d007      	beq.n	8005e14 <TIM_OC6_SetConfig+0x74>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a14      	ldr	r2, [pc, #80]	; (8005e58 <TIM_OC6_SetConfig+0xb8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d003      	beq.n	8005e14 <TIM_OC6_SetConfig+0x74>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a13      	ldr	r2, [pc, #76]	; (8005e5c <TIM_OC6_SetConfig+0xbc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d109      	bne.n	8005e28 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	029b      	lsls	r3, r3, #10
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	621a      	str	r2, [r3, #32]
}
 8005e42:	bf00      	nop
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40012c00 	.word	0x40012c00
 8005e54:	40014000 	.word	0x40014000
 8005e58:	40014400 	.word	0x40014400
 8005e5c:	40014800 	.word	0x40014800

08005e60 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e8e:	f023 0307 	bic.w	r3, r3, #7
 8005e92:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2b70      	cmp	r3, #112	; 0x70
 8005eac:	d01a      	beq.n	8005ee4 <TIM_SlaveTimer_SetConfig+0x84>
 8005eae:	2b70      	cmp	r3, #112	; 0x70
 8005eb0:	d860      	bhi.n	8005f74 <TIM_SlaveTimer_SetConfig+0x114>
 8005eb2:	2b60      	cmp	r3, #96	; 0x60
 8005eb4:	d054      	beq.n	8005f60 <TIM_SlaveTimer_SetConfig+0x100>
 8005eb6:	2b60      	cmp	r3, #96	; 0x60
 8005eb8:	d85c      	bhi.n	8005f74 <TIM_SlaveTimer_SetConfig+0x114>
 8005eba:	2b50      	cmp	r3, #80	; 0x50
 8005ebc:	d046      	beq.n	8005f4c <TIM_SlaveTimer_SetConfig+0xec>
 8005ebe:	2b50      	cmp	r3, #80	; 0x50
 8005ec0:	d858      	bhi.n	8005f74 <TIM_SlaveTimer_SetConfig+0x114>
 8005ec2:	2b40      	cmp	r3, #64	; 0x40
 8005ec4:	d019      	beq.n	8005efa <TIM_SlaveTimer_SetConfig+0x9a>
 8005ec6:	2b40      	cmp	r3, #64	; 0x40
 8005ec8:	d854      	bhi.n	8005f74 <TIM_SlaveTimer_SetConfig+0x114>
 8005eca:	2b30      	cmp	r3, #48	; 0x30
 8005ecc:	d055      	beq.n	8005f7a <TIM_SlaveTimer_SetConfig+0x11a>
 8005ece:	2b30      	cmp	r3, #48	; 0x30
 8005ed0:	d850      	bhi.n	8005f74 <TIM_SlaveTimer_SetConfig+0x114>
 8005ed2:	2b20      	cmp	r3, #32
 8005ed4:	d051      	beq.n	8005f7a <TIM_SlaveTimer_SetConfig+0x11a>
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	d84c      	bhi.n	8005f74 <TIM_SlaveTimer_SetConfig+0x114>
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d04d      	beq.n	8005f7a <TIM_SlaveTimer_SetConfig+0x11a>
 8005ede:	2b10      	cmp	r3, #16
 8005ee0:	d04b      	beq.n	8005f7a <TIM_SlaveTimer_SetConfig+0x11a>
 8005ee2:	e047      	b.n	8005f74 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6818      	ldr	r0, [r3, #0]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	68d9      	ldr	r1, [r3, #12]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f000 f9d4 	bl	80062a0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005ef8:	e040      	b.n	8005f7c <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b05      	cmp	r3, #5
 8005f00:	d101      	bne.n	8005f06 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e03b      	b.n	8005f7e <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6a1a      	ldr	r2, [r3, #32]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0201 	bic.w	r2, r2, #1
 8005f1c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f2c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	621a      	str	r2, [r3, #32]
      break;
 8005f4a:	e017      	b.n	8005f7c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6818      	ldr	r0, [r3, #0]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	6899      	ldr	r1, [r3, #8]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	f000 f871 	bl	8006040 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005f5e:	e00d      	b.n	8005f7c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6818      	ldr	r0, [r3, #0]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	6899      	ldr	r1, [r3, #8]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f000 f8d3 	bl	8006118 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005f72:	e003      	b.n	8005f7c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	75fb      	strb	r3, [r7, #23]
      break;
 8005f78:	e000      	b.n	8005f7c <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8005f7a:	bf00      	nop
  }

  return status;
 8005f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	f023 0201 	bic.w	r2, r3, #1
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4a20      	ldr	r2, [pc, #128]	; (8006034 <TIM_TI1_SetConfig+0xac>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00b      	beq.n	8005fce <TIM_TI1_SetConfig+0x46>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fbc:	d007      	beq.n	8005fce <TIM_TI1_SetConfig+0x46>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	4a1d      	ldr	r2, [pc, #116]	; (8006038 <TIM_TI1_SetConfig+0xb0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d003      	beq.n	8005fce <TIM_TI1_SetConfig+0x46>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4a1c      	ldr	r2, [pc, #112]	; (800603c <TIM_TI1_SetConfig+0xb4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d101      	bne.n	8005fd2 <TIM_TI1_SetConfig+0x4a>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e000      	b.n	8005fd4 <TIM_TI1_SetConfig+0x4c>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d008      	beq.n	8005fea <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f023 0303 	bic.w	r3, r3, #3
 8005fde:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	e003      	b.n	8005ff2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f043 0301 	orr.w	r3, r3, #1
 8005ff0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ff8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	011b      	lsls	r3, r3, #4
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	4313      	orrs	r3, r2
 8006004:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f023 030a 	bic.w	r3, r3, #10
 800600c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f003 030a 	and.w	r3, r3, #10
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	4313      	orrs	r3, r2
 8006018:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	621a      	str	r2, [r3, #32]
}
 8006026:	bf00      	nop
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40012c00 	.word	0x40012c00
 8006038:	40000400 	.word	0x40000400
 800603c:	40014000 	.word	0x40014000

08006040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f023 0201 	bic.w	r2, r3, #1
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800606a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f023 030a 	bic.w	r3, r3, #10
 800607c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	621a      	str	r2, [r3, #32]
}
 8006092:	bf00      	nop
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800609e:	b480      	push	{r7}
 80060a0:	b087      	sub	sp, #28
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	607a      	str	r2, [r7, #4]
 80060aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	f023 0210 	bic.w	r2, r3, #16
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	021b      	lsls	r3, r3, #8
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	031b      	lsls	r3, r3, #12
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	621a      	str	r2, [r3, #32]
}
 800610c:	bf00      	nop
 800610e:	371c      	adds	r7, #28
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	f023 0210 	bic.w	r2, r3, #16
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006142:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	031b      	lsls	r3, r3, #12
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	4313      	orrs	r3, r2
 800614c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006154:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	621a      	str	r2, [r3, #32]
}
 800616c:	bf00      	nop
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
 8006184:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f023 0303 	bic.w	r3, r3, #3
 80061a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	011b      	lsls	r3, r3, #4
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80061c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	021b      	lsls	r3, r3, #8
 80061ce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	621a      	str	r2, [r3, #32]
}
 80061e4:	bf00      	nop
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800621c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	021b      	lsls	r3, r3, #8
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800622e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	031b      	lsls	r3, r3, #12
 8006234:	b29b      	uxth	r3, r3
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006242:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	031b      	lsls	r3, r3, #12
 8006248:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	621a      	str	r2, [r3, #32]
}
 800625e:	bf00      	nop
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800626a:	b480      	push	{r7}
 800626c:	b085      	sub	sp, #20
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	f043 0307 	orr.w	r3, r3, #7
 800628c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	609a      	str	r2, [r3, #8]
}
 8006294:	bf00      	nop
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	021a      	lsls	r2, r3, #8
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	609a      	str	r2, [r3, #8]
}
 80062d4:	bf00      	nop
 80062d6:	371c      	adds	r7, #28
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f003 031f 	and.w	r3, r3, #31
 80062f2:	2201      	movs	r2, #1
 80062f4:	fa02 f303 	lsl.w	r3, r2, r3
 80062f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6a1a      	ldr	r2, [r3, #32]
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	43db      	mvns	r3, r3
 8006302:	401a      	ands	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a1a      	ldr	r2, [r3, #32]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	f003 031f 	and.w	r3, r3, #31
 8006312:	6879      	ldr	r1, [r7, #4]
 8006314:	fa01 f303 	lsl.w	r3, r1, r3
 8006318:	431a      	orrs	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	621a      	str	r2, [r3, #32]
}
 800631e:	bf00      	nop
 8006320:	371c      	adds	r7, #28
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
	...

0800632c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d109      	bne.n	8006350 <HAL_TIMEx_PWMN_Start+0x24>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b01      	cmp	r3, #1
 8006346:	bf14      	ite	ne
 8006348:	2301      	movne	r3, #1
 800634a:	2300      	moveq	r3, #0
 800634c:	b2db      	uxtb	r3, r3
 800634e:	e022      	b.n	8006396 <HAL_TIMEx_PWMN_Start+0x6a>
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b04      	cmp	r3, #4
 8006354:	d109      	bne.n	800636a <HAL_TIMEx_PWMN_Start+0x3e>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b01      	cmp	r3, #1
 8006360:	bf14      	ite	ne
 8006362:	2301      	movne	r3, #1
 8006364:	2300      	moveq	r3, #0
 8006366:	b2db      	uxtb	r3, r3
 8006368:	e015      	b.n	8006396 <HAL_TIMEx_PWMN_Start+0x6a>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b08      	cmp	r3, #8
 800636e:	d109      	bne.n	8006384 <HAL_TIMEx_PWMN_Start+0x58>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b01      	cmp	r3, #1
 800637a:	bf14      	ite	ne
 800637c:	2301      	movne	r3, #1
 800637e:	2300      	moveq	r3, #0
 8006380:	b2db      	uxtb	r3, r3
 8006382:	e008      	b.n	8006396 <HAL_TIMEx_PWMN_Start+0x6a>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b01      	cmp	r3, #1
 800638e:	bf14      	ite	ne
 8006390:	2301      	movne	r3, #1
 8006392:	2300      	moveq	r3, #0
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e05f      	b.n	800645e <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d104      	bne.n	80063ae <HAL_TIMEx_PWMN_Start+0x82>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063ac:	e013      	b.n	80063d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d104      	bne.n	80063be <HAL_TIMEx_PWMN_Start+0x92>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063bc:	e00b      	b.n	80063d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d104      	bne.n	80063ce <HAL_TIMEx_PWMN_Start+0xa2>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063cc:	e003      	b.n	80063d6 <HAL_TIMEx_PWMN_Start+0xaa>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2202      	movs	r2, #2
 80063d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2204      	movs	r2, #4
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 f930 	bl	8006644 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a1b      	ldr	r2, [pc, #108]	; (8006468 <HAL_TIMEx_PWMN_Start+0x13c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d00e      	beq.n	800641c <HAL_TIMEx_PWMN_Start+0xf0>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006406:	d009      	beq.n	800641c <HAL_TIMEx_PWMN_Start+0xf0>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a17      	ldr	r2, [pc, #92]	; (800646c <HAL_TIMEx_PWMN_Start+0x140>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d004      	beq.n	800641c <HAL_TIMEx_PWMN_Start+0xf0>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a16      	ldr	r2, [pc, #88]	; (8006470 <HAL_TIMEx_PWMN_Start+0x144>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d115      	bne.n	8006448 <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	4b14      	ldr	r3, [pc, #80]	; (8006474 <HAL_TIMEx_PWMN_Start+0x148>)
 8006424:	4013      	ands	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2b06      	cmp	r3, #6
 800642c:	d015      	beq.n	800645a <HAL_TIMEx_PWMN_Start+0x12e>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006434:	d011      	beq.n	800645a <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f042 0201 	orr.w	r2, r2, #1
 8006444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006446:	e008      	b.n	800645a <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0201 	orr.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	e000      	b.n	800645c <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800645a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	40012c00 	.word	0x40012c00
 800646c:	40000400 	.word	0x40000400
 8006470:	40014000 	.word	0x40014000
 8006474:	00010007 	.word	0x00010007

08006478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006488:	2b01      	cmp	r3, #1
 800648a:	d101      	bne.n	8006490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800648c:	2302      	movs	r3, #2
 800648e:	e054      	b.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a24      	ldr	r2, [pc, #144]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d108      	bne.n	80064cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a17      	ldr	r2, [pc, #92]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00e      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f8:	d009      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a13      	ldr	r2, [pc, #76]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d004      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a11      	ldr	r2, [pc, #68]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d10c      	bne.n	8006528 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	4313      	orrs	r3, r2
 800651e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40012c00 	.word	0x40012c00
 800654c:	40000400 	.word	0x40000400
 8006550:	40014000 	.word	0x40014000

08006554 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006568:	2b01      	cmp	r3, #1
 800656a:	d101      	bne.n	8006570 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800656c:	2302      	movs	r3, #2
 800656e:	e060      	b.n	8006632 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	4313      	orrs	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d6:	4313      	orrs	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	041b      	lsls	r3, r3, #16
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a14      	ldr	r2, [pc, #80]	; (8006640 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d115      	bne.n	8006620 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	051b      	lsls	r3, r3, #20
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	4313      	orrs	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40012c00 	.word	0x40012c00

08006644 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f003 031f 	and.w	r3, r3, #31
 8006656:	2204      	movs	r2, #4
 8006658:	fa02 f303 	lsl.w	r3, r2, r3
 800665c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a1a      	ldr	r2, [r3, #32]
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	43db      	mvns	r3, r3
 8006666:	401a      	ands	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a1a      	ldr	r2, [r3, #32]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f003 031f 	and.w	r3, r3, #31
 8006676:	6879      	ldr	r1, [r7, #4]
 8006678:	fa01 f303 	lsl.w	r3, r1, r3
 800667c:	431a      	orrs	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	621a      	str	r2, [r3, #32]
}
 8006682:	bf00      	nop
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e040      	b.n	8006722 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d106      	bne.n	80066b6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7fb faff 	bl	8001cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2224      	movs	r2, #36	; 0x24
 80066ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 0201 	bic.w	r2, r2, #1
 80066ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f8c1 	bl	8006854 <UART_SetConfig>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d101      	bne.n	80066dc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e022      	b.n	8006722 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f9eb 	bl	8006ac0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006708:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f042 0201 	orr.w	r2, r2, #1
 8006718:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fa72 	bl	8006c04 <UART_CheckIdleState>
 8006720:	4603      	mov	r3, r0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b08a      	sub	sp, #40	; 0x28
 800672e:	af02      	add	r7, sp, #8
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	603b      	str	r3, [r7, #0]
 8006736:	4613      	mov	r3, r2
 8006738:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800673e:	2b20      	cmp	r3, #32
 8006740:	f040 8082 	bne.w	8006848 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <HAL_UART_Transmit+0x26>
 800674a:	88fb      	ldrh	r3, [r7, #6]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e07a      	b.n	800684a <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800675a:	2b01      	cmp	r3, #1
 800675c:	d101      	bne.n	8006762 <HAL_UART_Transmit+0x38>
 800675e:	2302      	movs	r3, #2
 8006760:	e073      	b.n	800684a <HAL_UART_Transmit+0x120>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2221      	movs	r2, #33	; 0x21
 8006776:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006778:	f7fb fc76 	bl	8002068 <HAL_GetTick>
 800677c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	88fa      	ldrh	r2, [r7, #6]
 8006782:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	88fa      	ldrh	r2, [r7, #6]
 800678a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006796:	d108      	bne.n	80067aa <HAL_UART_Transmit+0x80>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	61bb      	str	r3, [r7, #24]
 80067a8:	e003      	b.n	80067b2 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80067ba:	e02d      	b.n	8006818 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	2200      	movs	r2, #0
 80067c4:	2180      	movs	r1, #128	; 0x80
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 fa65 	bl	8006c96 <UART_WaitOnFlagUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e039      	b.n	800684a <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10b      	bne.n	80067f4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	881a      	ldrh	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067e8:	b292      	uxth	r2, r2
 80067ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	3302      	adds	r3, #2
 80067f0:	61bb      	str	r3, [r7, #24]
 80067f2:	e008      	b.n	8006806 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	781a      	ldrb	r2, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	b292      	uxth	r2, r2
 80067fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	3301      	adds	r3, #1
 8006804:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800680c:	b29b      	uxth	r3, r3
 800680e:	3b01      	subs	r3, #1
 8006810:	b29a      	uxth	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800681e:	b29b      	uxth	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1cb      	bne.n	80067bc <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2200      	movs	r2, #0
 800682c:	2140      	movs	r1, #64	; 0x40
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 fa31 	bl	8006c96 <UART_WaitOnFlagUntilTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e005      	b.n	800684a <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2220      	movs	r2, #32
 8006842:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	e000      	b.n	800684a <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006848:	2302      	movs	r3, #2
  }
}
 800684a:	4618      	mov	r0, r3
 800684c:	3720      	adds	r7, #32
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b088      	sub	sp, #32
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	431a      	orrs	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	431a      	orrs	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	4313      	orrs	r3, r2
 8006876:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	4b8a      	ldr	r3, [pc, #552]	; (8006aa8 <UART_SetConfig+0x254>)
 8006880:	4013      	ands	r3, r2
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	6812      	ldr	r2, [r2, #0]
 8006886:	6979      	ldr	r1, [r7, #20]
 8006888:	430b      	orrs	r3, r1
 800688a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68da      	ldr	r2, [r3, #12]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a78      	ldr	r2, [pc, #480]	; (8006aac <UART_SetConfig+0x258>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d120      	bne.n	8006912 <UART_SetConfig+0xbe>
 80068d0:	4b77      	ldr	r3, [pc, #476]	; (8006ab0 <UART_SetConfig+0x25c>)
 80068d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d4:	f003 0303 	and.w	r3, r3, #3
 80068d8:	2b03      	cmp	r3, #3
 80068da:	d817      	bhi.n	800690c <UART_SetConfig+0xb8>
 80068dc:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <UART_SetConfig+0x90>)
 80068de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e2:	bf00      	nop
 80068e4:	080068f5 	.word	0x080068f5
 80068e8:	08006901 	.word	0x08006901
 80068ec:	08006907 	.word	0x08006907
 80068f0:	080068fb 	.word	0x080068fb
 80068f4:	2300      	movs	r3, #0
 80068f6:	77fb      	strb	r3, [r7, #31]
 80068f8:	e01d      	b.n	8006936 <UART_SetConfig+0xe2>
 80068fa:	2302      	movs	r3, #2
 80068fc:	77fb      	strb	r3, [r7, #31]
 80068fe:	e01a      	b.n	8006936 <UART_SetConfig+0xe2>
 8006900:	2304      	movs	r3, #4
 8006902:	77fb      	strb	r3, [r7, #31]
 8006904:	e017      	b.n	8006936 <UART_SetConfig+0xe2>
 8006906:	2308      	movs	r3, #8
 8006908:	77fb      	strb	r3, [r7, #31]
 800690a:	e014      	b.n	8006936 <UART_SetConfig+0xe2>
 800690c:	2310      	movs	r3, #16
 800690e:	77fb      	strb	r3, [r7, #31]
 8006910:	e011      	b.n	8006936 <UART_SetConfig+0xe2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a67      	ldr	r2, [pc, #412]	; (8006ab4 <UART_SetConfig+0x260>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d102      	bne.n	8006922 <UART_SetConfig+0xce>
 800691c:	2300      	movs	r3, #0
 800691e:	77fb      	strb	r3, [r7, #31]
 8006920:	e009      	b.n	8006936 <UART_SetConfig+0xe2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a64      	ldr	r2, [pc, #400]	; (8006ab8 <UART_SetConfig+0x264>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d102      	bne.n	8006932 <UART_SetConfig+0xde>
 800692c:	2300      	movs	r3, #0
 800692e:	77fb      	strb	r3, [r7, #31]
 8006930:	e001      	b.n	8006936 <UART_SetConfig+0xe2>
 8006932:	2310      	movs	r3, #16
 8006934:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800693e:	d15b      	bne.n	80069f8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8006940:	7ffb      	ldrb	r3, [r7, #31]
 8006942:	2b08      	cmp	r3, #8
 8006944:	d827      	bhi.n	8006996 <UART_SetConfig+0x142>
 8006946:	a201      	add	r2, pc, #4	; (adr r2, 800694c <UART_SetConfig+0xf8>)
 8006948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694c:	08006971 	.word	0x08006971
 8006950:	08006979 	.word	0x08006979
 8006954:	08006981 	.word	0x08006981
 8006958:	08006997 	.word	0x08006997
 800695c:	08006987 	.word	0x08006987
 8006960:	08006997 	.word	0x08006997
 8006964:	08006997 	.word	0x08006997
 8006968:	08006997 	.word	0x08006997
 800696c:	0800698f 	.word	0x0800698f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006970:	f7fd fd5c 	bl	800442c <HAL_RCC_GetPCLK1Freq>
 8006974:	61b8      	str	r0, [r7, #24]
        break;
 8006976:	e013      	b.n	80069a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006978:	f7fd fd7a 	bl	8004470 <HAL_RCC_GetPCLK2Freq>
 800697c:	61b8      	str	r0, [r7, #24]
        break;
 800697e:	e00f      	b.n	80069a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006980:	4b4e      	ldr	r3, [pc, #312]	; (8006abc <UART_SetConfig+0x268>)
 8006982:	61bb      	str	r3, [r7, #24]
        break;
 8006984:	e00c      	b.n	80069a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006986:	f7fd fcd9 	bl	800433c <HAL_RCC_GetSysClockFreq>
 800698a:	61b8      	str	r0, [r7, #24]
        break;
 800698c:	e008      	b.n	80069a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800698e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006992:	61bb      	str	r3, [r7, #24]
        break;
 8006994:	e004      	b.n	80069a0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	77bb      	strb	r3, [r7, #30]
        break;
 800699e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d074      	beq.n	8006a90 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	005a      	lsls	r2, r3, #1
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	085b      	lsrs	r3, r3, #1
 80069b0:	441a      	add	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	2b0f      	cmp	r3, #15
 80069c2:	d916      	bls.n	80069f2 <UART_SetConfig+0x19e>
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ca:	d212      	bcs.n	80069f2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	f023 030f 	bic.w	r3, r3, #15
 80069d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	085b      	lsrs	r3, r3, #1
 80069da:	b29b      	uxth	r3, r3
 80069dc:	f003 0307 	and.w	r3, r3, #7
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	89fb      	ldrh	r3, [r7, #14]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	89fa      	ldrh	r2, [r7, #14]
 80069ee:	60da      	str	r2, [r3, #12]
 80069f0:	e04e      	b.n	8006a90 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	77bb      	strb	r3, [r7, #30]
 80069f6:	e04b      	b.n	8006a90 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069f8:	7ffb      	ldrb	r3, [r7, #31]
 80069fa:	2b08      	cmp	r3, #8
 80069fc:	d827      	bhi.n	8006a4e <UART_SetConfig+0x1fa>
 80069fe:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <UART_SetConfig+0x1b0>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a29 	.word	0x08006a29
 8006a08:	08006a31 	.word	0x08006a31
 8006a0c:	08006a39 	.word	0x08006a39
 8006a10:	08006a4f 	.word	0x08006a4f
 8006a14:	08006a3f 	.word	0x08006a3f
 8006a18:	08006a4f 	.word	0x08006a4f
 8006a1c:	08006a4f 	.word	0x08006a4f
 8006a20:	08006a4f 	.word	0x08006a4f
 8006a24:	08006a47 	.word	0x08006a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a28:	f7fd fd00 	bl	800442c <HAL_RCC_GetPCLK1Freq>
 8006a2c:	61b8      	str	r0, [r7, #24]
        break;
 8006a2e:	e013      	b.n	8006a58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a30:	f7fd fd1e 	bl	8004470 <HAL_RCC_GetPCLK2Freq>
 8006a34:	61b8      	str	r0, [r7, #24]
        break;
 8006a36:	e00f      	b.n	8006a58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a38:	4b20      	ldr	r3, [pc, #128]	; (8006abc <UART_SetConfig+0x268>)
 8006a3a:	61bb      	str	r3, [r7, #24]
        break;
 8006a3c:	e00c      	b.n	8006a58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a3e:	f7fd fc7d 	bl	800433c <HAL_RCC_GetSysClockFreq>
 8006a42:	61b8      	str	r0, [r7, #24]
        break;
 8006a44:	e008      	b.n	8006a58 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a4a:	61bb      	str	r3, [r7, #24]
        break;
 8006a4c:	e004      	b.n	8006a58 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	77bb      	strb	r3, [r7, #30]
        break;
 8006a56:	bf00      	nop
    }

    if (pclk != 0U)
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d018      	beq.n	8006a90 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	085a      	lsrs	r2, r3, #1
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	441a      	add	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	2b0f      	cmp	r3, #15
 8006a78:	d908      	bls.n	8006a8c <UART_SetConfig+0x238>
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a80:	d204      	bcs.n	8006a8c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	60da      	str	r2, [r3, #12]
 8006a8a:	e001      	b.n	8006a90 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006a9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3720      	adds	r7, #32
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	efff69f3 	.word	0xefff69f3
 8006aac:	40013800 	.word	0x40013800
 8006ab0:	40021000 	.word	0x40021000
 8006ab4:	40004400 	.word	0x40004400
 8006ab8:	40004800 	.word	0x40004800
 8006abc:	007a1200 	.word	0x007a1200

08006ac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00a      	beq.n	8006aea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00a      	beq.n	8006b0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00a      	beq.n	8006b2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	f003 0310 	and.w	r3, r3, #16
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00a      	beq.n	8006b72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01a      	beq.n	8006bd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bbe:	d10a      	bne.n	8006bd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00a      	beq.n	8006bf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	605a      	str	r2, [r3, #4]
  }
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af02      	add	r7, sp, #8
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c14:	f7fb fa28 	bl	8002068 <HAL_GetTick>
 8006c18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0308 	and.w	r3, r3, #8
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d10e      	bne.n	8006c46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f82d 	bl	8006c96 <UART_WaitOnFlagUntilTimeout>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e023      	b.n	8006c8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d10e      	bne.n	8006c72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f817 	bl	8006c96 <UART_WaitOnFlagUntilTimeout>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e00d      	b.n	8006c8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2220      	movs	r2, #32
 8006c76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b09c      	sub	sp, #112	; 0x70
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	603b      	str	r3, [r7, #0]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca6:	e0a5      	b.n	8006df4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cae:	f000 80a1 	beq.w	8006df4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cb2:	f7fb f9d9 	bl	8002068 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d302      	bcc.n	8006cc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006cc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d13e      	bne.n	8006d46 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cdc:	667b      	str	r3, [r7, #100]	; 0x64
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ce8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e6      	bne.n	8006cc8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3308      	adds	r3, #8
 8006d00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0c:	f023 0301 	bic.w	r3, r3, #1
 8006d10:	663b      	str	r3, [r7, #96]	; 0x60
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3308      	adds	r3, #8
 8006d18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e5      	bne.n	8006cfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2220      	movs	r2, #32
 8006d32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2220      	movs	r2, #32
 8006d38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e067      	b.n	8006e16 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d04f      	beq.n	8006df4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d62:	d147      	bne.n	8006df4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	e853 3f00 	ldrex	r3, [r3]
 8006d7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d94:	e841 2300 	strex	r3, r2, [r1]
 8006d98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1e6      	bne.n	8006d6e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3308      	adds	r3, #8
 8006da6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	e853 3f00 	ldrex	r3, [r3]
 8006dae:	613b      	str	r3, [r7, #16]
   return(result);
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f023 0301 	bic.w	r3, r3, #1
 8006db6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006dc0:	623a      	str	r2, [r7, #32]
 8006dc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	69f9      	ldr	r1, [r7, #28]
 8006dc6:	6a3a      	ldr	r2, [r7, #32]
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e5      	bne.n	8006da0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e010      	b.n	8006e16 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	69da      	ldr	r2, [r3, #28]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	bf0c      	ite	eq
 8006e04:	2301      	moveq	r3, #1
 8006e06:	2300      	movne	r3, #0
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	79fb      	ldrb	r3, [r7, #7]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	f43f af4a 	beq.w	8006ca8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3770      	adds	r7, #112	; 0x70
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <__errno>:
 8006e20:	4b01      	ldr	r3, [pc, #4]	; (8006e28 <__errno+0x8>)
 8006e22:	6818      	ldr	r0, [r3, #0]
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	2000000c 	.word	0x2000000c

08006e2c <__libc_init_array>:
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	4d0d      	ldr	r5, [pc, #52]	; (8006e64 <__libc_init_array+0x38>)
 8006e30:	4c0d      	ldr	r4, [pc, #52]	; (8006e68 <__libc_init_array+0x3c>)
 8006e32:	1b64      	subs	r4, r4, r5
 8006e34:	10a4      	asrs	r4, r4, #2
 8006e36:	2600      	movs	r6, #0
 8006e38:	42a6      	cmp	r6, r4
 8006e3a:	d109      	bne.n	8006e50 <__libc_init_array+0x24>
 8006e3c:	4d0b      	ldr	r5, [pc, #44]	; (8006e6c <__libc_init_array+0x40>)
 8006e3e:	4c0c      	ldr	r4, [pc, #48]	; (8006e70 <__libc_init_array+0x44>)
 8006e40:	f000 f87a 	bl	8006f38 <_init>
 8006e44:	1b64      	subs	r4, r4, r5
 8006e46:	10a4      	asrs	r4, r4, #2
 8006e48:	2600      	movs	r6, #0
 8006e4a:	42a6      	cmp	r6, r4
 8006e4c:	d105      	bne.n	8006e5a <__libc_init_array+0x2e>
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e54:	4798      	blx	r3
 8006e56:	3601      	adds	r6, #1
 8006e58:	e7ee      	b.n	8006e38 <__libc_init_array+0xc>
 8006e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e5e:	4798      	blx	r3
 8006e60:	3601      	adds	r6, #1
 8006e62:	e7f2      	b.n	8006e4a <__libc_init_array+0x1e>
 8006e64:	08007164 	.word	0x08007164
 8006e68:	08007164 	.word	0x08007164
 8006e6c:	08007164 	.word	0x08007164
 8006e70:	08007168 	.word	0x08007168

08006e74 <memset>:
 8006e74:	4402      	add	r2, r0
 8006e76:	4603      	mov	r3, r0
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d100      	bne.n	8006e7e <memset+0xa>
 8006e7c:	4770      	bx	lr
 8006e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e82:	e7f9      	b.n	8006e78 <memset+0x4>

08006e84 <abort>:
 8006e84:	b508      	push	{r3, lr}
 8006e86:	2006      	movs	r0, #6
 8006e88:	f000 f83a 	bl	8006f00 <raise>
 8006e8c:	2001      	movs	r0, #1
 8006e8e:	f7fa ffa1 	bl	8001dd4 <_exit>

08006e92 <memcpy>:
 8006e92:	440a      	add	r2, r1
 8006e94:	4291      	cmp	r1, r2
 8006e96:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e9a:	d100      	bne.n	8006e9e <memcpy+0xc>
 8006e9c:	4770      	bx	lr
 8006e9e:	b510      	push	{r4, lr}
 8006ea0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ea8:	4291      	cmp	r1, r2
 8006eaa:	d1f9      	bne.n	8006ea0 <memcpy+0xe>
 8006eac:	bd10      	pop	{r4, pc}

08006eae <_raise_r>:
 8006eae:	291f      	cmp	r1, #31
 8006eb0:	b538      	push	{r3, r4, r5, lr}
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	460d      	mov	r5, r1
 8006eb6:	d904      	bls.n	8006ec2 <_raise_r+0x14>
 8006eb8:	2316      	movs	r3, #22
 8006eba:	6003      	str	r3, [r0, #0]
 8006ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec0:	bd38      	pop	{r3, r4, r5, pc}
 8006ec2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ec4:	b112      	cbz	r2, 8006ecc <_raise_r+0x1e>
 8006ec6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006eca:	b94b      	cbnz	r3, 8006ee0 <_raise_r+0x32>
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f000 f831 	bl	8006f34 <_getpid_r>
 8006ed2:	462a      	mov	r2, r5
 8006ed4:	4601      	mov	r1, r0
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006edc:	f000 b818 	b.w	8006f10 <_kill_r>
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d00a      	beq.n	8006efa <_raise_r+0x4c>
 8006ee4:	1c59      	adds	r1, r3, #1
 8006ee6:	d103      	bne.n	8006ef0 <_raise_r+0x42>
 8006ee8:	2316      	movs	r3, #22
 8006eea:	6003      	str	r3, [r0, #0]
 8006eec:	2001      	movs	r0, #1
 8006eee:	e7e7      	b.n	8006ec0 <_raise_r+0x12>
 8006ef0:	2400      	movs	r4, #0
 8006ef2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	4798      	blx	r3
 8006efa:	2000      	movs	r0, #0
 8006efc:	e7e0      	b.n	8006ec0 <_raise_r+0x12>
	...

08006f00 <raise>:
 8006f00:	4b02      	ldr	r3, [pc, #8]	; (8006f0c <raise+0xc>)
 8006f02:	4601      	mov	r1, r0
 8006f04:	6818      	ldr	r0, [r3, #0]
 8006f06:	f7ff bfd2 	b.w	8006eae <_raise_r>
 8006f0a:	bf00      	nop
 8006f0c:	2000000c 	.word	0x2000000c

08006f10 <_kill_r>:
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	4d07      	ldr	r5, [pc, #28]	; (8006f30 <_kill_r+0x20>)
 8006f14:	2300      	movs	r3, #0
 8006f16:	4604      	mov	r4, r0
 8006f18:	4608      	mov	r0, r1
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	602b      	str	r3, [r5, #0]
 8006f1e:	f7fa ff49 	bl	8001db4 <_kill>
 8006f22:	1c43      	adds	r3, r0, #1
 8006f24:	d102      	bne.n	8006f2c <_kill_r+0x1c>
 8006f26:	682b      	ldr	r3, [r5, #0]
 8006f28:	b103      	cbz	r3, 8006f2c <_kill_r+0x1c>
 8006f2a:	6023      	str	r3, [r4, #0]
 8006f2c:	bd38      	pop	{r3, r4, r5, pc}
 8006f2e:	bf00      	nop
 8006f30:	2000028c 	.word	0x2000028c

08006f34 <_getpid_r>:
 8006f34:	f7fa bf36 	b.w	8001da4 <_getpid>

08006f38 <_init>:
 8006f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3a:	bf00      	nop
 8006f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f3e:	bc08      	pop	{r3}
 8006f40:	469e      	mov	lr, r3
 8006f42:	4770      	bx	lr

08006f44 <_fini>:
 8006f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f46:	bf00      	nop
 8006f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4a:	bc08      	pop	{r3}
 8006f4c:	469e      	mov	lr, r3
 8006f4e:	4770      	bx	lr
