
MD-5_firm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  0800777c  0800777c  0001777c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000080  08007920  08007920  00017920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000108  080079a0  080079a0  000179a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007aa8  08007aa8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aa8  08007aa8  00017aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aac  08007aac  00017aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000214  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000028c  2000028c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001326e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028a4  00000000  00000000  00033316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00035bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e30  00000000  00000000  00036ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ef5f  00000000  00000000  00037908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121b6  00000000  00000000  00056867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9728  00000000  00000000  00068a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00112145  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c64  00000000  00000000  00112198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007764 	.word	0x08007764

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08007764 	.word	0x08007764

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <selfrel_offset31>:
 80001dc:	6803      	ldr	r3, [r0, #0]
 80001de:	005a      	lsls	r2, r3, #1
 80001e0:	bf4c      	ite	mi
 80001e2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80001e6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80001ea:	4418      	add	r0, r3
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop

080001f0 <search_EIT_table>:
 80001f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80001f4:	b329      	cbz	r1, 8000242 <search_EIT_table+0x52>
 80001f6:	1e4f      	subs	r7, r1, #1
 80001f8:	4604      	mov	r4, r0
 80001fa:	4615      	mov	r5, r2
 80001fc:	463e      	mov	r6, r7
 80001fe:	f04f 0800 	mov.w	r8, #0
 8000202:	eb08 0106 	add.w	r1, r8, r6
 8000206:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800020a:	1049      	asrs	r1, r1, #1
 800020c:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000210:	4648      	mov	r0, r9
 8000212:	f7ff ffe3 	bl	80001dc <selfrel_offset31>
 8000216:	4603      	mov	r3, r0
 8000218:	00c8      	lsls	r0, r1, #3
 800021a:	3008      	adds	r0, #8
 800021c:	428f      	cmp	r7, r1
 800021e:	4420      	add	r0, r4
 8000220:	d009      	beq.n	8000236 <search_EIT_table+0x46>
 8000222:	42ab      	cmp	r3, r5
 8000224:	d809      	bhi.n	800023a <search_EIT_table+0x4a>
 8000226:	f7ff ffd9 	bl	80001dc <selfrel_offset31>
 800022a:	3801      	subs	r0, #1
 800022c:	42a8      	cmp	r0, r5
 800022e:	d20a      	bcs.n	8000246 <search_EIT_table+0x56>
 8000230:	f101 0801 	add.w	r8, r1, #1
 8000234:	e7e5      	b.n	8000202 <search_EIT_table+0x12>
 8000236:	42ab      	cmp	r3, r5
 8000238:	d905      	bls.n	8000246 <search_EIT_table+0x56>
 800023a:	4588      	cmp	r8, r1
 800023c:	d001      	beq.n	8000242 <search_EIT_table+0x52>
 800023e:	1e4e      	subs	r6, r1, #1
 8000240:	e7df      	b.n	8000202 <search_EIT_table+0x12>
 8000242:	f04f 0900 	mov.w	r9, #0
 8000246:	4648      	mov	r0, r9
 8000248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800024c <__gnu_unwind_get_pr_addr>:
 800024c:	2801      	cmp	r0, #1
 800024e:	d007      	beq.n	8000260 <__gnu_unwind_get_pr_addr+0x14>
 8000250:	2802      	cmp	r0, #2
 8000252:	d007      	beq.n	8000264 <__gnu_unwind_get_pr_addr+0x18>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__gnu_unwind_get_pr_addr+0x1c>)
 8000256:	2800      	cmp	r0, #0
 8000258:	bf0c      	ite	eq
 800025a:	4618      	moveq	r0, r3
 800025c:	2000      	movne	r0, #0
 800025e:	4770      	bx	lr
 8000260:	4802      	ldr	r0, [pc, #8]	; (800026c <__gnu_unwind_get_pr_addr+0x20>)
 8000262:	4770      	bx	lr
 8000264:	4802      	ldr	r0, [pc, #8]	; (8000270 <__gnu_unwind_get_pr_addr+0x24>)
 8000266:	4770      	bx	lr
 8000268:	08000911 	.word	0x08000911
 800026c:	08000915 	.word	0x08000915
 8000270:	08000919 	.word	0x08000919

08000274 <get_eit_entry>:
 8000274:	b530      	push	{r4, r5, lr}
 8000276:	4b23      	ldr	r3, [pc, #140]	; (8000304 <get_eit_entry+0x90>)
 8000278:	b083      	sub	sp, #12
 800027a:	4604      	mov	r4, r0
 800027c:	1e8d      	subs	r5, r1, #2
 800027e:	b33b      	cbz	r3, 80002d0 <get_eit_entry+0x5c>
 8000280:	a901      	add	r1, sp, #4
 8000282:	4628      	mov	r0, r5
 8000284:	f3af 8000 	nop.w
 8000288:	b1e8      	cbz	r0, 80002c6 <get_eit_entry+0x52>
 800028a:	9901      	ldr	r1, [sp, #4]
 800028c:	462a      	mov	r2, r5
 800028e:	f7ff ffaf 	bl	80001f0 <search_EIT_table>
 8000292:	4601      	mov	r1, r0
 8000294:	b1b8      	cbz	r0, 80002c6 <get_eit_entry+0x52>
 8000296:	f7ff ffa1 	bl	80001dc <selfrel_offset31>
 800029a:	684b      	ldr	r3, [r1, #4]
 800029c:	64a0      	str	r0, [r4, #72]	; 0x48
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d02b      	beq.n	80002fa <get_eit_entry+0x86>
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	f101 0004 	add.w	r0, r1, #4
 80002a8:	db23      	blt.n	80002f2 <get_eit_entry+0x7e>
 80002aa:	f7ff ff97 	bl	80001dc <selfrel_offset31>
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80002b4:	6803      	ldr	r3, [r0, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	db10      	blt.n	80002dc <get_eit_entry+0x68>
 80002ba:	f7ff ff8f 	bl	80001dc <selfrel_offset31>
 80002be:	6120      	str	r0, [r4, #16]
 80002c0:	2000      	movs	r0, #0
 80002c2:	b003      	add	sp, #12
 80002c4:	bd30      	pop	{r4, r5, pc}
 80002c6:	2300      	movs	r3, #0
 80002c8:	2009      	movs	r0, #9
 80002ca:	6123      	str	r3, [r4, #16]
 80002cc:	b003      	add	sp, #12
 80002ce:	bd30      	pop	{r4, r5, pc}
 80002d0:	490d      	ldr	r1, [pc, #52]	; (8000308 <get_eit_entry+0x94>)
 80002d2:	480e      	ldr	r0, [pc, #56]	; (800030c <get_eit_entry+0x98>)
 80002d4:	1a09      	subs	r1, r1, r0
 80002d6:	10c9      	asrs	r1, r1, #3
 80002d8:	9101      	str	r1, [sp, #4]
 80002da:	e7d7      	b.n	800028c <get_eit_entry+0x18>
 80002dc:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80002e0:	f7ff ffb4 	bl	800024c <__gnu_unwind_get_pr_addr>
 80002e4:	2800      	cmp	r0, #0
 80002e6:	6120      	str	r0, [r4, #16]
 80002e8:	bf14      	ite	ne
 80002ea:	2000      	movne	r0, #0
 80002ec:	2009      	moveq	r0, #9
 80002ee:	b003      	add	sp, #12
 80002f0:	bd30      	pop	{r4, r5, pc}
 80002f2:	2301      	movs	r3, #1
 80002f4:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80002f8:	e7dc      	b.n	80002b4 <get_eit_entry+0x40>
 80002fa:	2300      	movs	r3, #0
 80002fc:	6123      	str	r3, [r4, #16]
 80002fe:	2005      	movs	r0, #5
 8000300:	e7df      	b.n	80002c2 <get_eit_entry+0x4e>
 8000302:	bf00      	nop
 8000304:	00000000 	.word	0x00000000
 8000308:	08007aa8 	.word	0x08007aa8
 800030c:	080079a0 	.word	0x080079a0

08000310 <restore_non_core_regs>:
 8000310:	6803      	ldr	r3, [r0, #0]
 8000312:	07da      	lsls	r2, r3, #31
 8000314:	b510      	push	{r4, lr}
 8000316:	4604      	mov	r4, r0
 8000318:	d406      	bmi.n	8000328 <restore_non_core_regs+0x18>
 800031a:	079b      	lsls	r3, r3, #30
 800031c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000320:	d509      	bpl.n	8000336 <restore_non_core_regs+0x26>
 8000322:	f000 fc4b 	bl	8000bbc <__gnu_Unwind_Restore_VFP_D>
 8000326:	6823      	ldr	r3, [r4, #0]
 8000328:	0759      	lsls	r1, r3, #29
 800032a:	d509      	bpl.n	8000340 <restore_non_core_regs+0x30>
 800032c:	071a      	lsls	r2, r3, #28
 800032e:	d50e      	bpl.n	800034e <restore_non_core_regs+0x3e>
 8000330:	06db      	lsls	r3, r3, #27
 8000332:	d513      	bpl.n	800035c <restore_non_core_regs+0x4c>
 8000334:	bd10      	pop	{r4, pc}
 8000336:	f000 fc39 	bl	8000bac <__gnu_Unwind_Restore_VFP>
 800033a:	6823      	ldr	r3, [r4, #0]
 800033c:	0759      	lsls	r1, r3, #29
 800033e:	d4f5      	bmi.n	800032c <restore_non_core_regs+0x1c>
 8000340:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000344:	f000 fc42 	bl	8000bcc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000348:	6823      	ldr	r3, [r4, #0]
 800034a:	071a      	lsls	r2, r3, #28
 800034c:	d4f0      	bmi.n	8000330 <restore_non_core_regs+0x20>
 800034e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000352:	f000 fc43 	bl	8000bdc <__gnu_Unwind_Restore_WMMXD>
 8000356:	6823      	ldr	r3, [r4, #0]
 8000358:	06db      	lsls	r3, r3, #27
 800035a:	d4eb      	bmi.n	8000334 <restore_non_core_regs+0x24>
 800035c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000364:	f000 bc7e 	b.w	8000c64 <__gnu_Unwind_Restore_WMMXC>

08000368 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000368:	4603      	mov	r3, r0
 800036a:	6800      	ldr	r0, [r0, #0]
 800036c:	b100      	cbz	r0, 8000370 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 800036e:	4418      	add	r0, r3
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop

08000374 <__gnu_unwind_24bit.isra.0>:
 8000374:	2009      	movs	r0, #9
 8000376:	4770      	bx	lr

08000378 <_Unwind_DebugHook>:
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop

0800037c <unwind_phase2>:
 800037c:	b570      	push	{r4, r5, r6, lr}
 800037e:	4604      	mov	r4, r0
 8000380:	460e      	mov	r6, r1
 8000382:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000384:	4620      	mov	r0, r4
 8000386:	f7ff ff75 	bl	8000274 <get_eit_entry>
 800038a:	4605      	mov	r5, r0
 800038c:	b988      	cbnz	r0, 80003b2 <unwind_phase2+0x36>
 800038e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000390:	6163      	str	r3, [r4, #20]
 8000392:	4632      	mov	r2, r6
 8000394:	6923      	ldr	r3, [r4, #16]
 8000396:	4621      	mov	r1, r4
 8000398:	2001      	movs	r0, #1
 800039a:	4798      	blx	r3
 800039c:	2808      	cmp	r0, #8
 800039e:	d0f0      	beq.n	8000382 <unwind_phase2+0x6>
 80003a0:	2807      	cmp	r0, #7
 80003a2:	d106      	bne.n	80003b2 <unwind_phase2+0x36>
 80003a4:	4628      	mov	r0, r5
 80003a6:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80003a8:	f7ff ffe6 	bl	8000378 <_Unwind_DebugHook>
 80003ac:	1d30      	adds	r0, r6, #4
 80003ae:	f000 fbf1 	bl	8000b94 <__restore_core_regs>
 80003b2:	f007 f8df 	bl	8007574 <abort>
 80003b6:	bf00      	nop

080003b8 <unwind_phase2_forced>:
 80003b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003bc:	1d0d      	adds	r5, r1, #4
 80003be:	4606      	mov	r6, r0
 80003c0:	4614      	mov	r4, r2
 80003c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003c4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80003c8:	f10d 0c0c 	add.w	ip, sp, #12
 80003cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80003e0:	ad02      	add	r5, sp, #8
 80003e2:	68f7      	ldr	r7, [r6, #12]
 80003e4:	f8d6 8018 	ldr.w	r8, [r6, #24]
 80003e8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80003ec:	2300      	movs	r3, #0
 80003ee:	602b      	str	r3, [r5, #0]
 80003f0:	e021      	b.n	8000436 <unwind_phase2_forced+0x7e>
 80003f2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80003f4:	6173      	str	r3, [r6, #20]
 80003f6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003fa:	4629      	mov	r1, r5
 80003fc:	a87a      	add	r0, sp, #488	; 0x1e8
 80003fe:	f007 f9a3 	bl	8007748 <memcpy>
 8000402:	6933      	ldr	r3, [r6, #16]
 8000404:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000406:	4631      	mov	r1, r6
 8000408:	4650      	mov	r0, sl
 800040a:	4798      	blx	r3
 800040c:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800040e:	e9cd 5800 	strd	r5, r8, [sp]
 8000412:	4621      	mov	r1, r4
 8000414:	646b      	str	r3, [r5, #68]	; 0x44
 8000416:	4681      	mov	r9, r0
 8000418:	4633      	mov	r3, r6
 800041a:	4632      	mov	r2, r6
 800041c:	2001      	movs	r0, #1
 800041e:	47b8      	blx	r7
 8000420:	4604      	mov	r4, r0
 8000422:	b9e8      	cbnz	r0, 8000460 <unwind_phase2_forced+0xa8>
 8000424:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000428:	a97a      	add	r1, sp, #488	; 0x1e8
 800042a:	4628      	mov	r0, r5
 800042c:	f007 f98c 	bl	8007748 <memcpy>
 8000430:	f1b9 0f08 	cmp.w	r9, #8
 8000434:	d11b      	bne.n	800046e <unwind_phase2_forced+0xb6>
 8000436:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000438:	4630      	mov	r0, r6
 800043a:	f7ff ff1b 	bl	8000274 <get_eit_entry>
 800043e:	3409      	adds	r4, #9
 8000440:	fa5f fa84 	uxtb.w	sl, r4
 8000444:	4681      	mov	r9, r0
 8000446:	2800      	cmp	r0, #0
 8000448:	d0d3      	beq.n	80003f2 <unwind_phase2_forced+0x3a>
 800044a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800044c:	f04a 0110 	orr.w	r1, sl, #16
 8000450:	e9cd 5800 	strd	r5, r8, [sp]
 8000454:	4632      	mov	r2, r6
 8000456:	646b      	str	r3, [r5, #68]	; 0x44
 8000458:	2001      	movs	r0, #1
 800045a:	4633      	mov	r3, r6
 800045c:	47b8      	blx	r7
 800045e:	b108      	cbz	r0, 8000464 <unwind_phase2_forced+0xac>
 8000460:	f04f 0909 	mov.w	r9, #9
 8000464:	4648      	mov	r0, r9
 8000466:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	f1b9 0f07 	cmp.w	r9, #7
 8000472:	d1f5      	bne.n	8000460 <unwind_phase2_forced+0xa8>
 8000474:	4620      	mov	r0, r4
 8000476:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000478:	f7ff ff7e 	bl	8000378 <_Unwind_DebugHook>
 800047c:	a803      	add	r0, sp, #12
 800047e:	f000 fb89 	bl	8000b94 <__restore_core_regs>
 8000482:	bf00      	nop

08000484 <_Unwind_GetCFA>:
 8000484:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000486:	4770      	bx	lr

08000488 <__gnu_Unwind_RaiseException>:
 8000488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800048c:	640b      	str	r3, [r1, #64]	; 0x40
 800048e:	1d0e      	adds	r6, r1, #4
 8000490:	460f      	mov	r7, r1
 8000492:	4605      	mov	r5, r0
 8000494:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000496:	b0f9      	sub	sp, #484	; 0x1e4
 8000498:	ac01      	add	r4, sp, #4
 800049a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800049c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800049e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80004a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004a4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80004a8:	f04f 36ff 	mov.w	r6, #4294967295
 80004ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80004b0:	9600      	str	r6, [sp, #0]
 80004b2:	e006      	b.n	80004c2 <__gnu_Unwind_RaiseException+0x3a>
 80004b4:	692b      	ldr	r3, [r5, #16]
 80004b6:	466a      	mov	r2, sp
 80004b8:	4629      	mov	r1, r5
 80004ba:	4798      	blx	r3
 80004bc:	2808      	cmp	r0, #8
 80004be:	4604      	mov	r4, r0
 80004c0:	d108      	bne.n	80004d4 <__gnu_Unwind_RaiseException+0x4c>
 80004c2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80004c4:	4628      	mov	r0, r5
 80004c6:	f7ff fed5 	bl	8000274 <get_eit_entry>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d0f2      	beq.n	80004b4 <__gnu_Unwind_RaiseException+0x2c>
 80004ce:	2009      	movs	r0, #9
 80004d0:	b079      	add	sp, #484	; 0x1e4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4668      	mov	r0, sp
 80004d6:	f7ff ff1b 	bl	8000310 <restore_non_core_regs>
 80004da:	2c06      	cmp	r4, #6
 80004dc:	d1f7      	bne.n	80004ce <__gnu_Unwind_RaiseException+0x46>
 80004de:	4639      	mov	r1, r7
 80004e0:	4628      	mov	r0, r5
 80004e2:	f7ff ff4b 	bl	800037c <unwind_phase2>
 80004e6:	bf00      	nop

080004e8 <__gnu_Unwind_ForcedUnwind>:
 80004e8:	b430      	push	{r4, r5}
 80004ea:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80004ec:	60c1      	str	r1, [r0, #12]
 80004ee:	6182      	str	r2, [r0, #24]
 80004f0:	4619      	mov	r1, r3
 80004f2:	641d      	str	r5, [r3, #64]	; 0x40
 80004f4:	2200      	movs	r2, #0
 80004f6:	bc30      	pop	{r4, r5}
 80004f8:	e75e      	b.n	80003b8 <unwind_phase2_forced>
 80004fa:	bf00      	nop

080004fc <__gnu_Unwind_Resume>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	68c6      	ldr	r6, [r0, #12]
 8000500:	6943      	ldr	r3, [r0, #20]
 8000502:	640b      	str	r3, [r1, #64]	; 0x40
 8000504:	b9ae      	cbnz	r6, 8000532 <__gnu_Unwind_Resume+0x36>
 8000506:	6903      	ldr	r3, [r0, #16]
 8000508:	460a      	mov	r2, r1
 800050a:	4604      	mov	r4, r0
 800050c:	460d      	mov	r5, r1
 800050e:	4601      	mov	r1, r0
 8000510:	2002      	movs	r0, #2
 8000512:	4798      	blx	r3
 8000514:	2807      	cmp	r0, #7
 8000516:	d005      	beq.n	8000524 <__gnu_Unwind_Resume+0x28>
 8000518:	2808      	cmp	r0, #8
 800051a:	d10f      	bne.n	800053c <__gnu_Unwind_Resume+0x40>
 800051c:	4629      	mov	r1, r5
 800051e:	4620      	mov	r0, r4
 8000520:	f7ff ff2c 	bl	800037c <unwind_phase2>
 8000524:	4630      	mov	r0, r6
 8000526:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000528:	f7ff ff26 	bl	8000378 <_Unwind_DebugHook>
 800052c:	1d28      	adds	r0, r5, #4
 800052e:	f000 fb31 	bl	8000b94 <__restore_core_regs>
 8000532:	2201      	movs	r2, #1
 8000534:	f7ff ff40 	bl	80003b8 <unwind_phase2_forced>
 8000538:	f007 f81c 	bl	8007574 <abort>
 800053c:	f007 f81a 	bl	8007574 <abort>

08000540 <__gnu_Unwind_Resume_or_Rethrow>:
 8000540:	68c2      	ldr	r2, [r0, #12]
 8000542:	b11a      	cbz	r2, 800054c <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000544:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000546:	640a      	str	r2, [r1, #64]	; 0x40
 8000548:	2200      	movs	r2, #0
 800054a:	e735      	b.n	80003b8 <unwind_phase2_forced>
 800054c:	e79c      	b.n	8000488 <__gnu_Unwind_RaiseException>
 800054e:	bf00      	nop

08000550 <_Unwind_Complete>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <_Unwind_DeleteException>:
 8000554:	6883      	ldr	r3, [r0, #8]
 8000556:	4601      	mov	r1, r0
 8000558:	b10b      	cbz	r3, 800055e <_Unwind_DeleteException+0xa>
 800055a:	2001      	movs	r0, #1
 800055c:	4718      	bx	r3
 800055e:	4770      	bx	lr

08000560 <_Unwind_VRS_Get>:
 8000560:	2901      	cmp	r1, #1
 8000562:	d012      	beq.n	800058a <_Unwind_VRS_Get+0x2a>
 8000564:	d809      	bhi.n	800057a <_Unwind_VRS_Get+0x1a>
 8000566:	b973      	cbnz	r3, 8000586 <_Unwind_VRS_Get+0x26>
 8000568:	2a0f      	cmp	r2, #15
 800056a:	d80c      	bhi.n	8000586 <_Unwind_VRS_Get+0x26>
 800056c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000570:	4618      	mov	r0, r3
 8000572:	6853      	ldr	r3, [r2, #4]
 8000574:	9a00      	ldr	r2, [sp, #0]
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4770      	bx	lr
 800057a:	3903      	subs	r1, #3
 800057c:	2901      	cmp	r1, #1
 800057e:	bf94      	ite	ls
 8000580:	2001      	movls	r0, #1
 8000582:	2002      	movhi	r0, #2
 8000584:	4770      	bx	lr
 8000586:	2002      	movs	r0, #2
 8000588:	4770      	bx	lr
 800058a:	4608      	mov	r0, r1
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <_Unwind_GetGR>:
 8000590:	b510      	push	{r4, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	2300      	movs	r3, #0
 8000596:	ac03      	add	r4, sp, #12
 8000598:	460a      	mov	r2, r1
 800059a:	9400      	str	r4, [sp, #0]
 800059c:	4619      	mov	r1, r3
 800059e:	f7ff ffdf 	bl	8000560 <_Unwind_VRS_Get>
 80005a2:	9803      	ldr	r0, [sp, #12]
 80005a4:	b004      	add	sp, #16
 80005a6:	bd10      	pop	{r4, pc}

080005a8 <_Unwind_VRS_Set>:
 80005a8:	2901      	cmp	r1, #1
 80005aa:	d012      	beq.n	80005d2 <_Unwind_VRS_Set+0x2a>
 80005ac:	d809      	bhi.n	80005c2 <_Unwind_VRS_Set+0x1a>
 80005ae:	b973      	cbnz	r3, 80005ce <_Unwind_VRS_Set+0x26>
 80005b0:	2a0f      	cmp	r2, #15
 80005b2:	d80c      	bhi.n	80005ce <_Unwind_VRS_Set+0x26>
 80005b4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80005b8:	9a00      	ldr	r2, [sp, #0]
 80005ba:	6812      	ldr	r2, [r2, #0]
 80005bc:	6042      	str	r2, [r0, #4]
 80005be:	4618      	mov	r0, r3
 80005c0:	4770      	bx	lr
 80005c2:	3903      	subs	r1, #3
 80005c4:	2901      	cmp	r1, #1
 80005c6:	bf94      	ite	ls
 80005c8:	2001      	movls	r0, #1
 80005ca:	2002      	movhi	r0, #2
 80005cc:	4770      	bx	lr
 80005ce:	2002      	movs	r0, #2
 80005d0:	4770      	bx	lr
 80005d2:	4608      	mov	r0, r1
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <_Unwind_SetGR>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	2300      	movs	r3, #0
 80005de:	ac03      	add	r4, sp, #12
 80005e0:	9203      	str	r2, [sp, #12]
 80005e2:	9400      	str	r4, [sp, #0]
 80005e4:	460a      	mov	r2, r1
 80005e6:	4619      	mov	r1, r3
 80005e8:	f7ff ffde 	bl	80005a8 <_Unwind_VRS_Set>
 80005ec:	b004      	add	sp, #16
 80005ee:	bd10      	pop	{r4, pc}

080005f0 <__gnu_Unwind_Backtrace>:
 80005f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005f2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80005f4:	6413      	str	r3, [r2, #64]	; 0x40
 80005f6:	1d15      	adds	r5, r2, #4
 80005f8:	468c      	mov	ip, r1
 80005fa:	4606      	mov	r6, r0
 80005fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fe:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000602:	ac17      	add	r4, sp, #92	; 0x5c
 8000604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000612:	f04f 37ff 	mov.w	r7, #4294967295
 8000616:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800061a:	4665      	mov	r5, ip
 800061c:	9716      	str	r7, [sp, #88]	; 0x58
 800061e:	e010      	b.n	8000642 <__gnu_Unwind_Backtrace+0x52>
 8000620:	f7ff ffda 	bl	80005d8 <_Unwind_SetGR>
 8000624:	4629      	mov	r1, r5
 8000626:	a816      	add	r0, sp, #88	; 0x58
 8000628:	47b0      	blx	r6
 800062a:	4603      	mov	r3, r0
 800062c:	aa16      	add	r2, sp, #88	; 0x58
 800062e:	4669      	mov	r1, sp
 8000630:	2008      	movs	r0, #8
 8000632:	b983      	cbnz	r3, 8000656 <__gnu_Unwind_Backtrace+0x66>
 8000634:	9b04      	ldr	r3, [sp, #16]
 8000636:	4798      	blx	r3
 8000638:	2805      	cmp	r0, #5
 800063a:	4604      	mov	r4, r0
 800063c:	d00c      	beq.n	8000658 <__gnu_Unwind_Backtrace+0x68>
 800063e:	2809      	cmp	r0, #9
 8000640:	d009      	beq.n	8000656 <__gnu_Unwind_Backtrace+0x66>
 8000642:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000644:	4668      	mov	r0, sp
 8000646:	f7ff fe15 	bl	8000274 <get_eit_entry>
 800064a:	4603      	mov	r3, r0
 800064c:	466a      	mov	r2, sp
 800064e:	210c      	movs	r1, #12
 8000650:	a816      	add	r0, sp, #88	; 0x58
 8000652:	2b00      	cmp	r3, #0
 8000654:	d0e4      	beq.n	8000620 <__gnu_Unwind_Backtrace+0x30>
 8000656:	2409      	movs	r4, #9
 8000658:	a816      	add	r0, sp, #88	; 0x58
 800065a:	f7ff fe59 	bl	8000310 <restore_non_core_regs>
 800065e:	4620      	mov	r0, r4
 8000660:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000666:	bf00      	nop

08000668 <__gnu_unwind_pr_common>:
 8000668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800066c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800066e:	b089      	sub	sp, #36	; 0x24
 8000670:	460d      	mov	r5, r1
 8000672:	f854 1b04 	ldr.w	r1, [r4], #4
 8000676:	9406      	str	r4, [sp, #24]
 8000678:	4617      	mov	r7, r2
 800067a:	f000 0803 	and.w	r8, r0, #3
 800067e:	461e      	mov	r6, r3
 8000680:	2b00      	cmp	r3, #0
 8000682:	d079      	beq.n	8000778 <__gnu_unwind_pr_common+0x110>
 8000684:	0c0b      	lsrs	r3, r1, #16
 8000686:	b2da      	uxtb	r2, r3
 8000688:	0409      	lsls	r1, r1, #16
 800068a:	f88d 301d 	strb.w	r3, [sp, #29]
 800068e:	2302      	movs	r3, #2
 8000690:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000694:	9105      	str	r1, [sp, #20]
 8000696:	f88d 301c 	strb.w	r3, [sp, #28]
 800069a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800069c:	f1b8 0f02 	cmp.w	r8, #2
 80006a0:	bf08      	it	eq
 80006a2:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80006a4:	f013 0301 	ands.w	r3, r3, #1
 80006a8:	d00c      	beq.n	80006c4 <__gnu_unwind_pr_common+0x5c>
 80006aa:	4638      	mov	r0, r7
 80006ac:	a905      	add	r1, sp, #20
 80006ae:	f000 fb73 	bl	8000d98 <__gnu_unwind_execute>
 80006b2:	b918      	cbnz	r0, 80006bc <__gnu_unwind_pr_common+0x54>
 80006b4:	2008      	movs	r0, #8
 80006b6:	b009      	add	sp, #36	; 0x24
 80006b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006bc:	2009      	movs	r0, #9
 80006be:	b009      	add	sp, #36	; 0x24
 80006c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006c4:	f8d4 a000 	ldr.w	sl, [r4]
 80006c8:	f1ba 0f00 	cmp.w	sl, #0
 80006cc:	d0ed      	beq.n	80006aa <__gnu_unwind_pr_common+0x42>
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	f000 0308 	and.w	r3, r0, #8
 80006d4:	9302      	str	r3, [sp, #8]
 80006d6:	2e02      	cmp	r6, #2
 80006d8:	d04a      	beq.n	8000770 <__gnu_unwind_pr_common+0x108>
 80006da:	f8b4 a000 	ldrh.w	sl, [r4]
 80006de:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80006e2:	3404      	adds	r4, #4
 80006e4:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80006e6:	f029 0b01 	bic.w	fp, r9, #1
 80006ea:	210f      	movs	r1, #15
 80006ec:	4638      	mov	r0, r7
 80006ee:	4493      	add	fp, r2
 80006f0:	f7ff ff4e 	bl	8000590 <_Unwind_GetGR>
 80006f4:	4583      	cmp	fp, r0
 80006f6:	d839      	bhi.n	800076c <__gnu_unwind_pr_common+0x104>
 80006f8:	f02a 0201 	bic.w	r2, sl, #1
 80006fc:	445a      	add	r2, fp
 80006fe:	4282      	cmp	r2, r0
 8000700:	bf94      	ite	ls
 8000702:	2000      	movls	r0, #0
 8000704:	2001      	movhi	r0, #1
 8000706:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	f00a 0a01 	and.w	sl, sl, #1
 8000712:	ea43 030a 	orr.w	r3, r3, sl
 8000716:	2b01      	cmp	r3, #1
 8000718:	d049      	beq.n	80007ae <__gnu_unwind_pr_common+0x146>
 800071a:	2b02      	cmp	r3, #2
 800071c:	d032      	beq.n	8000784 <__gnu_unwind_pr_common+0x11c>
 800071e:	2b00      	cmp	r3, #0
 8000720:	d1cc      	bne.n	80006bc <__gnu_unwind_pr_common+0x54>
 8000722:	f1b8 0f00 	cmp.w	r8, #0
 8000726:	d002      	beq.n	800072e <__gnu_unwind_pr_common+0xc6>
 8000728:	2800      	cmp	r0, #0
 800072a:	f040 80cd 	bne.w	80008c8 <__gnu_unwind_pr_common+0x260>
 800072e:	3404      	adds	r4, #4
 8000730:	f8d4 a000 	ldr.w	sl, [r4]
 8000734:	f1ba 0f00 	cmp.w	sl, #0
 8000738:	d1cd      	bne.n	80006d6 <__gnu_unwind_pr_common+0x6e>
 800073a:	a905      	add	r1, sp, #20
 800073c:	4638      	mov	r0, r7
 800073e:	f000 fb2b 	bl	8000d98 <__gnu_unwind_execute>
 8000742:	2800      	cmp	r0, #0
 8000744:	d1ba      	bne.n	80006bc <__gnu_unwind_pr_common+0x54>
 8000746:	9b01      	ldr	r3, [sp, #4]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d0b3      	beq.n	80006b4 <__gnu_unwind_pr_common+0x4c>
 800074c:	210f      	movs	r1, #15
 800074e:	4638      	mov	r0, r7
 8000750:	f7ff ff1e 	bl	8000590 <_Unwind_GetGR>
 8000754:	210e      	movs	r1, #14
 8000756:	4602      	mov	r2, r0
 8000758:	4638      	mov	r0, r7
 800075a:	f7ff ff3d 	bl	80005d8 <_Unwind_SetGR>
 800075e:	4638      	mov	r0, r7
 8000760:	4a6a      	ldr	r2, [pc, #424]	; (800090c <__gnu_unwind_pr_common+0x2a4>)
 8000762:	210f      	movs	r1, #15
 8000764:	f7ff ff38 	bl	80005d8 <_Unwind_SetGR>
 8000768:	2007      	movs	r0, #7
 800076a:	e7a8      	b.n	80006be <__gnu_unwind_pr_common+0x56>
 800076c:	2000      	movs	r0, #0
 800076e:	e7ca      	b.n	8000706 <__gnu_unwind_pr_common+0x9e>
 8000770:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000774:	3408      	adds	r4, #8
 8000776:	e7b5      	b.n	80006e4 <__gnu_unwind_pr_common+0x7c>
 8000778:	0209      	lsls	r1, r1, #8
 800077a:	2303      	movs	r3, #3
 800077c:	9105      	str	r1, [sp, #20]
 800077e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000782:	e78a      	b.n	800069a <__gnu_unwind_pr_common+0x32>
 8000784:	6823      	ldr	r3, [r4, #0]
 8000786:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800078a:	f1b8 0f00 	cmp.w	r8, #0
 800078e:	d145      	bne.n	800081c <__gnu_unwind_pr_common+0x1b4>
 8000790:	b128      	cbz	r0, 800079e <__gnu_unwind_pr_common+0x136>
 8000792:	9a02      	ldr	r2, [sp, #8]
 8000794:	2a00      	cmp	r2, #0
 8000796:	d05c      	beq.n	8000852 <__gnu_unwind_pr_common+0x1ea>
 8000798:	f1bb 0f00 	cmp.w	fp, #0
 800079c:	d074      	beq.n	8000888 <__gnu_unwind_pr_common+0x220>
 800079e:	2b00      	cmp	r3, #0
 80007a0:	da00      	bge.n	80007a4 <__gnu_unwind_pr_common+0x13c>
 80007a2:	3404      	adds	r4, #4
 80007a4:	f10b 0b01 	add.w	fp, fp, #1
 80007a8:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 80007ac:	e7c0      	b.n	8000730 <__gnu_unwind_pr_common+0xc8>
 80007ae:	f1b8 0f00 	cmp.w	r8, #0
 80007b2:	d119      	bne.n	80007e8 <__gnu_unwind_pr_common+0x180>
 80007b4:	b1b0      	cbz	r0, 80007e4 <__gnu_unwind_pr_common+0x17c>
 80007b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80007ba:	1c99      	adds	r1, r3, #2
 80007bc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80007c0:	f43f af7c 	beq.w	80006bc <__gnu_unwind_pr_common+0x54>
 80007c4:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80007c8:	3301      	adds	r3, #1
 80007ca:	9104      	str	r1, [sp, #16]
 80007cc:	f000 8090 	beq.w	80008f0 <__gnu_unwind_pr_common+0x288>
 80007d0:	1d20      	adds	r0, r4, #4
 80007d2:	f7ff fdc9 	bl	8000368 <_Unwind_decode_typeinfo_ptr.isra.0>
 80007d6:	ab04      	add	r3, sp, #16
 80007d8:	4601      	mov	r1, r0
 80007da:	4628      	mov	r0, r5
 80007dc:	f006 f9f8 	bl	8006bd0 <__cxa_type_match>
 80007e0:	2800      	cmp	r0, #0
 80007e2:	d15b      	bne.n	800089c <__gnu_unwind_pr_common+0x234>
 80007e4:	3408      	adds	r4, #8
 80007e6:	e7a3      	b.n	8000730 <__gnu_unwind_pr_common+0xc8>
 80007e8:	210d      	movs	r1, #13
 80007ea:	4638      	mov	r0, r7
 80007ec:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80007f0:	f7ff fece 	bl	8000590 <_Unwind_GetGR>
 80007f4:	4581      	cmp	r9, r0
 80007f6:	d1f5      	bne.n	80007e4 <__gnu_unwind_pr_common+0x17c>
 80007f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80007fa:	429c      	cmp	r4, r3
 80007fc:	d1f2      	bne.n	80007e4 <__gnu_unwind_pr_common+0x17c>
 80007fe:	4620      	mov	r0, r4
 8000800:	f7ff fcec 	bl	80001dc <selfrel_offset31>
 8000804:	210f      	movs	r1, #15
 8000806:	4602      	mov	r2, r0
 8000808:	4638      	mov	r0, r7
 800080a:	f7ff fee5 	bl	80005d8 <_Unwind_SetGR>
 800080e:	4638      	mov	r0, r7
 8000810:	462a      	mov	r2, r5
 8000812:	2100      	movs	r1, #0
 8000814:	f7ff fee0 	bl	80005d8 <_Unwind_SetGR>
 8000818:	2007      	movs	r0, #7
 800081a:	e750      	b.n	80006be <__gnu_unwind_pr_common+0x56>
 800081c:	210d      	movs	r1, #13
 800081e:	4638      	mov	r0, r7
 8000820:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000824:	f7ff feb4 	bl	8000590 <_Unwind_GetGR>
 8000828:	4581      	cmp	r9, r0
 800082a:	d001      	beq.n	8000830 <__gnu_unwind_pr_common+0x1c8>
 800082c:	6823      	ldr	r3, [r4, #0]
 800082e:	e7b6      	b.n	800079e <__gnu_unwind_pr_common+0x136>
 8000830:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000832:	429c      	cmp	r4, r3
 8000834:	d1fa      	bne.n	800082c <__gnu_unwind_pr_common+0x1c4>
 8000836:	2204      	movs	r2, #4
 8000838:	2100      	movs	r1, #0
 800083a:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
 800083e:	18a3      	adds	r3, r4, r2
 8000840:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000844:	636b      	str	r3, [r5, #52]	; 0x34
 8000846:	6823      	ldr	r3, [r4, #0]
 8000848:	428b      	cmp	r3, r1
 800084a:	db59      	blt.n	8000900 <__gnu_unwind_pr_common+0x298>
 800084c:	2301      	movs	r3, #1
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	e7a8      	b.n	80007a4 <__gnu_unwind_pr_common+0x13c>
 8000852:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000856:	f8cd 800c 	str.w	r8, [sp, #12]
 800085a:	f104 0a04 	add.w	sl, r4, #4
 800085e:	46b0      	mov	r8, r6
 8000860:	4691      	mov	r9, r2
 8000862:	461e      	mov	r6, r3
 8000864:	e00d      	b.n	8000882 <__gnu_unwind_pr_common+0x21a>
 8000866:	9604      	str	r6, [sp, #16]
 8000868:	f7ff fd7e 	bl	8000368 <_Unwind_decode_typeinfo_ptr.isra.0>
 800086c:	ab04      	add	r3, sp, #16
 800086e:	4601      	mov	r1, r0
 8000870:	2200      	movs	r2, #0
 8000872:	4628      	mov	r0, r5
 8000874:	f006 f9ac 	bl	8006bd0 <__cxa_type_match>
 8000878:	f109 0901 	add.w	r9, r9, #1
 800087c:	f10a 0a04 	add.w	sl, sl, #4
 8000880:	b9e8      	cbnz	r0, 80008be <__gnu_unwind_pr_common+0x256>
 8000882:	45d9      	cmp	r9, fp
 8000884:	4650      	mov	r0, sl
 8000886:	d1ee      	bne.n	8000866 <__gnu_unwind_pr_common+0x1fe>
 8000888:	4638      	mov	r0, r7
 800088a:	210d      	movs	r1, #13
 800088c:	f7ff fe80 	bl	8000590 <_Unwind_GetGR>
 8000890:	9b04      	ldr	r3, [sp, #16]
 8000892:	6228      	str	r0, [r5, #32]
 8000894:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8000898:	2006      	movs	r0, #6
 800089a:	e710      	b.n	80006be <__gnu_unwind_pr_common+0x56>
 800089c:	4681      	mov	r9, r0
 800089e:	210d      	movs	r1, #13
 80008a0:	4638      	mov	r0, r7
 80008a2:	f7ff fe75 	bl	8000590 <_Unwind_GetGR>
 80008a6:	f1b9 0f02 	cmp.w	r9, #2
 80008aa:	6228      	str	r0, [r5, #32]
 80008ac:	d125      	bne.n	80008fa <__gnu_unwind_pr_common+0x292>
 80008ae:	462b      	mov	r3, r5
 80008b0:	9a04      	ldr	r2, [sp, #16]
 80008b2:	f843 2f2c 	str.w	r2, [r3, #44]!
 80008b6:	626b      	str	r3, [r5, #36]	; 0x24
 80008b8:	62ac      	str	r4, [r5, #40]	; 0x28
 80008ba:	2006      	movs	r0, #6
 80008bc:	e6ff      	b.n	80006be <__gnu_unwind_pr_common+0x56>
 80008be:	4646      	mov	r6, r8
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80008c6:	e76a      	b.n	800079e <__gnu_unwind_pr_common+0x136>
 80008c8:	4620      	mov	r0, r4
 80008ca:	f7ff fc87 	bl	80001dc <selfrel_offset31>
 80008ce:	3404      	adds	r4, #4
 80008d0:	4602      	mov	r2, r0
 80008d2:	63ac      	str	r4, [r5, #56]	; 0x38
 80008d4:	4628      	mov	r0, r5
 80008d6:	4614      	mov	r4, r2
 80008d8:	f006 f9d8 	bl	8006c8c <__cxa_begin_cleanup>
 80008dc:	2800      	cmp	r0, #0
 80008de:	f43f aeed 	beq.w	80006bc <__gnu_unwind_pr_common+0x54>
 80008e2:	4638      	mov	r0, r7
 80008e4:	4622      	mov	r2, r4
 80008e6:	210f      	movs	r1, #15
 80008e8:	f7ff fe76 	bl	80005d8 <_Unwind_SetGR>
 80008ec:	2007      	movs	r0, #7
 80008ee:	e6e6      	b.n	80006be <__gnu_unwind_pr_common+0x56>
 80008f0:	4638      	mov	r0, r7
 80008f2:	210d      	movs	r1, #13
 80008f4:	f7ff fe4c 	bl	8000590 <_Unwind_GetGR>
 80008f8:	6228      	str	r0, [r5, #32]
 80008fa:	9b04      	ldr	r3, [sp, #16]
 80008fc:	626b      	str	r3, [r5, #36]	; 0x24
 80008fe:	e7db      	b.n	80008b8 <__gnu_unwind_pr_common+0x250>
 8000900:	f10b 0001 	add.w	r0, fp, #1
 8000904:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000908:	e77a      	b.n	8000800 <__gnu_unwind_pr_common+0x198>
 800090a:	bf00      	nop
 800090c:	080074c1 	.word	0x080074c1

08000910 <__aeabi_unwind_cpp_pr0>:
 8000910:	2300      	movs	r3, #0
 8000912:	e6a9      	b.n	8000668 <__gnu_unwind_pr_common>

08000914 <__aeabi_unwind_cpp_pr1>:
 8000914:	2301      	movs	r3, #1
 8000916:	e6a7      	b.n	8000668 <__gnu_unwind_pr_common>

08000918 <__aeabi_unwind_cpp_pr2>:
 8000918:	2302      	movs	r3, #2
 800091a:	e6a5      	b.n	8000668 <__gnu_unwind_pr_common>

0800091c <_Unwind_VRS_Pop>:
 800091c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000920:	4606      	mov	r6, r0
 8000922:	b0c3      	sub	sp, #268	; 0x10c
 8000924:	4615      	mov	r5, r2
 8000926:	461c      	mov	r4, r3
 8000928:	2904      	cmp	r1, #4
 800092a:	f200 80b9 	bhi.w	8000aa0 <_Unwind_VRS_Pop+0x184>
 800092e:	e8df f001 	tbb	[pc, r1]
 8000932:	539a      	.short	0x539a
 8000934:	29b7      	.short	0x29b7
 8000936:	03          	.byte	0x03
 8000937:	00          	.byte	0x00
 8000938:	2c00      	cmp	r4, #0
 800093a:	f040 80b1 	bne.w	8000aa0 <_Unwind_VRS_Pop+0x184>
 800093e:	2a10      	cmp	r2, #16
 8000940:	f200 80ae 	bhi.w	8000aa0 <_Unwind_VRS_Pop+0x184>
 8000944:	6803      	ldr	r3, [r0, #0]
 8000946:	06d8      	lsls	r0, r3, #27
 8000948:	f100 80f3 	bmi.w	8000b32 <_Unwind_VRS_Pop+0x216>
 800094c:	af20      	add	r7, sp, #128	; 0x80
 800094e:	4638      	mov	r0, r7
 8000950:	f000 f992 	bl	8000c78 <__gnu_Unwind_Save_WMMXC>
 8000954:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8000956:	2300      	movs	r3, #0
 8000958:	2401      	movs	r4, #1
 800095a:	fa04 f203 	lsl.w	r2, r4, r3
 800095e:	422a      	tst	r2, r5
 8000960:	4601      	mov	r1, r0
 8000962:	d004      	beq.n	800096e <_Unwind_VRS_Pop+0x52>
 8000964:	f851 2b04 	ldr.w	r2, [r1], #4
 8000968:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 800096c:	4608      	mov	r0, r1
 800096e:	3301      	adds	r3, #1
 8000970:	2b04      	cmp	r3, #4
 8000972:	d1f2      	bne.n	800095a <_Unwind_VRS_Pop+0x3e>
 8000974:	63b0      	str	r0, [r6, #56]	; 0x38
 8000976:	4638      	mov	r0, r7
 8000978:	f000 f974 	bl	8000c64 <__gnu_Unwind_Restore_WMMXC>
 800097c:	2000      	movs	r0, #0
 800097e:	b043      	add	sp, #268	; 0x10c
 8000980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000984:	2c03      	cmp	r4, #3
 8000986:	f040 808b 	bne.w	8000aa0 <_Unwind_VRS_Pop+0x184>
 800098a:	b294      	uxth	r4, r2
 800098c:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000990:	2b10      	cmp	r3, #16
 8000992:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000996:	f200 8083 	bhi.w	8000aa0 <_Unwind_VRS_Pop+0x184>
 800099a:	6803      	ldr	r3, [r0, #0]
 800099c:	071f      	lsls	r7, r3, #28
 800099e:	f100 80d0 	bmi.w	8000b42 <_Unwind_VRS_Pop+0x226>
 80009a2:	af20      	add	r7, sp, #128	; 0x80
 80009a4:	4638      	mov	r0, r7
 80009a6:	f000 f93b 	bl	8000c20 <__gnu_Unwind_Save_WMMXD>
 80009aa:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 80009ae:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 80009b0:	b154      	cbz	r4, 80009c8 <_Unwind_VRS_Pop+0xac>
 80009b2:	460b      	mov	r3, r1
 80009b4:	1ae8      	subs	r0, r5, r3
 80009b6:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80009ba:	00e4      	lsls	r4, r4, #3
 80009bc:	581a      	ldr	r2, [r3, r0]
 80009be:	f843 2b04 	str.w	r2, [r3], #4
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d1fa      	bne.n	80009bc <_Unwind_VRS_Pop+0xa0>
 80009c6:	4425      	add	r5, r4
 80009c8:	4638      	mov	r0, r7
 80009ca:	63b5      	str	r5, [r6, #56]	; 0x38
 80009cc:	f000 f906 	bl	8000bdc <__gnu_Unwind_Restore_WMMXD>
 80009d0:	2000      	movs	r0, #0
 80009d2:	b043      	add	sp, #268	; 0x10c
 80009d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009d8:	2c01      	cmp	r4, #1
 80009da:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80009de:	b295      	uxth	r5, r2
 80009e0:	d05a      	beq.n	8000a98 <_Unwind_VRS_Pop+0x17c>
 80009e2:	2c05      	cmp	r4, #5
 80009e4:	d15c      	bne.n	8000aa0 <_Unwind_VRS_Pop+0x184>
 80009e6:	eb08 0905 	add.w	r9, r8, r5
 80009ea:	f1b9 0f20 	cmp.w	r9, #32
 80009ee:	d857      	bhi.n	8000aa0 <_Unwind_VRS_Pop+0x184>
 80009f0:	f1b8 0f0f 	cmp.w	r8, #15
 80009f4:	d977      	bls.n	8000ae6 <_Unwind_VRS_Pop+0x1ca>
 80009f6:	46a9      	mov	r9, r5
 80009f8:	2d00      	cmp	r5, #0
 80009fa:	f040 8088 	bne.w	8000b0e <_Unwind_VRS_Pop+0x1f2>
 80009fe:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000a00:	b36d      	cbz	r5, 8000a5e <_Unwind_VRS_Pop+0x142>
 8000a02:	af20      	add	r7, sp, #128	; 0x80
 8000a04:	f04f 0900 	mov.w	r9, #0
 8000a08:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000a0c:	3f04      	subs	r7, #4
 8000a0e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000a12:	f853 1b04 	ldr.w	r1, [r3], #4
 8000a16:	f847 1f04 	str.w	r1, [r7, #4]!
 8000a1a:	42ab      	cmp	r3, r5
 8000a1c:	d1f9      	bne.n	8000a12 <_Unwind_VRS_Pop+0xf6>
 8000a1e:	f1b9 0f00 	cmp.w	r9, #0
 8000a22:	d00f      	beq.n	8000a44 <_Unwind_VRS_Pop+0x128>
 8000a24:	466f      	mov	r7, sp
 8000a26:	4641      	mov	r1, r8
 8000a28:	2910      	cmp	r1, #16
 8000a2a:	bf38      	it	cc
 8000a2c:	2110      	movcc	r1, #16
 8000a2e:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000a32:	3984      	subs	r1, #132	; 0x84
 8000a34:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000a38:	f853 0b04 	ldr.w	r0, [r3], #4
 8000a3c:	f841 0f04 	str.w	r0, [r1, #4]!
 8000a40:	42ab      	cmp	r3, r5
 8000a42:	d1f9      	bne.n	8000a38 <_Unwind_VRS_Pop+0x11c>
 8000a44:	2c01      	cmp	r4, #1
 8000a46:	f000 8084 	beq.w	8000b52 <_Unwind_VRS_Pop+0x236>
 8000a4a:	f1b8 0f0f 	cmp.w	r8, #15
 8000a4e:	63b5      	str	r5, [r6, #56]	; 0x38
 8000a50:	d945      	bls.n	8000ade <_Unwind_VRS_Pop+0x1c2>
 8000a52:	f1b9 0f00 	cmp.w	r9, #0
 8000a56:	d002      	beq.n	8000a5e <_Unwind_VRS_Pop+0x142>
 8000a58:	4668      	mov	r0, sp
 8000a5a:	f000 f8b7 	bl	8000bcc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000a5e:	2000      	movs	r0, #0
 8000a60:	b043      	add	sp, #268	; 0x10c
 8000a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a66:	b9dc      	cbnz	r4, 8000aa0 <_Unwind_VRS_Pop+0x184>
 8000a68:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8000a6a:	4623      	mov	r3, r4
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	b294      	uxth	r4, r2
 8000a70:	f106 0c04 	add.w	ip, r6, #4
 8000a74:	fa00 f203 	lsl.w	r2, r0, r3
 8000a78:	4222      	tst	r2, r4
 8000a7a:	4639      	mov	r1, r7
 8000a7c:	d004      	beq.n	8000a88 <_Unwind_VRS_Pop+0x16c>
 8000a7e:	f851 2b04 	ldr.w	r2, [r1], #4
 8000a82:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
 8000a86:	460f      	mov	r7, r1
 8000a88:	3301      	adds	r3, #1
 8000a8a:	2b10      	cmp	r3, #16
 8000a8c:	d1f2      	bne.n	8000a74 <_Unwind_VRS_Pop+0x158>
 8000a8e:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000a92:	d1e4      	bne.n	8000a5e <_Unwind_VRS_Pop+0x142>
 8000a94:	63b7      	str	r7, [r6, #56]	; 0x38
 8000a96:	e004      	b.n	8000aa2 <_Unwind_VRS_Pop+0x186>
 8000a98:	eb08 0305 	add.w	r3, r8, r5
 8000a9c:	2b10      	cmp	r3, #16
 8000a9e:	d903      	bls.n	8000aa8 <_Unwind_VRS_Pop+0x18c>
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	b043      	add	sp, #268	; 0x10c
 8000aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000aa8:	f1b8 0f0f 	cmp.w	r8, #15
 8000aac:	d8f8      	bhi.n	8000aa0 <_Unwind_VRS_Pop+0x184>
 8000aae:	6833      	ldr	r3, [r6, #0]
 8000ab0:	07da      	lsls	r2, r3, #31
 8000ab2:	d506      	bpl.n	8000ac2 <_Unwind_VRS_Pop+0x1a6>
 8000ab4:	4630      	mov	r0, r6
 8000ab6:	f023 0303 	bic.w	r3, r3, #3
 8000aba:	f840 3b48 	str.w	r3, [r0], #72
 8000abe:	f000 f879 	bl	8000bb4 <__gnu_Unwind_Save_VFP>
 8000ac2:	af20      	add	r7, sp, #128	; 0x80
 8000ac4:	4638      	mov	r0, r7
 8000ac6:	f000 f875 	bl	8000bb4 <__gnu_Unwind_Save_VFP>
 8000aca:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000acc:	2d00      	cmp	r5, #0
 8000ace:	d199      	bne.n	8000a04 <_Unwind_VRS_Pop+0xe8>
 8000ad0:	461d      	mov	r5, r3
 8000ad2:	3504      	adds	r5, #4
 8000ad4:	63b5      	str	r5, [r6, #56]	; 0x38
 8000ad6:	4638      	mov	r0, r7
 8000ad8:	f000 f868 	bl	8000bac <__gnu_Unwind_Restore_VFP>
 8000adc:	e7bf      	b.n	8000a5e <_Unwind_VRS_Pop+0x142>
 8000ade:	a820      	add	r0, sp, #128	; 0x80
 8000ae0:	f000 f86c 	bl	8000bbc <__gnu_Unwind_Restore_VFP_D>
 8000ae4:	e7b5      	b.n	8000a52 <_Unwind_VRS_Pop+0x136>
 8000ae6:	f1b9 0f10 	cmp.w	r9, #16
 8000aea:	d940      	bls.n	8000b6e <_Unwind_VRS_Pop+0x252>
 8000aec:	f1a9 0910 	sub.w	r9, r9, #16
 8000af0:	6833      	ldr	r3, [r6, #0]
 8000af2:	07d9      	lsls	r1, r3, #31
 8000af4:	d508      	bpl.n	8000b08 <_Unwind_VRS_Pop+0x1ec>
 8000af6:	f023 0301 	bic.w	r3, r3, #1
 8000afa:	4630      	mov	r0, r6
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	f840 3b48 	str.w	r3, [r0], #72
 8000b04:	f000 f85e 	bl	8000bc4 <__gnu_Unwind_Save_VFP_D>
 8000b08:	f1b9 0f00 	cmp.w	r9, #0
 8000b0c:	d032      	beq.n	8000b74 <_Unwind_VRS_Pop+0x258>
 8000b0e:	6833      	ldr	r3, [r6, #0]
 8000b10:	075a      	lsls	r2, r3, #29
 8000b12:	d420      	bmi.n	8000b56 <_Unwind_VRS_Pop+0x23a>
 8000b14:	f1b8 0f0f 	cmp.w	r8, #15
 8000b18:	d925      	bls.n	8000b66 <_Unwind_VRS_Pop+0x24a>
 8000b1a:	466f      	mov	r7, sp
 8000b1c:	4638      	mov	r0, r7
 8000b1e:	f1c8 0510 	rsb	r5, r8, #16
 8000b22:	f000 f857 	bl	8000bd4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b26:	2d00      	cmp	r5, #0
 8000b28:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b2a:	f77f af7c 	ble.w	8000a26 <_Unwind_VRS_Pop+0x10a>
 8000b2e:	af20      	add	r7, sp, #128	; 0x80
 8000b30:	e76a      	b.n	8000a08 <_Unwind_VRS_Pop+0xec>
 8000b32:	f023 0310 	bic.w	r3, r3, #16
 8000b36:	6033      	str	r3, [r6, #0]
 8000b38:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000b3c:	f000 f89c 	bl	8000c78 <__gnu_Unwind_Save_WMMXC>
 8000b40:	e704      	b.n	800094c <_Unwind_VRS_Pop+0x30>
 8000b42:	f023 0308 	bic.w	r3, r3, #8
 8000b46:	6003      	str	r3, [r0, #0]
 8000b48:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000b4c:	f000 f868 	bl	8000c20 <__gnu_Unwind_Save_WMMXD>
 8000b50:	e727      	b.n	80009a2 <_Unwind_VRS_Pop+0x86>
 8000b52:	af20      	add	r7, sp, #128	; 0x80
 8000b54:	e7bd      	b.n	8000ad2 <_Unwind_VRS_Pop+0x1b6>
 8000b56:	4630      	mov	r0, r6
 8000b58:	f023 0304 	bic.w	r3, r3, #4
 8000b5c:	f840 3bd0 	str.w	r3, [r0], #208
 8000b60:	f000 f838 	bl	8000bd4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b64:	e7d6      	b.n	8000b14 <_Unwind_VRS_Pop+0x1f8>
 8000b66:	a820      	add	r0, sp, #128	; 0x80
 8000b68:	f000 f82c 	bl	8000bc4 <__gnu_Unwind_Save_VFP_D>
 8000b6c:	e7d5      	b.n	8000b1a <_Unwind_VRS_Pop+0x1fe>
 8000b6e:	f04f 0900 	mov.w	r9, #0
 8000b72:	e7bd      	b.n	8000af0 <_Unwind_VRS_Pop+0x1d4>
 8000b74:	f1b8 0f0f 	cmp.w	r8, #15
 8000b78:	f63f af41 	bhi.w	80009fe <_Unwind_VRS_Pop+0xe2>
 8000b7c:	af20      	add	r7, sp, #128	; 0x80
 8000b7e:	4638      	mov	r0, r7
 8000b80:	f000 f820 	bl	8000bc4 <__gnu_Unwind_Save_VFP_D>
 8000b84:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	f47f af3c 	bne.w	8000a04 <_Unwind_VRS_Pop+0xe8>
 8000b8c:	4638      	mov	r0, r7
 8000b8e:	f000 f815 	bl	8000bbc <__gnu_Unwind_Restore_VFP_D>
 8000b92:	e764      	b.n	8000a5e <_Unwind_VRS_Pop+0x142>

08000b94 <__restore_core_regs>:
 8000b94:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000b98:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000b9c:	469c      	mov	ip, r3
 8000b9e:	46a6      	mov	lr, r4
 8000ba0:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000ba4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000ba8:	46e5      	mov	sp, ip
 8000baa:	bd00      	pop	{pc}

08000bac <__gnu_Unwind_Restore_VFP>:
 8000bac:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__gnu_Unwind_Save_VFP>:
 8000bb4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__gnu_Unwind_Restore_VFP_D>:
 8000bbc:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__gnu_Unwind_Save_VFP_D>:
 8000bc4:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000bcc:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000bd4:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__gnu_Unwind_Restore_WMMXD>:
 8000bdc:	ecf0 0102 	ldfe	f0, [r0], #8
 8000be0:	ecf0 1102 	ldfe	f1, [r0], #8
 8000be4:	ecf0 2102 	ldfe	f2, [r0], #8
 8000be8:	ecf0 3102 	ldfe	f3, [r0], #8
 8000bec:	ecf0 4102 	ldfe	f4, [r0], #8
 8000bf0:	ecf0 5102 	ldfe	f5, [r0], #8
 8000bf4:	ecf0 6102 	ldfe	f6, [r0], #8
 8000bf8:	ecf0 7102 	ldfe	f7, [r0], #8
 8000bfc:	ecf0 8102 	ldfp	f0, [r0], #8
 8000c00:	ecf0 9102 	ldfp	f1, [r0], #8
 8000c04:	ecf0 a102 	ldfp	f2, [r0], #8
 8000c08:	ecf0 b102 	ldfp	f3, [r0], #8
 8000c0c:	ecf0 c102 	ldfp	f4, [r0], #8
 8000c10:	ecf0 d102 	ldfp	f5, [r0], #8
 8000c14:	ecf0 e102 	ldfp	f6, [r0], #8
 8000c18:	ecf0 f102 	ldfp	f7, [r0], #8
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__gnu_Unwind_Save_WMMXD>:
 8000c20:	ece0 0102 	stfe	f0, [r0], #8
 8000c24:	ece0 1102 	stfe	f1, [r0], #8
 8000c28:	ece0 2102 	stfe	f2, [r0], #8
 8000c2c:	ece0 3102 	stfe	f3, [r0], #8
 8000c30:	ece0 4102 	stfe	f4, [r0], #8
 8000c34:	ece0 5102 	stfe	f5, [r0], #8
 8000c38:	ece0 6102 	stfe	f6, [r0], #8
 8000c3c:	ece0 7102 	stfe	f7, [r0], #8
 8000c40:	ece0 8102 	stfp	f0, [r0], #8
 8000c44:	ece0 9102 	stfp	f1, [r0], #8
 8000c48:	ece0 a102 	stfp	f2, [r0], #8
 8000c4c:	ece0 b102 	stfp	f3, [r0], #8
 8000c50:	ece0 c102 	stfp	f4, [r0], #8
 8000c54:	ece0 d102 	stfp	f5, [r0], #8
 8000c58:	ece0 e102 	stfp	f6, [r0], #8
 8000c5c:	ece0 f102 	stfp	f7, [r0], #8
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <__gnu_Unwind_Restore_WMMXC>:
 8000c64:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000c68:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000c6c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000c70:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__gnu_Unwind_Save_WMMXC>:
 8000c78:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000c7c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000c80:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000c84:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <_Unwind_RaiseException>:
 8000c8c:	46ec      	mov	ip, sp
 8000c8e:	b500      	push	{lr}
 8000c90:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c94:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000ca0:	a901      	add	r1, sp, #4
 8000ca2:	f7ff fbf1 	bl	8000488 <__gnu_Unwind_RaiseException>
 8000ca6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000caa:	b012      	add	sp, #72	; 0x48
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <_Unwind_Resume>:
 8000cb0:	46ec      	mov	ip, sp
 8000cb2:	b500      	push	{lr}
 8000cb4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cb8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cc4:	a901      	add	r1, sp, #4
 8000cc6:	f7ff fc19 	bl	80004fc <__gnu_Unwind_Resume>
 8000cca:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cce:	b012      	add	sp, #72	; 0x48
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <_Unwind_Resume_or_Rethrow>:
 8000cd4:	46ec      	mov	ip, sp
 8000cd6:	b500      	push	{lr}
 8000cd8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cdc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000ce8:	a901      	add	r1, sp, #4
 8000cea:	f7ff fc29 	bl	8000540 <__gnu_Unwind_Resume_or_Rethrow>
 8000cee:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cf2:	b012      	add	sp, #72	; 0x48
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <_Unwind_ForcedUnwind>:
 8000cf8:	46ec      	mov	ip, sp
 8000cfa:	b500      	push	{lr}
 8000cfc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d00:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d0c:	ab01      	add	r3, sp, #4
 8000d0e:	f7ff fbeb 	bl	80004e8 <__gnu_Unwind_ForcedUnwind>
 8000d12:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d16:	b012      	add	sp, #72	; 0x48
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <_Unwind_Backtrace>:
 8000d1c:	46ec      	mov	ip, sp
 8000d1e:	b500      	push	{lr}
 8000d20:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d24:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d30:	aa01      	add	r2, sp, #4
 8000d32:	f7ff fc5d 	bl	80005f0 <__gnu_Unwind_Backtrace>
 8000d36:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d3a:	b012      	add	sp, #72	; 0x48
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <next_unwind_byte>:
 8000d40:	7a02      	ldrb	r2, [r0, #8]
 8000d42:	b97a      	cbnz	r2, 8000d64 <next_unwind_byte+0x24>
 8000d44:	7a43      	ldrb	r3, [r0, #9]
 8000d46:	b1a3      	cbz	r3, 8000d72 <next_unwind_byte+0x32>
 8000d48:	6842      	ldr	r2, [r0, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	b410      	push	{r4}
 8000d4e:	7243      	strb	r3, [r0, #9]
 8000d50:	6813      	ldr	r3, [r2, #0]
 8000d52:	2103      	movs	r1, #3
 8000d54:	1d14      	adds	r4, r2, #4
 8000d56:	7201      	strb	r1, [r0, #8]
 8000d58:	021a      	lsls	r2, r3, #8
 8000d5a:	6044      	str	r4, [r0, #4]
 8000d5c:	6002      	str	r2, [r0, #0]
 8000d5e:	bc10      	pop	{r4}
 8000d60:	0e18      	lsrs	r0, r3, #24
 8000d62:	4770      	bx	lr
 8000d64:	6803      	ldr	r3, [r0, #0]
 8000d66:	3a01      	subs	r2, #1
 8000d68:	7202      	strb	r2, [r0, #8]
 8000d6a:	021a      	lsls	r2, r3, #8
 8000d6c:	6002      	str	r2, [r0, #0]
 8000d6e:	0e18      	lsrs	r0, r3, #24
 8000d70:	4770      	bx	lr
 8000d72:	20b0      	movs	r0, #176	; 0xb0
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <_Unwind_GetGR.constprop.0>:
 8000d78:	b500      	push	{lr}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	aa03      	add	r2, sp, #12
 8000d7e:	2300      	movs	r3, #0
 8000d80:	9200      	str	r2, [sp, #0]
 8000d82:	4619      	mov	r1, r3
 8000d84:	220c      	movs	r2, #12
 8000d86:	f7ff fbeb 	bl	8000560 <_Unwind_VRS_Get>
 8000d8a:	9803      	ldr	r0, [sp, #12]
 8000d8c:	b005      	add	sp, #20
 8000d8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d92:	bf00      	nop

08000d94 <unwind_UCB_from_context>:
 8000d94:	e7f0      	b.n	8000d78 <_Unwind_GetGR.constprop.0>
 8000d96:	bf00      	nop

08000d98 <__gnu_unwind_execute>:
 8000d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d9c:	4605      	mov	r5, r0
 8000d9e:	b085      	sub	sp, #20
 8000da0:	460e      	mov	r6, r1
 8000da2:	f04f 0800 	mov.w	r8, #0
 8000da6:	4630      	mov	r0, r6
 8000da8:	f7ff ffca 	bl	8000d40 <next_unwind_byte>
 8000dac:	28b0      	cmp	r0, #176	; 0xb0
 8000dae:	4604      	mov	r4, r0
 8000db0:	f000 80b2 	beq.w	8000f18 <__gnu_unwind_execute+0x180>
 8000db4:	0607      	lsls	r7, r0, #24
 8000db6:	d520      	bpl.n	8000dfa <__gnu_unwind_execute+0x62>
 8000db8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000dbc:	2b80      	cmp	r3, #128	; 0x80
 8000dbe:	d04d      	beq.n	8000e5c <__gnu_unwind_execute+0xc4>
 8000dc0:	2b90      	cmp	r3, #144	; 0x90
 8000dc2:	d036      	beq.n	8000e32 <__gnu_unwind_execute+0x9a>
 8000dc4:	2ba0      	cmp	r3, #160	; 0xa0
 8000dc6:	d060      	beq.n	8000e8a <__gnu_unwind_execute+0xf2>
 8000dc8:	2bb0      	cmp	r3, #176	; 0xb0
 8000dca:	d074      	beq.n	8000eb6 <__gnu_unwind_execute+0x11e>
 8000dcc:	2bc0      	cmp	r3, #192	; 0xc0
 8000dce:	f000 808b 	beq.w	8000ee8 <__gnu_unwind_execute+0x150>
 8000dd2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000dd6:	2bd0      	cmp	r3, #208	; 0xd0
 8000dd8:	d10b      	bne.n	8000df2 <__gnu_unwind_execute+0x5a>
 8000dda:	f000 0207 	and.w	r2, r0, #7
 8000dde:	3201      	adds	r2, #1
 8000de0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000de4:	2305      	movs	r3, #5
 8000de6:	2101      	movs	r1, #1
 8000de8:	4628      	mov	r0, r5
 8000dea:	f7ff fd97 	bl	800091c <_Unwind_VRS_Pop>
 8000dee:	2800      	cmp	r0, #0
 8000df0:	d0d9      	beq.n	8000da6 <__gnu_unwind_execute+0xe>
 8000df2:	2009      	movs	r0, #9
 8000df4:	b005      	add	sp, #20
 8000df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dfa:	f10d 090c 	add.w	r9, sp, #12
 8000dfe:	2300      	movs	r3, #0
 8000e00:	4619      	mov	r1, r3
 8000e02:	0087      	lsls	r7, r0, #2
 8000e04:	f8cd 9000 	str.w	r9, [sp]
 8000e08:	220d      	movs	r2, #13
 8000e0a:	4628      	mov	r0, r5
 8000e0c:	f7ff fba8 	bl	8000560 <_Unwind_VRS_Get>
 8000e10:	b2ff      	uxtb	r7, r7
 8000e12:	9b03      	ldr	r3, [sp, #12]
 8000e14:	f8cd 9000 	str.w	r9, [sp]
 8000e18:	3704      	adds	r7, #4
 8000e1a:	0660      	lsls	r0, r4, #25
 8000e1c:	bf4c      	ite	mi
 8000e1e:	1bdf      	submi	r7, r3, r7
 8000e20:	18ff      	addpl	r7, r7, r3
 8000e22:	2300      	movs	r3, #0
 8000e24:	4619      	mov	r1, r3
 8000e26:	220d      	movs	r2, #13
 8000e28:	4628      	mov	r0, r5
 8000e2a:	9703      	str	r7, [sp, #12]
 8000e2c:	f7ff fbbc 	bl	80005a8 <_Unwind_VRS_Set>
 8000e30:	e7b9      	b.n	8000da6 <__gnu_unwind_execute+0xe>
 8000e32:	f000 030d 	and.w	r3, r0, #13
 8000e36:	2b0d      	cmp	r3, #13
 8000e38:	d0db      	beq.n	8000df2 <__gnu_unwind_execute+0x5a>
 8000e3a:	af03      	add	r7, sp, #12
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f000 020f 	and.w	r2, r0, #15
 8000e42:	4619      	mov	r1, r3
 8000e44:	9700      	str	r7, [sp, #0]
 8000e46:	4628      	mov	r0, r5
 8000e48:	f7ff fb8a 	bl	8000560 <_Unwind_VRS_Get>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	9700      	str	r7, [sp, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	220d      	movs	r2, #13
 8000e54:	4628      	mov	r0, r5
 8000e56:	f7ff fba7 	bl	80005a8 <_Unwind_VRS_Set>
 8000e5a:	e7a4      	b.n	8000da6 <__gnu_unwind_execute+0xe>
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	f7ff ff6f 	bl	8000d40 <next_unwind_byte>
 8000e62:	0224      	lsls	r4, r4, #8
 8000e64:	4320      	orrs	r0, r4
 8000e66:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000e6a:	d0c2      	beq.n	8000df2 <__gnu_unwind_execute+0x5a>
 8000e6c:	0104      	lsls	r4, r0, #4
 8000e6e:	2300      	movs	r3, #0
 8000e70:	b2a2      	uxth	r2, r4
 8000e72:	4619      	mov	r1, r3
 8000e74:	4628      	mov	r0, r5
 8000e76:	f7ff fd51 	bl	800091c <_Unwind_VRS_Pop>
 8000e7a:	2800      	cmp	r0, #0
 8000e7c:	d1b9      	bne.n	8000df2 <__gnu_unwind_execute+0x5a>
 8000e7e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000e82:	bf18      	it	ne
 8000e84:	f04f 0801 	movne.w	r8, #1
 8000e88:	e78d      	b.n	8000da6 <__gnu_unwind_execute+0xe>
 8000e8a:	43c2      	mvns	r2, r0
 8000e8c:	f002 0307 	and.w	r3, r2, #7
 8000e90:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000e94:	411a      	asrs	r2, r3
 8000e96:	0701      	lsls	r1, r0, #28
 8000e98:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000e9c:	f04f 0300 	mov.w	r3, #0
 8000ea0:	bf48      	it	mi
 8000ea2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4628      	mov	r0, r5
 8000eaa:	f7ff fd37 	bl	800091c <_Unwind_VRS_Pop>
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	f43f af79 	beq.w	8000da6 <__gnu_unwind_execute+0xe>
 8000eb4:	e79d      	b.n	8000df2 <__gnu_unwind_execute+0x5a>
 8000eb6:	28b1      	cmp	r0, #177	; 0xb1
 8000eb8:	d033      	beq.n	8000f22 <__gnu_unwind_execute+0x18a>
 8000eba:	28b2      	cmp	r0, #178	; 0xb2
 8000ebc:	f000 808b 	beq.w	8000fd6 <__gnu_unwind_execute+0x23e>
 8000ec0:	28b3      	cmp	r0, #179	; 0xb3
 8000ec2:	d039      	beq.n	8000f38 <__gnu_unwind_execute+0x1a0>
 8000ec4:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000ec8:	2bb4      	cmp	r3, #180	; 0xb4
 8000eca:	d092      	beq.n	8000df2 <__gnu_unwind_execute+0x5a>
 8000ecc:	f000 0207 	and.w	r2, r0, #7
 8000ed0:	3201      	adds	r2, #1
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4628      	mov	r0, r5
 8000edc:	f7ff fd1e 	bl	800091c <_Unwind_VRS_Pop>
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	f43f af60 	beq.w	8000da6 <__gnu_unwind_execute+0xe>
 8000ee6:	e784      	b.n	8000df2 <__gnu_unwind_execute+0x5a>
 8000ee8:	28c6      	cmp	r0, #198	; 0xc6
 8000eea:	d042      	beq.n	8000f72 <__gnu_unwind_execute+0x1da>
 8000eec:	28c7      	cmp	r0, #199	; 0xc7
 8000eee:	d04c      	beq.n	8000f8a <__gnu_unwind_execute+0x1f2>
 8000ef0:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000ef4:	2bc0      	cmp	r3, #192	; 0xc0
 8000ef6:	d05b      	beq.n	8000fb0 <__gnu_unwind_execute+0x218>
 8000ef8:	28c8      	cmp	r0, #200	; 0xc8
 8000efa:	d060      	beq.n	8000fbe <__gnu_unwind_execute+0x226>
 8000efc:	28c9      	cmp	r0, #201	; 0xc9
 8000efe:	f47f af78 	bne.w	8000df2 <__gnu_unwind_execute+0x5a>
 8000f02:	4630      	mov	r0, r6
 8000f04:	f7ff ff1c 	bl	8000d40 <next_unwind_byte>
 8000f08:	0302      	lsls	r2, r0, #12
 8000f0a:	f000 000f 	and.w	r0, r0, #15
 8000f0e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000f12:	3001      	adds	r0, #1
 8000f14:	4302      	orrs	r2, r0
 8000f16:	e765      	b.n	8000de4 <__gnu_unwind_execute+0x4c>
 8000f18:	f1b8 0f00 	cmp.w	r8, #0
 8000f1c:	d018      	beq.n	8000f50 <__gnu_unwind_execute+0x1b8>
 8000f1e:	2000      	movs	r0, #0
 8000f20:	e768      	b.n	8000df4 <__gnu_unwind_execute+0x5c>
 8000f22:	4630      	mov	r0, r6
 8000f24:	f7ff ff0c 	bl	8000d40 <next_unwind_byte>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	f43f af61 	beq.w	8000df2 <__gnu_unwind_execute+0x5a>
 8000f30:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f34:	d0d0      	beq.n	8000ed8 <__gnu_unwind_execute+0x140>
 8000f36:	e75c      	b.n	8000df2 <__gnu_unwind_execute+0x5a>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	f7ff ff01 	bl	8000d40 <next_unwind_byte>
 8000f3e:	0301      	lsls	r1, r0, #12
 8000f40:	f000 000f 	and.w	r0, r0, #15
 8000f44:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000f48:	1c42      	adds	r2, r0, #1
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	e7c3      	b.n	8000ed8 <__gnu_unwind_execute+0x140>
 8000f50:	ac03      	add	r4, sp, #12
 8000f52:	4643      	mov	r3, r8
 8000f54:	220e      	movs	r2, #14
 8000f56:	4641      	mov	r1, r8
 8000f58:	9400      	str	r4, [sp, #0]
 8000f5a:	4628      	mov	r0, r5
 8000f5c:	f7ff fb00 	bl	8000560 <_Unwind_VRS_Get>
 8000f60:	9400      	str	r4, [sp, #0]
 8000f62:	4628      	mov	r0, r5
 8000f64:	4643      	mov	r3, r8
 8000f66:	220f      	movs	r2, #15
 8000f68:	4641      	mov	r1, r8
 8000f6a:	f7ff fb1d 	bl	80005a8 <_Unwind_VRS_Set>
 8000f6e:	4640      	mov	r0, r8
 8000f70:	e740      	b.n	8000df4 <__gnu_unwind_execute+0x5c>
 8000f72:	4630      	mov	r0, r6
 8000f74:	f7ff fee4 	bl	8000d40 <next_unwind_byte>
 8000f78:	0301      	lsls	r1, r0, #12
 8000f7a:	f000 000f 	and.w	r0, r0, #15
 8000f7e:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000f82:	1c42      	adds	r2, r0, #1
 8000f84:	2303      	movs	r3, #3
 8000f86:	430a      	orrs	r2, r1
 8000f88:	e7a6      	b.n	8000ed8 <__gnu_unwind_execute+0x140>
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	f7ff fed8 	bl	8000d40 <next_unwind_byte>
 8000f90:	4602      	mov	r2, r0
 8000f92:	2800      	cmp	r0, #0
 8000f94:	f43f af2d 	beq.w	8000df2 <__gnu_unwind_execute+0x5a>
 8000f98:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f9c:	f47f af29 	bne.w	8000df2 <__gnu_unwind_execute+0x5a>
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	4628      	mov	r0, r5
 8000fa4:	f7ff fcba 	bl	800091c <_Unwind_VRS_Pop>
 8000fa8:	2800      	cmp	r0, #0
 8000faa:	f43f aefc 	beq.w	8000da6 <__gnu_unwind_execute+0xe>
 8000fae:	e720      	b.n	8000df2 <__gnu_unwind_execute+0x5a>
 8000fb0:	f000 020f 	and.w	r2, r0, #15
 8000fb4:	3201      	adds	r2, #1
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000fbc:	e78c      	b.n	8000ed8 <__gnu_unwind_execute+0x140>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	f7ff febe 	bl	8000d40 <next_unwind_byte>
 8000fc4:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8000fc8:	f000 030f 	and.w	r3, r0, #15
 8000fcc:	3210      	adds	r2, #16
 8000fce:	3301      	adds	r3, #1
 8000fd0:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8000fd4:	e706      	b.n	8000de4 <__gnu_unwind_execute+0x4c>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f10d 090c 	add.w	r9, sp, #12
 8000fdc:	220d      	movs	r2, #13
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f8cd 9000 	str.w	r9, [sp]
 8000fe4:	4628      	mov	r0, r5
 8000fe6:	f7ff fabb 	bl	8000560 <_Unwind_VRS_Get>
 8000fea:	4630      	mov	r0, r6
 8000fec:	f7ff fea8 	bl	8000d40 <next_unwind_byte>
 8000ff0:	0602      	lsls	r2, r0, #24
 8000ff2:	f04f 0702 	mov.w	r7, #2
 8000ff6:	d50c      	bpl.n	8001012 <__gnu_unwind_execute+0x27a>
 8000ff8:	9b03      	ldr	r3, [sp, #12]
 8000ffa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000ffe:	40b8      	lsls	r0, r7
 8001000:	4403      	add	r3, r0
 8001002:	4630      	mov	r0, r6
 8001004:	9303      	str	r3, [sp, #12]
 8001006:	f7ff fe9b 	bl	8000d40 <next_unwind_byte>
 800100a:	0603      	lsls	r3, r0, #24
 800100c:	f107 0707 	add.w	r7, r7, #7
 8001010:	d4f2      	bmi.n	8000ff8 <__gnu_unwind_execute+0x260>
 8001012:	9b03      	ldr	r3, [sp, #12]
 8001014:	f8cd 9000 	str.w	r9, [sp]
 8001018:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 800101c:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8001020:	40bc      	lsls	r4, r7
 8001022:	2300      	movs	r3, #0
 8001024:	4414      	add	r4, r2
 8001026:	4619      	mov	r1, r3
 8001028:	220d      	movs	r2, #13
 800102a:	4628      	mov	r0, r5
 800102c:	9403      	str	r4, [sp, #12]
 800102e:	f7ff fabb 	bl	80005a8 <_Unwind_VRS_Set>
 8001032:	e6b8      	b.n	8000da6 <__gnu_unwind_execute+0xe>

08001034 <__gnu_unwind_frame>:
 8001034:	b510      	push	{r4, lr}
 8001036:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001038:	b084      	sub	sp, #16
 800103a:	6853      	ldr	r3, [r2, #4]
 800103c:	2403      	movs	r4, #3
 800103e:	f88d 400c 	strb.w	r4, [sp, #12]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	f102 0408 	add.w	r4, r2, #8
 8001048:	4608      	mov	r0, r1
 800104a:	79d2      	ldrb	r2, [r2, #7]
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	a901      	add	r1, sp, #4
 8001050:	9402      	str	r4, [sp, #8]
 8001052:	f88d 200d 	strb.w	r2, [sp, #13]
 8001056:	f7ff fe9f 	bl	8000d98 <__gnu_unwind_execute>
 800105a:	b004      	add	sp, #16
 800105c:	bd10      	pop	{r4, pc}
 800105e:	bf00      	nop

08001060 <_Unwind_GetRegionStart>:
 8001060:	b508      	push	{r3, lr}
 8001062:	f7ff fe97 	bl	8000d94 <unwind_UCB_from_context>
 8001066:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001068:	bd08      	pop	{r3, pc}
 800106a:	bf00      	nop

0800106c <_Unwind_GetLanguageSpecificData>:
 800106c:	b508      	push	{r3, lr}
 800106e:	f7ff fe91 	bl	8000d94 <unwind_UCB_from_context>
 8001072:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001074:	79c3      	ldrb	r3, [r0, #7]
 8001076:	3302      	adds	r3, #2
 8001078:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800107c:	bd08      	pop	{r3, pc}
 800107e:	bf00      	nop

08001080 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE>:
	TxHeader.DLC = data_len;
	TxHeader.TransmitGlobalTime = DISABLE;
	return HAL_CAN_AddTxMessage(hcan, &TxHeader, data, &TxMailbox);
}

HAL_StatusTypeDef CAN_303x8::subscribe_message(uint32_t ID, ID_type ide, Frame_type rtr, FIFO fifo) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b092      	sub	sp, #72	; 0x48
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	4611      	mov	r1, r2
 800108c:	461a      	mov	r2, r3
 800108e:	460b      	mov	r3, r1
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	4613      	mov	r3, r2
 8001094:	71bb      	strb	r3, [r7, #6]
	uint32_t id_for_filter = (ID << ((ide == ID_type::std)?21:3)) | ide | rtr;
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x20>
 800109c:	2315      	movs	r3, #21
 800109e:	e000      	b.n	80010a2 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x22>
 80010a0:	2303      	movs	r3, #3
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	409a      	lsls	r2, r3
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	431a      	orrs	r2, r3
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	int filter_buffer_index = -1;
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
 80010b4:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i < 14; i++){
 80010b6:	2300      	movs	r3, #0
 80010b8:	643b      	str	r3, [r7, #64]	; 0x40
 80010ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010bc:	2b0d      	cmp	r3, #13
 80010be:	dc50      	bgt.n	8001162 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xe2>
		switch(this->filter_buffer[i].list){
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010c4:	323c      	adds	r2, #60	; 0x3c
 80010c6:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d021      	beq.n	8001112 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x92>
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	dc43      	bgt.n	800115a <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x5c>
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d003      	beq.n	80010e2 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x62>
 80010da:	e03e      	b.n	800115a <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
		case filter_buffer_status::list::empty:
			filter_buffer_index = i;
 80010dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 80010e0:	e03b      	b.n	800115a <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
		case filter_buffer_status::list::filled_harf:
			if(this->filter_buffer[i].fifo == fifo){
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010e6:	333c      	adds	r3, #60	; 0x3c
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	4413      	add	r3, r2
 80010ec:	785b      	ldrb	r3, [r3, #1]
 80010ee:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d12c      	bne.n	8001150 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xd0>
				if(this->subscribed_id[i*2] == id_for_filter)
 80010f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010f8:	005a      	lsls	r2, r3, #1
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3202      	adds	r2, #2
 80010fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001102:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001104:	429a      	cmp	r2, r3
 8001106:	d101      	bne.n	800110c <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x8c>
					return HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	e09f      	b.n	800124c <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
				else{
					filter_buffer_index = i;
 800110c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800110e:	647b      	str	r3, [r7, #68]	; 0x44
					break;
 8001110:	e023      	b.n	800115a <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
				}
			}else{
				continue;
			}
		case filter_buffer_status::list::filled:
			if(this->filter_buffer[i].fifo == fifo){
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001116:	333c      	adds	r3, #60	; 0x3c
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	785b      	ldrb	r3, [r3, #1]
 800111e:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8001122:	429a      	cmp	r2, r3
 8001124:	d116      	bne.n	8001154 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xd4>
				if(this->subscribed_id[i*2] == id_for_filter || this->subscribed_id[i*2+1] == id_for_filter)
 8001126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001128:	005a      	lsls	r2, r3, #1
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3202      	adds	r2, #2
 800112e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001132:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001134:	429a      	cmp	r2, r3
 8001136:	d009      	beq.n	800114c <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xcc>
 8001138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3202      	adds	r2, #2
 8001142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001146:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001148:	429a      	cmp	r2, r3
 800114a:	d105      	bne.n	8001158 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xd8>
					return HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	e07d      	b.n	800124c <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
				continue;
 8001150:	bf00      	nop
 8001152:	e002      	b.n	800115a <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
				else{
					continue;
				}
			}else{
				continue;
 8001154:	bf00      	nop
 8001156:	e000      	b.n	800115a <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
					continue;
 8001158:	bf00      	nop
	for(int i = 0; i < 14; i++){
 800115a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800115c:	3301      	adds	r3, #1
 800115e:	643b      	str	r3, [r7, #64]	; 0x40
 8001160:	e7ab      	b.n	80010ba <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x3a>
			}
		}
	}
	if(filter_buffer_index == -1)
 8001162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001168:	d101      	bne.n	800116e <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xee>
		return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e06e      	b.n	800124c <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
	uint32_t id_for_filter_first = (this->filter_buffer[filter_buffer_index].list == filter_buffer_status::list::empty)?id_for_filter:this->subscribed_id[filter_buffer_index*2];
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001172:	323c      	adds	r2, #60	; 0x3c
 8001174:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d006      	beq.n	800118a <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x10a>
 800117c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800117e:	005a      	lsls	r2, r3, #1
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3202      	adds	r2, #2
 8001184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001188:	e000      	b.n	800118c <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x10c>
 800118a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800118c:	63bb      	str	r3, [r7, #56]	; 0x38
	CAN_FilterTypeDef filter;
	filter.FilterIdHigh = id_for_filter_first >> 16;
 800118e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001190:	0c1b      	lsrs	r3, r3, #16
 8001192:	613b      	str	r3, [r7, #16]
	filter.FilterIdLow = id_for_filter_first & 0xffff;
 8001194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001196:	b29b      	uxth	r3, r3
 8001198:	617b      	str	r3, [r7, #20]
	filter.FilterMaskIdHigh = id_for_filter >> 16; 
 800119a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800119c:	0c1b      	lsrs	r3, r3, #16
 800119e:	61bb      	str	r3, [r7, #24]
	filter.FilterMaskIdLow = id_for_filter & 0xffff;
 80011a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	61fb      	str	r3, [r7, #28]
	filter.FilterScale = Filter_scale::_32;
 80011a6:	2301      	movs	r3, #1
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	filter.FilterMode = Filter_mode::list;
 80011aa:	2301      	movs	r3, #1
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
	filter.FilterFIFOAssignment = fifo;
 80011ae:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80011b2:	623b      	str	r3, [r7, #32]
	filter.FilterActivation = Filter_activation::enable;
 80011b4:	2301      	movs	r3, #1
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
	filter.FilterBank = filter_buffer_index;
 80011b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
	if(HAL_CAN_ConfigFilter(this->hcan, &filter) != HAL_OK)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f107 0210 	add.w	r2, r7, #16
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 f907 	bl	80023da <HAL_CAN_ConfigFilter>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	bf14      	ite	ne
 80011d2:	2301      	movne	r3, #1
 80011d4:	2300      	moveq	r3, #0
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x160>
		return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e035      	b.n	800124c <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
	this->filter_buffer[filter_buffer_index].fifo = fifo;
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011e4:	333c      	adds	r3, #60	; 0x3c
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80011ee:	705a      	strb	r2, [r3, #1]
	if(this->filter_buffer[filter_buffer_index].list == filter_buffer_status::list::empty){
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80011f4:	323c      	adds	r2, #60	; 0x3c
 80011f6:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10e      	bne.n	800121c <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x19c>
		this->filter_buffer[filter_buffer_index].list = filter_buffer_status::list::filled_harf;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001202:	323c      	adds	r2, #60	; 0x3c
 8001204:	2101      	movs	r1, #1
 8001206:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
		this->subscribed_id[filter_buffer_index*2] = id_for_filter;
 800120a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800120c:	005a      	lsls	r2, r3, #1
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	3202      	adds	r2, #2
 8001212:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return HAL_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	e017      	b.n	800124c <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
	}else if(this->filter_buffer[filter_buffer_index].list == filter_buffer_status::list::filled_harf){
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001220:	323c      	adds	r2, #60	; 0x3c
 8001222:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d10f      	bne.n	800124a <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1ca>
		this->filter_buffer[filter_buffer_index].list = filter_buffer_status::list::filled;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800122e:	323c      	adds	r2, #60	; 0x3c
 8001230:	2102      	movs	r1, #2
 8001232:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
		this->subscribed_id[filter_buffer_index*2+1] = id_for_filter;
 8001236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	3202      	adds	r2, #2
 8001240:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
	}else{
		return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
	}
}
 800124c:	4618      	mov	r0, r3
 800124e:	3748      	adds	r7, #72	; 0x48
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef>:
	}else{
		return read_retval::more_message_received;
	}
}

CAN_303x8::CAN_303x8(CAN_HandleTypeDef *hcan) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	4a08      	ldr	r2, [pc, #32]	; (8001280 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef+0x2c>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->hcan = hcan;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	605a      	str	r2, [r3, #4]
	HAL_CAN_Start(this->hcan);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4618      	mov	r0, r3
 8001270:	f001 f97d 	bl	800256e <HAL_CAN_Start>
}
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	080077b8 	.word	0x080077b8

08001284 <_ZN7stm_CAN9CAN_303x8D1Ev>:

CAN_303x8::~CAN_303x8() {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	4a06      	ldr	r2, [pc, #24]	; (80012a8 <_ZN7stm_CAN9CAN_303x8D1Ev+0x24>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	HAL_CAN_Stop(this->hcan);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	4618      	mov	r0, r3
 8001298:	f001 f9ad 	bl	80025f6 <HAL_CAN_Stop>
}
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	080077b8 	.word	0x080077b8

080012ac <_ZN7stm_CAN9CAN_303x8D0Ev>:
CAN_303x8::~CAN_303x8() {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
}
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ffe5 	bl	8001284 <_ZN7stm_CAN9CAN_303x8D1Ev>
 80012ba:	2194      	movs	r1, #148	; 0x94
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f005 fc62 	bl	8006b86 <_ZdlPvj>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0be      	sub	sp, #248	; 0xf8
 80012d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d2:	f000 fefd 	bl	80020d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d6:	f000 f8bf 	bl	8001458 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012da:	f000 fb97 	bl	8001a0c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80012de:	f000 fb77 	bl	80019d0 <_ZL11MX_DMA_Initv>
  MX_CAN_Init();
 80012e2:	f000 f927 	bl	8001534 <_ZL11MX_CAN_Initv>
  MX_TIM1_Init();
 80012e6:	f000 f961 	bl	80015ac <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 80012ea:	f000 fa13 	bl	8001714 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80012ee:	f000 faab 	bl	8001848 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 80012f2:	f000 fb39 	bl	8001968 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  // setup_fillter_CAN();
  // HAL_CAN_Start(&hcan);

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012f6:	2100      	movs	r1, #0
 80012f8:	484e      	ldr	r0, [pc, #312]	; (8001434 <main+0x168>)
 80012fa:	f003 f963 	bl	80045c4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80012fe:	2100      	movs	r1, #0
 8001300:	484c      	ldr	r0, [pc, #304]	; (8001434 <main+0x168>)
 8001302:	f004 fec7 	bl	8006094 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001306:	2104      	movs	r1, #4
 8001308:	484a      	ldr	r0, [pc, #296]	; (8001434 <main+0x168>)
 800130a:	f003 f95b 	bl	80045c4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800130e:	2104      	movs	r1, #4
 8001310:	4848      	ldr	r0, [pc, #288]	; (8001434 <main+0x168>)
 8001312:	f004 febf 	bl	8006094 <HAL_TIMEx_PWMN_Start>

  stm_CAN::CAN_303x8 can(&hcan);
 8001316:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800131a:	4947      	ldr	r1, [pc, #284]	; (8001438 <main+0x16c>)
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff99 	bl	8001254 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef>
  ws2812::ws2812_double pixels(&htim3, TIM_CHANNEL_4, &hdma_tim3_ch4_up, 45, 22);
 8001322:	f107 0014 	add.w	r0, r7, #20
 8001326:	2316      	movs	r3, #22
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	232d      	movs	r3, #45	; 0x2d
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	4b43      	ldr	r3, [pc, #268]	; (800143c <main+0x170>)
 8001330:	220c      	movs	r2, #12
 8001332:	4943      	ldr	r1, [pc, #268]	; (8001440 <main+0x174>)
 8001334:	f000 fe7f 	bl	8002036 <_ZN6ws281213ws2812_doubleC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>

  uint8_t hello[] = "hello";
 8001338:	4a42      	ldr	r2, [pc, #264]	; (8001444 <main+0x178>)
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001342:	6018      	str	r0, [r3, #0]
 8001344:	3304      	adds	r3, #4
 8001346:	8019      	strh	r1, [r3, #0]
  uint8_t world[] = "world";
 8001348:	4a3f      	ldr	r2, [pc, #252]	; (8001448 <main+0x17c>)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001350:	6018      	str	r0, [r3, #0]
 8001352:	3304      	adds	r3, #4
 8001354:	8019      	strh	r1, [r3, #0]

  can.subscribe_message(0x500, stm_CAN::ID_type::std, stm_CAN::Frame_type::data, stm_CAN::FIFO::_0);
 8001356:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800135a:	2300      	movs	r3, #0
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2300      	movs	r3, #0
 8001360:	2200      	movs	r2, #0
 8001362:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001366:	f7ff fe8b 	bl	8001080 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart1, hello, 5, 1);
 800136a:	f107 010c 	add.w	r1, r7, #12
 800136e:	2301      	movs	r3, #1
 8001370:	2205      	movs	r2, #5
 8001372:	4836      	ldr	r0, [pc, #216]	; (800144c <main+0x180>)
 8001374:	f005 f88d 	bl	8006492 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001378:	2120      	movs	r1, #32
 800137a:	4835      	ldr	r0, [pc, #212]	; (8001450 <main+0x184>)
 800137c:	f001 fdf4 	bl	8002f68 <HAL_GPIO_TogglePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1600);
 8001380:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <main+0x168>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001388:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 300);
 800138a:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <main+0x168>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001392:	639a      	str	r2, [r3, #56]	; 0x38
	  pixels.colors[0] = {32, 0, 0};
 8001394:	2320      	movs	r3, #32
 8001396:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800139a:	2300      	movs	r3, #0
 800139c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80013a0:	2300      	movs	r3, #0
 80013a2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	  pixels.colors[1] = {0, 32, 0};
 80013a6:	2300      	movs	r3, #0
 80013a8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80013ac:	2320      	movs	r3, #32
 80013ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80013b2:	2300      	movs	r3, #0
 80013b4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	  pixels.rend();
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 fe17 	bl	8001ff0 <_ZN6ws281213ws2812_double4rendEv>
	  //send_message_CAN();
	  HAL_Delay(1000);
 80013c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c6:	f000 fee9 	bl	800219c <HAL_Delay>
	  HAL_UART_Transmit(&huart1, world, 5, 1);
 80013ca:	1d39      	adds	r1, r7, #4
 80013cc:	2301      	movs	r3, #1
 80013ce:	2205      	movs	r2, #5
 80013d0:	481e      	ldr	r0, [pc, #120]	; (800144c <main+0x180>)
 80013d2:	f005 f85e 	bl	8006492 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80013d6:	2120      	movs	r1, #32
 80013d8:	481d      	ldr	r0, [pc, #116]	; (8001450 <main+0x184>)
 80013da:	f001 fdc5 	bl	8002f68 <HAL_GPIO_TogglePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 300);
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <main+0x168>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013e6:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1600);
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <main+0x168>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80013f0:	639a      	str	r2, [r3, #56]	; 0x38
	  pixels.colors[0] = {0, 0, 48};
 80013f2:	2300      	movs	r3, #0
 80013f4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80013f8:	2300      	movs	r3, #0
 80013fa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80013fe:	2330      	movs	r3, #48	; 0x30
 8001400:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	  pixels.colors[1] = {16, 16, 32};
 8001404:	4a13      	ldr	r2, [pc, #76]	; (8001454 <main+0x188>)
 8001406:	f107 0356 	add.w	r3, r7, #86	; 0x56
 800140a:	8811      	ldrh	r1, [r2, #0]
 800140c:	7892      	ldrb	r2, [r2, #2]
 800140e:	8019      	strh	r1, [r3, #0]
 8001410:	709a      	strb	r2, [r3, #2]
	  pixels.rend();
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fdea 	bl	8001ff0 <_ZN6ws281213ws2812_double4rendEv>
	  // send_usart1_CAN_mailbox();
	  HAL_Delay(1000);
 800141c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001420:	f000 febc 	bl	800219c <HAL_Delay>
	  HAL_UART_Transmit(&huart1, hello, 5, 1);
 8001424:	e7a1      	b.n	800136a <main+0x9e>
  stm_CAN::CAN_303x8 can(&hcan);
 8001426:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff2a 	bl	8001284 <_ZN7stm_CAN9CAN_303x8D1Ev>
 8001430:	f005 fbab 	bl	8006b8a <__cxa_end_cleanup>
 8001434:	200000bc 	.word	0x200000bc
 8001438:	20000094 	.word	0x20000094
 800143c:	200001a0 	.word	0x200001a0
 8001440:	20000154 	.word	0x20000154
 8001444:	0800777c 	.word	0x0800777c
 8001448:	08007784 	.word	0x08007784
 800144c:	200001e4 	.word	0x200001e4
 8001450:	48000400 	.word	0x48000400
 8001454:	0800778c 	.word	0x0800778c

08001458 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b096      	sub	sp, #88	; 0x58
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001462:	2228      	movs	r2, #40	; 0x28
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f006 f8be 	bl	80075e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800148c:	2301      	movs	r3, #1
 800148e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001494:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001496:	2301      	movs	r3, #1
 8001498:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800149a:	2301      	movs	r3, #1
 800149c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149e:	2302      	movs	r3, #2
 80014a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014b2:	4618      	mov	r0, r3
 80014b4:	f001 fd72 	bl	8002f9c <HAL_RCC_OscConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	bf14      	ite	ne
 80014be:	2301      	movne	r3, #1
 80014c0:	2300      	moveq	r3, #0
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 80014c8:	f000 faea 	bl	8001aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014cc:	230f      	movs	r3, #15
 80014ce:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d0:	2302      	movs	r3, #2
 80014d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014de:	2300      	movs	r3, #0
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	2102      	movs	r1, #2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 fc5f 	bl	8003dac <HAL_RCC_ClockConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	bf14      	ite	ne
 80014f4:	2301      	movne	r3, #1
 80014f6:	2300      	moveq	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 80014fe:	f000 facf 	bl	8001aa0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8001502:	f241 0301 	movw	r3, #4097	; 0x1001
 8001506:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800150c:	2300      	movs	r3, #0
 800150e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fe82 	bl	800421c <HAL_RCCEx_PeriphCLKConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	bf14      	ite	ne
 800151e:	2301      	movne	r3, #1
 8001520:	2300      	moveq	r3, #0
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001528:	f000 faba 	bl	8001aa0 <Error_Handler>
  }
}
 800152c:	bf00      	nop
 800152e:	3758      	adds	r7, #88	; 0x58
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <_ZL11MX_CAN_Initv+0x70>)
 800153a:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <_ZL11MX_CAN_Initv+0x74>)
 800153c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <_ZL11MX_CAN_Initv+0x70>)
 8001540:	2202      	movs	r2, #2
 8001542:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <_ZL11MX_CAN_Initv+0x70>)
 8001546:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800154a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <_ZL11MX_CAN_Initv+0x70>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <_ZL11MX_CAN_Initv+0x70>)
 8001554:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8001558:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <_ZL11MX_CAN_Initv+0x70>)
 800155c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001560:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <_ZL11MX_CAN_Initv+0x70>)
 8001564:	2200      	movs	r2, #0
 8001566:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <_ZL11MX_CAN_Initv+0x70>)
 800156a:	2200      	movs	r2, #0
 800156c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <_ZL11MX_CAN_Initv+0x70>)
 8001570:	2200      	movs	r2, #0
 8001572:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <_ZL11MX_CAN_Initv+0x70>)
 8001576:	2200      	movs	r2, #0
 8001578:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <_ZL11MX_CAN_Initv+0x70>)
 800157c:	2200      	movs	r2, #0
 800157e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <_ZL11MX_CAN_Initv+0x70>)
 8001582:	2200      	movs	r2, #0
 8001584:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001586:	4807      	ldr	r0, [pc, #28]	; (80015a4 <_ZL11MX_CAN_Initv+0x70>)
 8001588:	f000 fe2c 	bl	80021e4 <HAL_CAN_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	bf14      	ite	ne
 8001592:	2301      	movne	r3, #1
 8001594:	2300      	moveq	r3, #0
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <_ZL11MX_CAN_Initv+0x6c>
  {
    Error_Handler();
 800159c:	f000 fa80 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000094 	.word	0x20000094
 80015a8:	40006400 	.word	0x40006400

080015ac <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b096      	sub	sp, #88	; 0x58
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
 80015cc:	611a      	str	r2, [r3, #16]
 80015ce:	615a      	str	r2, [r3, #20]
 80015d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	222c      	movs	r2, #44	; 0x2c
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f006 f805 	bl	80075e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015de:	4b4b      	ldr	r3, [pc, #300]	; (800170c <_ZL12MX_TIM1_Initv+0x160>)
 80015e0:	4a4b      	ldr	r2, [pc, #300]	; (8001710 <_ZL12MX_TIM1_Initv+0x164>)
 80015e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015e4:	4b49      	ldr	r3, [pc, #292]	; (800170c <_ZL12MX_TIM1_Initv+0x160>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80015ea:	4b48      	ldr	r3, [pc, #288]	; (800170c <_ZL12MX_TIM1_Initv+0x160>)
 80015ec:	2220      	movs	r2, #32
 80015ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 80015f0:	4b46      	ldr	r3, [pc, #280]	; (800170c <_ZL12MX_TIM1_Initv+0x160>)
 80015f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f8:	4b44      	ldr	r3, [pc, #272]	; (800170c <_ZL12MX_TIM1_Initv+0x160>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015fe:	4b43      	ldr	r3, [pc, #268]	; (800170c <_ZL12MX_TIM1_Initv+0x160>)
 8001600:	2200      	movs	r2, #0
 8001602:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001604:	4b41      	ldr	r3, [pc, #260]	; (800170c <_ZL12MX_TIM1_Initv+0x160>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800160a:	4840      	ldr	r0, [pc, #256]	; (800170c <_ZL12MX_TIM1_Initv+0x160>)
 800160c:	f002 ff83 	bl	8004516 <HAL_TIM_PWM_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	bf14      	ite	ne
 8001616:	2301      	movne	r3, #1
 8001618:	2300      	moveq	r3, #0
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8001620:	f000 fa3e 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001630:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001634:	4619      	mov	r1, r3
 8001636:	4835      	ldr	r0, [pc, #212]	; (800170c <_ZL12MX_TIM1_Initv+0x160>)
 8001638:	f004 fdd2 	bl	80061e0 <HAL_TIMEx_MasterConfigSynchronization>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	bf14      	ite	ne
 8001642:	2301      	movne	r3, #1
 8001644:	2300      	moveq	r3, #0
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <_ZL12MX_TIM1_Initv+0xa4>
  {
    Error_Handler();
 800164c:	f000 fa28 	bl	8001aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001650:	2360      	movs	r3, #96	; 0x60
 8001652:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001658:	2300      	movs	r3, #0
 800165a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800165c:	2300      	movs	r3, #0
 800165e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001668:	2300      	movs	r3, #0
 800166a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800166c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001670:	2200      	movs	r2, #0
 8001672:	4619      	mov	r1, r3
 8001674:	4825      	ldr	r0, [pc, #148]	; (800170c <_ZL12MX_TIM1_Initv+0x160>)
 8001676:	f003 fc7b 	bl	8004f70 <HAL_TIM_PWM_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf14      	ite	ne
 8001680:	2301      	movne	r3, #1
 8001682:	2300      	moveq	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <_ZL12MX_TIM1_Initv+0xe2>
  {
    Error_Handler();
 800168a:	f000 fa09 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800168e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001692:	2204      	movs	r2, #4
 8001694:	4619      	mov	r1, r3
 8001696:	481d      	ldr	r0, [pc, #116]	; (800170c <_ZL12MX_TIM1_Initv+0x160>)
 8001698:	f003 fc6a 	bl	8004f70 <HAL_TIM_PWM_ConfigChannel>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	bf14      	ite	ne
 80016a2:	2301      	movne	r3, #1
 80016a4:	2300      	moveq	r3, #0
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <_ZL12MX_TIM1_Initv+0x104>
  {
    Error_Handler();
 80016ac:	f000 f9f8 	bl	8001aa0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 16;
 80016bc:	2310      	movs	r3, #16
 80016be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	4619      	mov	r1, r3
 80016e4:	4809      	ldr	r0, [pc, #36]	; (800170c <_ZL12MX_TIM1_Initv+0x160>)
 80016e6:	f004 fde9 	bl	80062bc <HAL_TIMEx_ConfigBreakDeadTime>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bf14      	ite	ne
 80016f0:	2301      	movne	r3, #1
 80016f2:	2300      	moveq	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <_ZL12MX_TIM1_Initv+0x152>
  {
    Error_Handler();
 80016fa:	f000 f9d1 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016fe:	4803      	ldr	r0, [pc, #12]	; (800170c <_ZL12MX_TIM1_Initv+0x160>)
 8001700:	f000 faec 	bl	8001cdc <HAL_TIM_MspPostInit>

}
 8001704:	bf00      	nop
 8001706:	3758      	adds	r7, #88	; 0x58
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200000bc 	.word	0x200000bc
 8001710:	40012c00 	.word	0x40012c00

08001714 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08c      	sub	sp, #48	; 0x30
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001738:	463b      	mov	r3, r7
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001742:	4b40      	ldr	r3, [pc, #256]	; (8001844 <_ZL12MX_TIM2_Initv+0x130>)
 8001744:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001748:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800174a:	4b3e      	ldr	r3, [pc, #248]	; (8001844 <_ZL12MX_TIM2_Initv+0x130>)
 800174c:	2200      	movs	r2, #0
 800174e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001750:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <_ZL12MX_TIM2_Initv+0x130>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001756:	4b3b      	ldr	r3, [pc, #236]	; (8001844 <_ZL12MX_TIM2_Initv+0x130>)
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175e:	4b39      	ldr	r3, [pc, #228]	; (8001844 <_ZL12MX_TIM2_Initv+0x130>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001764:	4b37      	ldr	r3, [pc, #220]	; (8001844 <_ZL12MX_TIM2_Initv+0x130>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800176a:	4836      	ldr	r0, [pc, #216]	; (8001844 <_ZL12MX_TIM2_Initv+0x130>)
 800176c:	f003 fb0c 	bl	8004d88 <HAL_TIM_IC_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	bf14      	ite	ne
 8001776:	2301      	movne	r3, #1
 8001778:	2300      	moveq	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <_ZL12MX_TIM2_Initv+0x70>
  {
    Error_Handler();
 8001780:	f000 f98e 	bl	8001aa0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001784:	2304      	movs	r3, #4
 8001786:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001788:	2350      	movs	r3, #80	; 0x50
 800178a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001790:	2300      	movs	r3, #0
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	4619      	mov	r1, r3
 800179e:	4829      	ldr	r0, [pc, #164]	; (8001844 <_ZL12MX_TIM2_Initv+0x130>)
 80017a0:	f003 fdc3 	bl	800532a <HAL_TIM_SlaveConfigSynchro>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	bf14      	ite	ne
 80017aa:	2301      	movne	r3, #1
 80017ac:	2300      	moveq	r3, #0
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <_ZL12MX_TIM2_Initv+0xa4>
  {
    Error_Handler();
 80017b4:	f000 f974 	bl	8001aa0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017bc:	2301      	movs	r3, #1
 80017be:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2200      	movs	r2, #0
 80017ce:	4619      	mov	r1, r3
 80017d0:	481c      	ldr	r0, [pc, #112]	; (8001844 <_ZL12MX_TIM2_Initv+0x130>)
 80017d2:	f003 fb30 	bl	8004e36 <HAL_TIM_IC_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bf14      	ite	ne
 80017dc:	2301      	movne	r3, #1
 80017de:	2300      	moveq	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <_ZL12MX_TIM2_Initv+0xd6>
  {
    Error_Handler();
 80017e6:	f000 f95b 	bl	8001aa0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80017ea:	2302      	movs	r3, #2
 80017ec:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80017ee:	2302      	movs	r3, #2
 80017f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	2204      	movs	r2, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4812      	ldr	r0, [pc, #72]	; (8001844 <_ZL12MX_TIM2_Initv+0x130>)
 80017fc:	f003 fb1b 	bl	8004e36 <HAL_TIM_IC_ConfigChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	bf14      	ite	ne
 8001806:	2301      	movne	r3, #1
 8001808:	2300      	moveq	r3, #0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <_ZL12MX_TIM2_Initv+0x100>
  {
    Error_Handler();
 8001810:	f000 f946 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001814:	2300      	movs	r3, #0
 8001816:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800181c:	463b      	mov	r3, r7
 800181e:	4619      	mov	r1, r3
 8001820:	4808      	ldr	r0, [pc, #32]	; (8001844 <_ZL12MX_TIM2_Initv+0x130>)
 8001822:	f004 fcdd 	bl	80061e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	bf14      	ite	ne
 800182c:	2301      	movne	r3, #1
 800182e:	2300      	moveq	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <_ZL12MX_TIM2_Initv+0x126>
  {
    Error_Handler();
 8001836:	f000 f933 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	3730      	adds	r7, #48	; 0x30
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000108 	.word	0x20000108

08001848 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08e      	sub	sp, #56	; 0x38
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001868:	463b      	mov	r3, r7
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	611a      	str	r2, [r3, #16]
 8001876:	615a      	str	r2, [r3, #20]
 8001878:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800187a:	4b39      	ldr	r3, [pc, #228]	; (8001960 <_ZL12MX_TIM3_Initv+0x118>)
 800187c:	4a39      	ldr	r2, [pc, #228]	; (8001964 <_ZL12MX_TIM3_Initv+0x11c>)
 800187e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001880:	4b37      	ldr	r3, [pc, #220]	; (8001960 <_ZL12MX_TIM3_Initv+0x118>)
 8001882:	2200      	movs	r2, #0
 8001884:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001886:	4b36      	ldr	r3, [pc, #216]	; (8001960 <_ZL12MX_TIM3_Initv+0x118>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 800188c:	4b34      	ldr	r3, [pc, #208]	; (8001960 <_ZL12MX_TIM3_Initv+0x118>)
 800188e:	2259      	movs	r2, #89	; 0x59
 8001890:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001892:	4b33      	ldr	r3, [pc, #204]	; (8001960 <_ZL12MX_TIM3_Initv+0x118>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001898:	4b31      	ldr	r3, [pc, #196]	; (8001960 <_ZL12MX_TIM3_Initv+0x118>)
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800189e:	4830      	ldr	r0, [pc, #192]	; (8001960 <_ZL12MX_TIM3_Initv+0x118>)
 80018a0:	f002 fde2 	bl	8004468 <HAL_TIM_Base_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bf14      	ite	ne
 80018aa:	2301      	movne	r3, #1
 80018ac:	2300      	moveq	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 80018b4:	f000 f8f4 	bl	8001aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018c2:	4619      	mov	r1, r3
 80018c4:	4826      	ldr	r0, [pc, #152]	; (8001960 <_ZL12MX_TIM3_Initv+0x118>)
 80018c6:	f003 fc67 	bl	8005198 <HAL_TIM_ConfigClockSource>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf14      	ite	ne
 80018d0:	2301      	movne	r3, #1
 80018d2:	2300      	moveq	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 80018da:	f000 f8e1 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018de:	4820      	ldr	r0, [pc, #128]	; (8001960 <_ZL12MX_TIM3_Initv+0x118>)
 80018e0:	f002 fe19 	bl	8004516 <HAL_TIM_PWM_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf14      	ite	ne
 80018ea:	2301      	movne	r3, #1
 80018ec:	2300      	moveq	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 80018f4:	f000 f8d4 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	4619      	mov	r1, r3
 8001906:	4816      	ldr	r0, [pc, #88]	; (8001960 <_ZL12MX_TIM3_Initv+0x118>)
 8001908:	f004 fc6a 	bl	80061e0 <HAL_TIMEx_MasterConfigSynchronization>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	bf14      	ite	ne
 8001912:	2301      	movne	r3, #1
 8001914:	2300      	moveq	r3, #0
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 800191c:	f000 f8c0 	bl	8001aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001920:	2360      	movs	r3, #96	; 0x60
 8001922:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001930:	463b      	mov	r3, r7
 8001932:	220c      	movs	r2, #12
 8001934:	4619      	mov	r1, r3
 8001936:	480a      	ldr	r0, [pc, #40]	; (8001960 <_ZL12MX_TIM3_Initv+0x118>)
 8001938:	f003 fb1a 	bl	8004f70 <HAL_TIM_PWM_ConfigChannel>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	bf14      	ite	ne
 8001942:	2301      	movne	r3, #1
 8001944:	2300      	moveq	r3, #0
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 800194c:	f000 f8a8 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001950:	4803      	ldr	r0, [pc, #12]	; (8001960 <_ZL12MX_TIM3_Initv+0x118>)
 8001952:	f000 f9c3 	bl	8001cdc <HAL_TIM_MspPostInit>

}
 8001956:	bf00      	nop
 8001958:	3738      	adds	r7, #56	; 0x38
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000154 	.word	0x20000154
 8001964:	40000400 	.word	0x40000400

08001968 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 800196e:	4a17      	ldr	r2, [pc, #92]	; (80019cc <_ZL19MX_USART1_UART_Initv+0x64>)
 8001970:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001978:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 800198e:	220c      	movs	r2, #12
 8001990:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019aa:	4807      	ldr	r0, [pc, #28]	; (80019c8 <_ZL19MX_USART1_UART_Initv+0x60>)
 80019ac:	f004 fd23 	bl	80063f6 <HAL_UART_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	bf14      	ite	ne
 80019b6:	2301      	movne	r3, #1
 80019b8:	2300      	moveq	r3, #0
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80019c0:	f000 f86e 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200001e4 	.word	0x200001e4
 80019cc:	40013800 	.word	0x40013800

080019d0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <_ZL11MX_DMA_Initv+0x38>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <_ZL11MX_DMA_Initv+0x38>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6153      	str	r3, [r2, #20]
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <_ZL11MX_DMA_Initv+0x38>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	200d      	movs	r0, #13
 80019f4:	f000 ff23 	bl	800283e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80019f8:	200d      	movs	r0, #13
 80019fa:	f000 ff3c 	bl	8002876 <HAL_NVIC_EnableIRQ>

}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000

08001a0c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <_ZL12MX_GPIO_Initv+0x8c>)
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	4a1c      	ldr	r2, [pc, #112]	; (8001a98 <_ZL12MX_GPIO_Initv+0x8c>)
 8001a28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a2c:	6153      	str	r3, [r2, #20]
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <_ZL12MX_GPIO_Initv+0x8c>)
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <_ZL12MX_GPIO_Initv+0x8c>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	4a16      	ldr	r2, [pc, #88]	; (8001a98 <_ZL12MX_GPIO_Initv+0x8c>)
 8001a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a44:	6153      	str	r3, [r2, #20]
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <_ZL12MX_GPIO_Initv+0x8c>)
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <_ZL12MX_GPIO_Initv+0x8c>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	4a10      	ldr	r2, [pc, #64]	; (8001a98 <_ZL12MX_GPIO_Initv+0x8c>)
 8001a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a5c:	6153      	str	r3, [r2, #20]
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <_ZL12MX_GPIO_Initv+0x8c>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISABLE_GPIO_Port, DISABLE_Pin, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2120      	movs	r1, #32
 8001a6e:	480b      	ldr	r0, [pc, #44]	; (8001a9c <_ZL12MX_GPIO_Initv+0x90>)
 8001a70:	f001 fa62 	bl	8002f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISABLE_Pin */
  GPIO_InitStruct.Pin = DISABLE_Pin;
 8001a74:	2320      	movs	r3, #32
 8001a76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISABLE_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4804      	ldr	r0, [pc, #16]	; (8001a9c <_ZL12MX_GPIO_Initv+0x90>)
 8001a8c:	f001 f8e2 	bl	8002c54 <HAL_GPIO_Init>

}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	48000400 	.word	0x48000400

08001aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <Error_Handler+0x8>
	...

08001aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_MspInit+0x44>)
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <HAL_MspInit+0x44>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6193      	str	r3, [r2, #24]
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <HAL_MspInit+0x44>)
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_MspInit+0x44>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <HAL_MspInit+0x44>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	61d3      	str	r3, [r2, #28]
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_MspInit+0x44>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a18      	ldr	r2, [pc, #96]	; (8001b74 <HAL_CAN_MspInit+0x80>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d129      	bne.n	8001b6a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_CAN_MspInit+0x84>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <HAL_CAN_MspInit+0x84>)
 8001b1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b20:	61d3      	str	r3, [r2, #28]
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_CAN_MspInit+0x84>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_CAN_MspInit+0x84>)
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	4a11      	ldr	r2, [pc, #68]	; (8001b78 <HAL_CAN_MspInit+0x84>)
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b38:	6153      	str	r3, [r2, #20]
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <HAL_CAN_MspInit+0x84>)
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b54:	2303      	movs	r3, #3
 8001b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001b58:	2309      	movs	r3, #9
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	4619      	mov	r1, r3
 8001b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b66:	f001 f875 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	; 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40006400 	.word	0x40006400
 8001b78:	40021000 	.word	0x40021000

08001b7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <HAL_TIM_PWM_MspInit+0x38>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d10b      	bne.n	8001ba6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b98:	6193      	str	r3, [r2, #24]
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ba6:	bf00      	nop
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40012c00 	.word	0x40012c00
 8001bb8:	40021000 	.word	0x40021000

08001bbc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bdc:	d128      	bne.n	8001c30 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bde:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <HAL_TIM_IC_MspInit+0x7c>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	4a15      	ldr	r2, [pc, #84]	; (8001c38 <HAL_TIM_IC_MspInit+0x7c>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	61d3      	str	r3, [r2, #28]
 8001bea:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <HAL_TIM_IC_MspInit+0x7c>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_TIM_IC_MspInit+0x7c>)
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	4a0f      	ldr	r2, [pc, #60]	; (8001c38 <HAL_TIM_IC_MspInit+0x7c>)
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c00:	6153      	str	r3, [r2, #20]
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_TIM_IC_MspInit+0x7c>)
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c0e:	2320      	movs	r3, #32
 8001c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	4619      	mov	r1, r3
 8001c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c2c:	f001 f812 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c30:	bf00      	nop
 8001c32:	3728      	adds	r7, #40	; 0x28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40021000 	.word	0x40021000

08001c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a20      	ldr	r2, [pc, #128]	; (8001ccc <HAL_TIM_Base_MspInit+0x90>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d139      	bne.n	8001cc2 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c4e:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <HAL_TIM_Base_MspInit+0x94>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	4a1f      	ldr	r2, [pc, #124]	; (8001cd0 <HAL_TIM_Base_MspInit+0x94>)
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	61d3      	str	r3, [r2, #28]
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_TIM_Base_MspInit+0x94>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_TIM_Base_MspInit+0x98>)
 8001c68:	4a1b      	ldr	r2, [pc, #108]	; (8001cd8 <HAL_TIM_Base_MspInit+0x9c>)
 8001c6a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_TIM_Base_MspInit+0x98>)
 8001c6e:	2210      	movs	r2, #16
 8001c70:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_TIM_Base_MspInit+0x98>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <HAL_TIM_Base_MspInit+0x98>)
 8001c7a:	2280      	movs	r2, #128	; 0x80
 8001c7c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_TIM_Base_MspInit+0x98>)
 8001c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c84:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_TIM_Base_MspInit+0x98>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_TIM_Base_MspInit+0x98>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <HAL_TIM_Base_MspInit+0x98>)
 8001c94:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001c98:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001c9a:	480e      	ldr	r0, [pc, #56]	; (8001cd4 <HAL_TIM_Base_MspInit+0x98>)
 8001c9c:	f000 fe05 	bl	80028aa <HAL_DMA_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001ca6:	f7ff fefb 	bl	8001aa0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a09      	ldr	r2, [pc, #36]	; (8001cd4 <HAL_TIM_Base_MspInit+0x98>)
 8001cae:	631a      	str	r2, [r3, #48]	; 0x30
 8001cb0:	4a08      	ldr	r2, [pc, #32]	; (8001cd4 <HAL_TIM_Base_MspInit+0x98>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <HAL_TIM_Base_MspInit+0x98>)
 8001cba:	621a      	str	r2, [r3, #32]
 8001cbc:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <HAL_TIM_Base_MspInit+0x98>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40000400 	.word	0x40000400
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	200001a0 	.word	0x200001a0
 8001cd8:	40020030 	.word	0x40020030

08001cdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a31      	ldr	r2, [pc, #196]	; (8001dc0 <HAL_TIM_MspPostInit+0xe4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d13a      	bne.n	8001d74 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <HAL_TIM_MspPostInit+0xe8>)
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	4a30      	ldr	r2, [pc, #192]	; (8001dc4 <HAL_TIM_MspPostInit+0xe8>)
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d08:	6153      	str	r3, [r2, #20]
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <HAL_TIM_MspPostInit+0xe8>)
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_TIM_MspPostInit+0xe8>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	4a2a      	ldr	r2, [pc, #168]	; (8001dc4 <HAL_TIM_MspPostInit+0xe8>)
 8001d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d20:	6153      	str	r3, [r2, #20]
 8001d22:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <HAL_TIM_MspPostInit+0xe8>)
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001d2e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d40:	2306      	movs	r3, #6
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4e:	f000 ff81 	bl	8002c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d52:	2301      	movs	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d62:	2306      	movs	r3, #6
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4816      	ldr	r0, [pc, #88]	; (8001dc8 <HAL_TIM_MspPostInit+0xec>)
 8001d6e:	f000 ff71 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d72:	e020      	b.n	8001db6 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM3)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a14      	ldr	r2, [pc, #80]	; (8001dcc <HAL_TIM_MspPostInit+0xf0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d11b      	bne.n	8001db6 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_TIM_MspPostInit+0xe8>)
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	4a10      	ldr	r2, [pc, #64]	; (8001dc4 <HAL_TIM_MspPostInit+0xe8>)
 8001d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d88:	6153      	str	r3, [r2, #20]
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <HAL_TIM_MspPostInit+0xe8>)
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d96:	2302      	movs	r3, #2
 8001d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001da6:	2302      	movs	r3, #2
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <HAL_TIM_MspPostInit+0xec>)
 8001db2:	f000 ff4f 	bl	8002c54 <HAL_GPIO_Init>
}
 8001db6:	bf00      	nop
 8001db8:	3728      	adds	r7, #40	; 0x28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40012c00 	.word	0x40012c00
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	48000400 	.word	0x48000400
 8001dcc:	40000400 	.word	0x40000400

08001dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <HAL_UART_MspInit+0x7c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d127      	bne.n	8001e42 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001df2:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <HAL_UART_MspInit+0x80>)
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	4a16      	ldr	r2, [pc, #88]	; (8001e50 <HAL_UART_MspInit+0x80>)
 8001df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dfc:	6193      	str	r3, [r2, #24]
 8001dfe:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <HAL_UART_MspInit+0x80>)
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_UART_MspInit+0x80>)
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	4a10      	ldr	r2, [pc, #64]	; (8001e50 <HAL_UART_MspInit+0x80>)
 8001e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e14:	6153      	str	r3, [r2, #20]
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <HAL_UART_MspInit+0x80>)
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e22:	23c0      	movs	r3, #192	; 0xc0
 8001e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e32:	2307      	movs	r3, #7
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e36:	f107 0314 	add.w	r3, r7, #20
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4805      	ldr	r0, [pc, #20]	; (8001e54 <HAL_UART_MspInit+0x84>)
 8001e3e:	f000 ff09 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e42:	bf00      	nop
 8001e44:	3728      	adds	r7, #40	; 0x28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	40021000 	.word	0x40021000
 8001e54:	48000400 	.word	0x48000400

08001e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <NMI_Handler+0x4>

08001e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e62:	e7fe      	b.n	8001e62 <HardFault_Handler+0x4>

08001e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <MemManage_Handler+0x4>

08001e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <BusFault_Handler+0x4>

08001e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <UsageFault_Handler+0x4>

08001e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea4:	f000 f95a 	bl	800215c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8001eb0:	4802      	ldr	r0, [pc, #8]	; (8001ebc <DMA1_Channel3_IRQHandler+0x10>)
 8001eb2:	f000 fdde 	bl	8002a72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200001a0 	.word	0x200001a0

08001ec0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
	return 1;
 8001ec4:	2301      	movs	r3, #1
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <_kill>:

int _kill(int pid, int sig)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001eda:	f005 fb53 	bl	8007584 <__errno>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2216      	movs	r2, #22
 8001ee2:	601a      	str	r2, [r3, #0]
	return -1;
 8001ee4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_exit>:

void _exit (int status)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ffe7 	bl	8001ed0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f02:	e7fe      	b.n	8001f02 <_exit+0x12>

08001f04 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <SystemInit+0x20>)
 8001f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0e:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <SystemInit+0x20>)
 8001f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <_ZN6ws281213ws2812_double19update_write_bufferEv>:

#include "ws2812double.h"

namespace ws2812 {

void ws2812_double::update_write_buffer(){
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < pixel_num; i++){
 8001f30:	2300      	movs	r3, #0
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d854      	bhi.n	8001fe4 <_ZN6ws281213ws2812_double19update_write_bufferEv+0xbc>
		for(uint8_t j = 0; j < color_num; j++){
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73bb      	strb	r3, [r7, #14]
 8001f3e:	7bbb      	ldrb	r3, [r7, #14]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d84b      	bhi.n	8001fdc <_ZN6ws281213ws2812_double19update_write_bufferEv+0xb4>
			uint8_t color = 	(j == 0) ? ws2812_double::colors[i].green
 8001f44:	7bbb      	ldrb	r3, [r7, #14]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d108      	bne.n	8001f5c <_ZN6ws281213ws2812_double19update_write_bufferEv+0x34>
 8001f4a:	7bfa      	ldrb	r2, [r7, #15]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	4413      	add	r3, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	3340      	adds	r3, #64	; 0x40
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	e018      	b.n	8001f8e <_ZN6ws281213ws2812_double19update_write_bufferEv+0x66>
 8001f5c:	7bbb      	ldrb	r3, [r7, #14]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d108      	bne.n	8001f74 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x4c>
							: 	(j == 1) ? ws2812_double::colors[i].red
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? ws2812_double::colors[i].green
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	333f      	adds	r3, #63	; 0x3f
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	e00c      	b.n	8001f8e <_ZN6ws281213ws2812_double19update_write_bufferEv+0x66>
 8001f74:	7bbb      	ldrb	r3, [r7, #14]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d108      	bne.n	8001f8c <_ZN6ws281213ws2812_double19update_write_bufferEv+0x64>
							: 	(j == 2) ? ws2812_double::colors[i].blue : 0;
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? ws2812_double::colors[i].green
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	3341      	adds	r3, #65	; 0x41
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	e000      	b.n	8001f8e <_ZN6ws281213ws2812_double19update_write_bufferEv+0x66>
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	733b      	strb	r3, [r7, #12]
			for(uint8_t k = 0; k < byte; k++){
 8001f90:	2300      	movs	r3, #0
 8001f92:	737b      	strb	r3, [r7, #13]
 8001f94:	7b7b      	ldrb	r3, [r7, #13]
 8001f96:	2b07      	cmp	r3, #7
 8001f98:	d81c      	bhi.n	8001fd4 <_ZN6ws281213ws2812_double19update_write_bufferEv+0xac>
				ws2812_double::write_buffer[(i * color_num + j) * byte + k] = ((color & (0x80 >> k)) > 0) ? ws2812_double::high : ws2812_double::low;
 8001f9a:	7b3a      	ldrb	r2, [r7, #12]
 8001f9c:	7b7b      	ldrb	r3, [r7, #13]
 8001f9e:	2180      	movs	r1, #128	; 0x80
 8001fa0:	fa41 f303 	asr.w	r3, r1, r3
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	dd02      	ble.n	8001fb0 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x88>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7b1a      	ldrb	r2, [r3, #12]
 8001fae:	e001      	b.n	8001fb4 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x8c>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7b5a      	ldrb	r2, [r3, #13]
 8001fb4:	7bf9      	ldrb	r1, [r7, #15]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4419      	add	r1, r3
 8001fbc:	7bbb      	ldrb	r3, [r7, #14]
 8001fbe:	440b      	add	r3, r1
 8001fc0:	00d9      	lsls	r1, r3, #3
 8001fc2:	7b7b      	ldrb	r3, [r7, #13]
 8001fc4:	440b      	add	r3, r1
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	440b      	add	r3, r1
 8001fca:	739a      	strb	r2, [r3, #14]
			for(uint8_t k = 0; k < byte; k++){
 8001fcc:	7b7b      	ldrb	r3, [r7, #13]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	737b      	strb	r3, [r7, #13]
 8001fd2:	e7df      	b.n	8001f94 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x6c>
		for(uint8_t j = 0; j < color_num; j++){
 8001fd4:	7bbb      	ldrb	r3, [r7, #14]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	73bb      	strb	r3, [r7, #14]
 8001fda:	e7b0      	b.n	8001f3e <_ZN6ws281213ws2812_double19update_write_bufferEv+0x16>
	for(uint8_t i = 0; i < pixel_num; i++){
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
 8001fe2:	e7a7      	b.n	8001f34 <_ZN6ws281213ws2812_double19update_write_bufferEv+0xc>
			}
		}
	}
}
 8001fe4:	bf00      	nop
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <_ZN6ws281213ws2812_double4rendEv>:

void ws2812_double::rend(){
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	update_write_buffer();
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff95 	bl	8001f28 <_ZN6ws281213ws2812_double19update_write_bufferEv>
	if(ws2812_double::hdma->State != HAL_DMA_STATE_READY) {
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002006:	2b01      	cmp	r3, #1
 8002008:	d007      	beq.n	800201a <_ZN6ws281213ws2812_double4rendEv+0x2a>
    	HAL_TIM_PWM_Stop_DMA(ws2812_double::htim, ws2812_double::Channel);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4619      	mov	r1, r3
 8002014:	4610      	mov	r0, r2
 8002016:	f002 fdc7 	bl	8004ba8 <HAL_TIM_PWM_Stop_DMA>
  	}
	HAL_TIM_PWM_Start_DMA(ws2812_double::htim, ws2812_double::Channel, (uint32_t*)ws2812_double::write_buffer, data_len + reset_bit);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6859      	ldr	r1, [r3, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f103 020e 	add.w	r2, r3, #14
 8002028:	2331      	movs	r3, #49	; 0x31
 800202a:	f002 fbb7 	bl	800479c <HAL_TIM_PWM_Start_DMA>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <_ZN6ws281213ws2812_doubleC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>:

ws2812_double::ws2812_double(TIM_HandleTypeDef *htim, uint32_t Channel, DMA_HandleTypeDef *hdma, uint8_t high_level_pulse_len, uint8_t low_level_pulse_len) {
 8002036:	b480      	push	{r7}
 8002038:	b085      	sub	sp, #20
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	333f      	adds	r3, #63	; 0x3f
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	809a      	strh	r2, [r3, #4]
	// TODO Auto-generated constructor stub
	ws2812_double::htim = htim;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	601a      	str	r2, [r3, #0]
	ws2812_double::Channel = Channel;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	605a      	str	r2, [r3, #4]
	ws2812_double::hdma = hdma;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	609a      	str	r2, [r3, #8]
	ws2812_double::high = high_level_pulse_len;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	7e3a      	ldrb	r2, [r7, #24]
 8002064:	731a      	strb	r2, [r3, #12]
	ws2812_double::low = low_level_pulse_len;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	7f3a      	ldrb	r2, [r7, #28]
 800206a:	735a      	strb	r2, [r3, #13]
}
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4618      	mov	r0, r3
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800207c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002080:	480d      	ldr	r0, [pc, #52]	; (80020b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002082:	490e      	ldr	r1, [pc, #56]	; (80020bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002084:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <LoopForever+0xe>)
  movs r3, #0
 8002086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002088:	e002      	b.n	8002090 <LoopCopyDataInit>

0800208a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800208c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208e:	3304      	adds	r3, #4

08002090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002094:	d3f9      	bcc.n	800208a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002096:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002098:	4c0b      	ldr	r4, [pc, #44]	; (80020c8 <LoopForever+0x16>)
  movs r3, #0
 800209a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800209c:	e001      	b.n	80020a2 <LoopFillZerobss>

0800209e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a0:	3204      	adds	r2, #4

080020a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a4:	d3fb      	bcc.n	800209e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020a6:	f7ff ff2d 	bl	8001f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020aa:	f005 fa71 	bl	8007590 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020ae:	f7ff f90d 	bl	80012cc <main>

080020b2 <LoopForever>:

LoopForever:
    b LoopForever
 80020b2:	e7fe      	b.n	80020b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020b4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80020b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020bc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80020c0:	08007ab0 	.word	0x08007ab0
  ldr r2, =_sbss
 80020c4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80020c8:	2000028c 	.word	0x2000028c

080020cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020cc:	e7fe      	b.n	80020cc <ADC1_2_IRQHandler>
	...

080020d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <HAL_Init+0x28>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a07      	ldr	r2, [pc, #28]	; (80020f8 <HAL_Init+0x28>)
 80020da:	f043 0310 	orr.w	r3, r3, #16
 80020de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e0:	2003      	movs	r0, #3
 80020e2:	f000 fba1 	bl	8002828 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e6:	200f      	movs	r0, #15
 80020e8:	f000 f808 	bl	80020fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020ec:	f7ff fcde 	bl	8001aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40022000 	.word	0x40022000

080020fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_InitTick+0x54>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_InitTick+0x58>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	4619      	mov	r1, r3
 800210e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002112:	fbb3 f3f1 	udiv	r3, r3, r1
 8002116:	fbb2 f3f3 	udiv	r3, r2, r3
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fbb9 	bl	8002892 <HAL_SYSTICK_Config>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e00e      	b.n	8002148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b0f      	cmp	r3, #15
 800212e:	d80a      	bhi.n	8002146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002130:	2200      	movs	r2, #0
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	f000 fb81 	bl	800283e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800213c:	4a06      	ldr	r2, [pc, #24]	; (8002158 <HAL_InitTick+0x5c>)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	e000      	b.n	8002148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
}
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000000 	.word	0x20000000
 8002154:	20000008 	.word	0x20000008
 8002158:	20000004 	.word	0x20000004

0800215c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_IncTick+0x20>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_IncTick+0x24>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4413      	add	r3, r2
 800216c:	4a04      	ldr	r2, [pc, #16]	; (8002180 <HAL_IncTick+0x24>)
 800216e:	6013      	str	r3, [r2, #0]
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000008 	.word	0x20000008
 8002180:	20000278 	.word	0x20000278

08002184 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return uwTick;  
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <HAL_GetTick+0x14>)
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000278 	.word	0x20000278

0800219c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a4:	f7ff ffee 	bl	8002184 <HAL_GetTick>
 80021a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b4:	d005      	beq.n	80021c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_Delay+0x44>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80021c2:	bf00      	nop
 80021c4:	f7ff ffde 	bl	8002184 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d8f7      	bhi.n	80021c4 <HAL_Delay+0x28>
  {
  }
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000008 	.word	0x20000008

080021e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e0ed      	b.n	80023d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d102      	bne.n	8002208 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff fc76 	bl	8001af4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002218:	f7ff ffb4 	bl	8002184 <HAL_GetTick>
 800221c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800221e:	e012      	b.n	8002246 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002220:	f7ff ffb0 	bl	8002184 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b0a      	cmp	r3, #10
 800222c:	d90b      	bls.n	8002246 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2205      	movs	r2, #5
 800223e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0c5      	b.n	80023d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0e5      	beq.n	8002220 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0202 	bic.w	r2, r2, #2
 8002262:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002264:	f7ff ff8e 	bl	8002184 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800226a:	e012      	b.n	8002292 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800226c:	f7ff ff8a 	bl	8002184 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b0a      	cmp	r3, #10
 8002278:	d90b      	bls.n	8002292 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2205      	movs	r2, #5
 800228a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e09f      	b.n	80023d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1e5      	bne.n	800226c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7e1b      	ldrb	r3, [r3, #24]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d108      	bne.n	80022ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	e007      	b.n	80022ca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7e5b      	ldrb	r3, [r3, #25]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d108      	bne.n	80022e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	e007      	b.n	80022f4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7e9b      	ldrb	r3, [r3, #26]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d108      	bne.n	800230e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0220 	orr.w	r2, r2, #32
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	e007      	b.n	800231e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0220 	bic.w	r2, r2, #32
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	7edb      	ldrb	r3, [r3, #27]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d108      	bne.n	8002338 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0210 	bic.w	r2, r2, #16
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e007      	b.n	8002348 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0210 	orr.w	r2, r2, #16
 8002346:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7f1b      	ldrb	r3, [r3, #28]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d108      	bne.n	8002362 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0208 	orr.w	r2, r2, #8
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e007      	b.n	8002372 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0208 	bic.w	r2, r2, #8
 8002370:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	7f5b      	ldrb	r3, [r3, #29]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d108      	bne.n	800238c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0204 	orr.w	r2, r2, #4
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	e007      	b.n	800239c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0204 	bic.w	r2, r2, #4
 800239a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	ea42 0103 	orr.w	r1, r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	1e5a      	subs	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80023da:	b480      	push	{r7}
 80023dc:	b087      	sub	sp, #28
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80023f2:	7cfb      	ldrb	r3, [r7, #19]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d003      	beq.n	8002400 <HAL_CAN_ConfigFilter+0x26>
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	f040 80aa 	bne.w	8002554 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002406:	f043 0201 	orr.w	r2, r3, #1
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	2201      	movs	r2, #1
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	43db      	mvns	r3, r3
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d123      	bne.n	8002482 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	43db      	mvns	r3, r3
 8002444:	401a      	ands	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800245c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3248      	adds	r2, #72	; 0x48
 8002462:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002476:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002478:	6979      	ldr	r1, [r7, #20]
 800247a:	3348      	adds	r3, #72	; 0x48
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	440b      	add	r3, r1
 8002480:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d122      	bne.n	80024d0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	431a      	orrs	r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024aa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3248      	adds	r2, #72	; 0x48
 80024b0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024c4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024c6:	6979      	ldr	r1, [r7, #20]
 80024c8:	3348      	adds	r3, #72	; 0x48
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	440b      	add	r3, r1
 80024ce:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d109      	bne.n	80024ec <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	401a      	ands	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80024ea:	e007      	b.n	80024fc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	431a      	orrs	r2, r3
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d109      	bne.n	8002518 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	43db      	mvns	r3, r3
 800250e:	401a      	ands	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002516:	e007      	b.n	8002528 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	431a      	orrs	r2, r3
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d107      	bne.n	8002540 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	431a      	orrs	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002546:	f023 0201 	bic.w	r2, r3, #1
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	e006      	b.n	8002562 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
  }
}
 8002562:	4618      	mov	r0, r3
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d12e      	bne.n	80025e0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2202      	movs	r2, #2
 8002586:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0201 	bic.w	r2, r2, #1
 8002598:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800259a:	f7ff fdf3 	bl	8002184 <HAL_GetTick>
 800259e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025a0:	e012      	b.n	80025c8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025a2:	f7ff fdef 	bl	8002184 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b0a      	cmp	r3, #10
 80025ae:	d90b      	bls.n	80025c8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2205      	movs	r2, #5
 80025c0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e012      	b.n	80025ee <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1e5      	bne.n	80025a2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	e006      	b.n	80025ee <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
  }
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b084      	sub	sp, #16
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d133      	bne.n	8002672 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0201 	orr.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800261a:	f7ff fdb3 	bl	8002184 <HAL_GetTick>
 800261e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002620:	e012      	b.n	8002648 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002622:	f7ff fdaf 	bl	8002184 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b0a      	cmp	r3, #10
 800262e:	d90b      	bls.n	8002648 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2205      	movs	r2, #5
 8002640:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e01b      	b.n	8002680 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0e5      	beq.n	8002622 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0202 	bic.w	r2, r2, #2
 8002664:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	e006      	b.n	8002680 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
  }
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <__NVIC_SetPriorityGrouping+0x44>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026a4:	4013      	ands	r3, r2
 80026a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ba:	4a04      	ldr	r2, [pc, #16]	; (80026cc <__NVIC_SetPriorityGrouping+0x44>)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	60d3      	str	r3, [r2, #12]
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d4:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <__NVIC_GetPriorityGrouping+0x18>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	f003 0307 	and.w	r3, r3, #7
}
 80026de:	4618      	mov	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	db0b      	blt.n	8002716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	f003 021f 	and.w	r2, r3, #31
 8002704:	4907      	ldr	r1, [pc, #28]	; (8002724 <__NVIC_EnableIRQ+0x38>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	2001      	movs	r0, #1
 800270e:	fa00 f202 	lsl.w	r2, r0, r2
 8002712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000e100 	.word	0xe000e100

08002728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	6039      	str	r1, [r7, #0]
 8002732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002738:	2b00      	cmp	r3, #0
 800273a:	db0a      	blt.n	8002752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	b2da      	uxtb	r2, r3
 8002740:	490c      	ldr	r1, [pc, #48]	; (8002774 <__NVIC_SetPriority+0x4c>)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	0112      	lsls	r2, r2, #4
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	440b      	add	r3, r1
 800274c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002750:	e00a      	b.n	8002768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	b2da      	uxtb	r2, r3
 8002756:	4908      	ldr	r1, [pc, #32]	; (8002778 <__NVIC_SetPriority+0x50>)
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	3b04      	subs	r3, #4
 8002760:	0112      	lsls	r2, r2, #4
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	440b      	add	r3, r1
 8002766:	761a      	strb	r2, [r3, #24]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000e100 	.word	0xe000e100
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	; 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f1c3 0307 	rsb	r3, r3, #7
 8002796:	2b04      	cmp	r3, #4
 8002798:	bf28      	it	cs
 800279a:	2304      	movcs	r3, #4
 800279c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3304      	adds	r3, #4
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d902      	bls.n	80027ac <NVIC_EncodePriority+0x30>
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3b03      	subs	r3, #3
 80027aa:	e000      	b.n	80027ae <NVIC_EncodePriority+0x32>
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	f04f 32ff 	mov.w	r2, #4294967295
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43da      	mvns	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	401a      	ands	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c4:	f04f 31ff 	mov.w	r1, #4294967295
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	43d9      	mvns	r1, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d4:	4313      	orrs	r3, r2
         );
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3724      	adds	r7, #36	; 0x24
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f4:	d301      	bcc.n	80027fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027f6:	2301      	movs	r3, #1
 80027f8:	e00f      	b.n	800281a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027fa:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <SysTick_Config+0x40>)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3b01      	subs	r3, #1
 8002800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002802:	210f      	movs	r1, #15
 8002804:	f04f 30ff 	mov.w	r0, #4294967295
 8002808:	f7ff ff8e 	bl	8002728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <SysTick_Config+0x40>)
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002812:	4b04      	ldr	r3, [pc, #16]	; (8002824 <SysTick_Config+0x40>)
 8002814:	2207      	movs	r2, #7
 8002816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	e000e010 	.word	0xe000e010

08002828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff ff29 	bl	8002688 <__NVIC_SetPriorityGrouping>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002850:	f7ff ff3e 	bl	80026d0 <__NVIC_GetPriorityGrouping>
 8002854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	6978      	ldr	r0, [r7, #20]
 800285c:	f7ff ff8e 	bl	800277c <NVIC_EncodePriority>
 8002860:	4602      	mov	r2, r0
 8002862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ff5d 	bl	8002728 <__NVIC_SetPriority>
}
 800286e:	bf00      	nop
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	4603      	mov	r3, r0
 800287e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff31 	bl	80026ec <__NVIC_EnableIRQ>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ffa2 	bl	80027e4 <SysTick_Config>
 80028a0:	4603      	mov	r3, r0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b084      	sub	sp, #16
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e037      	b.n	8002930 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80028da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f97e 	bl	8002c14 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}  
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_DMA_Start_IT+0x20>
 8002954:	2302      	movs	r3, #2
 8002956:	e04a      	b.n	80029ee <HAL_DMA_Start_IT+0xb6>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002966:	2b01      	cmp	r3, #1
 8002968:	d13a      	bne.n	80029e0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2202      	movs	r2, #2
 800296e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0201 	bic.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f912 	bl	8002bb8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 020e 	orr.w	r2, r2, #14
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	e00f      	b.n	80029ce <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 020a 	orr.w	r2, r2, #10
 80029bc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0204 	bic.w	r2, r2, #4
 80029cc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0201 	orr.w	r2, r2, #1
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	e005      	b.n	80029ec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80029e8:	2302      	movs	r3, #2
 80029ea:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80029ec:	7dfb      	ldrb	r3, [r7, #23]
} 
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d005      	beq.n	8002a18 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2204      	movs	r2, #4
 8002a10:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
 8002a16:	e027      	b.n	8002a68 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 020e 	bic.w	r2, r2, #14
 8002a26:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0201 	bic.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	2101      	movs	r1, #1
 8002a42:	fa01 f202 	lsl.w	r2, r1, r2
 8002a46:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
    } 
  }
  return status;
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	2204      	movs	r2, #4
 8002a90:	409a      	lsls	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4013      	ands	r3, r2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d024      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x72>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01f      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d107      	bne.n	8002ac2 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0204 	bic.w	r2, r2, #4
 8002ac0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	2104      	movs	r1, #4
 8002acc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d06a      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002ae2:	e065      	b.n	8002bb0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	2202      	movs	r2, #2
 8002aea:	409a      	lsls	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d02c      	beq.n	8002b4e <HAL_DMA_IRQHandler+0xdc>
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d027      	beq.n	8002b4e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10b      	bne.n	8002b24 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 020a 	bic.w	r2, r2, #10
 8002b1a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2c:	2102      	movs	r1, #2
 8002b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b32:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d035      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002b4c:	e030      	b.n	8002bb0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	2208      	movs	r2, #8
 8002b54:	409a      	lsls	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d028      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x13e>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d023      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 020e 	bic.w	r2, r2, #14
 8002b76:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b80:	2101      	movs	r1, #1
 8002b82:	fa01 f202 	lsl.w	r2, r1, r2
 8002b86:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d004      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	4798      	blx	r3
    }
  }
}  
 8002bae:	e7ff      	b.n	8002bb0 <HAL_DMA_IRQHandler+0x13e>
 8002bb0:	bf00      	nop
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bce:	2101      	movs	r1, #1
 8002bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b10      	cmp	r3, #16
 8002be4:	d108      	bne.n	8002bf8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bf6:	e007      	b.n	8002c08 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	60da      	str	r2, [r3, #12]
}
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <DMA_CalcBaseAndBitshift+0x34>)
 8002c24:	4413      	add	r3, r2
 8002c26:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <DMA_CalcBaseAndBitshift+0x38>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	009a      	lsls	r2, r3, #2
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a06      	ldr	r2, [pc, #24]	; (8002c50 <DMA_CalcBaseAndBitshift+0x3c>)
 8002c38:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	bffdfff8 	.word	0xbffdfff8
 8002c4c:	cccccccd 	.word	0xcccccccd
 8002c50:	40020000 	.word	0x40020000

08002c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c62:	e14e      	b.n	8002f02 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	2101      	movs	r1, #1
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c70:	4013      	ands	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 8140 	beq.w	8002efc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d005      	beq.n	8002c94 <HAL_GPIO_Init+0x40>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d130      	bne.n	8002cf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cca:	2201      	movs	r2, #1
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	f003 0201 	and.w	r2, r3, #1
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d017      	beq.n	8002d32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4013      	ands	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d123      	bne.n	8002d86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	08da      	lsrs	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3208      	adds	r2, #8
 8002d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	220f      	movs	r2, #15
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	08da      	lsrs	r2, r3, #3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3208      	adds	r2, #8
 8002d80:	6939      	ldr	r1, [r7, #16]
 8002d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	2203      	movs	r2, #3
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 0203 	and.w	r2, r3, #3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 809a 	beq.w	8002efc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc8:	4b55      	ldr	r3, [pc, #340]	; (8002f20 <HAL_GPIO_Init+0x2cc>)
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	4a54      	ldr	r2, [pc, #336]	; (8002f20 <HAL_GPIO_Init+0x2cc>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6193      	str	r3, [r2, #24]
 8002dd4:	4b52      	ldr	r3, [pc, #328]	; (8002f20 <HAL_GPIO_Init+0x2cc>)
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002de0:	4a50      	ldr	r2, [pc, #320]	; (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	3302      	adds	r3, #2
 8002de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	220f      	movs	r2, #15
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	4013      	ands	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e0a:	d013      	beq.n	8002e34 <HAL_GPIO_Init+0x1e0>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a46      	ldr	r2, [pc, #280]	; (8002f28 <HAL_GPIO_Init+0x2d4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00d      	beq.n	8002e30 <HAL_GPIO_Init+0x1dc>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a45      	ldr	r2, [pc, #276]	; (8002f2c <HAL_GPIO_Init+0x2d8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d007      	beq.n	8002e2c <HAL_GPIO_Init+0x1d8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a44      	ldr	r2, [pc, #272]	; (8002f30 <HAL_GPIO_Init+0x2dc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d101      	bne.n	8002e28 <HAL_GPIO_Init+0x1d4>
 8002e24:	2303      	movs	r3, #3
 8002e26:	e006      	b.n	8002e36 <HAL_GPIO_Init+0x1e2>
 8002e28:	2305      	movs	r3, #5
 8002e2a:	e004      	b.n	8002e36 <HAL_GPIO_Init+0x1e2>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e002      	b.n	8002e36 <HAL_GPIO_Init+0x1e2>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_GPIO_Init+0x1e2>
 8002e34:	2300      	movs	r3, #0
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	f002 0203 	and.w	r2, r2, #3
 8002e3c:	0092      	lsls	r2, r2, #2
 8002e3e:	4093      	lsls	r3, r2
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e46:	4937      	ldr	r1, [pc, #220]	; (8002f24 <HAL_GPIO_Init+0x2d0>)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	089b      	lsrs	r3, r3, #2
 8002e4c:	3302      	adds	r3, #2
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e54:	4b37      	ldr	r3, [pc, #220]	; (8002f34 <HAL_GPIO_Init+0x2e0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4013      	ands	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e78:	4a2e      	ldr	r2, [pc, #184]	; (8002f34 <HAL_GPIO_Init+0x2e0>)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e7e:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <HAL_GPIO_Init+0x2e0>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ea2:	4a24      	ldr	r2, [pc, #144]	; (8002f34 <HAL_GPIO_Init+0x2e0>)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ea8:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <HAL_GPIO_Init+0x2e0>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ecc:	4a19      	ldr	r2, [pc, #100]	; (8002f34 <HAL_GPIO_Init+0x2e0>)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ed2:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <HAL_GPIO_Init+0x2e0>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	43db      	mvns	r3, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ef6:	4a0f      	ldr	r2, [pc, #60]	; (8002f34 <HAL_GPIO_Init+0x2e0>)
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	3301      	adds	r3, #1
 8002f00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f47f aea9 	bne.w	8002c64 <HAL_GPIO_Init+0x10>
  }
}
 8002f12:	bf00      	nop
 8002f14:	bf00      	nop
 8002f16:	371c      	adds	r7, #28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40010000 	.word	0x40010000
 8002f28:	48000400 	.word	0x48000400
 8002f2c:	48000800 	.word	0x48000800
 8002f30:	48000c00 	.word	0x48000c00
 8002f34:	40010400 	.word	0x40010400

08002f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	807b      	strh	r3, [r7, #2]
 8002f44:	4613      	mov	r3, r2
 8002f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f48:	787b      	ldrb	r3, [r7, #1]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f4e:	887a      	ldrh	r2, [r7, #2]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f54:	e002      	b.n	8002f5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f56:	887a      	ldrh	r2, [r7, #2]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f7a:	887a      	ldrh	r2, [r7, #2]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	041a      	lsls	r2, r3, #16
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	43d9      	mvns	r1, r3
 8002f86:	887b      	ldrh	r3, [r7, #2]
 8002f88:	400b      	ands	r3, r1
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	619a      	str	r2, [r3, #24]
}
 8002f90:	bf00      	nop
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	1d3b      	adds	r3, r7, #4
 8002fa6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fa8:	1d3b      	adds	r3, r7, #4
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f000 bef4 	b.w	8003d9e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb6:	1d3b      	adds	r3, r7, #4
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 816a 	beq.w	800329a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002fc6:	4bb3      	ldr	r3, [pc, #716]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d00c      	beq.n	8002fec <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fd2:	4bb0      	ldr	r3, [pc, #704]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d159      	bne.n	8003092 <HAL_RCC_OscConfig+0xf6>
 8002fde:	4bad      	ldr	r3, [pc, #692]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fea:	d152      	bne.n	8003092 <HAL_RCC_OscConfig+0xf6>
 8002fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ff0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003000:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003004:	fab3 f383 	clz	r3, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d102      	bne.n	800301e <HAL_RCC_OscConfig+0x82>
 8003018:	4b9e      	ldr	r3, [pc, #632]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	e015      	b.n	800304a <HAL_RCC_OscConfig+0xae>
 800301e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003022:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003032:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003036:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800303a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800303e:	fa93 f3a3 	rbit	r3, r3
 8003042:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003046:	4b93      	ldr	r3, [pc, #588]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800304e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003052:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003056:	fa92 f2a2 	rbit	r2, r2
 800305a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800305e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003062:	fab2 f282 	clz	r2, r2
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	f042 0220 	orr.w	r2, r2, #32
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	f002 021f 	and.w	r2, r2, #31
 8003072:	2101      	movs	r1, #1
 8003074:	fa01 f202 	lsl.w	r2, r1, r2
 8003078:	4013      	ands	r3, r2
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 810c 	beq.w	8003298 <HAL_RCC_OscConfig+0x2fc>
 8003080:	1d3b      	adds	r3, r7, #4
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 8106 	bne.w	8003298 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	f000 be86 	b.w	8003d9e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003092:	1d3b      	adds	r3, r7, #4
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309c:	d106      	bne.n	80030ac <HAL_RCC_OscConfig+0x110>
 800309e:	4b7d      	ldr	r3, [pc, #500]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a7c      	ldr	r2, [pc, #496]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 80030a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	e030      	b.n	800310e <HAL_RCC_OscConfig+0x172>
 80030ac:	1d3b      	adds	r3, r7, #4
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCC_OscConfig+0x134>
 80030b6:	4b77      	ldr	r3, [pc, #476]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a76      	ldr	r2, [pc, #472]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 80030bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b74      	ldr	r3, [pc, #464]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a73      	ldr	r2, [pc, #460]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 80030c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e01e      	b.n	800310e <HAL_RCC_OscConfig+0x172>
 80030d0:	1d3b      	adds	r3, r7, #4
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030da:	d10c      	bne.n	80030f6 <HAL_RCC_OscConfig+0x15a>
 80030dc:	4b6d      	ldr	r3, [pc, #436]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a6c      	ldr	r2, [pc, #432]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 80030e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	4b6a      	ldr	r3, [pc, #424]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a69      	ldr	r2, [pc, #420]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 80030ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	e00b      	b.n	800310e <HAL_RCC_OscConfig+0x172>
 80030f6:	4b67      	ldr	r3, [pc, #412]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a66      	ldr	r2, [pc, #408]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 80030fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	4b64      	ldr	r3, [pc, #400]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a63      	ldr	r2, [pc, #396]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 8003108:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800310c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800310e:	4b61      	ldr	r3, [pc, #388]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	f023 020f 	bic.w	r2, r3, #15
 8003116:	1d3b      	adds	r3, r7, #4
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	495d      	ldr	r1, [pc, #372]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 800311e:	4313      	orrs	r3, r2
 8003120:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003122:	1d3b      	adds	r3, r7, #4
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d059      	beq.n	80031e0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7ff f82a 	bl	8002184 <HAL_GetTick>
 8003130:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003134:	e00a      	b.n	800314c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003136:	f7ff f825 	bl	8002184 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d902      	bls.n	800314c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	f000 be29 	b.w	8003d9e <HAL_RCC_OscConfig+0xe02>
 800314c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003150:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003160:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	b2db      	uxtb	r3, r3
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d102      	bne.n	800317e <HAL_RCC_OscConfig+0x1e2>
 8003178:	4b46      	ldr	r3, [pc, #280]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	e015      	b.n	80031aa <HAL_RCC_OscConfig+0x20e>
 800317e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003182:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003186:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800318a:	fa93 f3a3 	rbit	r3, r3
 800318e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003192:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003196:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800319a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800319e:	fa93 f3a3 	rbit	r3, r3
 80031a2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80031a6:	4b3b      	ldr	r3, [pc, #236]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031ae:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80031b2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80031b6:	fa92 f2a2 	rbit	r2, r2
 80031ba:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80031be:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80031c2:	fab2 f282 	clz	r2, r2
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	f042 0220 	orr.w	r2, r2, #32
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	f002 021f 	and.w	r2, r2, #31
 80031d2:	2101      	movs	r1, #1
 80031d4:	fa01 f202 	lsl.w	r2, r1, r2
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0ab      	beq.n	8003136 <HAL_RCC_OscConfig+0x19a>
 80031de:	e05c      	b.n	800329a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fe ffd0 	bl	8002184 <HAL_GetTick>
 80031e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e8:	e00a      	b.n	8003200 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ea:	f7fe ffcb 	bl	8002184 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d902      	bls.n	8003200 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	f000 bdcf 	b.w	8003d9e <HAL_RCC_OscConfig+0xe02>
 8003200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003204:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800320c:	fa93 f3a3 	rbit	r3, r3
 8003210:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003214:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003218:	fab3 f383 	clz	r3, r3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	b2db      	uxtb	r3, r3
 8003222:	f043 0301 	orr.w	r3, r3, #1
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	d102      	bne.n	8003232 <HAL_RCC_OscConfig+0x296>
 800322c:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	e015      	b.n	800325e <HAL_RCC_OscConfig+0x2c2>
 8003232:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003236:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003246:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800324a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800324e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800325a:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <HAL_RCC_OscConfig+0x2f8>)
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003262:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003266:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800326a:	fa92 f2a2 	rbit	r2, r2
 800326e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003272:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003276:	fab2 f282 	clz	r2, r2
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	f042 0220 	orr.w	r2, r2, #32
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	f002 021f 	and.w	r2, r2, #31
 8003286:	2101      	movs	r1, #1
 8003288:	fa01 f202 	lsl.w	r2, r1, r2
 800328c:	4013      	ands	r3, r2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1ab      	bne.n	80031ea <HAL_RCC_OscConfig+0x24e>
 8003292:	e002      	b.n	800329a <HAL_RCC_OscConfig+0x2fe>
 8003294:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800329a:	1d3b      	adds	r3, r7, #4
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 816f 	beq.w	8003588 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80032aa:	4bd0      	ldr	r3, [pc, #832]	; (80035ec <HAL_RCC_OscConfig+0x650>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00b      	beq.n	80032ce <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80032b6:	4bcd      	ldr	r3, [pc, #820]	; (80035ec <HAL_RCC_OscConfig+0x650>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 030c 	and.w	r3, r3, #12
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d16c      	bne.n	800339c <HAL_RCC_OscConfig+0x400>
 80032c2:	4bca      	ldr	r3, [pc, #808]	; (80035ec <HAL_RCC_OscConfig+0x650>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d166      	bne.n	800339c <HAL_RCC_OscConfig+0x400>
 80032ce:	2302      	movs	r3, #2
 80032d0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80032e0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e4:	fab3 f383 	clz	r3, r3
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d102      	bne.n	80032fe <HAL_RCC_OscConfig+0x362>
 80032f8:	4bbc      	ldr	r3, [pc, #752]	; (80035ec <HAL_RCC_OscConfig+0x650>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	e013      	b.n	8003326 <HAL_RCC_OscConfig+0x38a>
 80032fe:	2302      	movs	r3, #2
 8003300:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003308:	fa93 f3a3 	rbit	r3, r3
 800330c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003310:	2302      	movs	r3, #2
 8003312:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003316:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800331a:	fa93 f3a3 	rbit	r3, r3
 800331e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003322:	4bb2      	ldr	r3, [pc, #712]	; (80035ec <HAL_RCC_OscConfig+0x650>)
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2202      	movs	r2, #2
 8003328:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800332c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003330:	fa92 f2a2 	rbit	r2, r2
 8003334:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003338:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800333c:	fab2 f282 	clz	r2, r2
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	f042 0220 	orr.w	r2, r2, #32
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	f002 021f 	and.w	r2, r2, #31
 800334c:	2101      	movs	r1, #1
 800334e:	fa01 f202 	lsl.w	r2, r1, r2
 8003352:	4013      	ands	r3, r2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d007      	beq.n	8003368 <HAL_RCC_OscConfig+0x3cc>
 8003358:	1d3b      	adds	r3, r7, #4
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d002      	beq.n	8003368 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	f000 bd1b 	b.w	8003d9e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003368:	4ba0      	ldr	r3, [pc, #640]	; (80035ec <HAL_RCC_OscConfig+0x650>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003370:	1d3b      	adds	r3, r7, #4
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	21f8      	movs	r1, #248	; 0xf8
 8003378:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003380:	fa91 f1a1 	rbit	r1, r1
 8003384:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003388:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800338c:	fab1 f181 	clz	r1, r1
 8003390:	b2c9      	uxtb	r1, r1
 8003392:	408b      	lsls	r3, r1
 8003394:	4995      	ldr	r1, [pc, #596]	; (80035ec <HAL_RCC_OscConfig+0x650>)
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339a:	e0f5      	b.n	8003588 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800339c:	1d3b      	adds	r3, r7, #4
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 8085 	beq.w	80034b2 <HAL_RCC_OscConfig+0x516>
 80033a8:	2301      	movs	r3, #1
 80033aa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80033ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033be:	fab3 f383 	clz	r3, r3
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	461a      	mov	r2, r3
 80033d0:	2301      	movs	r3, #1
 80033d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7fe fed6 	bl	8002184 <HAL_GetTick>
 80033d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033dc:	e00a      	b.n	80033f4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033de:	f7fe fed1 	bl	8002184 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d902      	bls.n	80033f4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	f000 bcd5 	b.w	8003d9e <HAL_RCC_OscConfig+0xe02>
 80033f4:	2302      	movs	r3, #2
 80033f6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80033fe:	fa93 f3a3 	rbit	r3, r3
 8003402:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003406:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340a:	fab3 f383 	clz	r3, r3
 800340e:	b2db      	uxtb	r3, r3
 8003410:	095b      	lsrs	r3, r3, #5
 8003412:	b2db      	uxtb	r3, r3
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b01      	cmp	r3, #1
 800341c:	d102      	bne.n	8003424 <HAL_RCC_OscConfig+0x488>
 800341e:	4b73      	ldr	r3, [pc, #460]	; (80035ec <HAL_RCC_OscConfig+0x650>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	e013      	b.n	800344c <HAL_RCC_OscConfig+0x4b0>
 8003424:	2302      	movs	r3, #2
 8003426:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800342e:	fa93 f3a3 	rbit	r3, r3
 8003432:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003436:	2302      	movs	r3, #2
 8003438:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800343c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003440:	fa93 f3a3 	rbit	r3, r3
 8003444:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003448:	4b68      	ldr	r3, [pc, #416]	; (80035ec <HAL_RCC_OscConfig+0x650>)
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	2202      	movs	r2, #2
 800344e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003452:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003456:	fa92 f2a2 	rbit	r2, r2
 800345a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800345e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003462:	fab2 f282 	clz	r2, r2
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	f042 0220 	orr.w	r2, r2, #32
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	f002 021f 	and.w	r2, r2, #31
 8003472:	2101      	movs	r1, #1
 8003474:	fa01 f202 	lsl.w	r2, r1, r2
 8003478:	4013      	ands	r3, r2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0af      	beq.n	80033de <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347e:	4b5b      	ldr	r3, [pc, #364]	; (80035ec <HAL_RCC_OscConfig+0x650>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003486:	1d3b      	adds	r3, r7, #4
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	21f8      	movs	r1, #248	; 0xf8
 800348e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003496:	fa91 f1a1 	rbit	r1, r1
 800349a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800349e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80034a2:	fab1 f181 	clz	r1, r1
 80034a6:	b2c9      	uxtb	r1, r1
 80034a8:	408b      	lsls	r3, r1
 80034aa:	4950      	ldr	r1, [pc, #320]	; (80035ec <HAL_RCC_OscConfig+0x650>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	600b      	str	r3, [r1, #0]
 80034b0:	e06a      	b.n	8003588 <HAL_RCC_OscConfig+0x5ec>
 80034b2:	2301      	movs	r3, #1
 80034b4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80034bc:	fa93 f3a3 	rbit	r3, r3
 80034c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80034c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034c8:	fab3 f383 	clz	r3, r3
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	461a      	mov	r2, r3
 80034da:	2300      	movs	r3, #0
 80034dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034de:	f7fe fe51 	bl	8002184 <HAL_GetTick>
 80034e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e8:	f7fe fe4c 	bl	8002184 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d902      	bls.n	80034fe <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	f000 bc50 	b.w	8003d9e <HAL_RCC_OscConfig+0xe02>
 80034fe:	2302      	movs	r3, #2
 8003500:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003508:	fa93 f3a3 	rbit	r3, r3
 800350c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003514:	fab3 f383 	clz	r3, r3
 8003518:	b2db      	uxtb	r3, r3
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	b2db      	uxtb	r3, r3
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b01      	cmp	r3, #1
 8003526:	d102      	bne.n	800352e <HAL_RCC_OscConfig+0x592>
 8003528:	4b30      	ldr	r3, [pc, #192]	; (80035ec <HAL_RCC_OscConfig+0x650>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	e013      	b.n	8003556 <HAL_RCC_OscConfig+0x5ba>
 800352e:	2302      	movs	r3, #2
 8003530:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003538:	fa93 f3a3 	rbit	r3, r3
 800353c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003540:	2302      	movs	r3, #2
 8003542:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003546:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800354a:	fa93 f3a3 	rbit	r3, r3
 800354e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003552:	4b26      	ldr	r3, [pc, #152]	; (80035ec <HAL_RCC_OscConfig+0x650>)
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	2202      	movs	r2, #2
 8003558:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800355c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003560:	fa92 f2a2 	rbit	r2, r2
 8003564:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003568:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800356c:	fab2 f282 	clz	r2, r2
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	f042 0220 	orr.w	r2, r2, #32
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	f002 021f 	and.w	r2, r2, #31
 800357c:	2101      	movs	r1, #1
 800357e:	fa01 f202 	lsl.w	r2, r1, r2
 8003582:	4013      	ands	r3, r2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1af      	bne.n	80034e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003588:	1d3b      	adds	r3, r7, #4
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80da 	beq.w	800374c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003598:	1d3b      	adds	r3, r7, #4
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d069      	beq.n	8003676 <HAL_RCC_OscConfig+0x6da>
 80035a2:	2301      	movs	r3, #1
 80035a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035ac:	fa93 f3a3 	rbit	r3, r3
 80035b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80035b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b8:	fab3 f383 	clz	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <HAL_RCC_OscConfig+0x654>)
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	461a      	mov	r2, r3
 80035c8:	2301      	movs	r3, #1
 80035ca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035cc:	f7fe fdda 	bl	8002184 <HAL_GetTick>
 80035d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d4:	e00e      	b.n	80035f4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d6:	f7fe fdd5 	bl	8002184 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d906      	bls.n	80035f4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e3d9      	b.n	8003d9e <HAL_RCC_OscConfig+0xe02>
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000
 80035f0:	10908120 	.word	0x10908120
 80035f4:	2302      	movs	r3, #2
 80035f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003606:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800360a:	2202      	movs	r2, #2
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	fa93 f2a3 	rbit	r2, r3
 8003618:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003622:	2202      	movs	r2, #2
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	fa93 f2a3 	rbit	r2, r3
 8003630:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003634:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003636:	4ba5      	ldr	r3, [pc, #660]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 8003638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800363a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800363e:	2102      	movs	r1, #2
 8003640:	6019      	str	r1, [r3, #0]
 8003642:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	fa93 f1a3 	rbit	r1, r3
 800364c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003650:	6019      	str	r1, [r3, #0]
  return result;
 8003652:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	fab3 f383 	clz	r3, r3
 800365c:	b2db      	uxtb	r3, r3
 800365e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003662:	b2db      	uxtb	r3, r3
 8003664:	f003 031f 	and.w	r3, r3, #31
 8003668:	2101      	movs	r1, #1
 800366a:	fa01 f303 	lsl.w	r3, r1, r3
 800366e:	4013      	ands	r3, r2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0b0      	beq.n	80035d6 <HAL_RCC_OscConfig+0x63a>
 8003674:	e06a      	b.n	800374c <HAL_RCC_OscConfig+0x7b0>
 8003676:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	fa93 f2a3 	rbit	r2, r3
 8003688:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800368c:	601a      	str	r2, [r3, #0]
  return result;
 800368e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003692:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003694:	fab3 f383 	clz	r3, r3
 8003698:	b2db      	uxtb	r3, r3
 800369a:	461a      	mov	r2, r3
 800369c:	4b8c      	ldr	r3, [pc, #560]	; (80038d0 <HAL_RCC_OscConfig+0x934>)
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	461a      	mov	r2, r3
 80036a4:	2300      	movs	r3, #0
 80036a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a8:	f7fe fd6c 	bl	8002184 <HAL_GetTick>
 80036ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b0:	e009      	b.n	80036c6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036b2:	f7fe fd67 	bl	8002184 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e36b      	b.n	8003d9e <HAL_RCC_OscConfig+0xe02>
 80036c6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80036ca:	2202      	movs	r2, #2
 80036cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	fa93 f2a3 	rbit	r2, r3
 80036d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80036e2:	2202      	movs	r2, #2
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	fa93 f2a3 	rbit	r2, r3
 80036f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80036fa:	2202      	movs	r2, #2
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	fa93 f2a3 	rbit	r2, r3
 8003708:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800370c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370e:	4b6f      	ldr	r3, [pc, #444]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 8003710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003712:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003716:	2102      	movs	r1, #2
 8003718:	6019      	str	r1, [r3, #0]
 800371a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	fa93 f1a3 	rbit	r1, r3
 8003724:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003728:	6019      	str	r1, [r3, #0]
  return result;
 800372a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	2101      	movs	r1, #1
 8003742:	fa01 f303 	lsl.w	r3, r1, r3
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1b2      	bne.n	80036b2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800374c:	1d3b      	adds	r3, r7, #4
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 8158 	beq.w	8003a0c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375c:	2300      	movs	r3, #0
 800375e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003762:	4b5a      	ldr	r3, [pc, #360]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d112      	bne.n	8003794 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376e:	4b57      	ldr	r3, [pc, #348]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	4a56      	ldr	r2, [pc, #344]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 8003774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003778:	61d3      	str	r3, [r2, #28]
 800377a:	4b54      	ldr	r3, [pc, #336]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003782:	f107 0308 	add.w	r3, r7, #8
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	f107 0308 	add.w	r3, r7, #8
 800378c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800378e:	2301      	movs	r3, #1
 8003790:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003794:	4b4f      	ldr	r3, [pc, #316]	; (80038d4 <HAL_RCC_OscConfig+0x938>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d11a      	bne.n	80037d6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037a0:	4b4c      	ldr	r3, [pc, #304]	; (80038d4 <HAL_RCC_OscConfig+0x938>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a4b      	ldr	r2, [pc, #300]	; (80038d4 <HAL_RCC_OscConfig+0x938>)
 80037a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037aa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ac:	f7fe fcea 	bl	8002184 <HAL_GetTick>
 80037b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	e009      	b.n	80037ca <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b6:	f7fe fce5 	bl	8002184 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b64      	cmp	r3, #100	; 0x64
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e2e9      	b.n	8003d9e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ca:	4b42      	ldr	r3, [pc, #264]	; (80038d4 <HAL_RCC_OscConfig+0x938>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0ef      	beq.n	80037b6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d6:	1d3b      	adds	r3, r7, #4
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d106      	bne.n	80037ee <HAL_RCC_OscConfig+0x852>
 80037e0:	4b3a      	ldr	r3, [pc, #232]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	4a39      	ldr	r2, [pc, #228]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	6213      	str	r3, [r2, #32]
 80037ec:	e02f      	b.n	800384e <HAL_RCC_OscConfig+0x8b2>
 80037ee:	1d3b      	adds	r3, r7, #4
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10c      	bne.n	8003812 <HAL_RCC_OscConfig+0x876>
 80037f8:	4b34      	ldr	r3, [pc, #208]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	4a33      	ldr	r2, [pc, #204]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 80037fe:	f023 0301 	bic.w	r3, r3, #1
 8003802:	6213      	str	r3, [r2, #32]
 8003804:	4b31      	ldr	r3, [pc, #196]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	4a30      	ldr	r2, [pc, #192]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 800380a:	f023 0304 	bic.w	r3, r3, #4
 800380e:	6213      	str	r3, [r2, #32]
 8003810:	e01d      	b.n	800384e <HAL_RCC_OscConfig+0x8b2>
 8003812:	1d3b      	adds	r3, r7, #4
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2b05      	cmp	r3, #5
 800381a:	d10c      	bne.n	8003836 <HAL_RCC_OscConfig+0x89a>
 800381c:	4b2b      	ldr	r3, [pc, #172]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	4a2a      	ldr	r2, [pc, #168]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 8003822:	f043 0304 	orr.w	r3, r3, #4
 8003826:	6213      	str	r3, [r2, #32]
 8003828:	4b28      	ldr	r3, [pc, #160]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	4a27      	ldr	r2, [pc, #156]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	6213      	str	r3, [r2, #32]
 8003834:	e00b      	b.n	800384e <HAL_RCC_OscConfig+0x8b2>
 8003836:	4b25      	ldr	r3, [pc, #148]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	4a24      	ldr	r2, [pc, #144]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	6213      	str	r3, [r2, #32]
 8003842:	4b22      	ldr	r3, [pc, #136]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	4a21      	ldr	r2, [pc, #132]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 8003848:	f023 0304 	bic.w	r3, r3, #4
 800384c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800384e:	1d3b      	adds	r3, r7, #4
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d06b      	beq.n	8003930 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003858:	f7fe fc94 	bl	8002184 <HAL_GetTick>
 800385c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003860:	e00b      	b.n	800387a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fe fc8f 	bl	8002184 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003872:	4293      	cmp	r3, r2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e291      	b.n	8003d9e <HAL_RCC_OscConfig+0xe02>
 800387a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800387e:	2202      	movs	r2, #2
 8003880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003882:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	fa93 f2a3 	rbit	r2, r3
 800388c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003896:	2202      	movs	r2, #2
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	fa93 f2a3 	rbit	r2, r3
 80038a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80038a8:	601a      	str	r2, [r3, #0]
  return result;
 80038aa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80038ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b0:	fab3 f383 	clz	r3, r3
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	f043 0302 	orr.w	r3, r3, #2
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d109      	bne.n	80038d8 <HAL_RCC_OscConfig+0x93c>
 80038c4:	4b01      	ldr	r3, [pc, #4]	; (80038cc <HAL_RCC_OscConfig+0x930>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	e014      	b.n	80038f4 <HAL_RCC_OscConfig+0x958>
 80038ca:	bf00      	nop
 80038cc:	40021000 	.word	0x40021000
 80038d0:	10908120 	.word	0x10908120
 80038d4:	40007000 	.word	0x40007000
 80038d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80038dc:	2202      	movs	r2, #2
 80038de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	fa93 f2a3 	rbit	r2, r3
 80038ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	4bbb      	ldr	r3, [pc, #748]	; (8003be0 <HAL_RCC_OscConfig+0xc44>)
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80038f8:	2102      	movs	r1, #2
 80038fa:	6011      	str	r1, [r2, #0]
 80038fc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	fa92 f1a2 	rbit	r1, r2
 8003906:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800390a:	6011      	str	r1, [r2, #0]
  return result;
 800390c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	fab2 f282 	clz	r2, r2
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	f002 021f 	and.w	r2, r2, #31
 8003922:	2101      	movs	r1, #1
 8003924:	fa01 f202 	lsl.w	r2, r1, r2
 8003928:	4013      	ands	r3, r2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d099      	beq.n	8003862 <HAL_RCC_OscConfig+0x8c6>
 800392e:	e063      	b.n	80039f8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003930:	f7fe fc28 	bl	8002184 <HAL_GetTick>
 8003934:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003938:	e00b      	b.n	8003952 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800393a:	f7fe fc23 	bl	8002184 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f241 3288 	movw	r2, #5000	; 0x1388
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e225      	b.n	8003d9e <HAL_RCC_OscConfig+0xe02>
 8003952:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003956:	2202      	movs	r2, #2
 8003958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	fa93 f2a3 	rbit	r2, r3
 8003964:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800396e:	2202      	movs	r2, #2
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	fa93 f2a3 	rbit	r2, r3
 800397c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003980:	601a      	str	r2, [r3, #0]
  return result;
 8003982:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003986:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003988:	fab3 f383 	clz	r3, r3
 800398c:	b2db      	uxtb	r3, r3
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	b2db      	uxtb	r3, r3
 8003992:	f043 0302 	orr.w	r3, r3, #2
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d102      	bne.n	80039a2 <HAL_RCC_OscConfig+0xa06>
 800399c:	4b90      	ldr	r3, [pc, #576]	; (8003be0 <HAL_RCC_OscConfig+0xc44>)
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	e00d      	b.n	80039be <HAL_RCC_OscConfig+0xa22>
 80039a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80039a6:	2202      	movs	r2, #2
 80039a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	fa93 f2a3 	rbit	r2, r3
 80039b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	4b89      	ldr	r3, [pc, #548]	; (8003be0 <HAL_RCC_OscConfig+0xc44>)
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80039c2:	2102      	movs	r1, #2
 80039c4:	6011      	str	r1, [r2, #0]
 80039c6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	fa92 f1a2 	rbit	r1, r2
 80039d0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80039d4:	6011      	str	r1, [r2, #0]
  return result;
 80039d6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	fab2 f282 	clz	r2, r2
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	f002 021f 	and.w	r2, r2, #31
 80039ec:	2101      	movs	r1, #1
 80039ee:	fa01 f202 	lsl.w	r2, r1, r2
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1a0      	bne.n	800393a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d105      	bne.n	8003a0c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a00:	4b77      	ldr	r3, [pc, #476]	; (8003be0 <HAL_RCC_OscConfig+0xc44>)
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	4a76      	ldr	r2, [pc, #472]	; (8003be0 <HAL_RCC_OscConfig+0xc44>)
 8003a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a0a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a0c:	1d3b      	adds	r3, r7, #4
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 81c2 	beq.w	8003d9c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a18:	4b71      	ldr	r3, [pc, #452]	; (8003be0 <HAL_RCC_OscConfig+0xc44>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f003 030c 	and.w	r3, r3, #12
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	f000 819c 	beq.w	8003d5e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a26:	1d3b      	adds	r3, r7, #4
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	f040 8114 	bne.w	8003c5a <HAL_RCC_OscConfig+0xcbe>
 8003a32:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003a36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	fa93 f2a3 	rbit	r2, r3
 8003a46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a4a:	601a      	str	r2, [r3, #0]
  return result;
 8003a4c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a50:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a52:	fab3 f383 	clz	r3, r3
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	461a      	mov	r2, r3
 8003a64:	2300      	movs	r3, #0
 8003a66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fe fb8c 	bl	8002184 <HAL_GetTick>
 8003a6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a70:	e009      	b.n	8003a86 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a72:	f7fe fb87 	bl	8002184 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e18b      	b.n	8003d9e <HAL_RCC_OscConfig+0xe02>
 8003a86:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003a8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	fa93 f2a3 	rbit	r2, r3
 8003a9a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003a9e:	601a      	str	r2, [r3, #0]
  return result;
 8003aa0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003aa4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa6:	fab3 f383 	clz	r3, r3
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	095b      	lsrs	r3, r3, #5
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d102      	bne.n	8003ac0 <HAL_RCC_OscConfig+0xb24>
 8003aba:	4b49      	ldr	r3, [pc, #292]	; (8003be0 <HAL_RCC_OscConfig+0xc44>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	e01b      	b.n	8003af8 <HAL_RCC_OscConfig+0xb5c>
 8003ac0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003ac4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ac8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	fa93 f2a3 	rbit	r2, r3
 8003ad4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003ade:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	fa93 f2a3 	rbit	r2, r3
 8003aee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	4b3a      	ldr	r3, [pc, #232]	; (8003be0 <HAL_RCC_OscConfig+0xc44>)
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003afc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b00:	6011      	str	r1, [r2, #0]
 8003b02:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	fa92 f1a2 	rbit	r1, r2
 8003b0c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003b10:	6011      	str	r1, [r2, #0]
  return result;
 8003b12:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	fab2 f282 	clz	r2, r2
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	f042 0220 	orr.w	r2, r2, #32
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	f002 021f 	and.w	r2, r2, #31
 8003b28:	2101      	movs	r1, #1
 8003b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b2e:	4013      	ands	r3, r2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d19e      	bne.n	8003a72 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b34:	4b2a      	ldr	r3, [pc, #168]	; (8003be0 <HAL_RCC_OscConfig+0xc44>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b3c:	1d3b      	adds	r3, r7, #4
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b42:	1d3b      	adds	r3, r7, #4
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	4925      	ldr	r1, [pc, #148]	; (8003be0 <HAL_RCC_OscConfig+0xc44>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	604b      	str	r3, [r1, #4]
 8003b50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	fa93 f2a3 	rbit	r2, r3
 8003b64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b68:	601a      	str	r2, [r3, #0]
  return result;
 8003b6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b6e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b70:	fab3 f383 	clz	r3, r3
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	461a      	mov	r2, r3
 8003b82:	2301      	movs	r3, #1
 8003b84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b86:	f7fe fafd 	bl	8002184 <HAL_GetTick>
 8003b8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b8e:	e009      	b.n	8003ba4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b90:	f7fe faf8 	bl	8002184 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e0fc      	b.n	8003d9e <HAL_RCC_OscConfig+0xe02>
 8003ba4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ba8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	fa93 f2a3 	rbit	r2, r3
 8003bb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003bbc:	601a      	str	r2, [r3, #0]
  return result;
 8003bbe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003bc2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bc4:	fab3 f383 	clz	r3, r3
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d105      	bne.n	8003be4 <HAL_RCC_OscConfig+0xc48>
 8003bd8:	4b01      	ldr	r3, [pc, #4]	; (8003be0 <HAL_RCC_OscConfig+0xc44>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	e01e      	b.n	8003c1c <HAL_RCC_OscConfig+0xc80>
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000
 8003be4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003be8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	fa93 f2a3 	rbit	r2, r3
 8003bf8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	fa93 f2a3 	rbit	r2, r3
 8003c12:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	4b63      	ldr	r3, [pc, #396]	; (8003da8 <HAL_RCC_OscConfig+0xe0c>)
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003c20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c24:	6011      	str	r1, [r2, #0]
 8003c26:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	fa92 f1a2 	rbit	r1, r2
 8003c30:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003c34:	6011      	str	r1, [r2, #0]
  return result;
 8003c36:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003c3a:	6812      	ldr	r2, [r2, #0]
 8003c3c:	fab2 f282 	clz	r2, r2
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	f042 0220 	orr.w	r2, r2, #32
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	f002 021f 	and.w	r2, r2, #31
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c52:	4013      	ands	r3, r2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d09b      	beq.n	8003b90 <HAL_RCC_OscConfig+0xbf4>
 8003c58:	e0a0      	b.n	8003d9c <HAL_RCC_OscConfig+0xe00>
 8003c5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	fa93 f2a3 	rbit	r2, r3
 8003c6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c72:	601a      	str	r2, [r3, #0]
  return result;
 8003c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c78:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c90:	f7fe fa78 	bl	8002184 <HAL_GetTick>
 8003c94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c98:	e009      	b.n	8003cae <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c9a:	f7fe fa73 	bl	8002184 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e077      	b.n	8003d9e <HAL_RCC_OscConfig+0xe02>
 8003cae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	fa93 f2a3 	rbit	r2, r3
 8003cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cc6:	601a      	str	r2, [r3, #0]
  return result;
 8003cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ccc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cce:	fab3 f383 	clz	r3, r3
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	095b      	lsrs	r3, r3, #5
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d102      	bne.n	8003ce8 <HAL_RCC_OscConfig+0xd4c>
 8003ce2:	4b31      	ldr	r3, [pc, #196]	; (8003da8 <HAL_RCC_OscConfig+0xe0c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	e01b      	b.n	8003d20 <HAL_RCC_OscConfig+0xd84>
 8003ce8:	f107 0320 	add.w	r3, r7, #32
 8003cec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	f107 0320 	add.w	r3, r7, #32
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	fa93 f2a3 	rbit	r2, r3
 8003cfc:	f107 031c 	add.w	r3, r7, #28
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	f107 0318 	add.w	r3, r7, #24
 8003d06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	f107 0318 	add.w	r3, r7, #24
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	fa93 f2a3 	rbit	r2, r3
 8003d16:	f107 0314 	add.w	r3, r7, #20
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	4b22      	ldr	r3, [pc, #136]	; (8003da8 <HAL_RCC_OscConfig+0xe0c>)
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	f107 0210 	add.w	r2, r7, #16
 8003d24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d28:	6011      	str	r1, [r2, #0]
 8003d2a:	f107 0210 	add.w	r2, r7, #16
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	fa92 f1a2 	rbit	r1, r2
 8003d34:	f107 020c 	add.w	r2, r7, #12
 8003d38:	6011      	str	r1, [r2, #0]
  return result;
 8003d3a:	f107 020c 	add.w	r2, r7, #12
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	fab2 f282 	clz	r2, r2
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	f042 0220 	orr.w	r2, r2, #32
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	f002 021f 	and.w	r2, r2, #31
 8003d50:	2101      	movs	r1, #1
 8003d52:	fa01 f202 	lsl.w	r2, r1, r2
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d19e      	bne.n	8003c9a <HAL_RCC_OscConfig+0xcfe>
 8003d5c:	e01e      	b.n	8003d9c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e018      	b.n	8003d9e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <HAL_RCC_OscConfig+0xe0c>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d74:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d7c:	1d3b      	adds	r3, r7, #4
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d108      	bne.n	8003d98 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003d86:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d8e:	1d3b      	adds	r3, r7, #4
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40021000 	.word	0x40021000

08003dac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b09e      	sub	sp, #120	; 0x78
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e162      	b.n	800408a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc4:	4b90      	ldr	r3, [pc, #576]	; (8004008 <HAL_RCC_ClockConfig+0x25c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d910      	bls.n	8003df4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd2:	4b8d      	ldr	r3, [pc, #564]	; (8004008 <HAL_RCC_ClockConfig+0x25c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 0207 	bic.w	r2, r3, #7
 8003dda:	498b      	ldr	r1, [pc, #556]	; (8004008 <HAL_RCC_ClockConfig+0x25c>)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b89      	ldr	r3, [pc, #548]	; (8004008 <HAL_RCC_ClockConfig+0x25c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e14a      	b.n	800408a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e00:	4b82      	ldr	r3, [pc, #520]	; (800400c <HAL_RCC_ClockConfig+0x260>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	497f      	ldr	r1, [pc, #508]	; (800400c <HAL_RCC_ClockConfig+0x260>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 80dc 	beq.w	8003fd8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d13c      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xf6>
 8003e28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e2c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e30:	fa93 f3a3 	rbit	r3, r3
 8003e34:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e38:	fab3 f383 	clz	r3, r3
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f043 0301 	orr.w	r3, r3, #1
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d102      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xa6>
 8003e4c:	4b6f      	ldr	r3, [pc, #444]	; (800400c <HAL_RCC_ClockConfig+0x260>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	e00f      	b.n	8003e72 <HAL_RCC_ClockConfig+0xc6>
 8003e52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e5a:	fa93 f3a3 	rbit	r3, r3
 8003e5e:	667b      	str	r3, [r7, #100]	; 0x64
 8003e60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e64:	663b      	str	r3, [r7, #96]	; 0x60
 8003e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e68:	fa93 f3a3 	rbit	r3, r3
 8003e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e6e:	4b67      	ldr	r3, [pc, #412]	; (800400c <HAL_RCC_ClockConfig+0x260>)
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e76:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e7a:	fa92 f2a2 	rbit	r2, r2
 8003e7e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003e80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e82:	fab2 f282 	clz	r2, r2
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	f042 0220 	orr.w	r2, r2, #32
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	f002 021f 	and.w	r2, r2, #31
 8003e92:	2101      	movs	r1, #1
 8003e94:	fa01 f202 	lsl.w	r2, r1, r2
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d17b      	bne.n	8003f96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e0f3      	b.n	800408a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d13c      	bne.n	8003f24 <HAL_RCC_ClockConfig+0x178>
 8003eaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb2:	fa93 f3a3 	rbit	r3, r3
 8003eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eba:	fab3 f383 	clz	r3, r3
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d102      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0x128>
 8003ece:	4b4f      	ldr	r3, [pc, #316]	; (800400c <HAL_RCC_ClockConfig+0x260>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	e00f      	b.n	8003ef4 <HAL_RCC_ClockConfig+0x148>
 8003ed4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ed8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003edc:	fa93 f3a3 	rbit	r3, r3
 8003ee0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ee2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ee6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eea:	fa93 f3a3 	rbit	r3, r3
 8003eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ef0:	4b46      	ldr	r3, [pc, #280]	; (800400c <HAL_RCC_ClockConfig+0x260>)
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ef8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003efa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003efc:	fa92 f2a2 	rbit	r2, r2
 8003f00:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f04:	fab2 f282 	clz	r2, r2
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	f042 0220 	orr.w	r2, r2, #32
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	f002 021f 	and.w	r2, r2, #31
 8003f14:	2101      	movs	r1, #1
 8003f16:	fa01 f202 	lsl.w	r2, r1, r2
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d13a      	bne.n	8003f96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0b2      	b.n	800408a <HAL_RCC_ClockConfig+0x2de>
 8003f24:	2302      	movs	r3, #2
 8003f26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2a:	fa93 f3a3 	rbit	r3, r3
 8003f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f32:	fab3 f383 	clz	r3, r3
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	095b      	lsrs	r3, r3, #5
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d102      	bne.n	8003f4c <HAL_RCC_ClockConfig+0x1a0>
 8003f46:	4b31      	ldr	r3, [pc, #196]	; (800400c <HAL_RCC_ClockConfig+0x260>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	e00d      	b.n	8003f68 <HAL_RCC_ClockConfig+0x1bc>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f52:	fa93 f3a3 	rbit	r3, r3
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
 8003f58:	2302      	movs	r3, #2
 8003f5a:	623b      	str	r3, [r7, #32]
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	fa93 f3a3 	rbit	r3, r3
 8003f62:	61fb      	str	r3, [r7, #28]
 8003f64:	4b29      	ldr	r3, [pc, #164]	; (800400c <HAL_RCC_ClockConfig+0x260>)
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	2202      	movs	r2, #2
 8003f6a:	61ba      	str	r2, [r7, #24]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	fa92 f2a2 	rbit	r2, r2
 8003f72:	617a      	str	r2, [r7, #20]
  return result;
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	fab2 f282 	clz	r2, r2
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	f042 0220 	orr.w	r2, r2, #32
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	f002 021f 	and.w	r2, r2, #31
 8003f86:	2101      	movs	r1, #1
 8003f88:	fa01 f202 	lsl.w	r2, r1, r2
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e079      	b.n	800408a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f96:	4b1d      	ldr	r3, [pc, #116]	; (800400c <HAL_RCC_ClockConfig+0x260>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f023 0203 	bic.w	r2, r3, #3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	491a      	ldr	r1, [pc, #104]	; (800400c <HAL_RCC_ClockConfig+0x260>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fa8:	f7fe f8ec 	bl	8002184 <HAL_GetTick>
 8003fac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb0:	f7fe f8e8 	bl	8002184 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e061      	b.n	800408a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc6:	4b11      	ldr	r3, [pc, #68]	; (800400c <HAL_RCC_ClockConfig+0x260>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f003 020c 	and.w	r2, r3, #12
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d1eb      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <HAL_RCC_ClockConfig+0x25c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d214      	bcs.n	8004010 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe6:	4b08      	ldr	r3, [pc, #32]	; (8004008 <HAL_RCC_ClockConfig+0x25c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f023 0207 	bic.w	r2, r3, #7
 8003fee:	4906      	ldr	r1, [pc, #24]	; (8004008 <HAL_RCC_ClockConfig+0x25c>)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff6:	4b04      	ldr	r3, [pc, #16]	; (8004008 <HAL_RCC_ClockConfig+0x25c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d005      	beq.n	8004010 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e040      	b.n	800408a <HAL_RCC_ClockConfig+0x2de>
 8004008:	40022000 	.word	0x40022000
 800400c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800401c:	4b1d      	ldr	r3, [pc, #116]	; (8004094 <HAL_RCC_ClockConfig+0x2e8>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	491a      	ldr	r1, [pc, #104]	; (8004094 <HAL_RCC_ClockConfig+0x2e8>)
 800402a:	4313      	orrs	r3, r2
 800402c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d009      	beq.n	800404e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800403a:	4b16      	ldr	r3, [pc, #88]	; (8004094 <HAL_RCC_ClockConfig+0x2e8>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4912      	ldr	r1, [pc, #72]	; (8004094 <HAL_RCC_ClockConfig+0x2e8>)
 800404a:	4313      	orrs	r3, r2
 800404c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800404e:	f000 f829 	bl	80040a4 <HAL_RCC_GetSysClockFreq>
 8004052:	4601      	mov	r1, r0
 8004054:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <HAL_RCC_ClockConfig+0x2e8>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800405c:	22f0      	movs	r2, #240	; 0xf0
 800405e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	fa92 f2a2 	rbit	r2, r2
 8004066:	60fa      	str	r2, [r7, #12]
  return result;
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	fab2 f282 	clz	r2, r2
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	40d3      	lsrs	r3, r2
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <HAL_RCC_ClockConfig+0x2ec>)
 8004074:	5cd3      	ldrb	r3, [r2, r3]
 8004076:	fa21 f303 	lsr.w	r3, r1, r3
 800407a:	4a08      	ldr	r2, [pc, #32]	; (800409c <HAL_RCC_ClockConfig+0x2f0>)
 800407c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800407e:	4b08      	ldr	r3, [pc, #32]	; (80040a0 <HAL_RCC_ClockConfig+0x2f4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe f83a 	bl	80020fc <HAL_InitTick>
  
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3778      	adds	r7, #120	; 0x78
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40021000 	.word	0x40021000
 8004098:	080077c0 	.word	0x080077c0
 800409c:	20000000 	.word	0x20000000
 80040a0:	20000004 	.word	0x20000004

080040a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b08b      	sub	sp, #44	; 0x2c
 80040a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
 80040ae:	2300      	movs	r3, #0
 80040b0:	61bb      	str	r3, [r7, #24]
 80040b2:	2300      	movs	r3, #0
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80040be:	4b29      	ldr	r3, [pc, #164]	; (8004164 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f003 030c 	and.w	r3, r3, #12
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d002      	beq.n	80040d4 <HAL_RCC_GetSysClockFreq+0x30>
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d003      	beq.n	80040da <HAL_RCC_GetSysClockFreq+0x36>
 80040d2:	e03c      	b.n	800414e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040d4:	4b24      	ldr	r3, [pc, #144]	; (8004168 <HAL_RCC_GetSysClockFreq+0xc4>)
 80040d6:	623b      	str	r3, [r7, #32]
      break;
 80040d8:	e03c      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80040e0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80040e4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	fa92 f2a2 	rbit	r2, r2
 80040ec:	607a      	str	r2, [r7, #4]
  return result;
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	fab2 f282 	clz	r2, r2
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	40d3      	lsrs	r3, r2
 80040f8:	4a1c      	ldr	r2, [pc, #112]	; (800416c <HAL_RCC_GetSysClockFreq+0xc8>)
 80040fa:	5cd3      	ldrb	r3, [r2, r3]
 80040fc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80040fe:	4b19      	ldr	r3, [pc, #100]	; (8004164 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	220f      	movs	r2, #15
 8004108:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	fa92 f2a2 	rbit	r2, r2
 8004110:	60fa      	str	r2, [r7, #12]
  return result;
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	fab2 f282 	clz	r2, r2
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	40d3      	lsrs	r3, r2
 800411c:	4a14      	ldr	r2, [pc, #80]	; (8004170 <HAL_RCC_GetSysClockFreq+0xcc>)
 800411e:	5cd3      	ldrb	r3, [r2, r3]
 8004120:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d008      	beq.n	800413e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800412c:	4a0e      	ldr	r2, [pc, #56]	; (8004168 <HAL_RCC_GetSysClockFreq+0xc4>)
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	fbb2 f2f3 	udiv	r2, r2, r3
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	fb02 f303 	mul.w	r3, r2, r3
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
 800413c:	e004      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	4a0c      	ldr	r2, [pc, #48]	; (8004174 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004142:	fb02 f303 	mul.w	r3, r2, r3
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	623b      	str	r3, [r7, #32]
      break;
 800414c:	e002      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800414e:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004150:	623b      	str	r3, [r7, #32]
      break;
 8004152:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004154:	6a3b      	ldr	r3, [r7, #32]
}
 8004156:	4618      	mov	r0, r3
 8004158:	372c      	adds	r7, #44	; 0x2c
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40021000 	.word	0x40021000
 8004168:	00f42400 	.word	0x00f42400
 800416c:	080077d8 	.word	0x080077d8
 8004170:	080077e8 	.word	0x080077e8
 8004174:	003d0900 	.word	0x003d0900
 8004178:	007a1200 	.word	0x007a1200

0800417c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004180:	4b03      	ldr	r3, [pc, #12]	; (8004190 <HAL_RCC_GetHCLKFreq+0x14>)
 8004182:	681b      	ldr	r3, [r3, #0]
}
 8004184:	4618      	mov	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	20000000 	.word	0x20000000

08004194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800419a:	f7ff ffef 	bl	800417c <HAL_RCC_GetHCLKFreq>
 800419e:	4601      	mov	r1, r0
 80041a0:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041a8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80041ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	fa92 f2a2 	rbit	r2, r2
 80041b4:	603a      	str	r2, [r7, #0]
  return result;
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	fab2 f282 	clz	r2, r2
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	40d3      	lsrs	r3, r2
 80041c0:	4a04      	ldr	r2, [pc, #16]	; (80041d4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80041c2:	5cd3      	ldrb	r3, [r2, r3]
 80041c4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80041c8:	4618      	mov	r0, r3
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40021000 	.word	0x40021000
 80041d4:	080077d0 	.word	0x080077d0

080041d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80041de:	f7ff ffcd 	bl	800417c <HAL_RCC_GetHCLKFreq>
 80041e2:	4601      	mov	r1, r0
 80041e4:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80041ec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80041f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	fa92 f2a2 	rbit	r2, r2
 80041f8:	603a      	str	r2, [r7, #0]
  return result;
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	fab2 f282 	clz	r2, r2
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	40d3      	lsrs	r3, r2
 8004204:	4a04      	ldr	r2, [pc, #16]	; (8004218 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004206:	5cd3      	ldrb	r3, [r2, r3]
 8004208:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40021000 	.word	0x40021000
 8004218:	080077d0 	.word	0x080077d0

0800421c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b092      	sub	sp, #72	; 0x48
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800422c:	2300      	movs	r3, #0
 800422e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 80cd 	beq.w	80043da <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004240:	4b86      	ldr	r3, [pc, #536]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10e      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800424c:	4b83      	ldr	r3, [pc, #524]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	4a82      	ldr	r2, [pc, #520]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004256:	61d3      	str	r3, [r2, #28]
 8004258:	4b80      	ldr	r3, [pc, #512]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004264:	2301      	movs	r3, #1
 8004266:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426a:	4b7d      	ldr	r3, [pc, #500]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004272:	2b00      	cmp	r3, #0
 8004274:	d118      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004276:	4b7a      	ldr	r3, [pc, #488]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a79      	ldr	r2, [pc, #484]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800427c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004280:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004282:	f7fd ff7f 	bl	8002184 <HAL_GetTick>
 8004286:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004288:	e008      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800428a:	f7fd ff7b 	bl	8002184 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b64      	cmp	r3, #100	; 0x64
 8004296:	d901      	bls.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e0db      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429c:	4b70      	ldr	r3, [pc, #448]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0f0      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042a8:	4b6c      	ldr	r3, [pc, #432]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d07d      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d076      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042c6:	4b65      	ldr	r3, [pc, #404]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042d4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	fa93 f3a3 	rbit	r3, r3
 80042dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042e0:	fab3 f383 	clz	r3, r3
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	4b5e      	ldr	r3, [pc, #376]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	461a      	mov	r2, r3
 80042f0:	2301      	movs	r3, #1
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004304:	fab3 f383 	clz	r3, r3
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	4b55      	ldr	r3, [pc, #340]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	461a      	mov	r2, r3
 8004314:	2300      	movs	r3, #0
 8004316:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004318:	4a50      	ldr	r2, [pc, #320]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800431a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800431c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800431e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d045      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004328:	f7fd ff2c 	bl	8002184 <HAL_GetTick>
 800432c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432e:	e00a      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004330:	f7fd ff28 	bl	8002184 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	; 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e086      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004346:	2302      	movs	r3, #2
 8004348:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	fa93 f3a3 	rbit	r3, r3
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
 8004352:	2302      	movs	r3, #2
 8004354:	623b      	str	r3, [r7, #32]
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	fa93 f3a3 	rbit	r3, r3
 800435c:	61fb      	str	r3, [r7, #28]
  return result;
 800435e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004360:	fab3 f383 	clz	r3, r3
 8004364:	b2db      	uxtb	r3, r3
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	b2db      	uxtb	r3, r3
 800436a:	f043 0302 	orr.w	r3, r3, #2
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d102      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004374:	4b39      	ldr	r3, [pc, #228]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	e007      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800437a:	2302      	movs	r3, #2
 800437c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	fa93 f3a3 	rbit	r3, r3
 8004384:	617b      	str	r3, [r7, #20]
 8004386:	4b35      	ldr	r3, [pc, #212]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	2202      	movs	r2, #2
 800438c:	613a      	str	r2, [r7, #16]
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	fa92 f2a2 	rbit	r2, r2
 8004394:	60fa      	str	r2, [r7, #12]
  return result;
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	fab2 f282 	clz	r2, r2
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	f002 021f 	and.w	r2, r2, #31
 80043a8:	2101      	movs	r1, #1
 80043aa:	fa01 f202 	lsl.w	r2, r1, r2
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0bd      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80043b4:	4b29      	ldr	r3, [pc, #164]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	4926      	ldr	r1, [pc, #152]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80043c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d105      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ce:	4b23      	ldr	r3, [pc, #140]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	4a22      	ldr	r2, [pc, #136]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d008      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043e6:	4b1d      	ldr	r3, [pc, #116]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	f023 0203 	bic.w	r2, r3, #3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	491a      	ldr	r1, [pc, #104]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004404:	4b15      	ldr	r3, [pc, #84]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004408:	f023 0210 	bic.w	r2, r3, #16
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4912      	ldr	r1, [pc, #72]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004412:	4313      	orrs	r3, r2
 8004414:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441e:	2b00      	cmp	r3, #0
 8004420:	d008      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004422:	4b0e      	ldr	r3, [pc, #56]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	490b      	ldr	r1, [pc, #44]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004430:	4313      	orrs	r3, r2
 8004432:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d008      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004440:	4b06      	ldr	r3, [pc, #24]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	4903      	ldr	r1, [pc, #12]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800444e:	4313      	orrs	r3, r2
 8004450:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3748      	adds	r7, #72	; 0x48
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40021000 	.word	0x40021000
 8004460:	40007000 	.word	0x40007000
 8004464:	10908100 	.word	0x10908100

08004468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e049      	b.n	800450e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fd fbd4 	bl	8001c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4619      	mov	r1, r3
 80044a6:	4610      	mov	r0, r2
 80044a8:	f001 f870 	bl	800558c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e049      	b.n	80045bc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d106      	bne.n	8004542 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7fd fb1d 	bl	8001b7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2202      	movs	r2, #2
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3304      	adds	r3, #4
 8004552:	4619      	mov	r1, r3
 8004554:	4610      	mov	r0, r2
 8004556:	f001 f819 	bl	800558c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d109      	bne.n	80045e8 <HAL_TIM_PWM_Start+0x24>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	bf14      	ite	ne
 80045e0:	2301      	movne	r3, #1
 80045e2:	2300      	moveq	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	e03c      	b.n	8004662 <HAL_TIM_PWM_Start+0x9e>
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d109      	bne.n	8004602 <HAL_TIM_PWM_Start+0x3e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	bf14      	ite	ne
 80045fa:	2301      	movne	r3, #1
 80045fc:	2300      	moveq	r3, #0
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	e02f      	b.n	8004662 <HAL_TIM_PWM_Start+0x9e>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b08      	cmp	r3, #8
 8004606:	d109      	bne.n	800461c <HAL_TIM_PWM_Start+0x58>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b01      	cmp	r3, #1
 8004612:	bf14      	ite	ne
 8004614:	2301      	movne	r3, #1
 8004616:	2300      	moveq	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	e022      	b.n	8004662 <HAL_TIM_PWM_Start+0x9e>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b0c      	cmp	r3, #12
 8004620:	d109      	bne.n	8004636 <HAL_TIM_PWM_Start+0x72>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b01      	cmp	r3, #1
 800462c:	bf14      	ite	ne
 800462e:	2301      	movne	r3, #1
 8004630:	2300      	moveq	r3, #0
 8004632:	b2db      	uxtb	r3, r3
 8004634:	e015      	b.n	8004662 <HAL_TIM_PWM_Start+0x9e>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b10      	cmp	r3, #16
 800463a:	d109      	bne.n	8004650 <HAL_TIM_PWM_Start+0x8c>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b01      	cmp	r3, #1
 8004646:	bf14      	ite	ne
 8004648:	2301      	movne	r3, #1
 800464a:	2300      	moveq	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	e008      	b.n	8004662 <HAL_TIM_PWM_Start+0x9e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b01      	cmp	r3, #1
 800465a:	bf14      	ite	ne
 800465c:	2301      	movne	r3, #1
 800465e:	2300      	moveq	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e088      	b.n	800477c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d104      	bne.n	800467a <HAL_TIM_PWM_Start+0xb6>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004678:	e023      	b.n	80046c2 <HAL_TIM_PWM_Start+0xfe>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b04      	cmp	r3, #4
 800467e:	d104      	bne.n	800468a <HAL_TIM_PWM_Start+0xc6>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004688:	e01b      	b.n	80046c2 <HAL_TIM_PWM_Start+0xfe>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b08      	cmp	r3, #8
 800468e:	d104      	bne.n	800469a <HAL_TIM_PWM_Start+0xd6>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004698:	e013      	b.n	80046c2 <HAL_TIM_PWM_Start+0xfe>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b0c      	cmp	r3, #12
 800469e:	d104      	bne.n	80046aa <HAL_TIM_PWM_Start+0xe6>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046a8:	e00b      	b.n	80046c2 <HAL_TIM_PWM_Start+0xfe>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b10      	cmp	r3, #16
 80046ae:	d104      	bne.n	80046ba <HAL_TIM_PWM_Start+0xf6>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046b8:	e003      	b.n	80046c2 <HAL_TIM_PWM_Start+0xfe>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2201      	movs	r2, #1
 80046c8:	6839      	ldr	r1, [r7, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f001 fcbc 	bl	8006048 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a2b      	ldr	r2, [pc, #172]	; (8004784 <HAL_TIM_PWM_Start+0x1c0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00e      	beq.n	80046f8 <HAL_TIM_PWM_Start+0x134>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a2a      	ldr	r2, [pc, #168]	; (8004788 <HAL_TIM_PWM_Start+0x1c4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d009      	beq.n	80046f8 <HAL_TIM_PWM_Start+0x134>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a28      	ldr	r2, [pc, #160]	; (800478c <HAL_TIM_PWM_Start+0x1c8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_TIM_PWM_Start+0x134>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a27      	ldr	r2, [pc, #156]	; (8004790 <HAL_TIM_PWM_Start+0x1cc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d101      	bne.n	80046fc <HAL_TIM_PWM_Start+0x138>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <HAL_TIM_PWM_Start+0x13a>
 80046fc:	2300      	movs	r3, #0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004710:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1b      	ldr	r2, [pc, #108]	; (8004784 <HAL_TIM_PWM_Start+0x1c0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00e      	beq.n	800473a <HAL_TIM_PWM_Start+0x176>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004724:	d009      	beq.n	800473a <HAL_TIM_PWM_Start+0x176>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1a      	ldr	r2, [pc, #104]	; (8004794 <HAL_TIM_PWM_Start+0x1d0>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d004      	beq.n	800473a <HAL_TIM_PWM_Start+0x176>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a14      	ldr	r2, [pc, #80]	; (8004788 <HAL_TIM_PWM_Start+0x1c4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d115      	bne.n	8004766 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	4b15      	ldr	r3, [pc, #84]	; (8004798 <HAL_TIM_PWM_Start+0x1d4>)
 8004742:	4013      	ands	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b06      	cmp	r3, #6
 800474a:	d015      	beq.n	8004778 <HAL_TIM_PWM_Start+0x1b4>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004752:	d011      	beq.n	8004778 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004764:	e008      	b.n	8004778 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	e000      	b.n	800477a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004778:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40012c00 	.word	0x40012c00
 8004788:	40014000 	.word	0x40014000
 800478c:	40014400 	.word	0x40014400
 8004790:	40014800 	.word	0x40014800
 8004794:	40000400 	.word	0x40000400
 8004798:	00010007 	.word	0x00010007

0800479c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d109      	bne.n	80047c8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	bf0c      	ite	eq
 80047c0:	2301      	moveq	r3, #1
 80047c2:	2300      	movne	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	e03c      	b.n	8004842 <HAL_TIM_PWM_Start_DMA+0xa6>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d109      	bne.n	80047e2 <HAL_TIM_PWM_Start_DMA+0x46>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	bf0c      	ite	eq
 80047da:	2301      	moveq	r3, #1
 80047dc:	2300      	movne	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	e02f      	b.n	8004842 <HAL_TIM_PWM_Start_DMA+0xa6>
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d109      	bne.n	80047fc <HAL_TIM_PWM_Start_DMA+0x60>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	bf0c      	ite	eq
 80047f4:	2301      	moveq	r3, #1
 80047f6:	2300      	movne	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	e022      	b.n	8004842 <HAL_TIM_PWM_Start_DMA+0xa6>
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b0c      	cmp	r3, #12
 8004800:	d109      	bne.n	8004816 <HAL_TIM_PWM_Start_DMA+0x7a>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	bf0c      	ite	eq
 800480e:	2301      	moveq	r3, #1
 8004810:	2300      	movne	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	e015      	b.n	8004842 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b10      	cmp	r3, #16
 800481a:	d109      	bne.n	8004830 <HAL_TIM_PWM_Start_DMA+0x94>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	bf0c      	ite	eq
 8004828:	2301      	moveq	r3, #1
 800482a:	2300      	movne	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	e008      	b.n	8004842 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	bf0c      	ite	eq
 800483c:	2301      	moveq	r3, #1
 800483e:	2300      	movne	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8004846:	2302      	movs	r3, #2
 8004848:	e197      	b.n	8004b7a <HAL_TIM_PWM_Start_DMA+0x3de>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d109      	bne.n	8004864 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b01      	cmp	r3, #1
 800485a:	bf0c      	ite	eq
 800485c:	2301      	moveq	r3, #1
 800485e:	2300      	movne	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	e03c      	b.n	80048de <HAL_TIM_PWM_Start_DMA+0x142>
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b04      	cmp	r3, #4
 8004868:	d109      	bne.n	800487e <HAL_TIM_PWM_Start_DMA+0xe2>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b01      	cmp	r3, #1
 8004874:	bf0c      	ite	eq
 8004876:	2301      	moveq	r3, #1
 8004878:	2300      	movne	r3, #0
 800487a:	b2db      	uxtb	r3, r3
 800487c:	e02f      	b.n	80048de <HAL_TIM_PWM_Start_DMA+0x142>
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b08      	cmp	r3, #8
 8004882:	d109      	bne.n	8004898 <HAL_TIM_PWM_Start_DMA+0xfc>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b01      	cmp	r3, #1
 800488e:	bf0c      	ite	eq
 8004890:	2301      	moveq	r3, #1
 8004892:	2300      	movne	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	e022      	b.n	80048de <HAL_TIM_PWM_Start_DMA+0x142>
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b0c      	cmp	r3, #12
 800489c:	d109      	bne.n	80048b2 <HAL_TIM_PWM_Start_DMA+0x116>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	bf0c      	ite	eq
 80048aa:	2301      	moveq	r3, #1
 80048ac:	2300      	movne	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	e015      	b.n	80048de <HAL_TIM_PWM_Start_DMA+0x142>
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2b10      	cmp	r3, #16
 80048b6:	d109      	bne.n	80048cc <HAL_TIM_PWM_Start_DMA+0x130>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	bf0c      	ite	eq
 80048c4:	2301      	moveq	r3, #1
 80048c6:	2300      	movne	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	e008      	b.n	80048de <HAL_TIM_PWM_Start_DMA+0x142>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	bf0c      	ite	eq
 80048d8:	2301      	moveq	r3, #1
 80048da:	2300      	movne	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d034      	beq.n	800494c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d104      	bne.n	80048f2 <HAL_TIM_PWM_Start_DMA+0x156>
 80048e8:	887b      	ldrh	r3, [r7, #2]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e143      	b.n	8004b7a <HAL_TIM_PWM_Start_DMA+0x3de>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d104      	bne.n	8004902 <HAL_TIM_PWM_Start_DMA+0x166>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004900:	e026      	b.n	8004950 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b04      	cmp	r3, #4
 8004906:	d104      	bne.n	8004912 <HAL_TIM_PWM_Start_DMA+0x176>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004910:	e01e      	b.n	8004950 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b08      	cmp	r3, #8
 8004916:	d104      	bne.n	8004922 <HAL_TIM_PWM_Start_DMA+0x186>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004920:	e016      	b.n	8004950 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2b0c      	cmp	r3, #12
 8004926:	d104      	bne.n	8004932 <HAL_TIM_PWM_Start_DMA+0x196>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004930:	e00e      	b.n	8004950 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b10      	cmp	r3, #16
 8004936:	d104      	bne.n	8004942 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004940:	e006      	b.n	8004950 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2202      	movs	r2, #2
 8004946:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800494a:	e001      	b.n	8004950 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e114      	b.n	8004b7a <HAL_TIM_PWM_Start_DMA+0x3de>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b0c      	cmp	r3, #12
 8004954:	f200 80ae 	bhi.w	8004ab4 <HAL_TIM_PWM_Start_DMA+0x318>
 8004958:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800495a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495e:	bf00      	nop
 8004960:	08004995 	.word	0x08004995
 8004964:	08004ab5 	.word	0x08004ab5
 8004968:	08004ab5 	.word	0x08004ab5
 800496c:	08004ab5 	.word	0x08004ab5
 8004970:	080049dd 	.word	0x080049dd
 8004974:	08004ab5 	.word	0x08004ab5
 8004978:	08004ab5 	.word	0x08004ab5
 800497c:	08004ab5 	.word	0x08004ab5
 8004980:	08004a25 	.word	0x08004a25
 8004984:	08004ab5 	.word	0x08004ab5
 8004988:	08004ab5 	.word	0x08004ab5
 800498c:	08004ab5 	.word	0x08004ab5
 8004990:	08004a6d 	.word	0x08004a6d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	4a7a      	ldr	r2, [pc, #488]	; (8004b84 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800499a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	4a79      	ldr	r2, [pc, #484]	; (8004b88 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80049a2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	4a78      	ldr	r2, [pc, #480]	; (8004b8c <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3334      	adds	r3, #52	; 0x34
 80049b8:	461a      	mov	r2, r3
 80049ba:	887b      	ldrh	r3, [r7, #2]
 80049bc:	f7fd ffbc 	bl	8002938 <HAL_DMA_Start_IT>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e0d7      	b.n	8004b7a <HAL_TIM_PWM_Start_DMA+0x3de>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d8:	60da      	str	r2, [r3, #12]
      break;
 80049da:	e06e      	b.n	8004aba <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	4a68      	ldr	r2, [pc, #416]	; (8004b84 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80049e2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e8:	4a67      	ldr	r2, [pc, #412]	; (8004b88 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80049ea:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	4a66      	ldr	r2, [pc, #408]	; (8004b8c <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80049f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3338      	adds	r3, #56	; 0x38
 8004a00:	461a      	mov	r2, r3
 8004a02:	887b      	ldrh	r3, [r7, #2]
 8004a04:	f7fd ff98 	bl	8002938 <HAL_DMA_Start_IT>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e0b3      	b.n	8004b7a <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a20:	60da      	str	r2, [r3, #12]
      break;
 8004a22:	e04a      	b.n	8004aba <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	4a56      	ldr	r2, [pc, #344]	; (8004b84 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004a2a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	4a55      	ldr	r2, [pc, #340]	; (8004b88 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004a32:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	4a54      	ldr	r2, [pc, #336]	; (8004b8c <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8004a3a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	333c      	adds	r3, #60	; 0x3c
 8004a48:	461a      	mov	r2, r3
 8004a4a:	887b      	ldrh	r3, [r7, #2]
 8004a4c:	f7fd ff74 	bl	8002938 <HAL_DMA_Start_IT>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e08f      	b.n	8004b7a <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a68:	60da      	str	r2, [r3, #12]
      break;
 8004a6a:	e026      	b.n	8004aba <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	4a44      	ldr	r2, [pc, #272]	; (8004b84 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004a72:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a78:	4a43      	ldr	r2, [pc, #268]	; (8004b88 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004a7a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	4a42      	ldr	r2, [pc, #264]	; (8004b8c <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8004a82:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3340      	adds	r3, #64	; 0x40
 8004a90:	461a      	mov	r2, r3
 8004a92:	887b      	ldrh	r3, [r7, #2]
 8004a94:	f7fd ff50 	bl	8002938 <HAL_DMA_Start_IT>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e06b      	b.n	8004b7a <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ab0:	60da      	str	r2, [r3, #12]
      break;
 8004ab2:	e002      	b.n	8004aba <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004aba:	7dfb      	ldrb	r3, [r7, #23]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d15b      	bne.n	8004b78 <HAL_TIM_PWM_Start_DMA+0x3dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f001 fabd 	bl	8006048 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a2f      	ldr	r2, [pc, #188]	; (8004b90 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00e      	beq.n	8004af6 <HAL_TIM_PWM_Start_DMA+0x35a>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a2d      	ldr	r2, [pc, #180]	; (8004b94 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d009      	beq.n	8004af6 <HAL_TIM_PWM_Start_DMA+0x35a>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a2c      	ldr	r2, [pc, #176]	; (8004b98 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d004      	beq.n	8004af6 <HAL_TIM_PWM_Start_DMA+0x35a>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a2a      	ldr	r2, [pc, #168]	; (8004b9c <HAL_TIM_PWM_Start_DMA+0x400>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d101      	bne.n	8004afa <HAL_TIM_PWM_Start_DMA+0x35e>
 8004af6:	2301      	movs	r3, #1
 8004af8:	e000      	b.n	8004afc <HAL_TIM_PWM_Start_DMA+0x360>
 8004afa:	2300      	movs	r3, #0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d007      	beq.n	8004b10 <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b0e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a1e      	ldr	r2, [pc, #120]	; (8004b90 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00e      	beq.n	8004b38 <HAL_TIM_PWM_Start_DMA+0x39c>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b22:	d009      	beq.n	8004b38 <HAL_TIM_PWM_Start_DMA+0x39c>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a1d      	ldr	r2, [pc, #116]	; (8004ba0 <HAL_TIM_PWM_Start_DMA+0x404>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d004      	beq.n	8004b38 <HAL_TIM_PWM_Start_DMA+0x39c>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a18      	ldr	r2, [pc, #96]	; (8004b94 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d115      	bne.n	8004b64 <HAL_TIM_PWM_Start_DMA+0x3c8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	4b19      	ldr	r3, [pc, #100]	; (8004ba4 <HAL_TIM_PWM_Start_DMA+0x408>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2b06      	cmp	r3, #6
 8004b48:	d015      	beq.n	8004b76 <HAL_TIM_PWM_Start_DMA+0x3da>
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b50:	d011      	beq.n	8004b76 <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        __HAL_TIM_ENABLE(htim);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0201 	orr.w	r2, r2, #1
 8004b60:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b62:	e008      	b.n	8004b76 <HAL_TIM_PWM_Start_DMA+0x3da>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	e000      	b.n	8004b78 <HAL_TIM_PWM_Start_DMA+0x3dc>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b76:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	0800547d 	.word	0x0800547d
 8004b88:	08005525 	.word	0x08005525
 8004b8c:	080053eb 	.word	0x080053eb
 8004b90:	40012c00 	.word	0x40012c00
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40014400 	.word	0x40014400
 8004b9c:	40014800 	.word	0x40014800
 8004ba0:	40000400 	.word	0x40000400
 8004ba4:	00010007 	.word	0x00010007

08004ba8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	73fb      	strb	r3, [r7, #15]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b0c      	cmp	r3, #12
 8004bba:	d855      	bhi.n	8004c68 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004bbc:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004bf9 	.word	0x08004bf9
 8004bc8:	08004c69 	.word	0x08004c69
 8004bcc:	08004c69 	.word	0x08004c69
 8004bd0:	08004c69 	.word	0x08004c69
 8004bd4:	08004c15 	.word	0x08004c15
 8004bd8:	08004c69 	.word	0x08004c69
 8004bdc:	08004c69 	.word	0x08004c69
 8004be0:	08004c69 	.word	0x08004c69
 8004be4:	08004c31 	.word	0x08004c31
 8004be8:	08004c69 	.word	0x08004c69
 8004bec:	08004c69 	.word	0x08004c69
 8004bf0:	08004c69 	.word	0x08004c69
 8004bf4:	08004c4d 	.word	0x08004c4d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c06:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fd fef2 	bl	80029f6 <HAL_DMA_Abort_IT>
      break;
 8004c12:	e02c      	b.n	8004c6e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c22:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fd fee4 	bl	80029f6 <HAL_DMA_Abort_IT>
      break;
 8004c2e:	e01e      	b.n	8004c6e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c3e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fd fed6 	bl	80029f6 <HAL_DMA_Abort_IT>
      break;
 8004c4a:	e010      	b.n	8004c6e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c5a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fd fec8 	bl	80029f6 <HAL_DMA_Abort_IT>
      break;
 8004c66:	e002      	b.n	8004c6e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d17b      	bne.n	8004d6c <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	6839      	ldr	r1, [r7, #0]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f001 f9e3 	bl	8006048 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a3c      	ldr	r2, [pc, #240]	; (8004d78 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00e      	beq.n	8004caa <HAL_TIM_PWM_Stop_DMA+0x102>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a3a      	ldr	r2, [pc, #232]	; (8004d7c <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d009      	beq.n	8004caa <HAL_TIM_PWM_Stop_DMA+0x102>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a39      	ldr	r2, [pc, #228]	; (8004d80 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d004      	beq.n	8004caa <HAL_TIM_PWM_Stop_DMA+0x102>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a37      	ldr	r2, [pc, #220]	; (8004d84 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d101      	bne.n	8004cae <HAL_TIM_PWM_Stop_DMA+0x106>
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <HAL_TIM_PWM_Stop_DMA+0x108>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d017      	beq.n	8004ce4 <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6a1a      	ldr	r2, [r3, #32]
 8004cba:	f241 1311 	movw	r3, #4369	; 0x1111
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10f      	bne.n	8004ce4 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6a1a      	ldr	r2, [r3, #32]
 8004cca:	f240 4344 	movw	r3, #1092	; 0x444
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d107      	bne.n	8004ce4 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ce2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6a1a      	ldr	r2, [r3, #32]
 8004cea:	f241 1311 	movw	r3, #4369	; 0x1111
 8004cee:	4013      	ands	r3, r2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10f      	bne.n	8004d14 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6a1a      	ldr	r2, [r3, #32]
 8004cfa:	f240 4344 	movw	r3, #1092	; 0x444
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d107      	bne.n	8004d14 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0201 	bic.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d104      	bne.n	8004d24 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d22:	e023      	b.n	8004d6c <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d104      	bne.n	8004d34 <HAL_TIM_PWM_Stop_DMA+0x18c>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d32:	e01b      	b.n	8004d6c <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d104      	bne.n	8004d44 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d42:	e013      	b.n	8004d6c <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b0c      	cmp	r3, #12
 8004d48:	d104      	bne.n	8004d54 <HAL_TIM_PWM_Stop_DMA+0x1ac>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d52:	e00b      	b.n	8004d6c <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2b10      	cmp	r3, #16
 8004d58:	d104      	bne.n	8004d64 <HAL_TIM_PWM_Stop_DMA+0x1bc>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d62:	e003      	b.n	8004d6c <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40012c00 	.word	0x40012c00
 8004d7c:	40014000 	.word	0x40014000
 8004d80:	40014400 	.word	0x40014400
 8004d84:	40014800 	.word	0x40014800

08004d88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e049      	b.n	8004e2e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fc ff04 	bl	8001bbc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f000 fbe0 	bl	800558c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b086      	sub	sp, #24
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e088      	b.n	8004f66 <HAL_TIM_IC_ConfigChannel+0x130>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d11b      	bne.n	8004e9a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	6819      	ldr	r1, [r3, #0]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f000 ff3d 	bl	8005cf0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699a      	ldr	r2, [r3, #24]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 020c 	bic.w	r2, r2, #12
 8004e84:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6999      	ldr	r1, [r3, #24]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	619a      	str	r2, [r3, #24]
 8004e98:	e060      	b.n	8004f5c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d11c      	bne.n	8004eda <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6818      	ldr	r0, [r3, #0]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	6819      	ldr	r1, [r3, #0]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f000 ffa9 	bl	8005e06 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699a      	ldr	r2, [r3, #24]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ec2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6999      	ldr	r1, [r3, #24]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	021a      	lsls	r2, r3, #8
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	619a      	str	r2, [r3, #24]
 8004ed8:	e040      	b.n	8004f5c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d11b      	bne.n	8004f18 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	6819      	ldr	r1, [r3, #0]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f000 fff6 	bl	8005ee0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	69da      	ldr	r2, [r3, #28]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 020c 	bic.w	r2, r2, #12
 8004f02:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69d9      	ldr	r1, [r3, #28]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	61da      	str	r2, [r3, #28]
 8004f16:	e021      	b.n	8004f5c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b0c      	cmp	r3, #12
 8004f1c:	d11c      	bne.n	8004f58 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6818      	ldr	r0, [r3, #0]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	6819      	ldr	r1, [r3, #0]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f001 f813 	bl	8005f58 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f40:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69d9      	ldr	r1, [r3, #28]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	021a      	lsls	r2, r3, #8
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	61da      	str	r2, [r3, #28]
 8004f56:	e001      	b.n	8004f5c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d101      	bne.n	8004f8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e0ff      	b.n	800518e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b14      	cmp	r3, #20
 8004f9a:	f200 80f0 	bhi.w	800517e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f9e:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa4:	08004ff9 	.word	0x08004ff9
 8004fa8:	0800517f 	.word	0x0800517f
 8004fac:	0800517f 	.word	0x0800517f
 8004fb0:	0800517f 	.word	0x0800517f
 8004fb4:	08005039 	.word	0x08005039
 8004fb8:	0800517f 	.word	0x0800517f
 8004fbc:	0800517f 	.word	0x0800517f
 8004fc0:	0800517f 	.word	0x0800517f
 8004fc4:	0800507b 	.word	0x0800507b
 8004fc8:	0800517f 	.word	0x0800517f
 8004fcc:	0800517f 	.word	0x0800517f
 8004fd0:	0800517f 	.word	0x0800517f
 8004fd4:	080050bb 	.word	0x080050bb
 8004fd8:	0800517f 	.word	0x0800517f
 8004fdc:	0800517f 	.word	0x0800517f
 8004fe0:	0800517f 	.word	0x0800517f
 8004fe4:	080050fd 	.word	0x080050fd
 8004fe8:	0800517f 	.word	0x0800517f
 8004fec:	0800517f 	.word	0x0800517f
 8004ff0:	0800517f 	.word	0x0800517f
 8004ff4:	0800513d 	.word	0x0800513d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68b9      	ldr	r1, [r7, #8]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fb3c 	bl	800567c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0208 	orr.w	r2, r2, #8
 8005012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699a      	ldr	r2, [r3, #24]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0204 	bic.w	r2, r2, #4
 8005022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6999      	ldr	r1, [r3, #24]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	691a      	ldr	r2, [r3, #16]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	619a      	str	r2, [r3, #24]
      break;
 8005036:	e0a5      	b.n	8005184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fba2 	bl	8005788 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699a      	ldr	r2, [r3, #24]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6999      	ldr	r1, [r3, #24]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	021a      	lsls	r2, r3, #8
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	619a      	str	r2, [r3, #24]
      break;
 8005078:	e084      	b.n	8005184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fc01 	bl	8005888 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 0208 	orr.w	r2, r2, #8
 8005094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69da      	ldr	r2, [r3, #28]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0204 	bic.w	r2, r2, #4
 80050a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69d9      	ldr	r1, [r3, #28]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	61da      	str	r2, [r3, #28]
      break;
 80050b8:	e064      	b.n	8005184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 fc5f 	bl	8005984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69da      	ldr	r2, [r3, #28]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	69da      	ldr	r2, [r3, #28]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69d9      	ldr	r1, [r3, #28]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	021a      	lsls	r2, r3, #8
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	61da      	str	r2, [r3, #28]
      break;
 80050fa:	e043      	b.n	8005184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	4618      	mov	r0, r3
 8005104:	f000 fca2 	bl	8005a4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0208 	orr.w	r2, r2, #8
 8005116:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0204 	bic.w	r2, r2, #4
 8005126:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	691a      	ldr	r2, [r3, #16]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800513a:	e023      	b.n	8005184 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68b9      	ldr	r1, [r7, #8]
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fce0 	bl	8005b08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005156:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005166:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	021a      	lsls	r2, r3, #8
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800517c:	e002      	b.n	8005184 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	75fb      	strb	r3, [r7, #23]
      break;
 8005182:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800518c:	7dfb      	ldrb	r3, [r7, #23]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop

08005198 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_TIM_ConfigClockSource+0x1c>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e0b6      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x18a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f0:	d03e      	beq.n	8005270 <HAL_TIM_ConfigClockSource+0xd8>
 80051f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f6:	f200 8087 	bhi.w	8005308 <HAL_TIM_ConfigClockSource+0x170>
 80051fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fe:	f000 8086 	beq.w	800530e <HAL_TIM_ConfigClockSource+0x176>
 8005202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005206:	d87f      	bhi.n	8005308 <HAL_TIM_ConfigClockSource+0x170>
 8005208:	2b70      	cmp	r3, #112	; 0x70
 800520a:	d01a      	beq.n	8005242 <HAL_TIM_ConfigClockSource+0xaa>
 800520c:	2b70      	cmp	r3, #112	; 0x70
 800520e:	d87b      	bhi.n	8005308 <HAL_TIM_ConfigClockSource+0x170>
 8005210:	2b60      	cmp	r3, #96	; 0x60
 8005212:	d050      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0x11e>
 8005214:	2b60      	cmp	r3, #96	; 0x60
 8005216:	d877      	bhi.n	8005308 <HAL_TIM_ConfigClockSource+0x170>
 8005218:	2b50      	cmp	r3, #80	; 0x50
 800521a:	d03c      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0xfe>
 800521c:	2b50      	cmp	r3, #80	; 0x50
 800521e:	d873      	bhi.n	8005308 <HAL_TIM_ConfigClockSource+0x170>
 8005220:	2b40      	cmp	r3, #64	; 0x40
 8005222:	d058      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x13e>
 8005224:	2b40      	cmp	r3, #64	; 0x40
 8005226:	d86f      	bhi.n	8005308 <HAL_TIM_ConfigClockSource+0x170>
 8005228:	2b30      	cmp	r3, #48	; 0x30
 800522a:	d064      	beq.n	80052f6 <HAL_TIM_ConfigClockSource+0x15e>
 800522c:	2b30      	cmp	r3, #48	; 0x30
 800522e:	d86b      	bhi.n	8005308 <HAL_TIM_ConfigClockSource+0x170>
 8005230:	2b20      	cmp	r3, #32
 8005232:	d060      	beq.n	80052f6 <HAL_TIM_ConfigClockSource+0x15e>
 8005234:	2b20      	cmp	r3, #32
 8005236:	d867      	bhi.n	8005308 <HAL_TIM_ConfigClockSource+0x170>
 8005238:	2b00      	cmp	r3, #0
 800523a:	d05c      	beq.n	80052f6 <HAL_TIM_ConfigClockSource+0x15e>
 800523c:	2b10      	cmp	r3, #16
 800523e:	d05a      	beq.n	80052f6 <HAL_TIM_ConfigClockSource+0x15e>
 8005240:	e062      	b.n	8005308 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6818      	ldr	r0, [r3, #0]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	6899      	ldr	r1, [r3, #8]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f000 fed9 	bl	8006008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005264:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	609a      	str	r2, [r3, #8]
      break;
 800526e:	e04f      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6818      	ldr	r0, [r3, #0]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	6899      	ldr	r1, [r3, #8]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f000 fec2 	bl	8006008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005292:	609a      	str	r2, [r3, #8]
      break;
 8005294:	e03c      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6818      	ldr	r0, [r3, #0]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	6859      	ldr	r1, [r3, #4]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	461a      	mov	r2, r3
 80052a4:	f000 fd80 	bl	8005da8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2150      	movs	r1, #80	; 0x50
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fe8f 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 80052b4:	e02c      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	6859      	ldr	r1, [r3, #4]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	461a      	mov	r2, r3
 80052c4:	f000 fddc 	bl	8005e80 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2160      	movs	r1, #96	; 0x60
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 fe7f 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 80052d4:	e01c      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	6859      	ldr	r1, [r3, #4]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	461a      	mov	r2, r3
 80052e4:	f000 fd60 	bl	8005da8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2140      	movs	r1, #64	; 0x40
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fe6f 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 80052f4:	e00c      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4619      	mov	r1, r3
 8005300:	4610      	mov	r0, r2
 8005302:	f000 fe66 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005306:	e003      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	73fb      	strb	r3, [r7, #15]
      break;
 800530c:	e000      	b.n	8005310 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800530e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005320:	7bfb      	ldrb	r3, [r7, #15]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b082      	sub	sp, #8
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_TIM_SlaveConfigSynchro+0x18>
 800533e:	2302      	movs	r3, #2
 8005340:	e031      	b.n	80053a6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2202      	movs	r2, #2
 800534e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005352:	6839      	ldr	r1, [r7, #0]
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fc37 	bl	8005bc8 <TIM_SlaveTimer_SetConfig>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d009      	beq.n	8005374 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e018      	b.n	80053a6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005382:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005392:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d107      	bne.n	8005412 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2201      	movs	r2, #1
 8005406:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005410:	e02a      	b.n	8005468 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	429a      	cmp	r2, r3
 800541a:	d107      	bne.n	800542c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2202      	movs	r2, #2
 8005420:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800542a:	e01d      	b.n	8005468 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	429a      	cmp	r2, r3
 8005434:	d107      	bne.n	8005446 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2204      	movs	r2, #4
 800543a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005444:	e010      	b.n	8005468 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	429a      	cmp	r2, r3
 800544e:	d107      	bne.n	8005460 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2208      	movs	r2, #8
 8005454:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800545e:	e003      	b.n	8005468 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f7ff ffb4 	bl	80053d6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	771a      	strb	r2, [r3, #28]
}
 8005474:	bf00      	nop
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d10b      	bne.n	80054ac <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2201      	movs	r2, #1
 8005498:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d136      	bne.n	8005510 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054aa:	e031      	b.n	8005510 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d10b      	bne.n	80054ce <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2202      	movs	r2, #2
 80054ba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d125      	bne.n	8005510 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054cc:	e020      	b.n	8005510 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d10b      	bne.n	80054f0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2204      	movs	r2, #4
 80054dc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d114      	bne.n	8005510 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054ee:	e00f      	b.n	8005510 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d10a      	bne.n	8005510 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2208      	movs	r2, #8
 80054fe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d103      	bne.n	8005510 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f7ff ff4c 	bl	80053ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	771a      	strb	r2, [r3, #28]
}
 800551c:	bf00      	nop
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	429a      	cmp	r2, r3
 800553a:	d103      	bne.n	8005544 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2201      	movs	r2, #1
 8005540:	771a      	strb	r2, [r3, #28]
 8005542:	e019      	b.n	8005578 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	429a      	cmp	r2, r3
 800554c:	d103      	bne.n	8005556 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2202      	movs	r2, #2
 8005552:	771a      	strb	r2, [r3, #28]
 8005554:	e010      	b.n	8005578 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	429a      	cmp	r2, r3
 800555e:	d103      	bne.n	8005568 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2204      	movs	r2, #4
 8005564:	771a      	strb	r2, [r3, #28]
 8005566:	e007      	b.n	8005578 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	429a      	cmp	r2, r3
 8005570:	d102      	bne.n	8005578 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2208      	movs	r2, #8
 8005576:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f7ff ff22 	bl	80053c2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	771a      	strb	r2, [r3, #28]
}
 8005584:	bf00      	nop
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a32      	ldr	r2, [pc, #200]	; (8005668 <TIM_Base_SetConfig+0xdc>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d007      	beq.n	80055b4 <TIM_Base_SetConfig+0x28>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055aa:	d003      	beq.n	80055b4 <TIM_Base_SetConfig+0x28>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a2f      	ldr	r2, [pc, #188]	; (800566c <TIM_Base_SetConfig+0xe0>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d108      	bne.n	80055c6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a27      	ldr	r2, [pc, #156]	; (8005668 <TIM_Base_SetConfig+0xdc>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d013      	beq.n	80055f6 <TIM_Base_SetConfig+0x6a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d4:	d00f      	beq.n	80055f6 <TIM_Base_SetConfig+0x6a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a24      	ldr	r2, [pc, #144]	; (800566c <TIM_Base_SetConfig+0xe0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00b      	beq.n	80055f6 <TIM_Base_SetConfig+0x6a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a23      	ldr	r2, [pc, #140]	; (8005670 <TIM_Base_SetConfig+0xe4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d007      	beq.n	80055f6 <TIM_Base_SetConfig+0x6a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a22      	ldr	r2, [pc, #136]	; (8005674 <TIM_Base_SetConfig+0xe8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d003      	beq.n	80055f6 <TIM_Base_SetConfig+0x6a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a21      	ldr	r2, [pc, #132]	; (8005678 <TIM_Base_SetConfig+0xec>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d108      	bne.n	8005608 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a0e      	ldr	r2, [pc, #56]	; (8005668 <TIM_Base_SetConfig+0xdc>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00b      	beq.n	800564c <TIM_Base_SetConfig+0xc0>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a0e      	ldr	r2, [pc, #56]	; (8005670 <TIM_Base_SetConfig+0xe4>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d007      	beq.n	800564c <TIM_Base_SetConfig+0xc0>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a0d      	ldr	r2, [pc, #52]	; (8005674 <TIM_Base_SetConfig+0xe8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d003      	beq.n	800564c <TIM_Base_SetConfig+0xc0>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a0c      	ldr	r2, [pc, #48]	; (8005678 <TIM_Base_SetConfig+0xec>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d103      	bne.n	8005654 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	615a      	str	r2, [r3, #20]
}
 800565a:	bf00      	nop
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	40012c00 	.word	0x40012c00
 800566c:	40000400 	.word	0x40000400
 8005670:	40014000 	.word	0x40014000
 8005674:	40014400 	.word	0x40014400
 8005678:	40014800 	.word	0x40014800

0800567c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	f023 0201 	bic.w	r2, r3, #1
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 0303 	bic.w	r3, r3, #3
 80056b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f023 0302 	bic.w	r3, r3, #2
 80056c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a28      	ldr	r2, [pc, #160]	; (8005778 <TIM_OC1_SetConfig+0xfc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d00b      	beq.n	80056f4 <TIM_OC1_SetConfig+0x78>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a27      	ldr	r2, [pc, #156]	; (800577c <TIM_OC1_SetConfig+0x100>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d007      	beq.n	80056f4 <TIM_OC1_SetConfig+0x78>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a26      	ldr	r2, [pc, #152]	; (8005780 <TIM_OC1_SetConfig+0x104>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d003      	beq.n	80056f4 <TIM_OC1_SetConfig+0x78>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a25      	ldr	r2, [pc, #148]	; (8005784 <TIM_OC1_SetConfig+0x108>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d10c      	bne.n	800570e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f023 0308 	bic.w	r3, r3, #8
 80056fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f023 0304 	bic.w	r3, r3, #4
 800570c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a19      	ldr	r2, [pc, #100]	; (8005778 <TIM_OC1_SetConfig+0xfc>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00b      	beq.n	800572e <TIM_OC1_SetConfig+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a18      	ldr	r2, [pc, #96]	; (800577c <TIM_OC1_SetConfig+0x100>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d007      	beq.n	800572e <TIM_OC1_SetConfig+0xb2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a17      	ldr	r2, [pc, #92]	; (8005780 <TIM_OC1_SetConfig+0x104>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <TIM_OC1_SetConfig+0xb2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a16      	ldr	r2, [pc, #88]	; (8005784 <TIM_OC1_SetConfig+0x108>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d111      	bne.n	8005752 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800573c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	621a      	str	r2, [r3, #32]
}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	40012c00 	.word	0x40012c00
 800577c:	40014000 	.word	0x40014000
 8005780:	40014400 	.word	0x40014400
 8005784:	40014800 	.word	0x40014800

08005788 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	f023 0210 	bic.w	r2, r3, #16
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	021b      	lsls	r3, r3, #8
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f023 0320 	bic.w	r3, r3, #32
 80057d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a24      	ldr	r2, [pc, #144]	; (8005878 <TIM_OC2_SetConfig+0xf0>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d10d      	bne.n	8005808 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005806:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a1b      	ldr	r2, [pc, #108]	; (8005878 <TIM_OC2_SetConfig+0xf0>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d00b      	beq.n	8005828 <TIM_OC2_SetConfig+0xa0>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a1a      	ldr	r2, [pc, #104]	; (800587c <TIM_OC2_SetConfig+0xf4>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d007      	beq.n	8005828 <TIM_OC2_SetConfig+0xa0>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a19      	ldr	r2, [pc, #100]	; (8005880 <TIM_OC2_SetConfig+0xf8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d003      	beq.n	8005828 <TIM_OC2_SetConfig+0xa0>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a18      	ldr	r2, [pc, #96]	; (8005884 <TIM_OC2_SetConfig+0xfc>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d113      	bne.n	8005850 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800582e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005836:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	621a      	str	r2, [r3, #32]
}
 800586a:	bf00      	nop
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	40012c00 	.word	0x40012c00
 800587c:	40014000 	.word	0x40014000
 8005880:	40014400 	.word	0x40014400
 8005884:	40014800 	.word	0x40014800

08005888 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0303 	bic.w	r3, r3, #3
 80058c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	021b      	lsls	r3, r3, #8
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a23      	ldr	r2, [pc, #140]	; (8005974 <TIM_OC3_SetConfig+0xec>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d10d      	bne.n	8005906 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	021b      	lsls	r3, r3, #8
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005904:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a1a      	ldr	r2, [pc, #104]	; (8005974 <TIM_OC3_SetConfig+0xec>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00b      	beq.n	8005926 <TIM_OC3_SetConfig+0x9e>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a19      	ldr	r2, [pc, #100]	; (8005978 <TIM_OC3_SetConfig+0xf0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d007      	beq.n	8005926 <TIM_OC3_SetConfig+0x9e>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a18      	ldr	r2, [pc, #96]	; (800597c <TIM_OC3_SetConfig+0xf4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d003      	beq.n	8005926 <TIM_OC3_SetConfig+0x9e>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a17      	ldr	r2, [pc, #92]	; (8005980 <TIM_OC3_SetConfig+0xf8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d113      	bne.n	800594e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800592c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	011b      	lsls	r3, r3, #4
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	4313      	orrs	r3, r2
 800594c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	621a      	str	r2, [r3, #32]
}
 8005968:	bf00      	nop
 800596a:	371c      	adds	r7, #28
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	40012c00 	.word	0x40012c00
 8005978:	40014000 	.word	0x40014000
 800597c:	40014400 	.word	0x40014400
 8005980:	40014800 	.word	0x40014800

08005984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	021b      	lsls	r3, r3, #8
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	031b      	lsls	r3, r3, #12
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a16      	ldr	r2, [pc, #88]	; (8005a3c <TIM_OC4_SetConfig+0xb8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00b      	beq.n	8005a00 <TIM_OC4_SetConfig+0x7c>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a15      	ldr	r2, [pc, #84]	; (8005a40 <TIM_OC4_SetConfig+0xbc>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d007      	beq.n	8005a00 <TIM_OC4_SetConfig+0x7c>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a14      	ldr	r2, [pc, #80]	; (8005a44 <TIM_OC4_SetConfig+0xc0>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d003      	beq.n	8005a00 <TIM_OC4_SetConfig+0x7c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a13      	ldr	r2, [pc, #76]	; (8005a48 <TIM_OC4_SetConfig+0xc4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d109      	bne.n	8005a14 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	019b      	lsls	r3, r3, #6
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	621a      	str	r2, [r3, #32]
}
 8005a2e:	bf00      	nop
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	40014000 	.word	0x40014000
 8005a44:	40014400 	.word	0x40014400
 8005a48:	40014800 	.word	0x40014800

08005a4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	041b      	lsls	r3, r3, #16
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a15      	ldr	r2, [pc, #84]	; (8005af8 <TIM_OC5_SetConfig+0xac>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00b      	beq.n	8005abe <TIM_OC5_SetConfig+0x72>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a14      	ldr	r2, [pc, #80]	; (8005afc <TIM_OC5_SetConfig+0xb0>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d007      	beq.n	8005abe <TIM_OC5_SetConfig+0x72>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a13      	ldr	r2, [pc, #76]	; (8005b00 <TIM_OC5_SetConfig+0xb4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d003      	beq.n	8005abe <TIM_OC5_SetConfig+0x72>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a12      	ldr	r2, [pc, #72]	; (8005b04 <TIM_OC5_SetConfig+0xb8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d109      	bne.n	8005ad2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	621a      	str	r2, [r3, #32]
}
 8005aec:	bf00      	nop
 8005aee:	371c      	adds	r7, #28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	40012c00 	.word	0x40012c00
 8005afc:	40014000 	.word	0x40014000
 8005b00:	40014400 	.word	0x40014400
 8005b04:	40014800 	.word	0x40014800

08005b08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	021b      	lsls	r3, r3, #8
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	051b      	lsls	r3, r3, #20
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a16      	ldr	r2, [pc, #88]	; (8005bb8 <TIM_OC6_SetConfig+0xb0>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00b      	beq.n	8005b7c <TIM_OC6_SetConfig+0x74>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a15      	ldr	r2, [pc, #84]	; (8005bbc <TIM_OC6_SetConfig+0xb4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d007      	beq.n	8005b7c <TIM_OC6_SetConfig+0x74>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a14      	ldr	r2, [pc, #80]	; (8005bc0 <TIM_OC6_SetConfig+0xb8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d003      	beq.n	8005b7c <TIM_OC6_SetConfig+0x74>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a13      	ldr	r2, [pc, #76]	; (8005bc4 <TIM_OC6_SetConfig+0xbc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d109      	bne.n	8005b90 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	029b      	lsls	r3, r3, #10
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	621a      	str	r2, [r3, #32]
}
 8005baa:	bf00      	nop
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40012c00 	.word	0x40012c00
 8005bbc:	40014000 	.word	0x40014000
 8005bc0:	40014400 	.word	0x40014400
 8005bc4:	40014800 	.word	0x40014800

08005bc8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bf6:	f023 0307 	bic.w	r3, r3, #7
 8005bfa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	2b70      	cmp	r3, #112	; 0x70
 8005c14:	d01a      	beq.n	8005c4c <TIM_SlaveTimer_SetConfig+0x84>
 8005c16:	2b70      	cmp	r3, #112	; 0x70
 8005c18:	d860      	bhi.n	8005cdc <TIM_SlaveTimer_SetConfig+0x114>
 8005c1a:	2b60      	cmp	r3, #96	; 0x60
 8005c1c:	d054      	beq.n	8005cc8 <TIM_SlaveTimer_SetConfig+0x100>
 8005c1e:	2b60      	cmp	r3, #96	; 0x60
 8005c20:	d85c      	bhi.n	8005cdc <TIM_SlaveTimer_SetConfig+0x114>
 8005c22:	2b50      	cmp	r3, #80	; 0x50
 8005c24:	d046      	beq.n	8005cb4 <TIM_SlaveTimer_SetConfig+0xec>
 8005c26:	2b50      	cmp	r3, #80	; 0x50
 8005c28:	d858      	bhi.n	8005cdc <TIM_SlaveTimer_SetConfig+0x114>
 8005c2a:	2b40      	cmp	r3, #64	; 0x40
 8005c2c:	d019      	beq.n	8005c62 <TIM_SlaveTimer_SetConfig+0x9a>
 8005c2e:	2b40      	cmp	r3, #64	; 0x40
 8005c30:	d854      	bhi.n	8005cdc <TIM_SlaveTimer_SetConfig+0x114>
 8005c32:	2b30      	cmp	r3, #48	; 0x30
 8005c34:	d055      	beq.n	8005ce2 <TIM_SlaveTimer_SetConfig+0x11a>
 8005c36:	2b30      	cmp	r3, #48	; 0x30
 8005c38:	d850      	bhi.n	8005cdc <TIM_SlaveTimer_SetConfig+0x114>
 8005c3a:	2b20      	cmp	r3, #32
 8005c3c:	d051      	beq.n	8005ce2 <TIM_SlaveTimer_SetConfig+0x11a>
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	d84c      	bhi.n	8005cdc <TIM_SlaveTimer_SetConfig+0x114>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d04d      	beq.n	8005ce2 <TIM_SlaveTimer_SetConfig+0x11a>
 8005c46:	2b10      	cmp	r3, #16
 8005c48:	d04b      	beq.n	8005ce2 <TIM_SlaveTimer_SetConfig+0x11a>
 8005c4a:	e047      	b.n	8005cdc <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6818      	ldr	r0, [r3, #0]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	68d9      	ldr	r1, [r3, #12]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f000 f9d4 	bl	8006008 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005c60:	e040      	b.n	8005ce4 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b05      	cmp	r3, #5
 8005c68:	d101      	bne.n	8005c6e <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e03b      	b.n	8005ce6 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6a1a      	ldr	r2, [r3, #32]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0201 	bic.w	r2, r2, #1
 8005c84:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c94:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	621a      	str	r2, [r3, #32]
      break;
 8005cb2:	e017      	b.n	8005ce4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6818      	ldr	r0, [r3, #0]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	6899      	ldr	r1, [r3, #8]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	f000 f871 	bl	8005da8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005cc6:	e00d      	b.n	8005ce4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6818      	ldr	r0, [r3, #0]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	6899      	ldr	r1, [r3, #8]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f000 f8d3 	bl	8005e80 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005cda:	e003      	b.n	8005ce4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	75fb      	strb	r3, [r7, #23]
      break;
 8005ce0:	e000      	b.n	8005ce4 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8005ce2:	bf00      	nop
  }

  return status;
 8005ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
	...

08005cf0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	f023 0201 	bic.w	r2, r3, #1
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4a20      	ldr	r2, [pc, #128]	; (8005d9c <TIM_TI1_SetConfig+0xac>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00b      	beq.n	8005d36 <TIM_TI1_SetConfig+0x46>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d24:	d007      	beq.n	8005d36 <TIM_TI1_SetConfig+0x46>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4a1d      	ldr	r2, [pc, #116]	; (8005da0 <TIM_TI1_SetConfig+0xb0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d003      	beq.n	8005d36 <TIM_TI1_SetConfig+0x46>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	4a1c      	ldr	r2, [pc, #112]	; (8005da4 <TIM_TI1_SetConfig+0xb4>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d101      	bne.n	8005d3a <TIM_TI1_SetConfig+0x4a>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <TIM_TI1_SetConfig+0x4c>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d008      	beq.n	8005d52 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f023 0303 	bic.w	r3, r3, #3
 8005d46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	e003      	b.n	8005d5a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f043 0301 	orr.w	r3, r3, #1
 8005d58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	011b      	lsls	r3, r3, #4
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f023 030a 	bic.w	r3, r3, #10
 8005d74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f003 030a 	and.w	r3, r3, #10
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	621a      	str	r2, [r3, #32]
}
 8005d8e:	bf00      	nop
 8005d90:	371c      	adds	r7, #28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40012c00 	.word	0x40012c00
 8005da0:	40000400 	.word	0x40000400
 8005da4:	40014000 	.word	0x40014000

08005da8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	f023 0201 	bic.w	r2, r3, #1
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f023 030a 	bic.w	r3, r3, #10
 8005de4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	621a      	str	r2, [r3, #32]
}
 8005dfa:	bf00      	nop
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b087      	sub	sp, #28
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	f023 0210 	bic.w	r2, r3, #16
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	021b      	lsls	r3, r3, #8
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	031b      	lsls	r3, r3, #12
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	011b      	lsls	r3, r3, #4
 8005e5e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	621a      	str	r2, [r3, #32]
}
 8005e74:	bf00      	nop
 8005e76:	371c      	adds	r7, #28
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	f023 0210 	bic.w	r2, r3, #16
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005eaa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	031b      	lsls	r3, r3, #12
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ebc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	011b      	lsls	r3, r3, #4
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	621a      	str	r2, [r3, #32]
}
 8005ed4:	bf00      	nop
 8005ed6:	371c      	adds	r7, #28
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
 8005eec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f023 0303 	bic.w	r3, r3, #3
 8005f0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005f30:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	021b      	lsls	r3, r3, #8
 8005f36:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	621a      	str	r2, [r3, #32]
}
 8005f4c:	bf00      	nop
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	021b      	lsls	r3, r3, #8
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f96:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	031b      	lsls	r3, r3, #12
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005faa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	031b      	lsls	r3, r3, #12
 8005fb0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	621a      	str	r2, [r3, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f043 0307 	orr.w	r3, r3, #7
 8005ff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	609a      	str	r2, [r3, #8]
}
 8005ffc:	bf00      	nop
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	021a      	lsls	r2, r3, #8
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	431a      	orrs	r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4313      	orrs	r3, r2
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	609a      	str	r2, [r3, #8]
}
 800603c:	bf00      	nop
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 031f 	and.w	r3, r3, #31
 800605a:	2201      	movs	r2, #1
 800605c:	fa02 f303 	lsl.w	r3, r2, r3
 8006060:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6a1a      	ldr	r2, [r3, #32]
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	43db      	mvns	r3, r3
 800606a:	401a      	ands	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1a      	ldr	r2, [r3, #32]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	fa01 f303 	lsl.w	r3, r1, r3
 8006080:	431a      	orrs	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	621a      	str	r2, [r3, #32]
}
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
	...

08006094 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d109      	bne.n	80060b8 <HAL_TIMEx_PWMN_Start+0x24>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	bf14      	ite	ne
 80060b0:	2301      	movne	r3, #1
 80060b2:	2300      	moveq	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	e022      	b.n	80060fe <HAL_TIMEx_PWMN_Start+0x6a>
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d109      	bne.n	80060d2 <HAL_TIMEx_PWMN_Start+0x3e>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	bf14      	ite	ne
 80060ca:	2301      	movne	r3, #1
 80060cc:	2300      	moveq	r3, #0
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	e015      	b.n	80060fe <HAL_TIMEx_PWMN_Start+0x6a>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d109      	bne.n	80060ec <HAL_TIMEx_PWMN_Start+0x58>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	bf14      	ite	ne
 80060e4:	2301      	movne	r3, #1
 80060e6:	2300      	moveq	r3, #0
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	e008      	b.n	80060fe <HAL_TIMEx_PWMN_Start+0x6a>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	bf14      	ite	ne
 80060f8:	2301      	movne	r3, #1
 80060fa:	2300      	moveq	r3, #0
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e05f      	b.n	80061c6 <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d104      	bne.n	8006116 <HAL_TIMEx_PWMN_Start+0x82>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006114:	e013      	b.n	800613e <HAL_TIMEx_PWMN_Start+0xaa>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b04      	cmp	r3, #4
 800611a:	d104      	bne.n	8006126 <HAL_TIMEx_PWMN_Start+0x92>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006124:	e00b      	b.n	800613e <HAL_TIMEx_PWMN_Start+0xaa>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b08      	cmp	r3, #8
 800612a:	d104      	bne.n	8006136 <HAL_TIMEx_PWMN_Start+0xa2>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006134:	e003      	b.n	800613e <HAL_TIMEx_PWMN_Start+0xaa>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2202      	movs	r2, #2
 800613a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2204      	movs	r2, #4
 8006144:	6839      	ldr	r1, [r7, #0]
 8006146:	4618      	mov	r0, r3
 8006148:	f000 f930 	bl	80063ac <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800615a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a1b      	ldr	r2, [pc, #108]	; (80061d0 <HAL_TIMEx_PWMN_Start+0x13c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d00e      	beq.n	8006184 <HAL_TIMEx_PWMN_Start+0xf0>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616e:	d009      	beq.n	8006184 <HAL_TIMEx_PWMN_Start+0xf0>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a17      	ldr	r2, [pc, #92]	; (80061d4 <HAL_TIMEx_PWMN_Start+0x140>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d004      	beq.n	8006184 <HAL_TIMEx_PWMN_Start+0xf0>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a16      	ldr	r2, [pc, #88]	; (80061d8 <HAL_TIMEx_PWMN_Start+0x144>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d115      	bne.n	80061b0 <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689a      	ldr	r2, [r3, #8]
 800618a:	4b14      	ldr	r3, [pc, #80]	; (80061dc <HAL_TIMEx_PWMN_Start+0x148>)
 800618c:	4013      	ands	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b06      	cmp	r3, #6
 8006194:	d015      	beq.n	80061c2 <HAL_TIMEx_PWMN_Start+0x12e>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800619c:	d011      	beq.n	80061c2 <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f042 0201 	orr.w	r2, r2, #1
 80061ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ae:	e008      	b.n	80061c2 <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	e000      	b.n	80061c4 <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	40012c00 	.word	0x40012c00
 80061d4:	40000400 	.word	0x40000400
 80061d8:	40014000 	.word	0x40014000
 80061dc:	00010007 	.word	0x00010007

080061e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061f4:	2302      	movs	r3, #2
 80061f6:	e054      	b.n	80062a2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a24      	ldr	r2, [pc, #144]	; (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d108      	bne.n	8006234 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006228:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4313      	orrs	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4313      	orrs	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a17      	ldr	r2, [pc, #92]	; (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00e      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006260:	d009      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a13      	ldr	r2, [pc, #76]	; (80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d004      	beq.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a11      	ldr	r2, [pc, #68]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d10c      	bne.n	8006290 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800627c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	4313      	orrs	r3, r2
 8006286:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	40012c00 	.word	0x40012c00
 80062b4:	40000400 	.word	0x40000400
 80062b8:	40014000 	.word	0x40014000

080062bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d101      	bne.n	80062d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062d4:	2302      	movs	r3, #2
 80062d6:	e060      	b.n	800639a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	4313      	orrs	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	041b      	lsls	r3, r3, #16
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a14      	ldr	r2, [pc, #80]	; (80063a8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d115      	bne.n	8006388 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	051b      	lsls	r3, r3, #20
 8006368:	4313      	orrs	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	4313      	orrs	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	40012c00 	.word	0x40012c00

080063ac <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f003 031f 	and.w	r3, r3, #31
 80063be:	2204      	movs	r2, #4
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a1a      	ldr	r2, [r3, #32]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	43db      	mvns	r3, r3
 80063ce:	401a      	ands	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a1a      	ldr	r2, [r3, #32]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	fa01 f303 	lsl.w	r3, r1, r3
 80063e4:	431a      	orrs	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	621a      	str	r2, [r3, #32]
}
 80063ea:	bf00      	nop
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e040      	b.n	800648a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800640c:	2b00      	cmp	r3, #0
 800640e:	d106      	bne.n	800641e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7fb fcd9 	bl	8001dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2224      	movs	r2, #36	; 0x24
 8006422:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0201 	bic.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 f8c1 	bl	80065bc <UART_SetConfig>
 800643a:	4603      	mov	r3, r0
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e022      	b.n	800648a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f9eb 	bl	8006828 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006460:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006470:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f042 0201 	orr.w	r2, r2, #1
 8006480:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fa72 	bl	800696c <UART_CheckIdleState>
 8006488:	4603      	mov	r3, r0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b08a      	sub	sp, #40	; 0x28
 8006496:	af02      	add	r7, sp, #8
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	603b      	str	r3, [r7, #0]
 800649e:	4613      	mov	r3, r2
 80064a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064a6:	2b20      	cmp	r3, #32
 80064a8:	f040 8082 	bne.w	80065b0 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <HAL_UART_Transmit+0x26>
 80064b2:	88fb      	ldrh	r3, [r7, #6]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e07a      	b.n	80065b2 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <HAL_UART_Transmit+0x38>
 80064c6:	2302      	movs	r3, #2
 80064c8:	e073      	b.n	80065b2 <HAL_UART_Transmit+0x120>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2221      	movs	r2, #33	; 0x21
 80064de:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064e0:	f7fb fe50 	bl	8002184 <HAL_GetTick>
 80064e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	88fa      	ldrh	r2, [r7, #6]
 80064ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	88fa      	ldrh	r2, [r7, #6]
 80064f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fe:	d108      	bne.n	8006512 <HAL_UART_Transmit+0x80>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d104      	bne.n	8006512 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006508:	2300      	movs	r3, #0
 800650a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	61bb      	str	r3, [r7, #24]
 8006510:	e003      	b.n	800651a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006516:	2300      	movs	r3, #0
 8006518:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006522:	e02d      	b.n	8006580 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	2200      	movs	r2, #0
 800652c:	2180      	movs	r1, #128	; 0x80
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f000 fa65 	bl	80069fe <UART_WaitOnFlagUntilTimeout>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e039      	b.n	80065b2 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10b      	bne.n	800655c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	881a      	ldrh	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006550:	b292      	uxth	r2, r2
 8006552:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	3302      	adds	r3, #2
 8006558:	61bb      	str	r3, [r7, #24]
 800655a:	e008      	b.n	800656e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	781a      	ldrb	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	b292      	uxth	r2, r2
 8006566:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	3301      	adds	r3, #1
 800656c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006574:	b29b      	uxth	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006586:	b29b      	uxth	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1cb      	bne.n	8006524 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	2200      	movs	r2, #0
 8006594:	2140      	movs	r1, #64	; 0x40
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fa31 	bl	80069fe <UART_WaitOnFlagUntilTimeout>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e005      	b.n	80065b2 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2220      	movs	r2, #32
 80065aa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	e000      	b.n	80065b2 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80065b0:	2302      	movs	r3, #2
  }
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3720      	adds	r7, #32
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b088      	sub	sp, #32
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065c4:	2300      	movs	r3, #0
 80065c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	431a      	orrs	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	4313      	orrs	r3, r2
 80065de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	4b8a      	ldr	r3, [pc, #552]	; (8006810 <UART_SetConfig+0x254>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6812      	ldr	r2, [r2, #0]
 80065ee:	6979      	ldr	r1, [r7, #20]
 80065f0:	430b      	orrs	r3, r1
 80065f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	430a      	orrs	r2, r1
 800662c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a78      	ldr	r2, [pc, #480]	; (8006814 <UART_SetConfig+0x258>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d120      	bne.n	800667a <UART_SetConfig+0xbe>
 8006638:	4b77      	ldr	r3, [pc, #476]	; (8006818 <UART_SetConfig+0x25c>)
 800663a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663c:	f003 0303 	and.w	r3, r3, #3
 8006640:	2b03      	cmp	r3, #3
 8006642:	d817      	bhi.n	8006674 <UART_SetConfig+0xb8>
 8006644:	a201      	add	r2, pc, #4	; (adr r2, 800664c <UART_SetConfig+0x90>)
 8006646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664a:	bf00      	nop
 800664c:	0800665d 	.word	0x0800665d
 8006650:	08006669 	.word	0x08006669
 8006654:	0800666f 	.word	0x0800666f
 8006658:	08006663 	.word	0x08006663
 800665c:	2300      	movs	r3, #0
 800665e:	77fb      	strb	r3, [r7, #31]
 8006660:	e01d      	b.n	800669e <UART_SetConfig+0xe2>
 8006662:	2302      	movs	r3, #2
 8006664:	77fb      	strb	r3, [r7, #31]
 8006666:	e01a      	b.n	800669e <UART_SetConfig+0xe2>
 8006668:	2304      	movs	r3, #4
 800666a:	77fb      	strb	r3, [r7, #31]
 800666c:	e017      	b.n	800669e <UART_SetConfig+0xe2>
 800666e:	2308      	movs	r3, #8
 8006670:	77fb      	strb	r3, [r7, #31]
 8006672:	e014      	b.n	800669e <UART_SetConfig+0xe2>
 8006674:	2310      	movs	r3, #16
 8006676:	77fb      	strb	r3, [r7, #31]
 8006678:	e011      	b.n	800669e <UART_SetConfig+0xe2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a67      	ldr	r2, [pc, #412]	; (800681c <UART_SetConfig+0x260>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d102      	bne.n	800668a <UART_SetConfig+0xce>
 8006684:	2300      	movs	r3, #0
 8006686:	77fb      	strb	r3, [r7, #31]
 8006688:	e009      	b.n	800669e <UART_SetConfig+0xe2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a64      	ldr	r2, [pc, #400]	; (8006820 <UART_SetConfig+0x264>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d102      	bne.n	800669a <UART_SetConfig+0xde>
 8006694:	2300      	movs	r3, #0
 8006696:	77fb      	strb	r3, [r7, #31]
 8006698:	e001      	b.n	800669e <UART_SetConfig+0xe2>
 800669a:	2310      	movs	r3, #16
 800669c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066a6:	d15b      	bne.n	8006760 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80066a8:	7ffb      	ldrb	r3, [r7, #31]
 80066aa:	2b08      	cmp	r3, #8
 80066ac:	d827      	bhi.n	80066fe <UART_SetConfig+0x142>
 80066ae:	a201      	add	r2, pc, #4	; (adr r2, 80066b4 <UART_SetConfig+0xf8>)
 80066b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b4:	080066d9 	.word	0x080066d9
 80066b8:	080066e1 	.word	0x080066e1
 80066bc:	080066e9 	.word	0x080066e9
 80066c0:	080066ff 	.word	0x080066ff
 80066c4:	080066ef 	.word	0x080066ef
 80066c8:	080066ff 	.word	0x080066ff
 80066cc:	080066ff 	.word	0x080066ff
 80066d0:	080066ff 	.word	0x080066ff
 80066d4:	080066f7 	.word	0x080066f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066d8:	f7fd fd5c 	bl	8004194 <HAL_RCC_GetPCLK1Freq>
 80066dc:	61b8      	str	r0, [r7, #24]
        break;
 80066de:	e013      	b.n	8006708 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066e0:	f7fd fd7a 	bl	80041d8 <HAL_RCC_GetPCLK2Freq>
 80066e4:	61b8      	str	r0, [r7, #24]
        break;
 80066e6:	e00f      	b.n	8006708 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066e8:	4b4e      	ldr	r3, [pc, #312]	; (8006824 <UART_SetConfig+0x268>)
 80066ea:	61bb      	str	r3, [r7, #24]
        break;
 80066ec:	e00c      	b.n	8006708 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ee:	f7fd fcd9 	bl	80040a4 <HAL_RCC_GetSysClockFreq>
 80066f2:	61b8      	str	r0, [r7, #24]
        break;
 80066f4:	e008      	b.n	8006708 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066fa:	61bb      	str	r3, [r7, #24]
        break;
 80066fc:	e004      	b.n	8006708 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	77bb      	strb	r3, [r7, #30]
        break;
 8006706:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d074      	beq.n	80067f8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	005a      	lsls	r2, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	085b      	lsrs	r3, r3, #1
 8006718:	441a      	add	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006722:	b29b      	uxth	r3, r3
 8006724:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	2b0f      	cmp	r3, #15
 800672a:	d916      	bls.n	800675a <UART_SetConfig+0x19e>
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006732:	d212      	bcs.n	800675a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	b29b      	uxth	r3, r3
 8006738:	f023 030f 	bic.w	r3, r3, #15
 800673c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	085b      	lsrs	r3, r3, #1
 8006742:	b29b      	uxth	r3, r3
 8006744:	f003 0307 	and.w	r3, r3, #7
 8006748:	b29a      	uxth	r2, r3
 800674a:	89fb      	ldrh	r3, [r7, #14]
 800674c:	4313      	orrs	r3, r2
 800674e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	89fa      	ldrh	r2, [r7, #14]
 8006756:	60da      	str	r2, [r3, #12]
 8006758:	e04e      	b.n	80067f8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	77bb      	strb	r3, [r7, #30]
 800675e:	e04b      	b.n	80067f8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006760:	7ffb      	ldrb	r3, [r7, #31]
 8006762:	2b08      	cmp	r3, #8
 8006764:	d827      	bhi.n	80067b6 <UART_SetConfig+0x1fa>
 8006766:	a201      	add	r2, pc, #4	; (adr r2, 800676c <UART_SetConfig+0x1b0>)
 8006768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676c:	08006791 	.word	0x08006791
 8006770:	08006799 	.word	0x08006799
 8006774:	080067a1 	.word	0x080067a1
 8006778:	080067b7 	.word	0x080067b7
 800677c:	080067a7 	.word	0x080067a7
 8006780:	080067b7 	.word	0x080067b7
 8006784:	080067b7 	.word	0x080067b7
 8006788:	080067b7 	.word	0x080067b7
 800678c:	080067af 	.word	0x080067af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006790:	f7fd fd00 	bl	8004194 <HAL_RCC_GetPCLK1Freq>
 8006794:	61b8      	str	r0, [r7, #24]
        break;
 8006796:	e013      	b.n	80067c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006798:	f7fd fd1e 	bl	80041d8 <HAL_RCC_GetPCLK2Freq>
 800679c:	61b8      	str	r0, [r7, #24]
        break;
 800679e:	e00f      	b.n	80067c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067a0:	4b20      	ldr	r3, [pc, #128]	; (8006824 <UART_SetConfig+0x268>)
 80067a2:	61bb      	str	r3, [r7, #24]
        break;
 80067a4:	e00c      	b.n	80067c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067a6:	f7fd fc7d 	bl	80040a4 <HAL_RCC_GetSysClockFreq>
 80067aa:	61b8      	str	r0, [r7, #24]
        break;
 80067ac:	e008      	b.n	80067c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067b2:	61bb      	str	r3, [r7, #24]
        break;
 80067b4:	e004      	b.n	80067c0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	77bb      	strb	r3, [r7, #30]
        break;
 80067be:	bf00      	nop
    }

    if (pclk != 0U)
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d018      	beq.n	80067f8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	085a      	lsrs	r2, r3, #1
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	441a      	add	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d8:	b29b      	uxth	r3, r3
 80067da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	2b0f      	cmp	r3, #15
 80067e0:	d908      	bls.n	80067f4 <UART_SetConfig+0x238>
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067e8:	d204      	bcs.n	80067f4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	60da      	str	r2, [r3, #12]
 80067f2:	e001      	b.n	80067f8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006804:	7fbb      	ldrb	r3, [r7, #30]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3720      	adds	r7, #32
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	efff69f3 	.word	0xefff69f3
 8006814:	40013800 	.word	0x40013800
 8006818:	40021000 	.word	0x40021000
 800681c:	40004400 	.word	0x40004400
 8006820:	40004800 	.word	0x40004800
 8006824:	007a1200 	.word	0x007a1200

08006828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00a      	beq.n	8006852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00a      	beq.n	8006874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00a      	beq.n	8006896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	430a      	orrs	r2, r1
 8006894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	f003 0310 	and.w	r3, r3, #16
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00a      	beq.n	80068da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	f003 0320 	and.w	r3, r3, #32
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00a      	beq.n	80068fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006904:	2b00      	cmp	r3, #0
 8006906:	d01a      	beq.n	800693e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006926:	d10a      	bne.n	800693e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	605a      	str	r2, [r3, #4]
  }
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af02      	add	r7, sp, #8
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800697c:	f7fb fc02 	bl	8002184 <HAL_GetTick>
 8006980:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0308 	and.w	r3, r3, #8
 800698c:	2b08      	cmp	r3, #8
 800698e:	d10e      	bne.n	80069ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f82d 	bl	80069fe <UART_WaitOnFlagUntilTimeout>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e023      	b.n	80069f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0304 	and.w	r3, r3, #4
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d10e      	bne.n	80069da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f817 	bl	80069fe <UART_WaitOnFlagUntilTimeout>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e00d      	b.n	80069f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2220      	movs	r2, #32
 80069de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2220      	movs	r2, #32
 80069e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b09c      	sub	sp, #112	; 0x70
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	60f8      	str	r0, [r7, #12]
 8006a06:	60b9      	str	r1, [r7, #8]
 8006a08:	603b      	str	r3, [r7, #0]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a0e:	e0a5      	b.n	8006b5c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a16:	f000 80a1 	beq.w	8006b5c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a1a:	f7fb fbb3 	bl	8002184 <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d302      	bcc.n	8006a30 <UART_WaitOnFlagUntilTimeout+0x32>
 8006a2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d13e      	bne.n	8006aae <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a44:	667b      	str	r3, [r7, #100]	; 0x64
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a50:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a56:	e841 2300 	strex	r3, r2, [r1]
 8006a5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1e6      	bne.n	8006a30 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3308      	adds	r3, #8
 8006a68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a6c:	e853 3f00 	ldrex	r3, [r3]
 8006a70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	f023 0301 	bic.w	r3, r3, #1
 8006a78:	663b      	str	r3, [r7, #96]	; 0x60
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3308      	adds	r3, #8
 8006a80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a82:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1e5      	bne.n	8006a62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e067      	b.n	8006b7e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0304 	and.w	r3, r3, #4
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d04f      	beq.n	8006b5c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aca:	d147      	bne.n	8006b5c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ad4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006aea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	461a      	mov	r2, r3
 8006af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af4:	637b      	str	r3, [r7, #52]	; 0x34
 8006af6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e6      	bne.n	8006ad6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	e853 3f00 	ldrex	r3, [r3]
 8006b16:	613b      	str	r3, [r7, #16]
   return(result);
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f023 0301 	bic.w	r3, r3, #1
 8006b1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3308      	adds	r3, #8
 8006b26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b28:	623a      	str	r2, [r7, #32]
 8006b2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2c:	69f9      	ldr	r1, [r7, #28]
 8006b2e:	6a3a      	ldr	r2, [r7, #32]
 8006b30:	e841 2300 	strex	r3, r2, [r1]
 8006b34:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e5      	bne.n	8006b08 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2220      	movs	r2, #32
 8006b46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e010      	b.n	8006b7e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	69da      	ldr	r2, [r3, #28]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	4013      	ands	r3, r2
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	bf0c      	ite	eq
 8006b6c:	2301      	moveq	r3, #1
 8006b6e:	2300      	movne	r3, #0
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	461a      	mov	r2, r3
 8006b74:	79fb      	ldrb	r3, [r7, #7]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	f43f af4a 	beq.w	8006a10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3770      	adds	r7, #112	; 0x70
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <_ZdlPvj>:
 8006b86:	f000 bc6d 	b.w	8007464 <_ZdlPv>

08006b8a <__cxa_end_cleanup>:
 8006b8a:	b41e      	push	{r1, r2, r3, r4}
 8006b8c:	f000 f89b 	bl	8006cc6 <__gnu_end_cleanup>
 8006b90:	bc1e      	pop	{r1, r2, r3, r4}
 8006b92:	f7fa f88d 	bl	8000cb0 <_Unwind_Resume>

08006b96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8006b96:	7803      	ldrb	r3, [r0, #0]
 8006b98:	2b47      	cmp	r3, #71	; 0x47
 8006b9a:	d117      	bne.n	8006bcc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006b9c:	7843      	ldrb	r3, [r0, #1]
 8006b9e:	2b4e      	cmp	r3, #78	; 0x4e
 8006ba0:	d114      	bne.n	8006bcc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006ba2:	7883      	ldrb	r3, [r0, #2]
 8006ba4:	2b55      	cmp	r3, #85	; 0x55
 8006ba6:	d111      	bne.n	8006bcc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006ba8:	78c3      	ldrb	r3, [r0, #3]
 8006baa:	2b43      	cmp	r3, #67	; 0x43
 8006bac:	d10e      	bne.n	8006bcc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006bae:	7903      	ldrb	r3, [r0, #4]
 8006bb0:	2b43      	cmp	r3, #67	; 0x43
 8006bb2:	d10b      	bne.n	8006bcc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006bb4:	7943      	ldrb	r3, [r0, #5]
 8006bb6:	2b2b      	cmp	r3, #43	; 0x2b
 8006bb8:	d108      	bne.n	8006bcc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006bba:	7983      	ldrb	r3, [r0, #6]
 8006bbc:	2b2b      	cmp	r3, #43	; 0x2b
 8006bbe:	d105      	bne.n	8006bcc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006bc0:	79c0      	ldrb	r0, [r0, #7]
 8006bc2:	2801      	cmp	r0, #1
 8006bc4:	bf8c      	ite	hi
 8006bc6:	2000      	movhi	r0, #0
 8006bc8:	2001      	movls	r0, #1
 8006bca:	4770      	bx	lr
 8006bcc:	2000      	movs	r0, #0
 8006bce:	4770      	bx	lr

08006bd0 <__cxa_type_match>:
 8006bd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006bd4:	461d      	mov	r5, r3
 8006bd6:	7803      	ldrb	r3, [r0, #0]
 8006bd8:	2b47      	cmp	r3, #71	; 0x47
 8006bda:	460e      	mov	r6, r1
 8006bdc:	4602      	mov	r2, r0
 8006bde:	79c1      	ldrb	r1, [r0, #7]
 8006be0:	d113      	bne.n	8006c0a <__cxa_type_match+0x3a>
 8006be2:	7843      	ldrb	r3, [r0, #1]
 8006be4:	2b4e      	cmp	r3, #78	; 0x4e
 8006be6:	d110      	bne.n	8006c0a <__cxa_type_match+0x3a>
 8006be8:	7883      	ldrb	r3, [r0, #2]
 8006bea:	2b55      	cmp	r3, #85	; 0x55
 8006bec:	d10d      	bne.n	8006c0a <__cxa_type_match+0x3a>
 8006bee:	78c3      	ldrb	r3, [r0, #3]
 8006bf0:	2b43      	cmp	r3, #67	; 0x43
 8006bf2:	d10a      	bne.n	8006c0a <__cxa_type_match+0x3a>
 8006bf4:	7903      	ldrb	r3, [r0, #4]
 8006bf6:	2b46      	cmp	r3, #70	; 0x46
 8006bf8:	d107      	bne.n	8006c0a <__cxa_type_match+0x3a>
 8006bfa:	7943      	ldrb	r3, [r0, #5]
 8006bfc:	2b4f      	cmp	r3, #79	; 0x4f
 8006bfe:	d104      	bne.n	8006c0a <__cxa_type_match+0x3a>
 8006c00:	7983      	ldrb	r3, [r0, #6]
 8006c02:	2b52      	cmp	r3, #82	; 0x52
 8006c04:	d101      	bne.n	8006c0a <__cxa_type_match+0x3a>
 8006c06:	2900      	cmp	r1, #0
 8006c08:	d031      	beq.n	8006c6e <__cxa_type_match+0x9e>
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	f7ff ffc3 	bl	8006b96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006c10:	f080 0001 	eor.w	r0, r0, #1
 8006c14:	b2c0      	uxtb	r0, r0
 8006c16:	2300      	movs	r3, #0
 8006c18:	2400      	movs	r4, #0
 8006c1a:	9401      	str	r4, [sp, #4]
 8006c1c:	bb53      	cbnz	r3, 8006c74 <__cxa_type_match+0xa4>
 8006c1e:	bb58      	cbnz	r0, 8006c78 <__cxa_type_match+0xa8>
 8006c20:	2901      	cmp	r1, #1
 8006c22:	bf0a      	itet	eq
 8006c24:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8006c28:	f1a2 0320 	subne.w	r3, r2, #32
 8006c2c:	3b78      	subeq	r3, #120	; 0x78
 8006c2e:	2901      	cmp	r1, #1
 8006c30:	bf08      	it	eq
 8006c32:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8006c36:	681c      	ldr	r4, [r3, #0]
 8006c38:	bf18      	it	ne
 8006c3a:	3258      	addne	r2, #88	; 0x58
 8006c3c:	9201      	str	r2, [sp, #4]
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	4620      	mov	r0, r4
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	4798      	blx	r3
 8006c46:	b1c8      	cbz	r0, 8006c7c <__cxa_type_match+0xac>
 8006c48:	9b01      	ldr	r3, [sp, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	9301      	str	r3, [sp, #4]
 8006c4e:	2702      	movs	r7, #2
 8006c50:	6833      	ldr	r3, [r6, #0]
 8006c52:	aa01      	add	r2, sp, #4
 8006c54:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8006c58:	4621      	mov	r1, r4
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	47c0      	blx	r8
 8006c60:	b170      	cbz	r0, 8006c80 <__cxa_type_match+0xb0>
 8006c62:	9b01      	ldr	r3, [sp, #4]
 8006c64:	602b      	str	r3, [r5, #0]
 8006c66:	4638      	mov	r0, r7
 8006c68:	b002      	add	sp, #8
 8006c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c6e:	2301      	movs	r3, #1
 8006c70:	4608      	mov	r0, r1
 8006c72:	e7d1      	b.n	8006c18 <__cxa_type_match+0x48>
 8006c74:	4c03      	ldr	r4, [pc, #12]	; (8006c84 <__cxa_type_match+0xb4>)
 8006c76:	e7e2      	b.n	8006c3e <__cxa_type_match+0x6e>
 8006c78:	4c03      	ldr	r4, [pc, #12]	; (8006c88 <__cxa_type_match+0xb8>)
 8006c7a:	e7e0      	b.n	8006c3e <__cxa_type_match+0x6e>
 8006c7c:	2701      	movs	r7, #1
 8006c7e:	e7e7      	b.n	8006c50 <__cxa_type_match+0x80>
 8006c80:	4607      	mov	r7, r0
 8006c82:	e7f0      	b.n	8006c66 <__cxa_type_match+0x96>
 8006c84:	080077f8 	.word	0x080077f8
 8006c88:	08007800 	.word	0x08007800

08006c8c <__cxa_begin_cleanup>:
 8006c8c:	b510      	push	{r4, lr}
 8006c8e:	4604      	mov	r4, r0
 8006c90:	f000 f832 	bl	8006cf8 <__cxa_get_globals>
 8006c94:	4602      	mov	r2, r0
 8006c96:	4620      	mov	r0, r4
 8006c98:	f1a4 0120 	sub.w	r1, r4, #32
 8006c9c:	f7ff ff7b 	bl	8006b96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006ca0:	b160      	cbz	r0, 8006cbc <__cxa_begin_cleanup+0x30>
 8006ca2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	f844 3c04 	str.w	r3, [r4, #-4]
 8006cae:	d103      	bne.n	8006cb8 <__cxa_begin_cleanup+0x2c>
 8006cb0:	6893      	ldr	r3, [r2, #8]
 8006cb2:	f844 3c08 	str.w	r3, [r4, #-8]
 8006cb6:	6091      	str	r1, [r2, #8]
 8006cb8:	2001      	movs	r0, #1
 8006cba:	bd10      	pop	{r4, pc}
 8006cbc:	6893      	ldr	r3, [r2, #8]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d0f9      	beq.n	8006cb6 <__cxa_begin_cleanup+0x2a>
 8006cc2:	f000 faab 	bl	800721c <_ZSt9terminatev>

08006cc6 <__gnu_end_cleanup>:
 8006cc6:	b510      	push	{r4, lr}
 8006cc8:	f000 f816 	bl	8006cf8 <__cxa_get_globals>
 8006ccc:	6882      	ldr	r2, [r0, #8]
 8006cce:	4601      	mov	r1, r0
 8006cd0:	b90a      	cbnz	r2, 8006cd6 <__gnu_end_cleanup+0x10>
 8006cd2:	f000 faa3 	bl	800721c <_ZSt9terminatev>
 8006cd6:	f102 0420 	add.w	r4, r2, #32
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f7ff ff5b 	bl	8006b96 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006ce0:	b140      	cbz	r0, 8006cf4 <__gnu_end_cleanup+0x2e>
 8006ce2:	69d3      	ldr	r3, [r2, #28]
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	61d3      	str	r3, [r2, #28]
 8006ce8:	b913      	cbnz	r3, 8006cf0 <__gnu_end_cleanup+0x2a>
 8006cea:	6990      	ldr	r0, [r2, #24]
 8006cec:	6088      	str	r0, [r1, #8]
 8006cee:	6193      	str	r3, [r2, #24]
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	bd10      	pop	{r4, pc}
 8006cf4:	6088      	str	r0, [r1, #8]
 8006cf6:	e7fb      	b.n	8006cf0 <__gnu_end_cleanup+0x2a>

08006cf8 <__cxa_get_globals>:
 8006cf8:	4800      	ldr	r0, [pc, #0]	; (8006cfc <__cxa_get_globals+0x4>)
 8006cfa:	4770      	bx	lr
 8006cfc:	20000268 	.word	0x20000268

08006d00 <_ZL12read_uleb128PKhPm>:
 8006d00:	b530      	push	{r4, r5, lr}
 8006d02:	2300      	movs	r3, #0
 8006d04:	461a      	mov	r2, r3
 8006d06:	f810 5b01 	ldrb.w	r5, [r0], #1
 8006d0a:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 8006d0e:	4094      	lsls	r4, r2
 8006d10:	4323      	orrs	r3, r4
 8006d12:	062c      	lsls	r4, r5, #24
 8006d14:	f102 0207 	add.w	r2, r2, #7
 8006d18:	d4f5      	bmi.n	8006d06 <_ZL12read_uleb128PKhPm+0x6>
 8006d1a:	600b      	str	r3, [r1, #0]
 8006d1c:	bd30      	pop	{r4, r5, pc}

08006d1e <_ZL12read_sleb128PKhPl>:
 8006d1e:	b530      	push	{r4, r5, lr}
 8006d20:	2300      	movs	r3, #0
 8006d22:	461a      	mov	r2, r3
 8006d24:	f810 4b01 	ldrb.w	r4, [r0], #1
 8006d28:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8006d2c:	4095      	lsls	r5, r2
 8006d2e:	432b      	orrs	r3, r5
 8006d30:	0625      	lsls	r5, r4, #24
 8006d32:	f102 0207 	add.w	r2, r2, #7
 8006d36:	d4f5      	bmi.n	8006d24 <_ZL12read_sleb128PKhPl+0x6>
 8006d38:	2a1f      	cmp	r2, #31
 8006d3a:	d806      	bhi.n	8006d4a <_ZL12read_sleb128PKhPl+0x2c>
 8006d3c:	0664      	lsls	r4, r4, #25
 8006d3e:	bf42      	ittt	mi
 8006d40:	f04f 34ff 	movmi.w	r4, #4294967295
 8006d44:	fa04 f202 	lslmi.w	r2, r4, r2
 8006d48:	4313      	orrmi	r3, r2
 8006d4a:	600b      	str	r3, [r1, #0]
 8006d4c:	bd30      	pop	{r4, r5, pc}

08006d4e <_ZL28read_encoded_value_with_basehjPKhPj>:
 8006d4e:	2850      	cmp	r0, #80	; 0x50
 8006d50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006d54:	4606      	mov	r6, r0
 8006d56:	4688      	mov	r8, r1
 8006d58:	4615      	mov	r5, r2
 8006d5a:	461f      	mov	r7, r3
 8006d5c:	d108      	bne.n	8006d70 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 8006d5e:	3203      	adds	r2, #3
 8006d60:	f022 0003 	bic.w	r0, r2, #3
 8006d64:	f850 4b04 	ldr.w	r4, [r0], #4
 8006d68:	603c      	str	r4, [r7, #0]
 8006d6a:	b002      	add	sp, #8
 8006d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d70:	f000 030f 	and.w	r3, r0, #15
 8006d74:	2b0c      	cmp	r3, #12
 8006d76:	d82e      	bhi.n	8006dd6 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 8006d78:	e8df f003 	tbb	[pc, r3]
 8006d7c:	251d0725 	.word	0x251d0725
 8006d80:	2d2d2d29 	.word	0x2d2d2d29
 8006d84:	2521182d 	.word	0x2521182d
 8006d88:	29          	.byte	0x29
 8006d89:	00          	.byte	0x00
 8006d8a:	a901      	add	r1, sp, #4
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	f7ff ffb7 	bl	8006d00 <_ZL12read_uleb128PKhPm>
 8006d92:	9c01      	ldr	r4, [sp, #4]
 8006d94:	2c00      	cmp	r4, #0
 8006d96:	d0e7      	beq.n	8006d68 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8006d98:	f006 0370 	and.w	r3, r6, #112	; 0x70
 8006d9c:	2b10      	cmp	r3, #16
 8006d9e:	bf08      	it	eq
 8006da0:	46a8      	moveq	r8, r5
 8006da2:	4444      	add	r4, r8
 8006da4:	0633      	lsls	r3, r6, #24
 8006da6:	bf48      	it	mi
 8006da8:	6824      	ldrmi	r4, [r4, #0]
 8006daa:	e7dd      	b.n	8006d68 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8006dac:	a901      	add	r1, sp, #4
 8006dae:	4628      	mov	r0, r5
 8006db0:	f7ff ffb5 	bl	8006d1e <_ZL12read_sleb128PKhPl>
 8006db4:	e7ed      	b.n	8006d92 <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 8006db6:	4628      	mov	r0, r5
 8006db8:	f830 4b02 	ldrh.w	r4, [r0], #2
 8006dbc:	e7ea      	b.n	8006d94 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8006dc4:	e7e6      	b.n	8006d94 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f850 4b04 	ldr.w	r4, [r0], #4
 8006dcc:	e7e2      	b.n	8006d94 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8006dce:	4628      	mov	r0, r5
 8006dd0:	f850 4b08 	ldr.w	r4, [r0], #8
 8006dd4:	e7de      	b.n	8006d94 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8006dd6:	f000 fbcd 	bl	8007574 <abort>

08006dda <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8006dda:	b508      	push	{r3, lr}
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2bff      	cmp	r3, #255	; 0xff
 8006de0:	4608      	mov	r0, r1
 8006de2:	d010      	beq.n	8006e06 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8006de4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006de8:	2a30      	cmp	r2, #48	; 0x30
 8006dea:	d012      	beq.n	8006e12 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 8006dec:	d807      	bhi.n	8006dfe <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 8006dee:	2a20      	cmp	r2, #32
 8006df0:	d00b      	beq.n	8006e0a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 8006df2:	d802      	bhi.n	8006dfa <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8006df4:	f013 0f60 	tst.w	r3, #96	; 0x60
 8006df8:	d005      	beq.n	8006e06 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8006dfa:	f000 fbbb 	bl	8007574 <abort>
 8006dfe:	2a40      	cmp	r2, #64	; 0x40
 8006e00:	d00b      	beq.n	8006e1a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 8006e02:	2a50      	cmp	r2, #80	; 0x50
 8006e04:	d1f9      	bne.n	8006dfa <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8006e06:	2000      	movs	r0, #0
 8006e08:	bd08      	pop	{r3, pc}
 8006e0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006e0e:	f000 bc98 	b.w	8007742 <_Unwind_GetTextRelBase>
 8006e12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006e16:	f000 bc91 	b.w	800773c <_Unwind_GetDataRelBase>
 8006e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006e1e:	f7fa b91f 	b.w	8001060 <_Unwind_GetRegionStart>

08006e22 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8006e22:	b513      	push	{r0, r1, r4, lr}
 8006e24:	460c      	mov	r4, r1
 8006e26:	4601      	mov	r1, r0
 8006e28:	4620      	mov	r0, r4
 8006e2a:	e9cd 3200 	strd	r3, r2, [sp]
 8006e2e:	f7ff ffd4 	bl	8006dda <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8006e32:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006e36:	4601      	mov	r1, r0
 8006e38:	4620      	mov	r0, r4
 8006e3a:	b002      	add	sp, #8
 8006e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e40:	f7ff bf85 	b.w	8006d4e <_ZL28read_encoded_value_with_basehjPKhPj>

08006e44 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8006e44:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e46:	460c      	mov	r4, r1
 8006e48:	4615      	mov	r5, r2
 8006e4a:	4606      	mov	r6, r0
 8006e4c:	b328      	cbz	r0, 8006e9a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 8006e4e:	f7fa f907 	bl	8001060 <_Unwind_GetRegionStart>
 8006e52:	4603      	mov	r3, r0
 8006e54:	4620      	mov	r0, r4
 8006e56:	602b      	str	r3, [r5, #0]
 8006e58:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006e5c:	29ff      	cmp	r1, #255	; 0xff
 8006e5e:	d01e      	beq.n	8006e9e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 8006e60:	4602      	mov	r2, r0
 8006e62:	1d2b      	adds	r3, r5, #4
 8006e64:	4630      	mov	r0, r6
 8006e66:	f7ff ffdc 	bl	8006e22 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006e6a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006e6e:	752b      	strb	r3, [r5, #20]
 8006e70:	2bff      	cmp	r3, #255	; 0xff
 8006e72:	d016      	beq.n	8006ea2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 8006e74:	2310      	movs	r3, #16
 8006e76:	752b      	strb	r3, [r5, #20]
 8006e78:	a901      	add	r1, sp, #4
 8006e7a:	f7ff ff41 	bl	8006d00 <_ZL12read_uleb128PKhPm>
 8006e7e:	9b01      	ldr	r3, [sp, #4]
 8006e80:	4403      	add	r3, r0
 8006e82:	60eb      	str	r3, [r5, #12]
 8006e84:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006e88:	756b      	strb	r3, [r5, #21]
 8006e8a:	a901      	add	r1, sp, #4
 8006e8c:	f7ff ff38 	bl	8006d00 <_ZL12read_uleb128PKhPm>
 8006e90:	9b01      	ldr	r3, [sp, #4]
 8006e92:	4403      	add	r3, r0
 8006e94:	612b      	str	r3, [r5, #16]
 8006e96:	b002      	add	sp, #8
 8006e98:	bd70      	pop	{r4, r5, r6, pc}
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	e7da      	b.n	8006e54 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 8006e9e:	606b      	str	r3, [r5, #4]
 8006ea0:	e7e3      	b.n	8006e6a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	e7ed      	b.n	8006e82 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

08006ea6 <_Unwind_GetGR>:
 8006ea6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ea8:	ab03      	add	r3, sp, #12
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	2300      	movs	r3, #0
 8006eae:	460a      	mov	r2, r1
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	f7f9 fb55 	bl	8000560 <_Unwind_VRS_Get>
 8006eb6:	9803      	ldr	r0, [sp, #12]
 8006eb8:	b005      	add	sp, #20
 8006eba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006ec0 <__gxx_personality_v0>:
 8006ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	b091      	sub	sp, #68	; 0x44
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	9305      	str	r3, [sp, #20]
 8006eca:	f000 0303 	and.w	r3, r0, #3
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	4606      	mov	r6, r0
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	4617      	mov	r7, r2
 8006ed6:	d00e      	beq.n	8006ef6 <__gxx_personality_v0+0x36>
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d003      	beq.n	8006ee4 <__gxx_personality_v0+0x24>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d13b      	bne.n	8006f58 <__gxx_personality_v0+0x98>
 8006ee0:	0701      	lsls	r1, r0, #28
 8006ee2:	d53b      	bpl.n	8006f5c <__gxx_personality_v0+0x9c>
 8006ee4:	4639      	mov	r1, r7
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f7fa f8a4 	bl	8001034 <__gnu_unwind_frame>
 8006eec:	b390      	cbz	r0, 8006f54 <__gxx_personality_v0+0x94>
 8006eee:	2009      	movs	r0, #9
 8006ef0:	b011      	add	sp, #68	; 0x44
 8006ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef6:	0702      	lsls	r2, r0, #28
 8006ef8:	d406      	bmi.n	8006f08 <__gxx_personality_v0+0x48>
 8006efa:	6a0d      	ldr	r5, [r1, #32]
 8006efc:	4638      	mov	r0, r7
 8006efe:	210d      	movs	r1, #13
 8006f00:	f7ff ffd1 	bl	8006ea6 <_Unwind_GetGR>
 8006f04:	4285      	cmp	r5, r0
 8006f06:	d02b      	beq.n	8006f60 <__gxx_personality_v0+0xa0>
 8006f08:	2002      	movs	r0, #2
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f006 0608 	and.w	r6, r6, #8
 8006f10:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8006f14:	4306      	orrs	r6, r0
 8006f16:	f8cd a000 	str.w	sl, [sp]
 8006f1a:	220c      	movs	r2, #12
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	4638      	mov	r0, r7
 8006f20:	940a      	str	r4, [sp, #40]	; 0x28
 8006f22:	f7f9 fb41 	bl	80005a8 <_Unwind_VRS_Set>
 8006f26:	2e06      	cmp	r6, #6
 8006f28:	d11c      	bne.n	8006f64 <__gxx_personality_v0+0xa4>
 8006f2a:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8006f2e:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 8006f32:	f1b8 0f00 	cmp.w	r8, #0
 8006f36:	bf0c      	ite	eq
 8006f38:	f04f 0b01 	moveq.w	fp, #1
 8006f3c:	f04f 0b03 	movne.w	fp, #3
 8006f40:	f016 0608 	ands.w	r6, r6, #8
 8006f44:	f000 810c 	beq.w	8007160 <__gxx_personality_v0+0x2a0>
 8006f48:	f1bb 0f01 	cmp.w	fp, #1
 8006f4c:	f040 8104 	bne.w	8007158 <__gxx_personality_v0+0x298>
 8006f50:	f000 f964 	bl	800721c <_ZSt9terminatev>
 8006f54:	2008      	movs	r0, #8
 8006f56:	e7cb      	b.n	8006ef0 <__gxx_personality_v0+0x30>
 8006f58:	f000 fb0c 	bl	8007574 <abort>
 8006f5c:	2001      	movs	r0, #1
 8006f5e:	e7d4      	b.n	8006f0a <__gxx_personality_v0+0x4a>
 8006f60:	2006      	movs	r0, #6
 8006f62:	e7d2      	b.n	8006f0a <__gxx_personality_v0+0x4a>
 8006f64:	4638      	mov	r0, r7
 8006f66:	f7fa f881 	bl	800106c <_Unwind_GetLanguageSpecificData>
 8006f6a:	4681      	mov	r9, r0
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d0b9      	beq.n	8006ee4 <__gxx_personality_v0+0x24>
 8006f70:	4652      	mov	r2, sl
 8006f72:	4601      	mov	r1, r0
 8006f74:	4638      	mov	r0, r7
 8006f76:	f7ff ff65 	bl	8006e44 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8006f7a:	4639      	mov	r1, r7
 8006f7c:	4605      	mov	r5, r0
 8006f7e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8006f82:	f7ff ff2a 	bl	8006dda <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8006f86:	210f      	movs	r1, #15
 8006f88:	900c      	str	r0, [sp, #48]	; 0x30
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	f7ff ff8b 	bl	8006ea6 <_Unwind_GetGR>
 8006f90:	f020 0801 	bic.w	r8, r0, #1
 8006f94:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f9a:	42ab      	cmp	r3, r5
 8006f9c:	f240 80c4 	bls.w	8007128 <__gxx_personality_v0+0x268>
 8006fa0:	462a      	mov	r2, r5
 8006fa2:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8006fa6:	ab06      	add	r3, sp, #24
 8006fa8:	2000      	movs	r0, #0
 8006faa:	f7ff ff3a 	bl	8006e22 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006fae:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	ab07      	add	r3, sp, #28
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	f7ff ff33 	bl	8006e22 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006fbc:	ab08      	add	r3, sp, #32
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	f7ff ff2c 	bl	8006e22 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006fca:	a909      	add	r1, sp, #36	; 0x24
 8006fcc:	f7ff fe98 	bl	8006d00 <_ZL12read_uleb128PKhPm>
 8006fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fd2:	9a06      	ldr	r2, [sp, #24]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	4543      	cmp	r3, r8
 8006fd8:	4605      	mov	r5, r0
 8006fda:	d901      	bls.n	8006fe0 <__gxx_personality_v0+0x120>
 8006fdc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006fde:	e7db      	b.n	8006f98 <__gxx_personality_v0+0xd8>
 8006fe0:	9a07      	ldr	r2, [sp, #28]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	4543      	cmp	r3, r8
 8006fe6:	d9d7      	bls.n	8006f98 <__gxx_personality_v0+0xd8>
 8006fe8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fec:	f1b8 0f00 	cmp.w	r8, #0
 8006ff0:	d001      	beq.n	8006ff6 <__gxx_personality_v0+0x136>
 8006ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ff4:	4498      	add	r8, r3
 8006ff6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006ff8:	b115      	cbz	r5, 8007000 <__gxx_personality_v0+0x140>
 8006ffa:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006ffc:	3d01      	subs	r5, #1
 8006ffe:	4405      	add	r5, r0
 8007000:	f1b8 0f00 	cmp.w	r8, #0
 8007004:	f43f af6e 	beq.w	8006ee4 <__gxx_personality_v0+0x24>
 8007008:	2d00      	cmp	r5, #0
 800700a:	f000 80f7 	beq.w	80071fc <__gxx_personality_v0+0x33c>
 800700e:	f016 0308 	ands.w	r3, r6, #8
 8007012:	9302      	str	r3, [sp, #8]
 8007014:	d034      	beq.n	8007080 <__gxx_personality_v0+0x1c0>
 8007016:	2347      	movs	r3, #71	; 0x47
 8007018:	7023      	strb	r3, [r4, #0]
 800701a:	234e      	movs	r3, #78	; 0x4e
 800701c:	7063      	strb	r3, [r4, #1]
 800701e:	2355      	movs	r3, #85	; 0x55
 8007020:	70a3      	strb	r3, [r4, #2]
 8007022:	2343      	movs	r3, #67	; 0x43
 8007024:	70e3      	strb	r3, [r4, #3]
 8007026:	2346      	movs	r3, #70	; 0x46
 8007028:	7123      	strb	r3, [r4, #4]
 800702a:	234f      	movs	r3, #79	; 0x4f
 800702c:	7163      	strb	r3, [r4, #5]
 800702e:	2352      	movs	r3, #82	; 0x52
 8007030:	71a3      	strb	r3, [r4, #6]
 8007032:	2300      	movs	r3, #0
 8007034:	71e3      	strb	r3, [r4, #7]
 8007036:	f04f 0b00 	mov.w	fp, #0
 800703a:	a907      	add	r1, sp, #28
 800703c:	4628      	mov	r0, r5
 800703e:	f7ff fe6e 	bl	8006d1e <_ZL12read_sleb128PKhPl>
 8007042:	a908      	add	r1, sp, #32
 8007044:	9003      	str	r0, [sp, #12]
 8007046:	f7ff fe6a 	bl	8006d1e <_ZL12read_sleb128PKhPl>
 800704a:	9907      	ldr	r1, [sp, #28]
 800704c:	2900      	cmp	r1, #0
 800704e:	d068      	beq.n	8007122 <__gxx_personality_v0+0x262>
 8007050:	dd3a      	ble.n	80070c8 <__gxx_personality_v0+0x208>
 8007052:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8007056:	28ff      	cmp	r0, #255	; 0xff
 8007058:	d032      	beq.n	80070c0 <__gxx_personality_v0+0x200>
 800705a:	f000 0307 	and.w	r3, r0, #7
 800705e:	2b04      	cmp	r3, #4
 8007060:	f63f af7a 	bhi.w	8006f58 <__gxx_personality_v0+0x98>
 8007064:	a201      	add	r2, pc, #4	; (adr r2, 800706c <__gxx_personality_v0+0x1ac>)
 8007066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706a:	bf00      	nop
 800706c:	080070c5 	.word	0x080070c5
 8007070:	08006f59 	.word	0x08006f59
 8007074:	08007093 	.word	0x08007093
 8007078:	080070c5 	.word	0x080070c5
 800707c:	080070bd 	.word	0x080070bd
 8007080:	79e3      	ldrb	r3, [r4, #7]
 8007082:	2b01      	cmp	r3, #1
 8007084:	bf0c      	ite	eq
 8007086:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 800708a:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 800708e:	9305      	str	r3, [sp, #20]
 8007090:	e7d1      	b.n	8007036 <__gxx_personality_v0+0x176>
 8007092:	2502      	movs	r5, #2
 8007094:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007096:	ab09      	add	r3, sp, #36	; 0x24
 8007098:	fb05 2211 	mls	r2, r5, r1, r2
 800709c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800709e:	f7ff fe56 	bl	8006d4e <_ZL28read_encoded_value_with_basehjPKhPj>
 80070a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070a4:	b131      	cbz	r1, 80070b4 <__gxx_personality_v0+0x1f4>
 80070a6:	b37c      	cbz	r4, 8007108 <__gxx_personality_v0+0x248>
 80070a8:	ab05      	add	r3, sp, #20
 80070aa:	2200      	movs	r2, #0
 80070ac:	4620      	mov	r0, r4
 80070ae:	f7ff fd8f 	bl	8006bd0 <__cxa_type_match>
 80070b2:	b348      	cbz	r0, 8007108 <__gxx_personality_v0+0x248>
 80070b4:	9d07      	ldr	r5, [sp, #28]
 80070b6:	f04f 0b03 	mov.w	fp, #3
 80070ba:	e039      	b.n	8007130 <__gxx_personality_v0+0x270>
 80070bc:	2508      	movs	r5, #8
 80070be:	e7e9      	b.n	8007094 <__gxx_personality_v0+0x1d4>
 80070c0:	2500      	movs	r5, #0
 80070c2:	e7e7      	b.n	8007094 <__gxx_personality_v0+0x1d4>
 80070c4:	2504      	movs	r5, #4
 80070c6:	e7e5      	b.n	8007094 <__gxx_personality_v0+0x1d4>
 80070c8:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 80070cc:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 80070d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070d2:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 80070d6:	313f      	adds	r1, #63	; 0x3f
 80070d8:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 80070dc:	b1dc      	cbz	r4, 8007116 <__gxx_personality_v0+0x256>
 80070de:	9a02      	ldr	r2, [sp, #8]
 80070e0:	b9ca      	cbnz	r2, 8007116 <__gxx_personality_v0+0x256>
 80070e2:	9b05      	ldr	r3, [sp, #20]
 80070e4:	9309      	str	r3, [sp, #36]	; 0x24
 80070e6:	3d04      	subs	r5, #4
 80070e8:	f855 1f04 	ldr.w	r1, [r5, #4]!
 80070ec:	b141      	cbz	r1, 8007100 <__gxx_personality_v0+0x240>
 80070ee:	ab09      	add	r3, sp, #36	; 0x24
 80070f0:	2200      	movs	r2, #0
 80070f2:	4429      	add	r1, r5
 80070f4:	4620      	mov	r0, r4
 80070f6:	f7ff fd6b 	bl	8006bd0 <__cxa_type_match>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	d0f4      	beq.n	80070e8 <__gxx_personality_v0+0x228>
 80070fe:	2101      	movs	r1, #1
 8007100:	f081 0101 	eor.w	r1, r1, #1
 8007104:	2900      	cmp	r1, #0
 8007106:	d1d5      	bne.n	80070b4 <__gxx_personality_v0+0x1f4>
 8007108:	9d08      	ldr	r5, [sp, #32]
 800710a:	2d00      	cmp	r5, #0
 800710c:	d072      	beq.n	80071f4 <__gxx_personality_v0+0x334>
 800710e:	9b03      	ldr	r3, [sp, #12]
 8007110:	442b      	add	r3, r5
 8007112:	461d      	mov	r5, r3
 8007114:	e791      	b.n	800703a <__gxx_personality_v0+0x17a>
 8007116:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800711a:	fab1 f181 	clz	r1, r1
 800711e:	0949      	lsrs	r1, r1, #5
 8007120:	e7f0      	b.n	8007104 <__gxx_personality_v0+0x244>
 8007122:	f04f 0b01 	mov.w	fp, #1
 8007126:	e7ef      	b.n	8007108 <__gxx_personality_v0+0x248>
 8007128:	2500      	movs	r5, #0
 800712a:	46a8      	mov	r8, r5
 800712c:	f04f 0b01 	mov.w	fp, #1
 8007130:	07f3      	lsls	r3, r6, #31
 8007132:	f57f af05 	bpl.w	8006f40 <__gxx_personality_v0+0x80>
 8007136:	f1bb 0f02 	cmp.w	fp, #2
 800713a:	f43f aed3 	beq.w	8006ee4 <__gxx_personality_v0+0x24>
 800713e:	210d      	movs	r1, #13
 8007140:	4638      	mov	r0, r7
 8007142:	9e05      	ldr	r6, [sp, #20]
 8007144:	f7ff feaf 	bl	8006ea6 <_Unwind_GetGR>
 8007148:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 800714c:	e9c4 0608 	strd	r0, r6, [r4, #32]
 8007150:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8007154:	2006      	movs	r0, #6
 8007156:	e6cb      	b.n	8006ef0 <__gxx_personality_v0+0x30>
 8007158:	2d00      	cmp	r5, #0
 800715a:	da22      	bge.n	80071a2 <__gxx_personality_v0+0x2e2>
 800715c:	f000 f870 	bl	8007240 <_ZSt10unexpectedv>
 8007160:	f1bb 0f01 	cmp.w	fp, #1
 8007164:	d102      	bne.n	800716c <__gxx_personality_v0+0x2ac>
 8007166:	4620      	mov	r0, r4
 8007168:	f000 f99b 	bl	80074a2 <__cxa_call_terminate>
 800716c:	2d00      	cmp	r5, #0
 800716e:	da18      	bge.n	80071a2 <__gxx_personality_v0+0x2e2>
 8007170:	4652      	mov	r2, sl
 8007172:	4649      	mov	r1, r9
 8007174:	4638      	mov	r0, r7
 8007176:	f7ff fe65 	bl	8006e44 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800717a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800717e:	4639      	mov	r1, r7
 8007180:	f7ff fe2b 	bl	8006dda <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8007184:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007186:	900c      	str	r0, [sp, #48]	; 0x30
 8007188:	43eb      	mvns	r3, r5
 800718a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800718e:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 8007192:	b10a      	cbz	r2, 8007198 <__gxx_personality_v0+0x2d8>
 8007194:	3601      	adds	r6, #1
 8007196:	e7fa      	b.n	800718e <__gxx_personality_v0+0x2ce>
 8007198:	2204      	movs	r2, #4
 800719a:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 800719e:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 80071a2:	2300      	movs	r3, #0
 80071a4:	ae09      	add	r6, sp, #36	; 0x24
 80071a6:	461a      	mov	r2, r3
 80071a8:	4619      	mov	r1, r3
 80071aa:	9600      	str	r6, [sp, #0]
 80071ac:	4638      	mov	r0, r7
 80071ae:	9409      	str	r4, [sp, #36]	; 0x24
 80071b0:	f7f9 f9fa 	bl	80005a8 <_Unwind_VRS_Set>
 80071b4:	2300      	movs	r3, #0
 80071b6:	4619      	mov	r1, r3
 80071b8:	2201      	movs	r2, #1
 80071ba:	9600      	str	r6, [sp, #0]
 80071bc:	4638      	mov	r0, r7
 80071be:	9509      	str	r5, [sp, #36]	; 0x24
 80071c0:	f7f9 f9f2 	bl	80005a8 <_Unwind_VRS_Set>
 80071c4:	210f      	movs	r1, #15
 80071c6:	4638      	mov	r0, r7
 80071c8:	f7ff fe6d 	bl	8006ea6 <_Unwind_GetGR>
 80071cc:	f000 0001 	and.w	r0, r0, #1
 80071d0:	ea40 0008 	orr.w	r0, r0, r8
 80071d4:	2300      	movs	r3, #0
 80071d6:	9009      	str	r0, [sp, #36]	; 0x24
 80071d8:	9600      	str	r6, [sp, #0]
 80071da:	220f      	movs	r2, #15
 80071dc:	4619      	mov	r1, r3
 80071de:	4638      	mov	r0, r7
 80071e0:	f7f9 f9e2 	bl	80005a8 <_Unwind_VRS_Set>
 80071e4:	f1bb 0f02 	cmp.w	fp, #2
 80071e8:	d102      	bne.n	80071f0 <__gxx_personality_v0+0x330>
 80071ea:	4620      	mov	r0, r4
 80071ec:	f7ff fd4e 	bl	8006c8c <__cxa_begin_cleanup>
 80071f0:	2007      	movs	r0, #7
 80071f2:	e67d      	b.n	8006ef0 <__gxx_personality_v0+0x30>
 80071f4:	f1bb 0f00 	cmp.w	fp, #0
 80071f8:	f43f ae74 	beq.w	8006ee4 <__gxx_personality_v0+0x24>
 80071fc:	f04f 0b02 	mov.w	fp, #2
 8007200:	e796      	b.n	8007130 <__gxx_personality_v0+0x270>
 8007202:	bf00      	nop

08007204 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007204:	b508      	push	{r3, lr}
 8007206:	4780      	blx	r0
 8007208:	f000 f9b4 	bl	8007574 <abort>

0800720c <_ZSt13get_terminatev>:
 800720c:	4b02      	ldr	r3, [pc, #8]	; (8007218 <_ZSt13get_terminatev+0xc>)
 800720e:	6818      	ldr	r0, [r3, #0]
 8007210:	f3bf 8f5b 	dmb	ish
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	20000010 	.word	0x20000010

0800721c <_ZSt9terminatev>:
 800721c:	b508      	push	{r3, lr}
 800721e:	f7ff fff5 	bl	800720c <_ZSt13get_terminatev>
 8007222:	f7ff ffef 	bl	8007204 <_ZN10__cxxabiv111__terminateEPFvvE>

08007226 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8007226:	b508      	push	{r3, lr}
 8007228:	4780      	blx	r0
 800722a:	f7ff fff7 	bl	800721c <_ZSt9terminatev>
	...

08007230 <_ZSt14get_unexpectedv>:
 8007230:	4b02      	ldr	r3, [pc, #8]	; (800723c <_ZSt14get_unexpectedv+0xc>)
 8007232:	6818      	ldr	r0, [r3, #0]
 8007234:	f3bf 8f5b 	dmb	ish
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	2000000c 	.word	0x2000000c

08007240 <_ZSt10unexpectedv>:
 8007240:	b508      	push	{r3, lr}
 8007242:	f7ff fff5 	bl	8007230 <_ZSt14get_unexpectedv>
 8007246:	f7ff ffee 	bl	8007226 <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

0800724c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800724c:	b510      	push	{r4, lr}
 800724e:	4b03      	ldr	r3, [pc, #12]	; (800725c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8007250:	6003      	str	r3, [r0, #0]
 8007252:	4604      	mov	r4, r0
 8007254:	f000 f8b2 	bl	80073bc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8007258:	4620      	mov	r0, r4
 800725a:	bd10      	pop	{r4, pc}
 800725c:	08007888 	.word	0x08007888

08007260 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8007260:	b510      	push	{r4, lr}
 8007262:	4604      	mov	r4, r0
 8007264:	f7ff fff2 	bl	800724c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8007268:	4620      	mov	r0, r4
 800726a:	210c      	movs	r1, #12
 800726c:	f7ff fc8b 	bl	8006b86 <_ZdlPvj>
 8007270:	4620      	mov	r0, r4
 8007272:	bd10      	pop	{r4, pc}

08007274 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8007274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007276:	9f08      	ldr	r7, [sp, #32]
 8007278:	4297      	cmp	r7, r2
 800727a:	4605      	mov	r5, r0
 800727c:	460e      	mov	r6, r1
 800727e:	4614      	mov	r4, r2
 8007280:	d00a      	beq.n	8007298 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8007282:	68a8      	ldr	r0, [r5, #8]
 8007284:	6802      	ldr	r2, [r0, #0]
 8007286:	9708      	str	r7, [sp, #32]
 8007288:	6a15      	ldr	r5, [r2, #32]
 800728a:	4631      	mov	r1, r6
 800728c:	4622      	mov	r2, r4
 800728e:	46ac      	mov	ip, r5
 8007290:	b003      	add	sp, #12
 8007292:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007296:	4760      	bx	ip
 8007298:	4619      	mov	r1, r3
 800729a:	9301      	str	r3, [sp, #4]
 800729c:	f000 f858 	bl	8007350 <_ZNKSt9type_infoeqERKS_>
 80072a0:	9b01      	ldr	r3, [sp, #4]
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d0ed      	beq.n	8007282 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 80072a6:	2006      	movs	r0, #6
 80072a8:	b003      	add	sp, #12
 80072aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80072ac:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b0:	460d      	mov	r5, r1
 80072b2:	4619      	mov	r1, r3
 80072b4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80072b8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80072bc:	4681      	mov	r9, r0
 80072be:	4617      	mov	r7, r2
 80072c0:	4698      	mov	r8, r3
 80072c2:	f000 f845 	bl	8007350 <_ZNKSt9type_infoeqERKS_>
 80072c6:	b190      	cbz	r0, 80072ee <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80072c8:	2d00      	cmp	r5, #0
 80072ca:	6034      	str	r4, [r6, #0]
 80072cc:	7137      	strb	r7, [r6, #4]
 80072ce:	db09      	blt.n	80072e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80072d0:	1961      	adds	r1, r4, r5
 80072d2:	458a      	cmp	sl, r1
 80072d4:	bf0c      	ite	eq
 80072d6:	2106      	moveq	r1, #6
 80072d8:	2101      	movne	r1, #1
 80072da:	71b1      	strb	r1, [r6, #6]
 80072dc:	2000      	movs	r0, #0
 80072de:	b001      	add	sp, #4
 80072e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e4:	3502      	adds	r5, #2
 80072e6:	d1f9      	bne.n	80072dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80072e8:	2301      	movs	r3, #1
 80072ea:	71b3      	strb	r3, [r6, #6]
 80072ec:	e7f6      	b.n	80072dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80072ee:	4554      	cmp	r4, sl
 80072f0:	d106      	bne.n	8007300 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80072f2:	4659      	mov	r1, fp
 80072f4:	4648      	mov	r0, r9
 80072f6:	f000 f82b 	bl	8007350 <_ZNKSt9type_infoeqERKS_>
 80072fa:	b108      	cbz	r0, 8007300 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80072fc:	7177      	strb	r7, [r6, #5]
 80072fe:	e7ed      	b.n	80072dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8007300:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8007304:	6803      	ldr	r3, [r0, #0]
 8007306:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 800730a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 800730e:	69dc      	ldr	r4, [r3, #28]
 8007310:	463a      	mov	r2, r7
 8007312:	4643      	mov	r3, r8
 8007314:	4629      	mov	r1, r5
 8007316:	46a4      	mov	ip, r4
 8007318:	b001      	add	sp, #4
 800731a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731e:	4760      	bx	ip

08007320 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8007320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007324:	4607      	mov	r7, r0
 8007326:	460c      	mov	r4, r1
 8007328:	4615      	mov	r5, r2
 800732a:	461e      	mov	r6, r3
 800732c:	f000 f879 	bl	8007422 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8007330:	b948      	cbnz	r0, 8007346 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8007332:	68b8      	ldr	r0, [r7, #8]
 8007334:	6803      	ldr	r3, [r0, #0]
 8007336:	699f      	ldr	r7, [r3, #24]
 8007338:	462a      	mov	r2, r5
 800733a:	4633      	mov	r3, r6
 800733c:	4621      	mov	r1, r4
 800733e:	46bc      	mov	ip, r7
 8007340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007344:	4760      	bx	ip
 8007346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800734a <_ZNSt9type_infoD1Ev>:
 800734a:	4770      	bx	lr

0800734c <_ZNKSt9type_info14__is_pointer_pEv>:
 800734c:	2000      	movs	r0, #0
 800734e:	4770      	bx	lr

08007350 <_ZNKSt9type_infoeqERKS_>:
 8007350:	4281      	cmp	r1, r0
 8007352:	b508      	push	{r3, lr}
 8007354:	d00e      	beq.n	8007374 <_ZNKSt9type_infoeqERKS_+0x24>
 8007356:	6840      	ldr	r0, [r0, #4]
 8007358:	7803      	ldrb	r3, [r0, #0]
 800735a:	2b2a      	cmp	r3, #42	; 0x2a
 800735c:	d00c      	beq.n	8007378 <_ZNKSt9type_infoeqERKS_+0x28>
 800735e:	6849      	ldr	r1, [r1, #4]
 8007360:	780b      	ldrb	r3, [r1, #0]
 8007362:	2b2a      	cmp	r3, #42	; 0x2a
 8007364:	bf08      	it	eq
 8007366:	3101      	addeq	r1, #1
 8007368:	f7f8 ff2e 	bl	80001c8 <strcmp>
 800736c:	fab0 f080 	clz	r0, r0
 8007370:	0940      	lsrs	r0, r0, #5
 8007372:	bd08      	pop	{r3, pc}
 8007374:	2001      	movs	r0, #1
 8007376:	e7fc      	b.n	8007372 <_ZNKSt9type_infoeqERKS_+0x22>
 8007378:	2000      	movs	r0, #0
 800737a:	e7fa      	b.n	8007372 <_ZNKSt9type_infoeqERKS_+0x22>

0800737c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800737c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800737e:	2400      	movs	r4, #0
 8007380:	2310      	movs	r3, #16
 8007382:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007386:	6803      	ldr	r3, [r0, #0]
 8007388:	9400      	str	r4, [sp, #0]
 800738a:	699e      	ldr	r6, [r3, #24]
 800738c:	f88d 4004 	strb.w	r4, [sp, #4]
 8007390:	4615      	mov	r5, r2
 8007392:	466b      	mov	r3, sp
 8007394:	6812      	ldr	r2, [r2, #0]
 8007396:	47b0      	blx	r6
 8007398:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800739c:	f003 0306 	and.w	r3, r3, #6
 80073a0:	2b06      	cmp	r3, #6
 80073a2:	bf03      	ittte	eq
 80073a4:	9b00      	ldreq	r3, [sp, #0]
 80073a6:	602b      	streq	r3, [r5, #0]
 80073a8:	2001      	moveq	r0, #1
 80073aa:	4620      	movne	r0, r4
 80073ac:	b004      	add	sp, #16
 80073ae:	bd70      	pop	{r4, r5, r6, pc}

080073b0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80073b0:	9800      	ldr	r0, [sp, #0]
 80073b2:	4290      	cmp	r0, r2
 80073b4:	bf14      	ite	ne
 80073b6:	2001      	movne	r0, #1
 80073b8:	2006      	moveq	r0, #6
 80073ba:	4770      	bx	lr

080073bc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80073bc:	b510      	push	{r4, lr}
 80073be:	4b03      	ldr	r3, [pc, #12]	; (80073cc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80073c0:	6003      	str	r3, [r0, #0]
 80073c2:	4604      	mov	r4, r0
 80073c4:	f7ff ffc1 	bl	800734a <_ZNSt9type_infoD1Ev>
 80073c8:	4620      	mov	r0, r4
 80073ca:	bd10      	pop	{r4, pc}
 80073cc:	080078fc 	.word	0x080078fc

080073d0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80073d0:	b510      	push	{r4, lr}
 80073d2:	4604      	mov	r4, r0
 80073d4:	f7ff fff2 	bl	80073bc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80073d8:	4620      	mov	r0, r4
 80073da:	2108      	movs	r1, #8
 80073dc:	f7ff fbd3 	bl	8006b86 <_ZdlPvj>
 80073e0:	4620      	mov	r0, r4
 80073e2:	bd10      	pop	{r4, pc}

080073e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80073e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e8:	461f      	mov	r7, r3
 80073ea:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80073ee:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80073f2:	4598      	cmp	r8, r3
 80073f4:	4606      	mov	r6, r0
 80073f6:	4615      	mov	r5, r2
 80073f8:	d107      	bne.n	800740a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80073fa:	9907      	ldr	r1, [sp, #28]
 80073fc:	f7ff ffa8 	bl	8007350 <_ZNKSt9type_infoeqERKS_>
 8007400:	b118      	cbz	r0, 800740a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8007402:	7165      	strb	r5, [r4, #5]
 8007404:	2000      	movs	r0, #0
 8007406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800740a:	4639      	mov	r1, r7
 800740c:	4630      	mov	r0, r6
 800740e:	f7ff ff9f 	bl	8007350 <_ZNKSt9type_infoeqERKS_>
 8007412:	2800      	cmp	r0, #0
 8007414:	d0f6      	beq.n	8007404 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8007416:	2301      	movs	r3, #1
 8007418:	f8c4 8000 	str.w	r8, [r4]
 800741c:	7125      	strb	r5, [r4, #4]
 800741e:	71a3      	strb	r3, [r4, #6]
 8007420:	e7f0      	b.n	8007404 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08007422 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8007422:	b538      	push	{r3, r4, r5, lr}
 8007424:	4615      	mov	r5, r2
 8007426:	461c      	mov	r4, r3
 8007428:	f7ff ff92 	bl	8007350 <_ZNKSt9type_infoeqERKS_>
 800742c:	b120      	cbz	r0, 8007438 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800742e:	2308      	movs	r3, #8
 8007430:	60e3      	str	r3, [r4, #12]
 8007432:	2306      	movs	r3, #6
 8007434:	6025      	str	r5, [r4, #0]
 8007436:	7123      	strb	r3, [r4, #4]
 8007438:	bd38      	pop	{r3, r4, r5, pc}

0800743a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800743a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800743c:	4605      	mov	r5, r0
 800743e:	460c      	mov	r4, r1
 8007440:	9201      	str	r2, [sp, #4]
 8007442:	461e      	mov	r6, r3
 8007444:	f7ff ff84 	bl	8007350 <_ZNKSt9type_infoeqERKS_>
 8007448:	b950      	cbnz	r0, 8007460 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800744a:	2e03      	cmp	r6, #3
 800744c:	d808      	bhi.n	8007460 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	9a01      	ldr	r2, [sp, #4]
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	4629      	mov	r1, r5
 8007456:	4620      	mov	r0, r4
 8007458:	b002      	add	sp, #8
 800745a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800745e:	4718      	bx	r3
 8007460:	b002      	add	sp, #8
 8007462:	bd70      	pop	{r4, r5, r6, pc}

08007464 <_ZdlPv>:
 8007464:	f000 b8b8 	b.w	80075d8 <free>

08007468 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8007468:	7803      	ldrb	r3, [r0, #0]
 800746a:	2b47      	cmp	r3, #71	; 0x47
 800746c:	d117      	bne.n	800749e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800746e:	7843      	ldrb	r3, [r0, #1]
 8007470:	2b4e      	cmp	r3, #78	; 0x4e
 8007472:	d114      	bne.n	800749e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007474:	7883      	ldrb	r3, [r0, #2]
 8007476:	2b55      	cmp	r3, #85	; 0x55
 8007478:	d111      	bne.n	800749e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800747a:	78c3      	ldrb	r3, [r0, #3]
 800747c:	2b43      	cmp	r3, #67	; 0x43
 800747e:	d10e      	bne.n	800749e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007480:	7903      	ldrb	r3, [r0, #4]
 8007482:	2b43      	cmp	r3, #67	; 0x43
 8007484:	d10b      	bne.n	800749e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007486:	7943      	ldrb	r3, [r0, #5]
 8007488:	2b2b      	cmp	r3, #43	; 0x2b
 800748a:	d108      	bne.n	800749e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800748c:	7983      	ldrb	r3, [r0, #6]
 800748e:	2b2b      	cmp	r3, #43	; 0x2b
 8007490:	d105      	bne.n	800749e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007492:	79c0      	ldrb	r0, [r0, #7]
 8007494:	2801      	cmp	r0, #1
 8007496:	bf8c      	ite	hi
 8007498:	2000      	movhi	r0, #0
 800749a:	2001      	movls	r0, #1
 800749c:	4770      	bx	lr
 800749e:	2000      	movs	r0, #0
 80074a0:	4770      	bx	lr

080074a2 <__cxa_call_terminate>:
 80074a2:	b510      	push	{r4, lr}
 80074a4:	4604      	mov	r4, r0
 80074a6:	b148      	cbz	r0, 80074bc <__cxa_call_terminate+0x1a>
 80074a8:	f000 f83b 	bl	8007522 <__cxa_begin_catch>
 80074ac:	4620      	mov	r0, r4
 80074ae:	f7ff ffdb 	bl	8007468 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80074b2:	b118      	cbz	r0, 80074bc <__cxa_call_terminate+0x1a>
 80074b4:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80074b8:	f7ff fea4 	bl	8007204 <_ZN10__cxxabiv111__terminateEPFvvE>
 80074bc:	f7ff feae 	bl	800721c <_ZSt9terminatev>

080074c0 <__cxa_call_unexpected>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4602      	mov	r2, r0
 80074c4:	f7ff ffd0 	bl	8007468 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80074c8:	b140      	cbz	r0, 80074dc <__cxa_call_unexpected+0x1c>
 80074ca:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80074ce:	2500      	movs	r5, #0
 80074d0:	4610      	mov	r0, r2
 80074d2:	f000 f826 	bl	8007522 <__cxa_begin_catch>
 80074d6:	b125      	cbz	r5, 80074e2 <__cxa_call_unexpected+0x22>
 80074d8:	f7ff feb2 	bl	8007240 <_ZSt10unexpectedv>
 80074dc:	4604      	mov	r4, r0
 80074de:	2501      	movs	r5, #1
 80074e0:	e7f6      	b.n	80074d0 <__cxa_call_unexpected+0x10>
 80074e2:	4620      	mov	r0, r4
 80074e4:	f7ff fe9f 	bl	8007226 <_ZN10__cxxabiv112__unexpectedEPFvvE>

080074e8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80074e8:	7803      	ldrb	r3, [r0, #0]
 80074ea:	2b47      	cmp	r3, #71	; 0x47
 80074ec:	d117      	bne.n	800751e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80074ee:	7843      	ldrb	r3, [r0, #1]
 80074f0:	2b4e      	cmp	r3, #78	; 0x4e
 80074f2:	d114      	bne.n	800751e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80074f4:	7883      	ldrb	r3, [r0, #2]
 80074f6:	2b55      	cmp	r3, #85	; 0x55
 80074f8:	d111      	bne.n	800751e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80074fa:	78c3      	ldrb	r3, [r0, #3]
 80074fc:	2b43      	cmp	r3, #67	; 0x43
 80074fe:	d10e      	bne.n	800751e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007500:	7903      	ldrb	r3, [r0, #4]
 8007502:	2b43      	cmp	r3, #67	; 0x43
 8007504:	d10b      	bne.n	800751e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007506:	7943      	ldrb	r3, [r0, #5]
 8007508:	2b2b      	cmp	r3, #43	; 0x2b
 800750a:	d108      	bne.n	800751e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800750c:	7983      	ldrb	r3, [r0, #6]
 800750e:	2b2b      	cmp	r3, #43	; 0x2b
 8007510:	d105      	bne.n	800751e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007512:	79c0      	ldrb	r0, [r0, #7]
 8007514:	2801      	cmp	r0, #1
 8007516:	bf8c      	ite	hi
 8007518:	2000      	movhi	r0, #0
 800751a:	2001      	movls	r0, #1
 800751c:	4770      	bx	lr
 800751e:	2000      	movs	r0, #0
 8007520:	4770      	bx	lr

08007522 <__cxa_begin_catch>:
 8007522:	b538      	push	{r3, r4, r5, lr}
 8007524:	4604      	mov	r4, r0
 8007526:	f7ff fbe7 	bl	8006cf8 <__cxa_get_globals>
 800752a:	6805      	ldr	r5, [r0, #0]
 800752c:	4602      	mov	r2, r0
 800752e:	4620      	mov	r0, r4
 8007530:	f1a4 0120 	sub.w	r1, r4, #32
 8007534:	f7ff ffd8 	bl	80074e8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8007538:	b928      	cbnz	r0, 8007546 <__cxa_begin_catch+0x24>
 800753a:	b10d      	cbz	r5, 8007540 <__cxa_begin_catch+0x1e>
 800753c:	f7ff fe6e 	bl	800721c <_ZSt9terminatev>
 8007540:	6011      	str	r1, [r2, #0]
 8007542:	4628      	mov	r0, r5
 8007544:	bd38      	pop	{r3, r4, r5, pc}
 8007546:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	bfb4      	ite	lt
 800754e:	f1c3 0301 	rsblt	r3, r3, #1
 8007552:	3301      	addge	r3, #1
 8007554:	f844 3c0c 	str.w	r3, [r4, #-12]
 8007558:	6853      	ldr	r3, [r2, #4]
 800755a:	428d      	cmp	r5, r1
 800755c:	f103 33ff 	add.w	r3, r3, #4294967295
 8007560:	6053      	str	r3, [r2, #4]
 8007562:	4620      	mov	r0, r4
 8007564:	bf1c      	itt	ne
 8007566:	f844 5c10 	strne.w	r5, [r4, #-16]
 800756a:	6011      	strne	r1, [r2, #0]
 800756c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800756e:	f7f8 ffef 	bl	8000550 <_Unwind_Complete>
 8007572:	e7e6      	b.n	8007542 <__cxa_begin_catch+0x20>

08007574 <abort>:
 8007574:	b508      	push	{r3, lr}
 8007576:	2006      	movs	r0, #6
 8007578:	f000 f8b6 	bl	80076e8 <raise>
 800757c:	2001      	movs	r0, #1
 800757e:	f7fa fcb7 	bl	8001ef0 <_exit>
	...

08007584 <__errno>:
 8007584:	4b01      	ldr	r3, [pc, #4]	; (800758c <__errno+0x8>)
 8007586:	6818      	ldr	r0, [r3, #0]
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	20000014 	.word	0x20000014

08007590 <__libc_init_array>:
 8007590:	b570      	push	{r4, r5, r6, lr}
 8007592:	4d0d      	ldr	r5, [pc, #52]	; (80075c8 <__libc_init_array+0x38>)
 8007594:	4c0d      	ldr	r4, [pc, #52]	; (80075cc <__libc_init_array+0x3c>)
 8007596:	1b64      	subs	r4, r4, r5
 8007598:	10a4      	asrs	r4, r4, #2
 800759a:	2600      	movs	r6, #0
 800759c:	42a6      	cmp	r6, r4
 800759e:	d109      	bne.n	80075b4 <__libc_init_array+0x24>
 80075a0:	4d0b      	ldr	r5, [pc, #44]	; (80075d0 <__libc_init_array+0x40>)
 80075a2:	4c0c      	ldr	r4, [pc, #48]	; (80075d4 <__libc_init_array+0x44>)
 80075a4:	f000 f8de 	bl	8007764 <_init>
 80075a8:	1b64      	subs	r4, r4, r5
 80075aa:	10a4      	asrs	r4, r4, #2
 80075ac:	2600      	movs	r6, #0
 80075ae:	42a6      	cmp	r6, r4
 80075b0:	d105      	bne.n	80075be <__libc_init_array+0x2e>
 80075b2:	bd70      	pop	{r4, r5, r6, pc}
 80075b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b8:	4798      	blx	r3
 80075ba:	3601      	adds	r6, #1
 80075bc:	e7ee      	b.n	800759c <__libc_init_array+0xc>
 80075be:	f855 3b04 	ldr.w	r3, [r5], #4
 80075c2:	4798      	blx	r3
 80075c4:	3601      	adds	r6, #1
 80075c6:	e7f2      	b.n	80075ae <__libc_init_array+0x1e>
 80075c8:	08007aa8 	.word	0x08007aa8
 80075cc:	08007aa8 	.word	0x08007aa8
 80075d0:	08007aa8 	.word	0x08007aa8
 80075d4:	08007aac 	.word	0x08007aac

080075d8 <free>:
 80075d8:	4b02      	ldr	r3, [pc, #8]	; (80075e4 <free+0xc>)
 80075da:	4601      	mov	r1, r0
 80075dc:	6818      	ldr	r0, [r3, #0]
 80075de:	f000 b80b 	b.w	80075f8 <_free_r>
 80075e2:	bf00      	nop
 80075e4:	20000014 	.word	0x20000014

080075e8 <memset>:
 80075e8:	4402      	add	r2, r0
 80075ea:	4603      	mov	r3, r0
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d100      	bne.n	80075f2 <memset+0xa>
 80075f0:	4770      	bx	lr
 80075f2:	f803 1b01 	strb.w	r1, [r3], #1
 80075f6:	e7f9      	b.n	80075ec <memset+0x4>

080075f8 <_free_r>:
 80075f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075fa:	2900      	cmp	r1, #0
 80075fc:	d048      	beq.n	8007690 <_free_r+0x98>
 80075fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007602:	9001      	str	r0, [sp, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	f1a1 0404 	sub.w	r4, r1, #4
 800760a:	bfb8      	it	lt
 800760c:	18e4      	addlt	r4, r4, r3
 800760e:	f000 f887 	bl	8007720 <__malloc_lock>
 8007612:	4a20      	ldr	r2, [pc, #128]	; (8007694 <_free_r+0x9c>)
 8007614:	9801      	ldr	r0, [sp, #4]
 8007616:	6813      	ldr	r3, [r2, #0]
 8007618:	4615      	mov	r5, r2
 800761a:	b933      	cbnz	r3, 800762a <_free_r+0x32>
 800761c:	6063      	str	r3, [r4, #4]
 800761e:	6014      	str	r4, [r2, #0]
 8007620:	b003      	add	sp, #12
 8007622:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007626:	f000 b881 	b.w	800772c <__malloc_unlock>
 800762a:	42a3      	cmp	r3, r4
 800762c:	d90b      	bls.n	8007646 <_free_r+0x4e>
 800762e:	6821      	ldr	r1, [r4, #0]
 8007630:	1862      	adds	r2, r4, r1
 8007632:	4293      	cmp	r3, r2
 8007634:	bf04      	itt	eq
 8007636:	681a      	ldreq	r2, [r3, #0]
 8007638:	685b      	ldreq	r3, [r3, #4]
 800763a:	6063      	str	r3, [r4, #4]
 800763c:	bf04      	itt	eq
 800763e:	1852      	addeq	r2, r2, r1
 8007640:	6022      	streq	r2, [r4, #0]
 8007642:	602c      	str	r4, [r5, #0]
 8007644:	e7ec      	b.n	8007620 <_free_r+0x28>
 8007646:	461a      	mov	r2, r3
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	b10b      	cbz	r3, 8007650 <_free_r+0x58>
 800764c:	42a3      	cmp	r3, r4
 800764e:	d9fa      	bls.n	8007646 <_free_r+0x4e>
 8007650:	6811      	ldr	r1, [r2, #0]
 8007652:	1855      	adds	r5, r2, r1
 8007654:	42a5      	cmp	r5, r4
 8007656:	d10b      	bne.n	8007670 <_free_r+0x78>
 8007658:	6824      	ldr	r4, [r4, #0]
 800765a:	4421      	add	r1, r4
 800765c:	1854      	adds	r4, r2, r1
 800765e:	42a3      	cmp	r3, r4
 8007660:	6011      	str	r1, [r2, #0]
 8007662:	d1dd      	bne.n	8007620 <_free_r+0x28>
 8007664:	681c      	ldr	r4, [r3, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	6053      	str	r3, [r2, #4]
 800766a:	4421      	add	r1, r4
 800766c:	6011      	str	r1, [r2, #0]
 800766e:	e7d7      	b.n	8007620 <_free_r+0x28>
 8007670:	d902      	bls.n	8007678 <_free_r+0x80>
 8007672:	230c      	movs	r3, #12
 8007674:	6003      	str	r3, [r0, #0]
 8007676:	e7d3      	b.n	8007620 <_free_r+0x28>
 8007678:	6825      	ldr	r5, [r4, #0]
 800767a:	1961      	adds	r1, r4, r5
 800767c:	428b      	cmp	r3, r1
 800767e:	bf04      	itt	eq
 8007680:	6819      	ldreq	r1, [r3, #0]
 8007682:	685b      	ldreq	r3, [r3, #4]
 8007684:	6063      	str	r3, [r4, #4]
 8007686:	bf04      	itt	eq
 8007688:	1949      	addeq	r1, r1, r5
 800768a:	6021      	streq	r1, [r4, #0]
 800768c:	6054      	str	r4, [r2, #4]
 800768e:	e7c7      	b.n	8007620 <_free_r+0x28>
 8007690:	b003      	add	sp, #12
 8007692:	bd30      	pop	{r4, r5, pc}
 8007694:	20000274 	.word	0x20000274

08007698 <_raise_r>:
 8007698:	291f      	cmp	r1, #31
 800769a:	b538      	push	{r3, r4, r5, lr}
 800769c:	4604      	mov	r4, r0
 800769e:	460d      	mov	r5, r1
 80076a0:	d904      	bls.n	80076ac <_raise_r+0x14>
 80076a2:	2316      	movs	r3, #22
 80076a4:	6003      	str	r3, [r0, #0]
 80076a6:	f04f 30ff 	mov.w	r0, #4294967295
 80076aa:	bd38      	pop	{r3, r4, r5, pc}
 80076ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80076ae:	b112      	cbz	r2, 80076b6 <_raise_r+0x1e>
 80076b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076b4:	b94b      	cbnz	r3, 80076ca <_raise_r+0x32>
 80076b6:	4620      	mov	r0, r4
 80076b8:	f000 f830 	bl	800771c <_getpid_r>
 80076bc:	462a      	mov	r2, r5
 80076be:	4601      	mov	r1, r0
 80076c0:	4620      	mov	r0, r4
 80076c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076c6:	f000 b817 	b.w	80076f8 <_kill_r>
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d00a      	beq.n	80076e4 <_raise_r+0x4c>
 80076ce:	1c59      	adds	r1, r3, #1
 80076d0:	d103      	bne.n	80076da <_raise_r+0x42>
 80076d2:	2316      	movs	r3, #22
 80076d4:	6003      	str	r3, [r0, #0]
 80076d6:	2001      	movs	r0, #1
 80076d8:	e7e7      	b.n	80076aa <_raise_r+0x12>
 80076da:	2400      	movs	r4, #0
 80076dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80076e0:	4628      	mov	r0, r5
 80076e2:	4798      	blx	r3
 80076e4:	2000      	movs	r0, #0
 80076e6:	e7e0      	b.n	80076aa <_raise_r+0x12>

080076e8 <raise>:
 80076e8:	4b02      	ldr	r3, [pc, #8]	; (80076f4 <raise+0xc>)
 80076ea:	4601      	mov	r1, r0
 80076ec:	6818      	ldr	r0, [r3, #0]
 80076ee:	f7ff bfd3 	b.w	8007698 <_raise_r>
 80076f2:	bf00      	nop
 80076f4:	20000014 	.word	0x20000014

080076f8 <_kill_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	4d07      	ldr	r5, [pc, #28]	; (8007718 <_kill_r+0x20>)
 80076fc:	2300      	movs	r3, #0
 80076fe:	4604      	mov	r4, r0
 8007700:	4608      	mov	r0, r1
 8007702:	4611      	mov	r1, r2
 8007704:	602b      	str	r3, [r5, #0]
 8007706:	f7fa fbe3 	bl	8001ed0 <_kill>
 800770a:	1c43      	adds	r3, r0, #1
 800770c:	d102      	bne.n	8007714 <_kill_r+0x1c>
 800770e:	682b      	ldr	r3, [r5, #0]
 8007710:	b103      	cbz	r3, 8007714 <_kill_r+0x1c>
 8007712:	6023      	str	r3, [r4, #0]
 8007714:	bd38      	pop	{r3, r4, r5, pc}
 8007716:	bf00      	nop
 8007718:	2000027c 	.word	0x2000027c

0800771c <_getpid_r>:
 800771c:	f7fa bbd0 	b.w	8001ec0 <_getpid>

08007720 <__malloc_lock>:
 8007720:	4801      	ldr	r0, [pc, #4]	; (8007728 <__malloc_lock+0x8>)
 8007722:	f000 b809 	b.w	8007738 <__retarget_lock_acquire_recursive>
 8007726:	bf00      	nop
 8007728:	20000284 	.word	0x20000284

0800772c <__malloc_unlock>:
 800772c:	4801      	ldr	r0, [pc, #4]	; (8007734 <__malloc_unlock+0x8>)
 800772e:	f000 b804 	b.w	800773a <__retarget_lock_release_recursive>
 8007732:	bf00      	nop
 8007734:	20000284 	.word	0x20000284

08007738 <__retarget_lock_acquire_recursive>:
 8007738:	4770      	bx	lr

0800773a <__retarget_lock_release_recursive>:
 800773a:	4770      	bx	lr

0800773c <_Unwind_GetDataRelBase>:
 800773c:	b508      	push	{r3, lr}
 800773e:	f7ff ff19 	bl	8007574 <abort>

08007742 <_Unwind_GetTextRelBase>:
 8007742:	b508      	push	{r3, lr}
 8007744:	f7ff fffa 	bl	800773c <_Unwind_GetDataRelBase>

08007748 <memcpy>:
 8007748:	440a      	add	r2, r1
 800774a:	4291      	cmp	r1, r2
 800774c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007750:	d100      	bne.n	8007754 <memcpy+0xc>
 8007752:	4770      	bx	lr
 8007754:	b510      	push	{r4, lr}
 8007756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800775a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800775e:	4291      	cmp	r1, r2
 8007760:	d1f9      	bne.n	8007756 <memcpy+0xe>
 8007762:	bd10      	pop	{r4, pc}

08007764 <_init>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	bf00      	nop
 8007768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776a:	bc08      	pop	{r3}
 800776c:	469e      	mov	lr, r3
 800776e:	4770      	bx	lr

08007770 <_fini>:
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007772:	bf00      	nop
 8007774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007776:	bc08      	pop	{r3}
 8007778:	469e      	mov	lr, r3
 800777a:	4770      	bx	lr
