
MD-5_firm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08008464  08008464  00018464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000098  08008600  08008600  00018600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000108  08008698  08008698  00018698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087a0  080087a0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080087a0  080087a0  000187a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087a8  080087a8  000187a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080087ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000344  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003ac  200003ac  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011d78  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029d8  00000000  00000000  00031e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  000347e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bcc  00000000  00000000  00035708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f112  00000000  00000000  000362d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fc3b  00000000  00000000  000553e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9c3c  00000000  00000000  00065021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000045  00000000  00000000  0010ec5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f38  00000000  00000000  0010eca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000020c  00000000  00000000  00113bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <strcmp>:
 8000188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800018c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000190:	2a01      	cmp	r2, #1
 8000192:	bf28      	it	cs
 8000194:	429a      	cmpcs	r2, r3
 8000196:	d0f7      	beq.n	8000188 <strcmp>
 8000198:	1ad0      	subs	r0, r2, r3
 800019a:	4770      	bx	lr

0800019c <__restore_core_regs>:
 800019c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80001a0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80001a4:	469c      	mov	ip, r3
 80001a6:	46a6      	mov	lr, r4
 80001a8:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80001ac:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80001b0:	46e5      	mov	sp, ip
 80001b2:	bd00      	pop	{pc}

080001b4 <__gnu_Unwind_Restore_VFP>:
 80001b4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop

080001bc <__gnu_Unwind_Save_VFP>:
 80001bc:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop

080001c4 <__gnu_Unwind_Restore_VFP_D>:
 80001c4:	ec90 0b20 	vldmia	r0, {d0-d15}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop

080001cc <__gnu_Unwind_Save_VFP_D>:
 80001cc:	ec80 0b20 	vstmia	r0, {d0-d15}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop

080001d4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80001d4:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop

080001dc <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80001dc:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop

080001e4 <__gnu_Unwind_Restore_WMMXD>:
 80001e4:	ecf0 0102 	ldfe	f0, [r0], #8
 80001e8:	ecf0 1102 	ldfe	f1, [r0], #8
 80001ec:	ecf0 2102 	ldfe	f2, [r0], #8
 80001f0:	ecf0 3102 	ldfe	f3, [r0], #8
 80001f4:	ecf0 4102 	ldfe	f4, [r0], #8
 80001f8:	ecf0 5102 	ldfe	f5, [r0], #8
 80001fc:	ecf0 6102 	ldfe	f6, [r0], #8
 8000200:	ecf0 7102 	ldfe	f7, [r0], #8
 8000204:	ecf0 8102 	ldfp	f0, [r0], #8
 8000208:	ecf0 9102 	ldfp	f1, [r0], #8
 800020c:	ecf0 a102 	ldfp	f2, [r0], #8
 8000210:	ecf0 b102 	ldfp	f3, [r0], #8
 8000214:	ecf0 c102 	ldfp	f4, [r0], #8
 8000218:	ecf0 d102 	ldfp	f5, [r0], #8
 800021c:	ecf0 e102 	ldfp	f6, [r0], #8
 8000220:	ecf0 f102 	ldfp	f7, [r0], #8
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop

08000228 <__gnu_Unwind_Save_WMMXD>:
 8000228:	ece0 0102 	stfe	f0, [r0], #8
 800022c:	ece0 1102 	stfe	f1, [r0], #8
 8000230:	ece0 2102 	stfe	f2, [r0], #8
 8000234:	ece0 3102 	stfe	f3, [r0], #8
 8000238:	ece0 4102 	stfe	f4, [r0], #8
 800023c:	ece0 5102 	stfe	f5, [r0], #8
 8000240:	ece0 6102 	stfe	f6, [r0], #8
 8000244:	ece0 7102 	stfe	f7, [r0], #8
 8000248:	ece0 8102 	stfp	f0, [r0], #8
 800024c:	ece0 9102 	stfp	f1, [r0], #8
 8000250:	ece0 a102 	stfp	f2, [r0], #8
 8000254:	ece0 b102 	stfp	f3, [r0], #8
 8000258:	ece0 c102 	stfp	f4, [r0], #8
 800025c:	ece0 d102 	stfp	f5, [r0], #8
 8000260:	ece0 e102 	stfp	f6, [r0], #8
 8000264:	ece0 f102 	stfp	f7, [r0], #8
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop

0800026c <__gnu_Unwind_Restore_WMMXC>:
 800026c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000270:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000274:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000278:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__gnu_Unwind_Save_WMMXC>:
 8000280:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000284:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000288:	fca0 a101 	stc2	1, cr10, [r0], #4
 800028c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop

08000294 <_Unwind_RaiseException>:
 8000294:	46ec      	mov	ip, sp
 8000296:	b500      	push	{lr}
 8000298:	e92d 5000 	stmdb	sp!, {ip, lr}
 800029c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80002a0:	f04f 0300 	mov.w	r3, #0
 80002a4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80002a8:	a901      	add	r1, sp, #4
 80002aa:	f007 fb63 	bl	8007974 <__gnu_Unwind_RaiseException>
 80002ae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80002b2:	b012      	add	sp, #72	; 0x48
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop

080002b8 <_Unwind_Resume>:
 80002b8:	46ec      	mov	ip, sp
 80002ba:	b500      	push	{lr}
 80002bc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80002c0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80002c4:	f04f 0300 	mov.w	r3, #0
 80002c8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80002cc:	a901      	add	r1, sp, #4
 80002ce:	f007 fb8d 	bl	80079ec <__gnu_Unwind_Resume>
 80002d2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80002d6:	b012      	add	sp, #72	; 0x48
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop

080002dc <_Unwind_Resume_or_Rethrow>:
 80002dc:	46ec      	mov	ip, sp
 80002de:	b500      	push	{lr}
 80002e0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80002e4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e92d 000c 	stmdb	sp!, {r2, r3}
 80002f0:	a901      	add	r1, sp, #4
 80002f2:	f007 fb9b 	bl	8007a2c <__gnu_Unwind_Resume_or_Rethrow>
 80002f6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80002fa:	b012      	add	sp, #72	; 0x48
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <_Unwind_ForcedUnwind>:
 8000300:	46ec      	mov	ip, sp
 8000302:	b500      	push	{lr}
 8000304:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000308:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800030c:	f04f 0300 	mov.w	r3, #0
 8000310:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000314:	ab01      	add	r3, sp, #4
 8000316:	f007 fb61 	bl	80079dc <__gnu_Unwind_ForcedUnwind>
 800031a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800031e:	b012      	add	sp, #72	; 0x48
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop

08000324 <_Unwind_Backtrace>:
 8000324:	46ec      	mov	ip, sp
 8000326:	b500      	push	{lr}
 8000328:	e92d 5000 	stmdb	sp!, {ip, lr}
 800032c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000330:	f04f 0300 	mov.w	r3, #0
 8000334:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000338:	aa01      	add	r2, sp, #4
 800033a:	f007 fbcd 	bl	8007ad8 <__gnu_Unwind_Backtrace>
 800033e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000342:	b012      	add	sp, #72	; 0x48
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop

08000348 <deregister_tm_clones>:
 8000348:	4803      	ldr	r0, [pc, #12]	; (8000358 <deregister_tm_clones+0x10>)
 800034a:	4b04      	ldr	r3, [pc, #16]	; (800035c <deregister_tm_clones+0x14>)
 800034c:	4283      	cmp	r3, r0
 800034e:	d002      	beq.n	8000356 <deregister_tm_clones+0xe>
 8000350:	4b03      	ldr	r3, [pc, #12]	; (8000360 <deregister_tm_clones+0x18>)
 8000352:	b103      	cbz	r3, 8000356 <deregister_tm_clones+0xe>
 8000354:	4718      	bx	r3
 8000356:	4770      	bx	lr
 8000358:	20000068 	.word	0x20000068
 800035c:	20000068 	.word	0x20000068
 8000360:	00000000 	.word	0x00000000

08000364 <register_tm_clones>:
 8000364:	4805      	ldr	r0, [pc, #20]	; (800037c <register_tm_clones+0x18>)
 8000366:	4b06      	ldr	r3, [pc, #24]	; (8000380 <register_tm_clones+0x1c>)
 8000368:	1a1b      	subs	r3, r3, r0
 800036a:	0fd9      	lsrs	r1, r3, #31
 800036c:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000370:	1049      	asrs	r1, r1, #1
 8000372:	d002      	beq.n	800037a <register_tm_clones+0x16>
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <register_tm_clones+0x20>)
 8000376:	b103      	cbz	r3, 800037a <register_tm_clones+0x16>
 8000378:	4718      	bx	r3
 800037a:	4770      	bx	lr
 800037c:	20000068 	.word	0x20000068
 8000380:	20000068 	.word	0x20000068
 8000384:	00000000 	.word	0x00000000

08000388 <__do_global_dtors_aux>:
 8000388:	b510      	push	{r4, lr}
 800038a:	4c06      	ldr	r4, [pc, #24]	; (80003a4 <__do_global_dtors_aux+0x1c>)
 800038c:	7823      	ldrb	r3, [r4, #0]
 800038e:	b943      	cbnz	r3, 80003a2 <__do_global_dtors_aux+0x1a>
 8000390:	f7ff ffda 	bl	8000348 <deregister_tm_clones>
 8000394:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <__do_global_dtors_aux+0x20>)
 8000396:	b113      	cbz	r3, 800039e <__do_global_dtors_aux+0x16>
 8000398:	4804      	ldr	r0, [pc, #16]	; (80003ac <__do_global_dtors_aux+0x24>)
 800039a:	f3af 8000 	nop.w
 800039e:	2301      	movs	r3, #1
 80003a0:	7023      	strb	r3, [r4, #0]
 80003a2:	bd10      	pop	{r4, pc}
 80003a4:	20000068 	.word	0x20000068
 80003a8:	00000000 	.word	0x00000000
 80003ac:	0800844c 	.word	0x0800844c

080003b0 <frame_dummy>:
 80003b0:	b508      	push	{r3, lr}
 80003b2:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <frame_dummy+0x18>)
 80003b4:	b11b      	cbz	r3, 80003be <frame_dummy+0xe>
 80003b6:	4905      	ldr	r1, [pc, #20]	; (80003cc <frame_dummy+0x1c>)
 80003b8:	4805      	ldr	r0, [pc, #20]	; (80003d0 <frame_dummy+0x20>)
 80003ba:	f3af 8000 	nop.w
 80003be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80003c2:	f7ff bfcf 	b.w	8000364 <register_tm_clones>
 80003c6:	bf00      	nop
 80003c8:	00000000 	.word	0x00000000
 80003cc:	2000006c 	.word	0x2000006c
 80003d0:	0800844c 	.word	0x0800844c

080003d4 <_ZN7stm_CAN9CAN_303x84sendEmNS_7ID_typeENS_10Frame_typeEPhm>:

#include "CAN303x8.h"

namespace stm_CAN {

HAL_StatusTypeDef CAN_303x8::send(uint32_t ID, ID_type ide, Frame_type rtr, uint8_t *data, uint32_t data_len) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08c      	sub	sp, #48	; 0x30
 80003d8:	af00      	add	r7, sp, #0
 80003da:	60f8      	str	r0, [r7, #12]
 80003dc:	60b9      	str	r1, [r7, #8]
 80003de:	4611      	mov	r1, r2
 80003e0:	461a      	mov	r2, r3
 80003e2:	460b      	mov	r3, r1
 80003e4:	71fb      	strb	r3, [r7, #7]
 80003e6:	4613      	mov	r3, r2
 80003e8:	71bb      	strb	r3, [r7, #6]
	if(data_len > 8)
 80003ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003ec:	2b08      	cmp	r3, #8
 80003ee:	d901      	bls.n	80003f4 <_ZN7stm_CAN9CAN_303x84sendEmNS_7ID_typeENS_10Frame_typeEPhm+0x20>
		return HAL_ERROR;
 80003f0:	2301      	movs	r3, #1
 80003f2:	e017      	b.n	8000424 <_ZN7stm_CAN9CAN_303x84sendEmNS_7ID_typeENS_10Frame_typeEPhm+0x50>
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	TxHeader.StdId = ID;
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	61bb      	str	r3, [r7, #24]
	TxHeader.ExtId = ID;
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	61fb      	str	r3, [r7, #28]
	TxHeader.IDE = ide;
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = rtr;
 8000400:	79bb      	ldrb	r3, [r7, #6]
 8000402:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.DLC = data_len;
 8000404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000406:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.TransmitGlobalTime = DISABLE;
 8000408:	2300      	movs	r3, #0
 800040a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	return HAL_CAN_AddTxMessage(hcan, &TxHeader, data, &TxMailbox);
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	6858      	ldr	r0, [r3, #4]
 8000412:	f107 0314 	add.w	r3, r7, #20
 8000416:	f107 0118 	add.w	r1, r7, #24
 800041a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800041c:	f001 fdb6 	bl	8001f8c <HAL_CAN_AddTxMessage>
 8000420:	4603      	mov	r3, r0
 8000422:	bf00      	nop
}
 8000424:	4618      	mov	r0, r3
 8000426:	3730      	adds	r7, #48	; 0x30
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE>:

HAL_StatusTypeDef CAN_303x8::subscribe_message(uint32_t ID, ID_type ide, Frame_type rtr, FIFO fifo) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b092      	sub	sp, #72	; 0x48
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	4611      	mov	r1, r2
 8000438:	461a      	mov	r2, r3
 800043a:	460b      	mov	r3, r1
 800043c:	71fb      	strb	r3, [r7, #7]
 800043e:	4613      	mov	r3, r2
 8000440:	71bb      	strb	r3, [r7, #6]
	uint32_t id_for_filter = (ID << ((ide == ID_type::std)?21:3)) | ide | rtr;
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d101      	bne.n	800044c <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x20>
 8000448:	2315      	movs	r3, #21
 800044a:	e000      	b.n	800044e <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x22>
 800044c:	2303      	movs	r3, #3
 800044e:	68ba      	ldr	r2, [r7, #8]
 8000450:	409a      	lsls	r2, r3
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	431a      	orrs	r2, r3
 8000456:	79bb      	ldrb	r3, [r7, #6]
 8000458:	4313      	orrs	r3, r2
 800045a:	63fb      	str	r3, [r7, #60]	; 0x3c
	int filter_buffer_index = -1;
 800045c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000460:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i < 14; i++){
 8000462:	2300      	movs	r3, #0
 8000464:	643b      	str	r3, [r7, #64]	; 0x40
 8000466:	e04f      	b.n	8000508 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xdc>
		switch(this->filter_buffer[i].list){
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800046c:	323c      	adds	r2, #60	; 0x3c
 800046e:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8000472:	2b02      	cmp	r3, #2
 8000474:	d021      	beq.n	80004ba <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x8e>
 8000476:	2b02      	cmp	r3, #2
 8000478:	dc43      	bgt.n	8000502 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xd6>
 800047a:	2b00      	cmp	r3, #0
 800047c:	d002      	beq.n	8000484 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x58>
 800047e:	2b01      	cmp	r3, #1
 8000480:	d003      	beq.n	800048a <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x5e>
 8000482:	e03e      	b.n	8000502 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xd6>
		case filter_buffer_status::list::empty:
			filter_buffer_index = i;
 8000484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000486:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8000488:	e03b      	b.n	8000502 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xd6>
		case filter_buffer_status::list::filled_harf:
			if(this->filter_buffer[i].fifo == fifo){
 800048a:	68fa      	ldr	r2, [r7, #12]
 800048c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800048e:	333c      	adds	r3, #60	; 0x3c
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	4413      	add	r3, r2
 8000494:	785b      	ldrb	r3, [r3, #1]
 8000496:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800049a:	429a      	cmp	r2, r3
 800049c:	d12c      	bne.n	80004f8 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xcc>
				if(this->subscribed_id[i*2] == id_for_filter)
 800049e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80004a0:	005a      	lsls	r2, r3, #1
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	3202      	adds	r2, #2
 80004a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d101      	bne.n	80004b4 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x88>
					return HAL_OK;
 80004b0:	2300      	movs	r3, #0
 80004b2:	e0a1      	b.n	80005f8 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
				else{
					filter_buffer_index = i;
 80004b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80004b6:	647b      	str	r3, [r7, #68]	; 0x44
					break;
 80004b8:	e023      	b.n	8000502 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xd6>
				}
			}else{
				continue;
			}
		case filter_buffer_status::list::filled:
			if(this->filter_buffer[i].fifo == fifo){
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80004be:	333c      	adds	r3, #60	; 0x3c
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	4413      	add	r3, r2
 80004c4:	785b      	ldrb	r3, [r3, #1]
 80004c6:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d116      	bne.n	80004fc <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xd0>
				if(this->subscribed_id[i*2] == id_for_filter || this->subscribed_id[i*2+1] == id_for_filter)
 80004ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80004d0:	005a      	lsls	r2, r3, #1
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	3202      	adds	r2, #2
 80004d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80004dc:	429a      	cmp	r2, r3
 80004de:	d009      	beq.n	80004f4 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xc8>
 80004e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	1c5a      	adds	r2, r3, #1
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	3202      	adds	r2, #2
 80004ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d105      	bne.n	8000500 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xd4>
					return HAL_OK;
 80004f4:	2300      	movs	r3, #0
 80004f6:	e07f      	b.n	80005f8 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
				continue;
 80004f8:	bf00      	nop
 80004fa:	e002      	b.n	8000502 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xd6>
				else{
					continue;
				}
			}else{
				continue;
 80004fc:	bf00      	nop
 80004fe:	e000      	b.n	8000502 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xd6>
					continue;
 8000500:	bf00      	nop
	for(int i = 0; i < 14; i++){
 8000502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000504:	3301      	adds	r3, #1
 8000506:	643b      	str	r3, [r7, #64]	; 0x40
 8000508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800050a:	2b0d      	cmp	r3, #13
 800050c:	ddac      	ble.n	8000468 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x3c>
			}
		}
	}
	if(filter_buffer_index == -1)
 800050e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000514:	d101      	bne.n	800051a <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xee>
		return HAL_ERROR;
 8000516:	2301      	movs	r3, #1
 8000518:	e06e      	b.n	80005f8 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
	uint32_t id_for_filter_first = (this->filter_buffer[filter_buffer_index].list == filter_buffer_status::list::empty)?id_for_filter:this->subscribed_id[filter_buffer_index*2];
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800051e:	323c      	adds	r2, #60	; 0x3c
 8000520:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d006      	beq.n	8000536 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x10a>
 8000528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800052a:	005a      	lsls	r2, r3, #1
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	3202      	adds	r2, #2
 8000530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000534:	e000      	b.n	8000538 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x10c>
 8000536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000538:	63bb      	str	r3, [r7, #56]	; 0x38
	CAN_FilterTypeDef filter;
	filter.FilterIdHigh = id_for_filter_first >> 16;
 800053a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800053c:	0c1b      	lsrs	r3, r3, #16
 800053e:	613b      	str	r3, [r7, #16]
	filter.FilterIdLow = id_for_filter_first & 0xffff;
 8000540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000542:	b29b      	uxth	r3, r3
 8000544:	617b      	str	r3, [r7, #20]
	filter.FilterMaskIdHigh = id_for_filter >> 16; 
 8000546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000548:	0c1b      	lsrs	r3, r3, #16
 800054a:	61bb      	str	r3, [r7, #24]
	filter.FilterMaskIdLow = id_for_filter & 0xffff;
 800054c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800054e:	b29b      	uxth	r3, r3
 8000550:	61fb      	str	r3, [r7, #28]
	filter.FilterScale = Filter_scale::_32;
 8000552:	2301      	movs	r3, #1
 8000554:	62fb      	str	r3, [r7, #44]	; 0x2c
	filter.FilterMode = Filter_mode::list;
 8000556:	2301      	movs	r3, #1
 8000558:	62bb      	str	r3, [r7, #40]	; 0x28
	filter.FilterFIFOAssignment = fifo;
 800055a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800055e:	623b      	str	r3, [r7, #32]
	filter.FilterActivation = Filter_activation::enable;
 8000560:	2301      	movs	r3, #1
 8000562:	633b      	str	r3, [r7, #48]	; 0x30
	filter.FilterBank = filter_buffer_index;
 8000564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000566:	627b      	str	r3, [r7, #36]	; 0x24
	if(HAL_CAN_ConfigFilter(this->hcan, &filter) != HAL_OK)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	f107 0210 	add.w	r2, r7, #16
 8000570:	4611      	mov	r1, r2
 8000572:	4618      	mov	r0, r3
 8000574:	f001 fbb3 	bl	8001cde <HAL_CAN_ConfigFilter>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	bf14      	ite	ne
 800057e:	2301      	movne	r3, #1
 8000580:	2300      	moveq	r3, #0
 8000582:	b2db      	uxtb	r3, r3
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x160>
		return HAL_ERROR;
 8000588:	2301      	movs	r3, #1
 800058a:	e035      	b.n	80005f8 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
	this->filter_buffer[filter_buffer_index].fifo = fifo;
 800058c:	68fa      	ldr	r2, [r7, #12]
 800058e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000590:	333c      	adds	r3, #60	; 0x3c
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	4413      	add	r3, r2
 8000596:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800059a:	705a      	strb	r2, [r3, #1]
	if(this->filter_buffer[filter_buffer_index].list == filter_buffer_status::list::empty){
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80005a0:	323c      	adds	r2, #60	; 0x3c
 80005a2:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d10e      	bne.n	80005c8 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x19c>
		this->filter_buffer[filter_buffer_index].list = filter_buffer_status::list::filled_harf;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80005ae:	323c      	adds	r2, #60	; 0x3c
 80005b0:	2101      	movs	r1, #1
 80005b2:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
		this->subscribed_id[filter_buffer_index*2] = id_for_filter;
 80005b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005b8:	005a      	lsls	r2, r3, #1
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	3202      	adds	r2, #2
 80005be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80005c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return HAL_OK;
 80005c4:	2300      	movs	r3, #0
 80005c6:	e017      	b.n	80005f8 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
	}else if(this->filter_buffer[filter_buffer_index].list == filter_buffer_status::list::filled_harf){
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80005cc:	323c      	adds	r2, #60	; 0x3c
 80005ce:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d10f      	bne.n	80005f6 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1ca>
		this->filter_buffer[filter_buffer_index].list = filter_buffer_status::list::filled;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80005da:	323c      	adds	r2, #60	; 0x3c
 80005dc:	2102      	movs	r1, #2
 80005de:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
		this->subscribed_id[filter_buffer_index*2+1] = id_for_filter;
 80005e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	1c5a      	adds	r2, r3, #1
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3202      	adds	r2, #2
 80005ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80005ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return HAL_OK;
 80005f2:	2300      	movs	r3, #0
 80005f4:	e000      	b.n	80005f8 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
	}else{
		return HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
	}
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3748      	adds	r7, #72	; 0x48
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh>:
	}else{
		return HAL_ERROR;
	}
}

read_retval CAN_303x8::read(FIFO fifo, uint8_t *data){
 8000600:	b580      	push	{r7, lr}
 8000602:	b08c      	sub	sp, #48	; 0x30
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	460b      	mov	r3, r1
 800060a:	607a      	str	r2, [r7, #4]
 800060c:	72fb      	strb	r3, [r7, #11]
	uint32_t fifofilllevel = HAL_CAN_GetRxFifoFillLevel(this->hcan, fifo);
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	7afa      	ldrb	r2, [r7, #11]
 8000614:	4611      	mov	r1, r2
 8000616:	4618      	mov	r0, r3
 8000618:	f001 fea5 	bl	8002366 <HAL_CAN_GetRxFifoFillLevel>
 800061c:	62f8      	str	r0, [r7, #44]	; 0x2c
	if(fifofilllevel == 0)
 800061e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000620:	2b00      	cmp	r3, #0
 8000622:	d101      	bne.n	8000628 <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh+0x28>
		return read_retval::no_message;
 8000624:	2300      	movs	r3, #0
 8000626:	e017      	b.n	8000658 <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh+0x58>
	CAN_RxHeaderTypeDef RxHeader;
	if(HAL_CAN_GetRxMessage(this->hcan, fifo, &RxHeader, data) != HAL_OK)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	6858      	ldr	r0, [r3, #4]
 800062c:	7af9      	ldrb	r1, [r7, #11]
 800062e:	f107 0210 	add.w	r2, r7, #16
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f001 fd85 	bl	8002142 <HAL_CAN_GetRxMessage>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	bf14      	ite	ne
 800063e:	2301      	movne	r3, #1
 8000640:	2300      	moveq	r3, #0
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh+0x4c>
		return read_retval::error;
 8000648:	2303      	movs	r3, #3
 800064a:	e005      	b.n	8000658 <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh+0x58>
	if(fifofilllevel == 1){
 800064c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800064e:	2b01      	cmp	r3, #1
 8000650:	d101      	bne.n	8000656 <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh+0x56>
		return read_retval::message_received;
 8000652:	2301      	movs	r3, #1
 8000654:	e000      	b.n	8000658 <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh+0x58>
	}else{
		return read_retval::more_message_received;
 8000656:	2302      	movs	r3, #2
	}
}
 8000658:	4618      	mov	r0, r3
 800065a:	3730      	adds	r7, #48	; 0x30
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef>:
	}else{
		return read_retval::more_message_received;
	}
}

CAN_303x8::CAN_303x8(CAN_HandleTypeDef *hcan) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	4a08      	ldr	r2, [pc, #32]	; (800068c <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef+0x2c>)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->hcan = hcan;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	683a      	ldr	r2, [r7, #0]
 8000674:	605a      	str	r2, [r3, #4]
	HAL_CAN_Start(this->hcan);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fbf9 	bl	8001e72 <HAL_CAN_Start>
}
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	08008498 	.word	0x08008498

08000690 <_ZN7stm_CAN9CAN_303x8D1Ev>:

CAN_303x8::~CAN_303x8() {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <_ZN7stm_CAN9CAN_303x8D1Ev+0x24>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	HAL_CAN_Stop(this->hcan);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fc29 	bl	8001efa <HAL_CAN_Stop>
}
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	08008498 	.word	0x08008498

080006b8 <_ZN7stm_CAN9CAN_303x8D0Ev>:
CAN_303x8::~CAN_303x8() {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
}
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff ffe5 	bl	8000690 <_ZN7stm_CAN9CAN_303x8D1Ev>
 80006c6:	2194      	movs	r1, #148	; 0x94
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f006 fa28 	bl	8006b1e <_ZdlPvj>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <_ZZ4mainENKUlPhE_clES_>:
  const uint32_t original_id = 0x0100;
  can.subscribe_message(0x00, stm_CAN::ID_type::std, stm_CAN::Frame_type::data, stm_CAN::FIFO::_0);
  can.subscribe_message(0x01, stm_CAN::ID_type::ext, stm_CAN::Frame_type::data, stm_CAN::FIFO::_0);
  can.subscribe_message(original_id, stm_CAN::ID_type::ext, stm_CAN::Frame_type::data, stm_CAN::FIFO::_0);

  auto process_data = [&](uint8_t* data){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af02      	add	r7, sp, #8
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
    switch (data[0])
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b05      	cmp	r3, #5
 80006e8:	d870      	bhi.n	80007cc <_ZZ4mainENKUlPhE_clES_+0xf4>
 80006ea:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <_ZZ4mainENKUlPhE_clES_+0x18>)
 80006ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f0:	08000709 	.word	0x08000709
 80006f4:	08000713 	.word	0x08000713
 80006f8:	0800071d 	.word	0x0800071d
 80006fc:	0800072b 	.word	0x0800072b
 8000700:	0800077f 	.word	0x0800077f
 8000704:	080007af 	.word	0x080007af
      {
      case 0x00:  //stop
        state = state::STATE_STOPPED;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2201      	movs	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
        break;
 8000710:	e05d      	b.n	80007ce <_ZZ4mainENKUlPhE_clES_+0xf6>
        state = state::STATE_STOPPED;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
      case 0x01:  //start
        state = state::STATE_RUNNING;
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
        break;
 800071a:	e058      	b.n	80007ce <_ZZ4mainENKUlPhE_clES_+0xf6>
      case 0x02:  //reset
        HAL_NVIC_SystemReset();
 800071c:	f001 ff67 	bl	80025ee <HAL_NVIC_SystemReset>
        state = state::STATE_STOPPED;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
        state = state::STATE_STOPPED;
 8000724:	2201      	movs	r2, #1
 8000726:	701a      	strb	r2, [r3, #0]
        break;
 8000728:	e051      	b.n	80007ce <_ZZ4mainENKUlPhE_clES_+0xf6>
      case 0x03:  //get original id
        {
          uint8_t data_response[4];
          for( uint8_t i = 0; i < 4; i++){
 800072a:	2300      	movs	r3, #0
 800072c:	73fb      	strb	r3, [r7, #15]
 800072e:	e00d      	b.n	800074c <_ZZ4mainENKUlPhE_clES_+0x74>
            data_response[i] = (original_id >> (i*8)) & 0xFF;
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000738:	40da      	lsrs	r2, r3
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	3310      	adds	r3, #16
 8000740:	443b      	add	r3, r7
 8000742:	f803 2c08 	strb.w	r2, [r3, #-8]
          for( uint8_t i = 0; i < 4; i++){
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	3301      	adds	r3, #1
 800074a:	73fb      	strb	r3, [r7, #15]
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	2b03      	cmp	r3, #3
 8000750:	d9ee      	bls.n	8000730 <_ZZ4mainENKUlPhE_clES_+0x58>
          }
          can.send(
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6858      	ldr	r0, [r3, #4]
          (data[1]) | (data[2] << 8),
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	3302      	adds	r3, #2
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	021b      	lsls	r3, r3, #8
 8000766:	4313      	orrs	r3, r2
          can.send(
 8000768:	4619      	mov	r1, r3
 800076a:	2304      	movs	r3, #4
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	2300      	movs	r3, #0
 8000776:	2200      	movs	r2, #0
 8000778:	f7ff fe2c 	bl	80003d4 <_ZN7stm_CAN9CAN_303x84sendEmNS_7ID_typeENS_10Frame_typeEPhm>
          stm_CAN::Frame_type::data,
          data_response,
          4
          );
        }
        break;
 800077c:	e027      	b.n	80007ce <_ZZ4mainENKUlPhE_clES_+0xf6>
          can.send(
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6858      	ldr	r0, [r3, #4]
      case 0x04:  //set data id
        can.subscribe_message(
          (data[1]) | (data[2] << 8), 
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	3302      	adds	r3, #2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	4313      	orrs	r3, r2
        can.subscribe_message(
 8000794:	4619      	mov	r1, r3
 8000796:	2301      	movs	r3, #1
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2300      	movs	r3, #0
 800079c:	2200      	movs	r2, #0
 800079e:	f7ff fe45 	bl	800042c <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE>
          stm_CAN::ID_type::std, 
          stm_CAN::Frame_type::data, 
          stm_CAN::FIFO::_1);
        spnum = data[3];
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	683a      	ldr	r2, [r7, #0]
 80007a8:	78d2      	ldrb	r2, [r2, #3]
 80007aa:	701a      	strb	r2, [r3, #0]
        break;
 80007ac:	e00f      	b.n	80007ce <_ZZ4mainENKUlPhE_clES_+0xf6>
      case 0x05:  //set pwm
        output_value = (data[1]) | (data[2] << 8);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	b219      	sxth	r1, r3
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	3302      	adds	r3, #2
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	021b      	lsls	r3, r3, #8
 80007be:	b21a      	sxth	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	430a      	orrs	r2, r1
 80007c6:	b212      	sxth	r2, r2
 80007c8:	801a      	strh	r2, [r3, #0]
        break;
 80007ca:	e000      	b.n	80007ce <_ZZ4mainENKUlPhE_clES_+0xf6>
      
      default:
        break;
 80007cc:	bf00      	nop
      }
    return;
 80007ce:	bf00      	nop
  };
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop

080007d8 <main>:
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b0ca      	sub	sp, #296	; 0x128
 80007dc:	af02      	add	r7, sp, #8
  HAL_Init();
 80007de:	f001 f8f9 	bl	80019d4 <HAL_Init>
  SystemClock_Config();
 80007e2:	f000 f96d 	bl	8000ac0 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80007e6:	f000 fc45 	bl	8001074 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80007ea:	f000 fc25 	bl	8001038 <_ZL11MX_DMA_Initv>
  MX_CAN_Init();
 80007ee:	f000 f9d5 	bl	8000b9c <_ZL11MX_CAN_Initv>
  MX_TIM1_Init();
 80007f2:	f000 fa0f 	bl	8000c14 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 80007f6:	f000 fac1 	bl	8000d7c <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80007fa:	f000 fb59 	bl	8000eb0 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 80007fe:	f000 fbe7 	bl	8000fd0 <_ZL19MX_USART1_UART_Initv>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000802:	2100      	movs	r1, #0
 8000804:	48a4      	ldr	r0, [pc, #656]	; (8000a98 <main+0x2c0>)
 8000806:	f003 feab 	bl	8004560 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800080a:	2100      	movs	r1, #0
 800080c:	48a2      	ldr	r0, [pc, #648]	; (8000a98 <main+0x2c0>)
 800080e:	f005 fc0f 	bl	8006030 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000812:	2104      	movs	r1, #4
 8000814:	48a0      	ldr	r0, [pc, #640]	; (8000a98 <main+0x2c0>)
 8000816:	f003 fea3 	bl	8004560 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800081a:	2104      	movs	r1, #4
 800081c:	489e      	ldr	r0, [pc, #632]	; (8000a98 <main+0x2c0>)
 800081e:	f005 fc07 	bl	8006030 <HAL_TIMEx_PWMN_Start>
  } state = STATE_STOPPED;
 8000822:	2301      	movs	r3, #1
 8000824:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  int16_t output_value = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  uint8_t spnum = 0;  //specify number of recieved data to drive
 800082e:	2300      	movs	r3, #0
 8000830:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  stm_CAN::CAN_303x8 can(&hcan);
 8000834:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000838:	4998      	ldr	r1, [pc, #608]	; (8000a9c <main+0x2c4>)
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff10 	bl	8000660 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef>
  ws2812::ws2812_double pixels(&htim3, TIM_CHANNEL_4, &hdma_tim3_ch4_up, 45, 22);
 8000840:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000844:	2316      	movs	r3, #22
 8000846:	9301      	str	r3, [sp, #4]
 8000848:	232d      	movs	r3, #45	; 0x2d
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	4b94      	ldr	r3, [pc, #592]	; (8000aa0 <main+0x2c8>)
 800084e:	220c      	movs	r2, #12
 8000850:	4994      	ldr	r1, [pc, #592]	; (8000aa4 <main+0x2cc>)
 8000852:	f001 f872 	bl	800193a <_ZN6ws281213ws2812_doubleC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>
  ws2812::color _orenge = {48, 24, 0};
 8000856:	4a94      	ldr	r2, [pc, #592]	; (8000aa8 <main+0x2d0>)
 8000858:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800085c:	6812      	ldr	r2, [r2, #0]
 800085e:	4611      	mov	r1, r2
 8000860:	8019      	strh	r1, [r3, #0]
 8000862:	3302      	adds	r3, #2
 8000864:	0c12      	lsrs	r2, r2, #16
 8000866:	701a      	strb	r2, [r3, #0]
  ws2812::color _blue = {0, 48, 128};
 8000868:	4a90      	ldr	r2, [pc, #576]	; (8000aac <main+0x2d4>)
 800086a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800086e:	6812      	ldr	r2, [r2, #0]
 8000870:	4611      	mov	r1, r2
 8000872:	8019      	strh	r1, [r3, #0]
 8000874:	3302      	adds	r3, #2
 8000876:	0c12      	lsrs	r2, r2, #16
 8000878:	701a      	strb	r2, [r3, #0]
  ws2812::color _green = {0, 48, 0};
 800087a:	2300      	movs	r3, #0
 800087c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000880:	2330      	movs	r3, #48	; 0x30
 8000882:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000886:	2300      	movs	r3, #0
 8000888:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  ws2812::color _purple = {24, 0, 72};
 800088c:	4a88      	ldr	r2, [pc, #544]	; (8000ab0 <main+0x2d8>)
 800088e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000892:	6812      	ldr	r2, [r2, #0]
 8000894:	4611      	mov	r1, r2
 8000896:	8019      	strh	r1, [r3, #0]
 8000898:	3302      	adds	r3, #2
 800089a:	0c12      	lsrs	r2, r2, #16
 800089c:	701a      	strb	r2, [r3, #0]
  ws2812::color _white = {12, 16, 32};
 800089e:	4a85      	ldr	r2, [pc, #532]	; (8000ab4 <main+0x2dc>)
 80008a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a4:	6812      	ldr	r2, [r2, #0]
 80008a6:	4611      	mov	r1, r2
 80008a8:	8019      	strh	r1, [r3, #0]
 80008aa:	3302      	adds	r3, #2
 80008ac:	0c12      	lsrs	r2, r2, #16
 80008ae:	701a      	strb	r2, [r3, #0]
  ws2812::color _full = {255, 255, 255};
 80008b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80008b8:	4a7f      	ldr	r2, [pc, #508]	; (8000ab8 <main+0x2e0>)
 80008ba:	6812      	ldr	r2, [r2, #0]
 80008bc:	4611      	mov	r1, r2
 80008be:	8019      	strh	r1, [r3, #0]
 80008c0:	3302      	adds	r3, #2
 80008c2:	0c12      	lsrs	r2, r2, #16
 80008c4:	701a      	strb	r2, [r3, #0]
  const uint32_t original_id = 0x0100;
 80008c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  can.subscribe_message(0x00, stm_CAN::ID_type::std, stm_CAN::Frame_type::data, stm_CAN::FIFO::_0);
 80008ce:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80008d2:	2300      	movs	r3, #0
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	2300      	movs	r3, #0
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	f7ff fda6 	bl	800042c <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE>
  can.subscribe_message(0x01, stm_CAN::ID_type::ext, stm_CAN::Frame_type::data, stm_CAN::FIFO::_0);
 80008e0:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80008e4:	2300      	movs	r3, #0
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	2300      	movs	r3, #0
 80008ea:	2204      	movs	r2, #4
 80008ec:	2101      	movs	r1, #1
 80008ee:	f7ff fd9d 	bl	800042c <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE>
  can.subscribe_message(original_id, stm_CAN::ID_type::ext, stm_CAN::Frame_type::data, stm_CAN::FIFO::_0);
 80008f2:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80008f6:	2300      	movs	r3, #0
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2300      	movs	r3, #0
 80008fc:	2204      	movs	r2, #4
 80008fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000902:	f7ff fd93 	bl	800042c <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE>
  };
 8000906:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800090a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800090e:	f207 121b 	addw	r2, r7, #283	; 0x11b
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000918:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800091c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000926:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800092a:	f207 1217 	addw	r2, r7, #279	; 0x117
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000934:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000938:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800093c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    uint8_t data_command[8];
    if(CAN_read(&can, data_command, stm_CAN::FIFO::_0)){
 800093e:	f107 0108 	add.w	r1, r7, #8
 8000942:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000946:	2200      	movs	r2, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fbdd 	bl	8001108 <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	bf14      	ite	ne
 8000954:	2301      	movne	r3, #1
 8000956:	2300      	moveq	r3, #0
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d007      	beq.n	800096e <main+0x196>
      process_data(data_command);
 800095e:	f107 0208 	add.w	r2, r7, #8
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	4611      	mov	r1, r2
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff feb5 	bl	80006d8 <_ZZ4mainENKUlPhE_clES_>
    }
    uint8_t data_drive[8];
    if(CAN_read(&can, data_drive, stm_CAN::FIFO::_1)){
 800096e:	4639      	mov	r1, r7
 8000970:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000974:	2201      	movs	r2, #1
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fbc6 	bl	8001108 <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	bf14      	ite	ne
 8000982:	2301      	movne	r3, #1
 8000984:	2300      	moveq	r3, #0
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b00      	cmp	r3, #0
 800098a:	d023      	beq.n	80009d4 <main+0x1fc>
      output_value = (data_drive[spnum*2] << (spnum*2*8)) | (data_drive[spnum*2 + 1] << (spnum*2*8 + 8));
 800098c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000996:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800099a:	5cd3      	ldrb	r3, [r2, r3]
 800099c:	461a      	mov	r2, r3
 800099e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80009a2:	011b      	lsls	r3, r3, #4
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	b21a      	sxth	r2, r3
 80009aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	3301      	adds	r3, #1
 80009b2:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80009b6:	f5a1 7190 	sub.w	r1, r1, #288	; 0x120
 80009ba:	5ccb      	ldrb	r3, [r1, r3]
 80009bc:	4619      	mov	r1, r3
 80009be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80009c2:	011b      	lsls	r3, r3, #4
 80009c4:	3308      	adds	r3, #8
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	4313      	orrs	r3, r2
 80009ce:	b21b      	sxth	r3, r3
 80009d0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
    }

    switch (state)
 80009d4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d022      	beq.n	8000a22 <main+0x24a>
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d150      	bne.n	8000a82 <main+0x2aa>
    {
    case state::STATE_STOPPED:
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2120      	movs	r1, #32
 80009e4:	4835      	ldr	r0, [pc, #212]	; (8000abc <main+0x2e4>)
 80009e6:	f002 f959 	bl	8002c9c <HAL_GPIO_WritePin>
      write_PWM(&htim1, TIM_CHANNEL_1, TIM_CHANNEL_2, 0);
 80009ea:	2300      	movs	r3, #0
 80009ec:	2204      	movs	r2, #4
 80009ee:	2100      	movs	r1, #0
 80009f0:	4829      	ldr	r0, [pc, #164]	; (8000a98 <main+0x2c0>)
 80009f2:	f000 fbf0 	bl	80011d6 <_Z9write_PWMP17TIM_HandleTypeDefmms>
      pixels.colors[0] = _purple;
 80009f6:	f107 0377 	add.w	r3, r7, #119	; 0x77
 80009fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009fe:	8811      	ldrh	r1, [r2, #0]
 8000a00:	7892      	ldrb	r2, [r2, #2]
 8000a02:	8019      	strh	r1, [r3, #0]
 8000a04:	709a      	strb	r2, [r3, #2]
      pixels.colors[1] = _purple;
 8000a06:	f107 037a 	add.w	r3, r7, #122	; 0x7a
 8000a0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a0e:	8811      	ldrh	r1, [r2, #0]
 8000a10:	7892      	ldrb	r2, [r2, #2]
 8000a12:	8019      	strh	r1, [r3, #0]
 8000a14:	709a      	strb	r2, [r3, #2]
      pixels.rend();
 8000a16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 ff6a 	bl	80018f4 <_ZN6ws281213ws2812_double4rendEv>
      break;
 8000a20:	e02f      	b.n	8000a82 <main+0x2aa>
    case state::STATE_RUNNING:
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2120      	movs	r1, #32
 8000a26:	4825      	ldr	r0, [pc, #148]	; (8000abc <main+0x2e4>)
 8000a28:	f002 f938 	bl	8002c9c <HAL_GPIO_WritePin>
      write_PWM(&htim1, TIM_CHANNEL_1, TIM_CHANNEL_2, output_value);
 8000a2c:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8000a30:	2204      	movs	r2, #4
 8000a32:	2100      	movs	r1, #0
 8000a34:	4818      	ldr	r0, [pc, #96]	; (8000a98 <main+0x2c0>)
 8000a36:	f000 fbce 	bl	80011d6 <_Z9write_PWMP17TIM_HandleTypeDefmms>
      pixels.colors[0] = (output_value > 0)? _blue : (output_value == 0)? _white : _orenge;
 8000a3a:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	dd02      	ble.n	8000a48 <main+0x270>
 8000a42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a46:	e008      	b.n	8000a5a <main+0x282>
 8000a48:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d102      	bne.n	8000a56 <main+0x27e>
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	e001      	b.n	8000a5a <main+0x282>
 8000a56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a5a:	f107 0277 	add.w	r2, r7, #119	; 0x77
 8000a5e:	8819      	ldrh	r1, [r3, #0]
 8000a60:	789b      	ldrb	r3, [r3, #2]
 8000a62:	8011      	strh	r1, [r2, #0]
 8000a64:	7093      	strb	r3, [r2, #2]
      pixels.colors[1] = _white;
 8000a66:	f107 037a 	add.w	r3, r7, #122	; 0x7a
 8000a6a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a6e:	8811      	ldrh	r1, [r2, #0]
 8000a70:	7892      	ldrb	r2, [r2, #2]
 8000a72:	8019      	strh	r1, [r3, #0]
 8000a74:	709a      	strb	r2, [r3, #2]
      pixels.rend();
 8000a76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 ff3a 	bl	80018f4 <_ZN6ws281213ws2812_double4rendEv>
      break;
 8000a80:	bf00      	nop
    }
    HAL_Delay(1);
 8000a82:	2001      	movs	r0, #1
 8000a84:	f001 f80c 	bl	8001aa0 <HAL_Delay>
#endif
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  }
 8000a88:	e759      	b.n	800093e <main+0x166>
  /* USER CODE END 3 */
}
 8000a8a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fdfe 	bl	8000690 <_ZN7stm_CAN9CAN_303x8D1Ev>
 8000a94:	f006 f845 	bl	8006b22 <__cxa_end_cleanup>
 8000a98:	200000ac 	.word	0x200000ac
 8000a9c:	20000084 	.word	0x20000084
 8000aa0:	20000190 	.word	0x20000190
 8000aa4:	20000144 	.word	0x20000144
 8000aa8:	08008464 	.word	0x08008464
 8000aac:	08008468 	.word	0x08008468
 8000ab0:	0800846c 	.word	0x0800846c
 8000ab4:	08008470 	.word	0x08008470
 8000ab8:	08008474 	.word	0x08008474
 8000abc:	48000400 	.word	0x48000400

08000ac0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b096      	sub	sp, #88	; 0x58
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aca:	2228      	movs	r2, #40	; 0x28
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f006 fd64 	bl	800759c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]
 8000af2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000af4:	2301      	movs	r3, #1
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000afc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000afe:	2301      	movs	r3, #1
 8000b00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b02:	2301      	movs	r3, #1
 8000b04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b06:	2302      	movs	r3, #2
 8000b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b0e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b10:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b14:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 f8d6 	bl	8002ccc <HAL_RCC_OscConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	bf14      	ite	ne
 8000b26:	2301      	movne	r3, #1
 8000b28:	2300      	moveq	r3, #0
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8000b30:	f000 fc2c 	bl	800138c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	230f      	movs	r3, #15
 8000b36:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	2102      	movs	r1, #2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f003 f8f9 	bl	8003d48 <HAL_RCC_ClockConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	bf14      	ite	ne
 8000b5c:	2301      	movne	r3, #1
 8000b5e:	2300      	moveq	r3, #0
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 8000b66:	f000 fc11 	bl	800138c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8000b6a:	f241 0301 	movw	r3, #4097	; 0x1001
 8000b6e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f003 fb1c 	bl	80041b8 <HAL_RCCEx_PeriphCLKConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	bf14      	ite	ne
 8000b86:	2301      	movne	r3, #1
 8000b88:	2300      	moveq	r3, #0
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000b90:	f000 fbfc 	bl	800138c <Error_Handler>
  }
}
 8000b94:	bf00      	nop
 8000b96:	3758      	adds	r7, #88	; 0x58
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <_ZL11MX_CAN_Initv+0x70>)
 8000ba2:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <_ZL11MX_CAN_Initv+0x74>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000ba6:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <_ZL11MX_CAN_Initv+0x70>)
 8000ba8:	2202      	movs	r2, #2
 8000baa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000bac:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <_ZL11MX_CAN_Initv+0x70>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bb2:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <_ZL11MX_CAN_Initv+0x70>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <_ZL11MX_CAN_Initv+0x70>)
 8000bba:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000bbe:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <_ZL11MX_CAN_Initv+0x70>)
 8000bc2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000bc6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <_ZL11MX_CAN_Initv+0x70>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <_ZL11MX_CAN_Initv+0x70>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <_ZL11MX_CAN_Initv+0x70>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <_ZL11MX_CAN_Initv+0x70>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <_ZL11MX_CAN_Initv+0x70>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <_ZL11MX_CAN_Initv+0x70>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000bec:	4807      	ldr	r0, [pc, #28]	; (8000c0c <_ZL11MX_CAN_Initv+0x70>)
 8000bee:	f000 ff7b 	bl	8001ae8 <HAL_CAN_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	bf14      	ite	ne
 8000bf8:	2301      	movne	r3, #1
 8000bfa:	2300      	moveq	r3, #0
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <_ZL11MX_CAN_Initv+0x6a>
  {
    Error_Handler();
 8000c02:	f000 fbc3 	bl	800138c <Error_Handler>
    Error_Handler();
  }
#endif
  /* USER CODE END CAN_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000084 	.word	0x20000084
 8000c10:	40006400 	.word	0x40006400

08000c14 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b096      	sub	sp, #88	; 0x58
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]
 8000c36:	615a      	str	r2, [r3, #20]
 8000c38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	222c      	movs	r2, #44	; 0x2c
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f006 fcab 	bl	800759c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c46:	4b4b      	ldr	r3, [pc, #300]	; (8000d74 <_ZL12MX_TIM1_Initv+0x160>)
 8000c48:	4a4b      	ldr	r2, [pc, #300]	; (8000d78 <_ZL12MX_TIM1_Initv+0x164>)
 8000c4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c4c:	4b49      	ldr	r3, [pc, #292]	; (8000d74 <_ZL12MX_TIM1_Initv+0x160>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000c52:	4b48      	ldr	r3, [pc, #288]	; (8000d74 <_ZL12MX_TIM1_Initv+0x160>)
 8000c54:	2220      	movs	r2, #32
 8000c56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 8000c58:	4b46      	ldr	r3, [pc, #280]	; (8000d74 <_ZL12MX_TIM1_Initv+0x160>)
 8000c5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c60:	4b44      	ldr	r3, [pc, #272]	; (8000d74 <_ZL12MX_TIM1_Initv+0x160>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c66:	4b43      	ldr	r3, [pc, #268]	; (8000d74 <_ZL12MX_TIM1_Initv+0x160>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6c:	4b41      	ldr	r3, [pc, #260]	; (8000d74 <_ZL12MX_TIM1_Initv+0x160>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c72:	4840      	ldr	r0, [pc, #256]	; (8000d74 <_ZL12MX_TIM1_Initv+0x160>)
 8000c74:	f003 fc1d 	bl	80044b2 <HAL_TIM_PWM_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	bf14      	ite	ne
 8000c7e:	2301      	movne	r3, #1
 8000c80:	2300      	moveq	r3, #0
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 8000c88:	f000 fb80 	bl	800138c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c90:	2300      	movs	r3, #0
 8000c92:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4835      	ldr	r0, [pc, #212]	; (8000d74 <_ZL12MX_TIM1_Initv+0x160>)
 8000ca0:	f005 fa6c 	bl	800617c <HAL_TIMEx_MasterConfigSynchronization>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	bf14      	ite	ne
 8000caa:	2301      	movne	r3, #1
 8000cac:	2300      	moveq	r3, #0
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <_ZL12MX_TIM1_Initv+0xa4>
  {
    Error_Handler();
 8000cb4:	f000 fb6a 	bl	800138c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb8:	2360      	movs	r3, #96	; 0x60
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cd8:	2200      	movs	r2, #0
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4825      	ldr	r0, [pc, #148]	; (8000d74 <_ZL12MX_TIM1_Initv+0x160>)
 8000cde:	f004 f915 	bl	8004f0c <HAL_TIM_PWM_ConfigChannel>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	bf14      	ite	ne
 8000ce8:	2301      	movne	r3, #1
 8000cea:	2300      	moveq	r3, #0
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <_ZL12MX_TIM1_Initv+0xe2>
  {
    Error_Handler();
 8000cf2:	f000 fb4b 	bl	800138c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	481d      	ldr	r0, [pc, #116]	; (8000d74 <_ZL12MX_TIM1_Initv+0x160>)
 8000d00:	f004 f904 	bl	8004f0c <HAL_TIM_PWM_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	bf14      	ite	ne
 8000d0a:	2301      	movne	r3, #1
 8000d0c:	2300      	moveq	r3, #0
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <_ZL12MX_TIM1_Initv+0x104>
  {
    Error_Handler();
 8000d14:	f000 fb3a 	bl	800138c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 16;
 8000d24:	2310      	movs	r3, #16
 8000d26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4809      	ldr	r0, [pc, #36]	; (8000d74 <_ZL12MX_TIM1_Initv+0x160>)
 8000d4e:	f005 fa83 	bl	8006258 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	bf14      	ite	ne
 8000d58:	2301      	movne	r3, #1
 8000d5a:	2300      	moveq	r3, #0
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <_ZL12MX_TIM1_Initv+0x152>
  {
    Error_Handler();
 8000d62:	f000 fb13 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d66:	4803      	ldr	r0, [pc, #12]	; (8000d74 <_ZL12MX_TIM1_Initv+0x160>)
 8000d68:	f000 fc2e 	bl	80015c8 <HAL_TIM_MspPostInit>

}
 8000d6c:	bf00      	nop
 8000d6e:	3758      	adds	r7, #88	; 0x58
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200000ac 	.word	0x200000ac
 8000d78:	40012c00 	.word	0x40012c00

08000d7c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08c      	sub	sp, #48	; 0x30
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	463b      	mov	r3, r7
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000daa:	4b40      	ldr	r3, [pc, #256]	; (8000eac <_ZL12MX_TIM2_Initv+0x130>)
 8000dac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000db2:	4b3e      	ldr	r3, [pc, #248]	; (8000eac <_ZL12MX_TIM2_Initv+0x130>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b3c      	ldr	r3, [pc, #240]	; (8000eac <_ZL12MX_TIM2_Initv+0x130>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000dbe:	4b3b      	ldr	r3, [pc, #236]	; (8000eac <_ZL12MX_TIM2_Initv+0x130>)
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dc4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc6:	4b39      	ldr	r3, [pc, #228]	; (8000eac <_ZL12MX_TIM2_Initv+0x130>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dcc:	4b37      	ldr	r3, [pc, #220]	; (8000eac <_ZL12MX_TIM2_Initv+0x130>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000dd2:	4836      	ldr	r0, [pc, #216]	; (8000eac <_ZL12MX_TIM2_Initv+0x130>)
 8000dd4:	f003 ffa6 	bl	8004d24 <HAL_TIM_IC_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	bf14      	ite	ne
 8000dde:	2301      	movne	r3, #1
 8000de0:	2300      	moveq	r3, #0
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <_ZL12MX_TIM2_Initv+0x70>
  {
    Error_Handler();
 8000de8:	f000 fad0 	bl	800138c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000dec:	2304      	movs	r3, #4
 8000dee:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000df0:	2350      	movs	r3, #80	; 0x50
 8000df2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4619      	mov	r1, r3
 8000e06:	4829      	ldr	r0, [pc, #164]	; (8000eac <_ZL12MX_TIM2_Initv+0x130>)
 8000e08:	f004 fa5d 	bl	80052c6 <HAL_TIM_SlaveConfigSynchro>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	bf14      	ite	ne
 8000e12:	2301      	movne	r3, #1
 8000e14:	2300      	moveq	r3, #0
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <_ZL12MX_TIM2_Initv+0xa4>
  {
    Error_Handler();
 8000e1c:	f000 fab6 	bl	800138c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e24:	2301      	movs	r3, #1
 8000e26:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	2200      	movs	r2, #0
 8000e36:	4619      	mov	r1, r3
 8000e38:	481c      	ldr	r0, [pc, #112]	; (8000eac <_ZL12MX_TIM2_Initv+0x130>)
 8000e3a:	f003 ffca 	bl	8004dd2 <HAL_TIM_IC_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	bf14      	ite	ne
 8000e44:	2301      	movne	r3, #1
 8000e46:	2300      	moveq	r3, #0
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <_ZL12MX_TIM2_Initv+0xd6>
  {
    Error_Handler();
 8000e4e:	f000 fa9d 	bl	800138c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e52:	2302      	movs	r3, #2
 8000e54:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e56:	2302      	movs	r3, #2
 8000e58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	2204      	movs	r2, #4
 8000e60:	4619      	mov	r1, r3
 8000e62:	4812      	ldr	r0, [pc, #72]	; (8000eac <_ZL12MX_TIM2_Initv+0x130>)
 8000e64:	f003 ffb5 	bl	8004dd2 <HAL_TIM_IC_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	bf14      	ite	ne
 8000e6e:	2301      	movne	r3, #1
 8000e70:	2300      	moveq	r3, #0
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <_ZL12MX_TIM2_Initv+0x100>
  {
    Error_Handler();
 8000e78:	f000 fa88 	bl	800138c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e84:	463b      	mov	r3, r7
 8000e86:	4619      	mov	r1, r3
 8000e88:	4808      	ldr	r0, [pc, #32]	; (8000eac <_ZL12MX_TIM2_Initv+0x130>)
 8000e8a:	f005 f977 	bl	800617c <HAL_TIMEx_MasterConfigSynchronization>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	bf14      	ite	ne
 8000e94:	2301      	movne	r3, #1
 8000e96:	2300      	moveq	r3, #0
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <_ZL12MX_TIM2_Initv+0x126>
  {
    Error_Handler();
 8000e9e:	f000 fa75 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	3730      	adds	r7, #48	; 0x30
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200000f8 	.word	0x200000f8

08000eb0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	; 0x38
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]
 8000ede:	615a      	str	r2, [r3, #20]
 8000ee0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ee2:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <_ZL12MX_TIM3_Initv+0x118>)
 8000ee4:	4a39      	ldr	r2, [pc, #228]	; (8000fcc <_ZL12MX_TIM3_Initv+0x11c>)
 8000ee6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ee8:	4b37      	ldr	r3, [pc, #220]	; (8000fc8 <_ZL12MX_TIM3_Initv+0x118>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eee:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <_ZL12MX_TIM3_Initv+0x118>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 8000ef4:	4b34      	ldr	r3, [pc, #208]	; (8000fc8 <_ZL12MX_TIM3_Initv+0x118>)
 8000ef6:	2259      	movs	r2, #89	; 0x59
 8000ef8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efa:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <_ZL12MX_TIM3_Initv+0x118>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f00:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <_ZL12MX_TIM3_Initv+0x118>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f06:	4830      	ldr	r0, [pc, #192]	; (8000fc8 <_ZL12MX_TIM3_Initv+0x118>)
 8000f08:	f003 fa7c 	bl	8004404 <HAL_TIM_Base_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	bf14      	ite	ne
 8000f12:	2301      	movne	r3, #1
 8000f14:	2300      	moveq	r3, #0
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8000f1c:	f000 fa36 	bl	800138c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4826      	ldr	r0, [pc, #152]	; (8000fc8 <_ZL12MX_TIM3_Initv+0x118>)
 8000f2e:	f004 f901 	bl	8005134 <HAL_TIM_ConfigClockSource>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	bf14      	ite	ne
 8000f38:	2301      	movne	r3, #1
 8000f3a:	2300      	moveq	r3, #0
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8000f42:	f000 fa23 	bl	800138c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f46:	4820      	ldr	r0, [pc, #128]	; (8000fc8 <_ZL12MX_TIM3_Initv+0x118>)
 8000f48:	f003 fab3 	bl	80044b2 <HAL_TIM_PWM_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bf14      	ite	ne
 8000f52:	2301      	movne	r3, #1
 8000f54:	2300      	moveq	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8000f5c:	f000 fa16 	bl	800138c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4816      	ldr	r0, [pc, #88]	; (8000fc8 <_ZL12MX_TIM3_Initv+0x118>)
 8000f70:	f005 f904 	bl	800617c <HAL_TIMEx_MasterConfigSynchronization>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	bf14      	ite	ne
 8000f7a:	2301      	movne	r3, #1
 8000f7c:	2300      	moveq	r3, #0
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8000f84:	f000 fa02 	bl	800138c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f88:	2360      	movs	r3, #96	; 0x60
 8000f8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000f94:	2304      	movs	r3, #4
 8000f96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <_ZL12MX_TIM3_Initv+0x118>)
 8000fa0:	f003 ffb4 	bl	8004f0c <HAL_TIM_PWM_ConfigChannel>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	bf14      	ite	ne
 8000faa:	2301      	movne	r3, #1
 8000fac:	2300      	moveq	r3, #0
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8000fb4:	f000 f9ea 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fb8:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <_ZL12MX_TIM3_Initv+0x118>)
 8000fba:	f000 fb05 	bl	80015c8 <HAL_TIM_MspPostInit>

}
 8000fbe:	bf00      	nop
 8000fc0:	3738      	adds	r7, #56	; 0x38
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000144 	.word	0x20000144
 8000fcc:	40000400 	.word	0x40000400

08000fd0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000fd6:	4a17      	ldr	r2, [pc, #92]	; (8001034 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000fd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000fdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001008:	2200      	movs	r2, #0
 800100a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <_ZL19MX_USART1_UART_Initv+0x60>)
 800100e:	2200      	movs	r2, #0
 8001010:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001012:	4807      	ldr	r0, [pc, #28]	; (8001030 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001014:	f005 f9bd 	bl	8006392 <HAL_UART_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	bf14      	ite	ne
 800101e:	2301      	movne	r3, #1
 8001020:	2300      	moveq	r3, #0
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8001028:	f000 f9b0 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200001d4 	.word	0x200001d4
 8001034:	40013800 	.word	0x40013800

08001038 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <_ZL11MX_DMA_Initv+0x38>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <_ZL11MX_DMA_Initv+0x38>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6153      	str	r3, [r2, #20]
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <_ZL11MX_DMA_Initv+0x38>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	200d      	movs	r0, #13
 800105c:	f001 fa9d 	bl	800259a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001060:	200d      	movs	r0, #13
 8001062:	f001 fab6 	bl	80025d2 <HAL_NVIC_EnableIRQ>

}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000

08001074 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <_ZL12MX_GPIO_Initv+0x8c>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <_ZL12MX_GPIO_Initv+0x8c>)
 8001090:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001094:	6153      	str	r3, [r2, #20]
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <_ZL12MX_GPIO_Initv+0x8c>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <_ZL12MX_GPIO_Initv+0x8c>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4a16      	ldr	r2, [pc, #88]	; (8001100 <_ZL12MX_GPIO_Initv+0x8c>)
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	6153      	str	r3, [r2, #20]
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <_ZL12MX_GPIO_Initv+0x8c>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <_ZL12MX_GPIO_Initv+0x8c>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	4a10      	ldr	r2, [pc, #64]	; (8001100 <_ZL12MX_GPIO_Initv+0x8c>)
 80010c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c4:	6153      	str	r3, [r2, #20]
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <_ZL12MX_GPIO_Initv+0x8c>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISABLE_GPIO_Port, DISABLE_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2120      	movs	r1, #32
 80010d6:	480b      	ldr	r0, [pc, #44]	; (8001104 <_ZL12MX_GPIO_Initv+0x90>)
 80010d8:	f001 fde0 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISABLE_Pin */
  GPIO_InitStruct.Pin = DISABLE_Pin;
 80010dc:	2320      	movs	r3, #32
 80010de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISABLE_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	4619      	mov	r1, r3
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <_ZL12MX_GPIO_Initv+0x90>)
 80010f4:	f001 fc60 	bl	80029b8 <HAL_GPIO_Init>

}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000
 8001104:	48000400 	.word	0x48000400

08001108 <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE>:

/* USER CODE BEGIN 4 */
int CAN_read(stm_CAN::CAN_303x8* can, uint8_t* data, stm_CAN::FIFO fifo){
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	4613      	mov	r3, r2
 8001114:	71fb      	strb	r3, [r7, #7]
  uint8_t received[] = "received ";
 8001116:	4a23      	ldr	r2, [pc, #140]	; (80011a4 <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0x9c>)
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	ca07      	ldmia	r2, {r0, r1, r2}
 800111e:	c303      	stmia	r3!, {r0, r1}
 8001120:	801a      	strh	r2, [r3, #0]
  uint8_t cr_lf[] = "\r\n";
 8001122:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0xa0>)
 8001124:	f107 0318 	add.w	r3, r7, #24
 8001128:	6812      	ldr	r2, [r2, #0]
 800112a:	4611      	mov	r1, r2
 800112c:	8019      	strh	r1, [r3, #0]
 800112e:	3302      	adds	r3, #2
 8001130:	0c12      	lsrs	r2, r2, #16
 8001132:	701a      	strb	r2, [r3, #0]
  uint8_t err[] = "error\r\n";
 8001134:	4a1d      	ldr	r2, [pc, #116]	; (80011ac <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0xa4>)
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800113e:	e883 0003 	stmia.w	r3, {r0, r1}
	switch (can->read(fifo, data)){
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	4619      	mov	r1, r3
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f7ff fa59 	bl	8000600 <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh>
 800114e:	4603      	mov	r3, r0
 8001150:	2b02      	cmp	r3, #2
 8001152:	dc02      	bgt.n	800115a <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0x52>
 8001154:	2b00      	cmp	r3, #0
 8001156:	dc03      	bgt.n	8001160 <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0x58>
 8001158:	e01f      	b.n	800119a <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0x92>
 800115a:	2b03      	cmp	r3, #3
 800115c:	d016      	beq.n	800118c <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0x84>
 800115e:	e01c      	b.n	800119a <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0x92>
	      case stm_CAN::read_retval::message_received:
	      case stm_CAN::read_retval::more_message_received:
	        HAL_UART_Transmit(&huart1, received, 9, 1);
 8001160:	f107 011c 	add.w	r1, r7, #28
 8001164:	2301      	movs	r3, #1
 8001166:	2209      	movs	r2, #9
 8001168:	4811      	ldr	r0, [pc, #68]	; (80011b0 <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0xa8>)
 800116a:	f005 f960 	bl	800642e <HAL_UART_Transmit>
	        HAL_UART_Transmit(&huart1, data, 8, 1);
 800116e:	2301      	movs	r3, #1
 8001170:	2208      	movs	r2, #8
 8001172:	68b9      	ldr	r1, [r7, #8]
 8001174:	480e      	ldr	r0, [pc, #56]	; (80011b0 <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0xa8>)
 8001176:	f005 f95a 	bl	800642e <HAL_UART_Transmit>
	        HAL_UART_Transmit(&huart1, cr_lf, 2, 1);
 800117a:	f107 0118 	add.w	r1, r7, #24
 800117e:	2301      	movs	r3, #1
 8001180:	2202      	movs	r2, #2
 8001182:	480b      	ldr	r0, [pc, #44]	; (80011b0 <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0xa8>)
 8001184:	f005 f953 	bl	800642e <HAL_UART_Transmit>
	        return 1;
 8001188:	2301      	movs	r3, #1
 800118a:	e007      	b.n	800119c <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0x94>
	      case stm_CAN::read_retval::error:
	    	  HAL_UART_Transmit(&huart1, err, 7,1);
 800118c:	f107 0110 	add.w	r1, r7, #16
 8001190:	2301      	movs	r3, #1
 8001192:	2207      	movs	r2, #7
 8001194:	4806      	ldr	r0, [pc, #24]	; (80011b0 <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0xa8>)
 8001196:	f005 f94a 	bl	800642e <HAL_UART_Transmit>
	      case stm_CAN::read_retval::no_message:
	      default:
	        return 0;
 800119a:	2300      	movs	r3, #0
	}
}
 800119c:	4618      	mov	r0, r3
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	08008478 	.word	0x08008478
 80011a8:	08008484 	.word	0x08008484
 80011ac:	08008488 	.word	0x08008488
 80011b0:	200001d4 	.word	0x200001d4

080011b4 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>:

void write_PWM(TIM_HandleTypeDef* htim, uint32_t channel1, uint32_t channel2, int16_t val){
  auto clamp_unsigned = [](int16_t v){return (v > 0)? v : 0;};
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
 80011c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <_Z9write_PWMP17TIM_HandleTypeDefmms>:
void write_PWM(TIM_HandleTypeDef* htim, uint32_t channel1, uint32_t channel2, int16_t val){
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COMPARE(htim, channel1, clamp_unsigned(val) >> 3);
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10d      	bne.n	8001206 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x30>
 80011ea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ffdd 	bl	80011b4 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 80011fa:	4603      	mov	r3, r0
 80011fc:	10da      	asrs	r2, r3, #3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	635a      	str	r2, [r3, #52]	; 0x34
 8001204:	e050      	b.n	80012a8 <_Z9write_PWMP17TIM_HandleTypeDefmms+0xd2>
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2b04      	cmp	r3, #4
 800120a:	d10d      	bne.n	8001228 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x52>
 800120c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ffcc 	bl	80011b4 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 800121c:	4603      	mov	r3, r0
 800121e:	10da      	asrs	r2, r3, #3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	639a      	str	r2, [r3, #56]	; 0x38
 8001226:	e03f      	b.n	80012a8 <_Z9write_PWMP17TIM_HandleTypeDefmms+0xd2>
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	2b08      	cmp	r3, #8
 800122c:	d10d      	bne.n	800124a <_Z9write_PWMP17TIM_HandleTypeDefmms+0x74>
 800122e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ffbb 	bl	80011b4 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 800123e:	4603      	mov	r3, r0
 8001240:	10da      	asrs	r2, r3, #3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	63da      	str	r2, [r3, #60]	; 0x3c
 8001248:	e02e      	b.n	80012a8 <_Z9write_PWMP17TIM_HandleTypeDefmms+0xd2>
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	2b0c      	cmp	r3, #12
 800124e:	d10d      	bne.n	800126c <_Z9write_PWMP17TIM_HandleTypeDefmms+0x96>
 8001250:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ffaa 	bl	80011b4 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 8001260:	4603      	mov	r3, r0
 8001262:	10da      	asrs	r2, r3, #3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	641a      	str	r2, [r3, #64]	; 0x40
 800126a:	e01d      	b.n	80012a8 <_Z9write_PWMP17TIM_HandleTypeDefmms+0xd2>
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	2b10      	cmp	r3, #16
 8001270:	d10d      	bne.n	800128e <_Z9write_PWMP17TIM_HandleTypeDefmms+0xb8>
 8001272:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff99 	bl	80011b4 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 8001282:	4603      	mov	r3, r0
 8001284:	10da      	asrs	r2, r3, #3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	659a      	str	r2, [r3, #88]	; 0x58
 800128c:	e00c      	b.n	80012a8 <_Z9write_PWMP17TIM_HandleTypeDefmms+0xd2>
 800128e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff8b 	bl	80011b4 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 800129e:	4603      	mov	r3, r0
 80012a0:	10da      	asrs	r2, r3, #3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_TIM_SET_COMPARE(htim, channel2, clamp_unsigned(-val) >> 3);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10f      	bne.n	80012ce <_Z9write_PWMP17TIM_HandleTypeDefmms+0xf8>
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	425b      	negs	r3, r3
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff79 	bl	80011b4 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 80012c2:	4603      	mov	r3, r0
 80012c4:	10da      	asrs	r2, r3, #3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	635a      	str	r2, [r3, #52]	; 0x34
  return;
 80012cc:	e05b      	b.n	8001386 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x1b0>
  __HAL_TIM_SET_COMPARE(htim, channel2, clamp_unsigned(-val) >> 3);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	d10f      	bne.n	80012f4 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x11e>
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	425b      	negs	r3, r3
 80012d8:	b29b      	uxth	r3, r3
 80012da:	b21a      	sxth	r2, r3
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff66 	bl	80011b4 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 80012e8:	4603      	mov	r3, r0
 80012ea:	10da      	asrs	r2, r3, #3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	639a      	str	r2, [r3, #56]	; 0x38
  return;
 80012f2:	e048      	b.n	8001386 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x1b0>
  __HAL_TIM_SET_COMPARE(htim, channel2, clamp_unsigned(-val) >> 3);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d10f      	bne.n	800131a <_Z9write_PWMP17TIM_HandleTypeDefmms+0x144>
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	425b      	negs	r3, r3
 80012fe:	b29b      	uxth	r3, r3
 8001300:	b21a      	sxth	r2, r3
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff53 	bl	80011b4 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 800130e:	4603      	mov	r3, r0
 8001310:	10da      	asrs	r2, r3, #3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	63da      	str	r2, [r3, #60]	; 0x3c
  return;
 8001318:	e035      	b.n	8001386 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x1b0>
  __HAL_TIM_SET_COMPARE(htim, channel2, clamp_unsigned(-val) >> 3);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0c      	cmp	r3, #12
 800131e:	d10f      	bne.n	8001340 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x16a>
 8001320:	887b      	ldrh	r3, [r7, #2]
 8001322:	425b      	negs	r3, r3
 8001324:	b29b      	uxth	r3, r3
 8001326:	b21a      	sxth	r2, r3
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff40 	bl	80011b4 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 8001334:	4603      	mov	r3, r0
 8001336:	10da      	asrs	r2, r3, #3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	641a      	str	r2, [r3, #64]	; 0x40
  return;
 800133e:	e022      	b.n	8001386 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x1b0>
  __HAL_TIM_SET_COMPARE(htim, channel2, clamp_unsigned(-val) >> 3);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b10      	cmp	r3, #16
 8001344:	d10f      	bne.n	8001366 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x190>
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	425b      	negs	r3, r3
 800134a:	b29b      	uxth	r3, r3
 800134c:	b21a      	sxth	r2, r3
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff2d 	bl	80011b4 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 800135a:	4603      	mov	r3, r0
 800135c:	10da      	asrs	r2, r3, #3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	659a      	str	r2, [r3, #88]	; 0x58
  return;
 8001364:	e00f      	b.n	8001386 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x1b0>
  __HAL_TIM_SET_COMPARE(htim, channel2, clamp_unsigned(-val) >> 3);
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	425b      	negs	r3, r3
 800136a:	b29b      	uxth	r3, r3
 800136c:	b21a      	sxth	r2, r3
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff1d 	bl	80011b4 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 800137a:	4603      	mov	r3, r0
 800137c:	10da      	asrs	r2, r3, #3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	65da      	str	r2, [r3, #92]	; 0x5c
  return;
 8001384:	bf00      	nop
}
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001390:	b672      	cpsid	i
}
 8001392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <Error_Handler+0x8>

08001398 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <HAL_MspInit+0x44>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <HAL_MspInit+0x44>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6193      	str	r3, [r2, #24]
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <HAL_MspInit+0x44>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_MspInit+0x44>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a08      	ldr	r2, [pc, #32]	; (80013dc <HAL_MspInit+0x44>)
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c0:	61d3      	str	r3, [r2, #28]
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_MspInit+0x44>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000

080013e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a18      	ldr	r2, [pc, #96]	; (8001460 <HAL_CAN_MspInit+0x80>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d129      	bne.n	8001456 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_CAN_MspInit+0x84>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	4a17      	ldr	r2, [pc, #92]	; (8001464 <HAL_CAN_MspInit+0x84>)
 8001408:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800140c:	61d3      	str	r3, [r2, #28]
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_CAN_MspInit+0x84>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_CAN_MspInit+0x84>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	4a11      	ldr	r2, [pc, #68]	; (8001464 <HAL_CAN_MspInit+0x84>)
 8001420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001424:	6153      	str	r3, [r2, #20]
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <HAL_CAN_MspInit+0x84>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001432:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001444:	2309      	movs	r3, #9
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001452:	f001 fab1 	bl	80029b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001456:	bf00      	nop
 8001458:	3728      	adds	r7, #40	; 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40006400 	.word	0x40006400
 8001464:	40021000 	.word	0x40021000

08001468 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <HAL_TIM_PWM_MspInit+0x38>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d10b      	bne.n	8001492 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_TIM_PWM_MspInit+0x3c>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	4a09      	ldr	r2, [pc, #36]	; (80014a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001480:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001484:	6193      	str	r3, [r2, #24]
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40012c00 	.word	0x40012c00
 80014a4:	40021000 	.word	0x40021000

080014a8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c8:	d128      	bne.n	800151c <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ca:	4b16      	ldr	r3, [pc, #88]	; (8001524 <HAL_TIM_IC_MspInit+0x7c>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	4a15      	ldr	r2, [pc, #84]	; (8001524 <HAL_TIM_IC_MspInit+0x7c>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	61d3      	str	r3, [r2, #28]
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <HAL_TIM_IC_MspInit+0x7c>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_TIM_IC_MspInit+0x7c>)
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <HAL_TIM_IC_MspInit+0x7c>)
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ec:	6153      	str	r3, [r2, #20]
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <HAL_TIM_IC_MspInit+0x7c>)
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014fa:	2320      	movs	r3, #32
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800150a:	2301      	movs	r3, #1
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001518:	f001 fa4e 	bl	80029b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800151c:	bf00      	nop
 800151e:	3728      	adds	r7, #40	; 0x28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40021000 	.word	0x40021000

08001528 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a20      	ldr	r2, [pc, #128]	; (80015b8 <HAL_TIM_Base_MspInit+0x90>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d139      	bne.n	80015ae <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <HAL_TIM_Base_MspInit+0x94>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a1f      	ldr	r2, [pc, #124]	; (80015bc <HAL_TIM_Base_MspInit+0x94>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	61d3      	str	r3, [r2, #28]
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_TIM_Base_MspInit+0x94>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8001552:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_TIM_Base_MspInit+0x98>)
 8001554:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <HAL_TIM_Base_MspInit+0x9c>)
 8001556:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <HAL_TIM_Base_MspInit+0x98>)
 800155a:	2210      	movs	r2, #16
 800155c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <HAL_TIM_Base_MspInit+0x98>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001564:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <HAL_TIM_Base_MspInit+0x98>)
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_TIM_Base_MspInit+0x98>)
 800156c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001570:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <HAL_TIM_Base_MspInit+0x98>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <HAL_TIM_Base_MspInit+0x98>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <HAL_TIM_Base_MspInit+0x98>)
 8001580:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001584:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001586:	480e      	ldr	r0, [pc, #56]	; (80015c0 <HAL_TIM_Base_MspInit+0x98>)
 8001588:	f001 f841 	bl	800260e <HAL_DMA_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001592:	f7ff fefb 	bl	800138c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <HAL_TIM_Base_MspInit+0x98>)
 800159a:	631a      	str	r2, [r3, #48]	; 0x30
 800159c:	4a08      	ldr	r2, [pc, #32]	; (80015c0 <HAL_TIM_Base_MspInit+0x98>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <HAL_TIM_Base_MspInit+0x98>)
 80015a6:	621a      	str	r2, [r3, #32]
 80015a8:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <HAL_TIM_Base_MspInit+0x98>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40000400 	.word	0x40000400
 80015bc:	40021000 	.word	0x40021000
 80015c0:	20000190 	.word	0x20000190
 80015c4:	40020030 	.word	0x40020030

080015c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a31      	ldr	r2, [pc, #196]	; (80016ac <HAL_TIM_MspPostInit+0xe4>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d13a      	bne.n	8001660 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <HAL_TIM_MspPostInit+0xe8>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	4a30      	ldr	r2, [pc, #192]	; (80016b0 <HAL_TIM_MspPostInit+0xe8>)
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f4:	6153      	str	r3, [r2, #20]
 80015f6:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <HAL_TIM_MspPostInit+0xe8>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_TIM_MspPostInit+0xe8>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	4a2a      	ldr	r2, [pc, #168]	; (80016b0 <HAL_TIM_MspPostInit+0xe8>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160c:	6153      	str	r3, [r2, #20]
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <HAL_TIM_MspPostInit+0xe8>)
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800161a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800161e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800162c:	2306      	movs	r3, #6
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163a:	f001 f9bd 	bl	80029b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800163e:	2301      	movs	r3, #1
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800164e:	2306      	movs	r3, #6
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	4816      	ldr	r0, [pc, #88]	; (80016b4 <HAL_TIM_MspPostInit+0xec>)
 800165a:	f001 f9ad 	bl	80029b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800165e:	e020      	b.n	80016a2 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM3)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <HAL_TIM_MspPostInit+0xf0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d11b      	bne.n	80016a2 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_TIM_MspPostInit+0xe8>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	4a10      	ldr	r2, [pc, #64]	; (80016b0 <HAL_TIM_MspPostInit+0xe8>)
 8001670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001674:	6153      	str	r3, [r2, #20]
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_TIM_MspPostInit+0xe8>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001682:	2302      	movs	r3, #2
 8001684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001692:	2302      	movs	r3, #2
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <HAL_TIM_MspPostInit+0xec>)
 800169e:	f001 f98b 	bl	80029b8 <HAL_GPIO_Init>
}
 80016a2:	bf00      	nop
 80016a4:	3728      	adds	r7, #40	; 0x28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40012c00 	.word	0x40012c00
 80016b0:	40021000 	.word	0x40021000
 80016b4:	48000400 	.word	0x48000400
 80016b8:	40000400 	.word	0x40000400

080016bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a17      	ldr	r2, [pc, #92]	; (8001738 <HAL_UART_MspInit+0x7c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d127      	bne.n	800172e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <HAL_UART_MspInit+0x80>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	4a16      	ldr	r2, [pc, #88]	; (800173c <HAL_UART_MspInit+0x80>)
 80016e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e8:	6193      	str	r3, [r2, #24]
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_UART_MspInit+0x80>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_UART_MspInit+0x80>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	4a10      	ldr	r2, [pc, #64]	; (800173c <HAL_UART_MspInit+0x80>)
 80016fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001700:	6153      	str	r3, [r2, #20]
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_UART_MspInit+0x80>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800170e:	23c0      	movs	r3, #192	; 0xc0
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800171e:	2307      	movs	r3, #7
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <HAL_UART_MspInit+0x84>)
 800172a:	f001 f945 	bl	80029b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	; 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40013800 	.word	0x40013800
 800173c:	40021000 	.word	0x40021000
 8001740:	48000400 	.word	0x48000400

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <NMI_Handler+0x4>

0800174c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <MemManage_Handler+0x4>

0800175c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <BusFault_Handler+0x4>

08001764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <UsageFault_Handler+0x4>

0800176c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179a:	f000 f961 	bl	8001a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <DMA1_Channel3_IRQHandler+0x10>)
 80017aa:	f001 f814 	bl	80027d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000190 	.word	0x20000190

080017b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
	return 1;
 80017bc:	2301      	movs	r3, #1
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <_kill>:

int _kill(int pid, int sig)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017d2:	f005 fedd 	bl	8007590 <__errno>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2216      	movs	r2, #22
 80017da:	601a      	str	r2, [r3, #0]
	return -1;
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <_exit>:

void _exit (int status)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ffe7 	bl	80017c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017fa:	bf00      	nop
 80017fc:	e7fd      	b.n	80017fa <_exit+0x12>
	...

08001800 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <SystemInit+0x20>)
 8001806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <SystemInit+0x20>)
 800180c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <_ZN6ws281213ws2812_double19update_write_bufferEv>:

#include "ws2812double.h"

namespace ws2812 {

void ws2812_double::update_write_buffer(){
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < pixel_num; i++){
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]
 8001830:	e053      	b.n	80018da <_ZN6ws281213ws2812_double19update_write_bufferEv+0xb6>
		for(uint8_t j = 0; j < color_num; j++){
 8001832:	2300      	movs	r3, #0
 8001834:	73bb      	strb	r3, [r7, #14]
 8001836:	e04a      	b.n	80018ce <_ZN6ws281213ws2812_double19update_write_bufferEv+0xaa>
			uint8_t color = 	(j == 0) ? ws2812_double::colors[i].green
 8001838:	7bbb      	ldrb	r3, [r7, #14]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d108      	bne.n	8001850 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x2c>
 800183e:	7bfa      	ldrb	r2, [r7, #15]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	440b      	add	r3, r1
 800184a:	3340      	adds	r3, #64	; 0x40
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	e018      	b.n	8001882 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x5e>
 8001850:	7bbb      	ldrb	r3, [r7, #14]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d108      	bne.n	8001868 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x44>
							: 	(j == 1) ? ws2812_double::colors[i].red
 8001856:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? ws2812_double::colors[i].green
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	440b      	add	r3, r1
 8001862:	333f      	adds	r3, #63	; 0x3f
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	e00c      	b.n	8001882 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x5e>
 8001868:	7bbb      	ldrb	r3, [r7, #14]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d108      	bne.n	8001880 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x5c>
							: 	(j == 2) ? ws2812_double::colors[i].blue : 0;
 800186e:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? ws2812_double::colors[i].green
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	440b      	add	r3, r1
 800187a:	3341      	adds	r3, #65	; 0x41
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	e000      	b.n	8001882 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x5e>
 8001880:	2300      	movs	r3, #0
 8001882:	733b      	strb	r3, [r7, #12]
			for(uint8_t k = 0; k < byte; k++){
 8001884:	2300      	movs	r3, #0
 8001886:	737b      	strb	r3, [r7, #13]
 8001888:	e01b      	b.n	80018c2 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x9e>
				ws2812_double::write_buffer[(i * color_num + j) * byte + k] = ((color & (0x80 >> k)) > 0) ? ws2812_double::high : ws2812_double::low;
 800188a:	7b3a      	ldrb	r2, [r7, #12]
 800188c:	7b7b      	ldrb	r3, [r7, #13]
 800188e:	2180      	movs	r1, #128	; 0x80
 8001890:	fa41 f303 	asr.w	r3, r1, r3
 8001894:	4013      	ands	r3, r2
 8001896:	2b00      	cmp	r3, #0
 8001898:	dd02      	ble.n	80018a0 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x7c>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	7b1a      	ldrb	r2, [r3, #12]
 800189e:	e001      	b.n	80018a4 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x80>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7b5a      	ldrb	r2, [r3, #13]
 80018a4:	7bf9      	ldrb	r1, [r7, #15]
 80018a6:	460b      	mov	r3, r1
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4419      	add	r1, r3
 80018ac:	7bbb      	ldrb	r3, [r7, #14]
 80018ae:	440b      	add	r3, r1
 80018b0:	00d9      	lsls	r1, r3, #3
 80018b2:	7b7b      	ldrb	r3, [r7, #13]
 80018b4:	440b      	add	r3, r1
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	440b      	add	r3, r1
 80018ba:	739a      	strb	r2, [r3, #14]
			for(uint8_t k = 0; k < byte; k++){
 80018bc:	7b7b      	ldrb	r3, [r7, #13]
 80018be:	3301      	adds	r3, #1
 80018c0:	737b      	strb	r3, [r7, #13]
 80018c2:	7b7b      	ldrb	r3, [r7, #13]
 80018c4:	2b07      	cmp	r3, #7
 80018c6:	d9e0      	bls.n	800188a <_ZN6ws281213ws2812_double19update_write_bufferEv+0x66>
		for(uint8_t j = 0; j < color_num; j++){
 80018c8:	7bbb      	ldrb	r3, [r7, #14]
 80018ca:	3301      	adds	r3, #1
 80018cc:	73bb      	strb	r3, [r7, #14]
 80018ce:	7bbb      	ldrb	r3, [r7, #14]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d9b1      	bls.n	8001838 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x14>
	for(uint8_t i = 0; i < pixel_num; i++){
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	3301      	adds	r3, #1
 80018d8:	73fb      	strb	r3, [r7, #15]
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d9a8      	bls.n	8001832 <_ZN6ws281213ws2812_double19update_write_bufferEv+0xe>
			}
		}
	}
	ws2812_double::write_buffer[data_len] = 0;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <_ZN6ws281213ws2812_double4rendEv>:

void ws2812_double::rend(){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	update_write_buffer();
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff91 	bl	8001824 <_ZN6ws281213ws2812_double19update_write_bufferEv>
	if(ws2812_double::hdma->State != HAL_DMA_STATE_READY) {
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800190a:	2b01      	cmp	r3, #1
 800190c:	d007      	beq.n	800191e <_ZN6ws281213ws2812_double4rendEv+0x2a>
    	HAL_TIM_PWM_Stop_DMA(ws2812_double::htim, ws2812_double::Channel);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4619      	mov	r1, r3
 8001918:	4610      	mov	r0, r2
 800191a:	f003 f913 	bl	8004b44 <HAL_TIM_PWM_Stop_DMA>
  	}
	HAL_TIM_PWM_Start_DMA(ws2812_double::htim, ws2812_double::Channel, (uint32_t*)ws2812_double::write_buffer, data_len + reset_bit);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6859      	ldr	r1, [r3, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f103 020e 	add.w	r2, r3, #14
 800192c:	2331      	movs	r3, #49	; 0x31
 800192e:	f002 ff03 	bl	8004738 <HAL_TIM_PWM_Start_DMA>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_ZN6ws281213ws2812_doubleC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>:

ws2812_double::ws2812_double(TIM_HandleTypeDef *htim, uint32_t Channel, DMA_HandleTypeDef *hdma, uint8_t high_level_pulse_len, uint8_t low_level_pulse_len) {
 800193a:	b480      	push	{r7}
 800193c:	b085      	sub	sp, #20
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	333f      	adds	r3, #63	; 0x3f
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	809a      	strh	r2, [r3, #4]
	// TODO Auto-generated constructor stub
	ws2812_double::htim = htim;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	601a      	str	r2, [r3, #0]
	ws2812_double::Channel = Channel;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	605a      	str	r2, [r3, #4]
	ws2812_double::hdma = hdma;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	609a      	str	r2, [r3, #8]
	ws2812_double::high = high_level_pulse_len;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	7e3a      	ldrb	r2, [r7, #24]
 8001968:	731a      	strb	r2, [r3, #12]
	ws2812_double::low = low_level_pulse_len;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	7f3a      	ldrb	r2, [r7, #28]
 800196e:	735a      	strb	r2, [r3, #13]
}
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <LoopForever+0x6>)
  ldr r1, =_edata
 8001986:	490e      	ldr	r1, [pc, #56]	; (80019c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001988:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <LoopForever+0xe>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800199c:	4c0b      	ldr	r4, [pc, #44]	; (80019cc <LoopForever+0x16>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019aa:	f7ff ff29 	bl	8001800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f005 fda1 	bl	80074f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019b2:	f7fe ff11 	bl	80007d8 <main>

080019b6 <LoopForever>:

LoopForever:
    b LoopForever
 80019b6:	e7fe      	b.n	80019b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019b8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80019c4:	080087ac 	.word	0x080087ac
  ldr r2, =_sbss
 80019c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80019cc:	200003ac 	.word	0x200003ac

080019d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC1_2_IRQHandler>
	...

080019d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <HAL_Init+0x28>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a07      	ldr	r2, [pc, #28]	; (80019fc <HAL_Init+0x28>)
 80019de:	f043 0310 	orr.w	r3, r3, #16
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e4:	2003      	movs	r0, #3
 80019e6:	f000 fdcd 	bl	8002584 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ea:	200f      	movs	r0, #15
 80019ec:	f000 f808 	bl	8001a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f0:	f7ff fcd2 	bl	8001398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40022000 	.word	0x40022000

08001a00 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_InitTick+0x54>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_InitTick+0x58>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 fde9 	bl	80025f6 <HAL_SYSTICK_Config>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00e      	b.n	8001a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b0f      	cmp	r3, #15
 8001a32:	d80a      	bhi.n	8001a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a34:	2200      	movs	r2, #0
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a3c:	f000 fdad 	bl	800259a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a40:	4a06      	ldr	r2, [pc, #24]	; (8001a5c <HAL_InitTick+0x5c>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e000      	b.n	8001a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000004 	.word	0x20000004
 8001a58:	2000000c 	.word	0x2000000c
 8001a5c:	20000008 	.word	0x20000008

08001a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x20>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_IncTick+0x24>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_IncTick+0x24>)
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	2000000c 	.word	0x2000000c
 8001a84:	20000258 	.word	0x20000258

08001a88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <HAL_GetTick+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000258 	.word	0x20000258

08001aa0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff ffee 	bl	8001a88 <HAL_GetTick>
 8001aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ab8:	d005      	beq.n	8001ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_Delay+0x44>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ac6:	bf00      	nop
 8001ac8:	f7ff ffde 	bl	8001a88 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d8f7      	bhi.n	8001ac8 <HAL_Delay+0x28>
  {
  }
}
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000000c 	.word	0x2000000c

08001ae8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e0ed      	b.n	8001cd6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d102      	bne.n	8001b0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff fc6a 	bl	80013e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b1c:	f7ff ffb4 	bl	8001a88 <HAL_GetTick>
 8001b20:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b22:	e012      	b.n	8001b4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b24:	f7ff ffb0 	bl	8001a88 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b0a      	cmp	r3, #10
 8001b30:	d90b      	bls.n	8001b4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2205      	movs	r2, #5
 8001b42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e0c5      	b.n	8001cd6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0e5      	beq.n	8001b24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0202 	bic.w	r2, r2, #2
 8001b66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b68:	f7ff ff8e 	bl	8001a88 <HAL_GetTick>
 8001b6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b6e:	e012      	b.n	8001b96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b70:	f7ff ff8a 	bl	8001a88 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b0a      	cmp	r3, #10
 8001b7c:	d90b      	bls.n	8001b96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2205      	movs	r2, #5
 8001b8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e09f      	b.n	8001cd6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1e5      	bne.n	8001b70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7e1b      	ldrb	r3, [r3, #24]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d108      	bne.n	8001bbe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	e007      	b.n	8001bce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7e5b      	ldrb	r3, [r3, #25]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d108      	bne.n	8001be8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	e007      	b.n	8001bf8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7e9b      	ldrb	r3, [r3, #26]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d108      	bne.n	8001c12 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0220 	orr.w	r2, r2, #32
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	e007      	b.n	8001c22 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0220 	bic.w	r2, r2, #32
 8001c20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	7edb      	ldrb	r3, [r3, #27]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d108      	bne.n	8001c3c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0210 	bic.w	r2, r2, #16
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	e007      	b.n	8001c4c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0210 	orr.w	r2, r2, #16
 8001c4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7f1b      	ldrb	r3, [r3, #28]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d108      	bne.n	8001c66 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0208 	orr.w	r2, r2, #8
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	e007      	b.n	8001c76 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0208 	bic.w	r2, r2, #8
 8001c74:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	7f5b      	ldrb	r3, [r3, #29]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d108      	bne.n	8001c90 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0204 	orr.w	r2, r2, #4
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	e007      	b.n	8001ca0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0204 	bic.w	r2, r2, #4
 8001c9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	ea42 0103 	orr.w	r1, r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	1e5a      	subs	r2, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b087      	sub	sp, #28
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001cf6:	7cfb      	ldrb	r3, [r7, #19]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d003      	beq.n	8001d04 <HAL_CAN_ConfigFilter+0x26>
 8001cfc:	7cfb      	ldrb	r3, [r7, #19]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	f040 80aa 	bne.w	8001e58 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d0a:	f043 0201 	orr.w	r2, r3, #1
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	401a      	ands	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d123      	bne.n	8001d86 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	401a      	ands	r2, r3
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d60:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3248      	adds	r2, #72	; 0x48
 8001d66:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d7a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d7c:	6979      	ldr	r1, [r7, #20]
 8001d7e:	3348      	adds	r3, #72	; 0x48
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	440b      	add	r3, r1
 8001d84:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d122      	bne.n	8001dd4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001dae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3248      	adds	r2, #72	; 0x48
 8001db4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dc8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dca:	6979      	ldr	r1, [r7, #20]
 8001dcc:	3348      	adds	r3, #72	; 0x48
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	440b      	add	r3, r1
 8001dd2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	401a      	ands	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001dee:	e007      	b.n	8001e00 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d109      	bne.n	8001e1c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	401a      	ands	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001e1a:	e007      	b.n	8001e2c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	431a      	orrs	r2, r3
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d107      	bne.n	8001e44 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e4a:	f023 0201 	bic.w	r2, r3, #1
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e006      	b.n	8001e66 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
  }
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	371c      	adds	r7, #28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d12e      	bne.n	8001ee4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0201 	bic.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e9e:	f7ff fdf3 	bl	8001a88 <HAL_GetTick>
 8001ea2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ea4:	e012      	b.n	8001ecc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ea6:	f7ff fdef 	bl	8001a88 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b0a      	cmp	r3, #10
 8001eb2:	d90b      	bls.n	8001ecc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2205      	movs	r2, #5
 8001ec4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e012      	b.n	8001ef2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1e5      	bne.n	8001ea6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e006      	b.n	8001ef2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
  }
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d133      	bne.n	8001f76 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0201 	orr.w	r2, r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f1e:	f7ff fdb3 	bl	8001a88 <HAL_GetTick>
 8001f22:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f24:	e012      	b.n	8001f4c <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f26:	f7ff fdaf 	bl	8001a88 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b0a      	cmp	r3, #10
 8001f32:	d90b      	bls.n	8001f4c <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2205      	movs	r2, #5
 8001f44:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e01b      	b.n	8001f84 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0e5      	beq.n	8001f26 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0202 	bic.w	r2, r2, #2
 8001f68:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e006      	b.n	8001f84 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
  }
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
 8001f98:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001faa:	7ffb      	ldrb	r3, [r7, #31]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d003      	beq.n	8001fb8 <HAL_CAN_AddTxMessage+0x2c>
 8001fb0:	7ffb      	ldrb	r3, [r7, #31]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	f040 80b8 	bne.w	8002128 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10a      	bne.n	8001fd8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d105      	bne.n	8001fd8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 80a0 	beq.w	8002118 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	0e1b      	lsrs	r3, r3, #24
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d907      	bls.n	8001ff8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e09e      	b.n	8002136 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10d      	bne.n	8002026 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002014:	68f9      	ldr	r1, [r7, #12]
 8002016:	6809      	ldr	r1, [r1, #0]
 8002018:	431a      	orrs	r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3318      	adds	r3, #24
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	440b      	add	r3, r1
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	e00f      	b.n	8002046 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002030:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002036:	68f9      	ldr	r1, [r7, #12]
 8002038:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800203a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	3318      	adds	r3, #24
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	440b      	add	r3, r1
 8002044:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6819      	ldr	r1, [r3, #0]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	691a      	ldr	r2, [r3, #16]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3318      	adds	r3, #24
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	440b      	add	r3, r1
 8002056:	3304      	adds	r3, #4
 8002058:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	7d1b      	ldrb	r3, [r3, #20]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d111      	bne.n	8002086 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3318      	adds	r3, #24
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	4413      	add	r3, r2
 800206e:	3304      	adds	r3, #4
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	6811      	ldr	r1, [r2, #0]
 8002076:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3318      	adds	r3, #24
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	440b      	add	r3, r1
 8002082:	3304      	adds	r3, #4
 8002084:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3307      	adds	r3, #7
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	061a      	lsls	r2, r3, #24
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3306      	adds	r3, #6
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	041b      	lsls	r3, r3, #16
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3305      	adds	r3, #5
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	4313      	orrs	r3, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	3204      	adds	r2, #4
 80020a6:	7812      	ldrb	r2, [r2, #0]
 80020a8:	4610      	mov	r0, r2
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	6811      	ldr	r1, [r2, #0]
 80020ae:	ea43 0200 	orr.w	r2, r3, r0
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	440b      	add	r3, r1
 80020b8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80020bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3303      	adds	r3, #3
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	061a      	lsls	r2, r3, #24
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3302      	adds	r3, #2
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	041b      	lsls	r3, r3, #16
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3301      	adds	r3, #1
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	4313      	orrs	r3, r2
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	7812      	ldrb	r2, [r2, #0]
 80020de:	4610      	mov	r0, r2
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	6811      	ldr	r1, [r2, #0]
 80020e4:	ea43 0200 	orr.w	r2, r3, r0
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	440b      	add	r3, r1
 80020ee:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80020f2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3318      	adds	r3, #24
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	4413      	add	r3, r2
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	6811      	ldr	r1, [r2, #0]
 8002106:	f043 0201 	orr.w	r2, r3, #1
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	3318      	adds	r3, #24
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	440b      	add	r3, r1
 8002112:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	e00e      	b.n	8002136 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e006      	b.n	8002136 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
  }
}
 8002136:	4618      	mov	r0, r3
 8002138:	3724      	adds	r7, #36	; 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002142:	b480      	push	{r7}
 8002144:	b087      	sub	sp, #28
 8002146:	af00      	add	r7, sp, #0
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002156:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002158:	7dfb      	ldrb	r3, [r7, #23]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d003      	beq.n	8002166 <HAL_CAN_GetRxMessage+0x24>
 800215e:	7dfb      	ldrb	r3, [r7, #23]
 8002160:	2b02      	cmp	r3, #2
 8002162:	f040 80f3 	bne.w	800234c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10e      	bne.n	800218a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d116      	bne.n	80021a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e0e7      	b.n	800235a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d107      	bne.n	80021a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0d8      	b.n	800235a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	331b      	adds	r3, #27
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	4413      	add	r3, r2
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0204 	and.w	r2, r3, #4
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10c      	bne.n	80021e0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	331b      	adds	r3, #27
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	4413      	add	r3, r2
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0d5b      	lsrs	r3, r3, #21
 80021d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	e00b      	b.n	80021f8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	331b      	adds	r3, #27
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	4413      	add	r3, r2
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	08db      	lsrs	r3, r3, #3
 80021f0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	331b      	adds	r3, #27
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	4413      	add	r3, r2
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0202 	and.w	r2, r3, #2
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	331b      	adds	r3, #27
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	4413      	add	r3, r2
 800221a:	3304      	adds	r3, #4
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 020f 	and.w	r2, r3, #15
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	331b      	adds	r3, #27
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	4413      	add	r3, r2
 8002232:	3304      	adds	r3, #4
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	b2da      	uxtb	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	331b      	adds	r3, #27
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	4413      	add	r3, r2
 800224a:	3304      	adds	r3, #4
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	0c1b      	lsrs	r3, r3, #16
 8002250:	b29a      	uxth	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	4413      	add	r3, r2
 8002260:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	4413      	add	r3, r2
 8002276:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	0a1a      	lsrs	r2, r3, #8
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	3301      	adds	r3, #1
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	4413      	add	r3, r2
 8002290:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	0c1a      	lsrs	r2, r3, #16
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	3302      	adds	r3, #2
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	0e1a      	lsrs	r2, r3, #24
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	3303      	adds	r3, #3
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	3304      	adds	r3, #4
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	4413      	add	r3, r2
 80022dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	0a1a      	lsrs	r2, r3, #8
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	3305      	adds	r3, #5
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0c1a      	lsrs	r2, r3, #16
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	3306      	adds	r3, #6
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	4413      	add	r3, r2
 8002310:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	0e1a      	lsrs	r2, r3, #24
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	3307      	adds	r3, #7
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d108      	bne.n	8002338 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0220 	orr.w	r2, r2, #32
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	e007      	b.n	8002348 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0220 	orr.w	r2, r2, #32
 8002346:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	e006      	b.n	800235a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
  }
}
 800235a:	4618      	mov	r0, r3
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002366:	b480      	push	{r7}
 8002368:	b085      	sub	sp, #20
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800237a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800237c:	7afb      	ldrb	r3, [r7, #11]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d002      	beq.n	8002388 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002382:	7afb      	ldrb	r3, [r7, #11]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d10f      	bne.n	80023a8 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	e005      	b.n	80023a8 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80023a8:	68fb      	ldr	r3, [r7, #12]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023d4:	4013      	ands	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ea:	4a04      	ldr	r2, [pc, #16]	; (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	60d3      	str	r3, [r2, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <__NVIC_GetPriorityGrouping+0x18>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	f003 0307 	and.w	r3, r3, #7
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	2b00      	cmp	r3, #0
 800242c:	db0b      	blt.n	8002446 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	4907      	ldr	r1, [pc, #28]	; (8002454 <__NVIC_EnableIRQ+0x38>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	2001      	movs	r0, #1
 800243e:	fa00 f202 	lsl.w	r2, r0, r2
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	; (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	; (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf28      	it	cs
 80024ca:	2304      	movcs	r3, #4
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b03      	subs	r3, #3
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
         );
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002518:	f3bf 8f4f 	dsb	sy
}
 800251c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <__NVIC_SystemReset+0x24>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002526:	4904      	ldr	r1, [pc, #16]	; (8002538 <__NVIC_SystemReset+0x24>)
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <__NVIC_SystemReset+0x28>)
 800252a:	4313      	orrs	r3, r2
 800252c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800252e:	f3bf 8f4f 	dsb	sy
}
 8002532:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <__NVIC_SystemReset+0x20>
 8002538:	e000ed00 	.word	0xe000ed00
 800253c:	05fa0004 	.word	0x05fa0004

08002540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002550:	d301      	bcc.n	8002556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002552:	2301      	movs	r3, #1
 8002554:	e00f      	b.n	8002576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002556:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <SysTick_Config+0x40>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800255e:	210f      	movs	r1, #15
 8002560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002564:	f7ff ff78 	bl	8002458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <SysTick_Config+0x40>)
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256e:	4b04      	ldr	r3, [pc, #16]	; (8002580 <SysTick_Config+0x40>)
 8002570:	2207      	movs	r2, #7
 8002572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	e000e010 	.word	0xe000e010

08002584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff13 	bl	80023b8 <__NVIC_SetPriorityGrouping>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b086      	sub	sp, #24
 800259e:	af00      	add	r7, sp, #0
 80025a0:	4603      	mov	r3, r0
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ac:	f7ff ff28 	bl	8002400 <__NVIC_GetPriorityGrouping>
 80025b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	6978      	ldr	r0, [r7, #20]
 80025b8:	f7ff ff78 	bl	80024ac <NVIC_EncodePriority>
 80025bc:	4602      	mov	r2, r0
 80025be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c2:	4611      	mov	r1, r2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff47 	bl	8002458 <__NVIC_SetPriority>
}
 80025ca:	bf00      	nop
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	4603      	mov	r3, r0
 80025da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff1b 	bl	800241c <__NVIC_EnableIRQ>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80025f2:	f7ff ff8f 	bl	8002514 <__NVIC_SystemReset>

080025f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff ff9e 	bl	8002540 <SysTick_Config>
 8002604:	4603      	mov	r3, r0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e037      	b.n	8002694 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800263a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800263e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002648:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002654:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002660:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	4313      	orrs	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f97e 	bl	8002978 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}  
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_DMA_Start_IT+0x20>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e04a      	b.n	8002752 <HAL_DMA_Start_IT+0xb6>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d13a      	bne.n	8002744 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2202      	movs	r2, #2
 80026d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 f912 	bl	800291c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 020e 	orr.w	r2, r2, #14
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	e00f      	b.n	8002732 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 020a 	orr.w	r2, r2, #10
 8002720:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0204 	bic.w	r2, r2, #4
 8002730:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0201 	orr.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	e005      	b.n	8002750 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800274c:	2302      	movs	r3, #2
 800274e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002750:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002752:	4618      	mov	r0, r3
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800276c:	2b02      	cmp	r3, #2
 800276e:	d005      	beq.n	800277c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2204      	movs	r2, #4
 8002774:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	73fb      	strb	r3, [r7, #15]
 800277a:	e027      	b.n	80027cc <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 020e 	bic.w	r2, r2, #14
 800278a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0201 	bic.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a4:	2101      	movs	r1, #1
 80027a6:	fa01 f202 	lsl.w	r2, r1, r2
 80027aa:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
    } 
  }
  return status;
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b084      	sub	sp, #16
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	2204      	movs	r2, #4
 80027f4:	409a      	lsls	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d024      	beq.n	8002848 <HAL_DMA_IRQHandler+0x72>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d01f      	beq.n	8002848 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b00      	cmp	r3, #0
 8002814:	d107      	bne.n	8002826 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0204 	bic.w	r2, r2, #4
 8002824:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	2104      	movs	r1, #4
 8002830:	fa01 f202 	lsl.w	r2, r1, r2
 8002834:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d06a      	beq.n	8002914 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002846:	e065      	b.n	8002914 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	2202      	movs	r2, #2
 800284e:	409a      	lsls	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d02c      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xdc>
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d027      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10b      	bne.n	8002888 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 020a 	bic.w	r2, r2, #10
 800287e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002890:	2102      	movs	r1, #2
 8002892:	fa01 f202 	lsl.w	r2, r1, r2
 8002896:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d035      	beq.n	8002914 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80028b0:	e030      	b.n	8002914 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	2208      	movs	r2, #8
 80028b8:	409a      	lsls	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d028      	beq.n	8002914 <HAL_DMA_IRQHandler+0x13e>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d023      	beq.n	8002914 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 020e 	bic.w	r2, r2, #14
 80028da:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e4:	2101      	movs	r1, #1
 80028e6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ea:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	2b00      	cmp	r3, #0
 8002908:	d004      	beq.n	8002914 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	4798      	blx	r3
    }
  }
}  
 8002912:	e7ff      	b.n	8002914 <HAL_DMA_IRQHandler+0x13e>
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	2101      	movs	r1, #1
 8002934:	fa01 f202 	lsl.w	r2, r1, r2
 8002938:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b10      	cmp	r3, #16
 8002948:	d108      	bne.n	800295c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800295a:	e007      	b.n	800296c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	60da      	str	r2, [r3, #12]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <DMA_CalcBaseAndBitshift+0x34>)
 8002988:	4413      	add	r3, r2
 800298a:	4a09      	ldr	r2, [pc, #36]	; (80029b0 <DMA_CalcBaseAndBitshift+0x38>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	009a      	lsls	r2, r3, #2
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a06      	ldr	r2, [pc, #24]	; (80029b4 <DMA_CalcBaseAndBitshift+0x3c>)
 800299c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	bffdfff8 	.word	0xbffdfff8
 80029b0:	cccccccd 	.word	0xcccccccd
 80029b4:	40020000 	.word	0x40020000

080029b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c6:	e14e      	b.n	8002c66 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	2101      	movs	r1, #1
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	fa01 f303 	lsl.w	r3, r1, r3
 80029d4:	4013      	ands	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 8140 	beq.w	8002c60 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d005      	beq.n	80029f8 <HAL_GPIO_Init+0x40>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d130      	bne.n	8002a5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	2203      	movs	r2, #3
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a2e:	2201      	movs	r2, #1
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	f003 0201 	and.w	r2, r3, #1
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d017      	beq.n	8002a96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	2203      	movs	r2, #3
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d123      	bne.n	8002aea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	08da      	lsrs	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3208      	adds	r2, #8
 8002aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	220f      	movs	r2, #15
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	08da      	lsrs	r2, r3, #3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3208      	adds	r2, #8
 8002ae4:	6939      	ldr	r1, [r7, #16]
 8002ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	2203      	movs	r2, #3
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4013      	ands	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 0203 	and.w	r2, r3, #3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 809a 	beq.w	8002c60 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2c:	4b55      	ldr	r3, [pc, #340]	; (8002c84 <HAL_GPIO_Init+0x2cc>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	4a54      	ldr	r2, [pc, #336]	; (8002c84 <HAL_GPIO_Init+0x2cc>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6193      	str	r3, [r2, #24]
 8002b38:	4b52      	ldr	r3, [pc, #328]	; (8002c84 <HAL_GPIO_Init+0x2cc>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b44:	4a50      	ldr	r2, [pc, #320]	; (8002c88 <HAL_GPIO_Init+0x2d0>)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	089b      	lsrs	r3, r3, #2
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	220f      	movs	r2, #15
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4013      	ands	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b6e:	d013      	beq.n	8002b98 <HAL_GPIO_Init+0x1e0>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a46      	ldr	r2, [pc, #280]	; (8002c8c <HAL_GPIO_Init+0x2d4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00d      	beq.n	8002b94 <HAL_GPIO_Init+0x1dc>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a45      	ldr	r2, [pc, #276]	; (8002c90 <HAL_GPIO_Init+0x2d8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d007      	beq.n	8002b90 <HAL_GPIO_Init+0x1d8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a44      	ldr	r2, [pc, #272]	; (8002c94 <HAL_GPIO_Init+0x2dc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d101      	bne.n	8002b8c <HAL_GPIO_Init+0x1d4>
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e006      	b.n	8002b9a <HAL_GPIO_Init+0x1e2>
 8002b8c:	2305      	movs	r3, #5
 8002b8e:	e004      	b.n	8002b9a <HAL_GPIO_Init+0x1e2>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e002      	b.n	8002b9a <HAL_GPIO_Init+0x1e2>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <HAL_GPIO_Init+0x1e2>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	f002 0203 	and.w	r2, r2, #3
 8002ba0:	0092      	lsls	r2, r2, #2
 8002ba2:	4093      	lsls	r3, r2
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002baa:	4937      	ldr	r1, [pc, #220]	; (8002c88 <HAL_GPIO_Init+0x2d0>)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	089b      	lsrs	r3, r3, #2
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb8:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <HAL_GPIO_Init+0x2e0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002bdc:	4a2e      	ldr	r2, [pc, #184]	; (8002c98 <HAL_GPIO_Init+0x2e0>)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002be2:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <HAL_GPIO_Init+0x2e0>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c06:	4a24      	ldr	r2, [pc, #144]	; (8002c98 <HAL_GPIO_Init+0x2e0>)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c0c:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <HAL_GPIO_Init+0x2e0>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	43db      	mvns	r3, r3
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c30:	4a19      	ldr	r2, [pc, #100]	; (8002c98 <HAL_GPIO_Init+0x2e0>)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c36:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <HAL_GPIO_Init+0x2e0>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4013      	ands	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c5a:	4a0f      	ldr	r2, [pc, #60]	; (8002c98 <HAL_GPIO_Init+0x2e0>)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	3301      	adds	r3, #1
 8002c64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f47f aea9 	bne.w	80029c8 <HAL_GPIO_Init+0x10>
  }
}
 8002c76:	bf00      	nop
 8002c78:	bf00      	nop
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40010000 	.word	0x40010000
 8002c8c:	48000400 	.word	0x48000400
 8002c90:	48000800 	.word	0x48000800
 8002c94:	48000c00 	.word	0x48000c00
 8002c98:	40010400 	.word	0x40010400

08002c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	807b      	strh	r3, [r7, #2]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cac:	787b      	ldrb	r3, [r7, #1]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cb2:	887a      	ldrh	r2, [r7, #2]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cb8:	e002      	b.n	8002cc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cba:	887a      	ldrh	r2, [r7, #2]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cdc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d102      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	f001 b823 	b.w	8003d38 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 817d 	beq.w	8003002 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d08:	4bbc      	ldr	r3, [pc, #752]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d00c      	beq.n	8002d2e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d14:	4bb9      	ldr	r3, [pc, #740]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d15c      	bne.n	8002dda <HAL_RCC_OscConfig+0x10e>
 8002d20:	4bb6      	ldr	r3, [pc, #728]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2c:	d155      	bne.n	8002dda <HAL_RCC_OscConfig+0x10e>
 8002d2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d32:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d102      	bne.n	8002d60 <HAL_RCC_OscConfig+0x94>
 8002d5a:	4ba8      	ldr	r3, [pc, #672]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	e015      	b.n	8002d8c <HAL_RCC_OscConfig+0xc0>
 8002d60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d64:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d68:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002d74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d78:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002d7c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002d88:	4b9c      	ldr	r3, [pc, #624]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d90:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002d94:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002d98:	fa92 f2a2 	rbit	r2, r2
 8002d9c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002da0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002da4:	fab2 f282 	clz	r2, r2
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	f042 0220 	orr.w	r2, r2, #32
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	f002 021f 	and.w	r2, r2, #31
 8002db4:	2101      	movs	r1, #1
 8002db6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 811f 	beq.w	8003000 <HAL_RCC_OscConfig+0x334>
 8002dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f040 8116 	bne.w	8003000 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f000 bfaf 	b.w	8003d38 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dea:	d106      	bne.n	8002dfa <HAL_RCC_OscConfig+0x12e>
 8002dec:	4b83      	ldr	r3, [pc, #524]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a82      	ldr	r2, [pc, #520]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	e036      	b.n	8002e68 <HAL_RCC_OscConfig+0x19c>
 8002dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x158>
 8002e0a:	4b7c      	ldr	r3, [pc, #496]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a7b      	ldr	r2, [pc, #492]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	4b79      	ldr	r3, [pc, #484]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a78      	ldr	r2, [pc, #480]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	e021      	b.n	8002e68 <HAL_RCC_OscConfig+0x19c>
 8002e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x184>
 8002e36:	4b71      	ldr	r3, [pc, #452]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a70      	ldr	r2, [pc, #448]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b6e      	ldr	r3, [pc, #440]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a6d      	ldr	r2, [pc, #436]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCC_OscConfig+0x19c>
 8002e50:	4b6a      	ldr	r3, [pc, #424]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a69      	ldr	r2, [pc, #420]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	4b67      	ldr	r3, [pc, #412]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a66      	ldr	r2, [pc, #408]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e66:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e68:	4b64      	ldr	r3, [pc, #400]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	f023 020f 	bic.w	r2, r3, #15
 8002e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	495f      	ldr	r1, [pc, #380]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d059      	beq.n	8002f46 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e92:	f7fe fdf9 	bl	8001a88 <HAL_GetTick>
 8002e96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9a:	e00a      	b.n	8002eb2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e9c:	f7fe fdf4 	bl	8001a88 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b64      	cmp	r3, #100	; 0x64
 8002eaa:	d902      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	f000 bf43 	b.w	8003d38 <HAL_RCC_OscConfig+0x106c>
 8002eb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eb6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002ec6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d102      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x218>
 8002ede:	4b47      	ldr	r3, [pc, #284]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	e015      	b.n	8002f10 <HAL_RCC_OscConfig+0x244>
 8002ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ee8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002ef8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002efc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002f00:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002f0c:	4b3b      	ldr	r3, [pc, #236]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f14:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002f18:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002f1c:	fa92 f2a2 	rbit	r2, r2
 8002f20:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002f24:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002f28:	fab2 f282 	clz	r2, r2
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	f042 0220 	orr.w	r2, r2, #32
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	f002 021f 	and.w	r2, r2, #31
 8002f38:	2101      	movs	r1, #1
 8002f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ab      	beq.n	8002e9c <HAL_RCC_OscConfig+0x1d0>
 8002f44:	e05d      	b.n	8003002 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f46:	f7fe fd9f 	bl	8001a88 <HAL_GetTick>
 8002f4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f50:	f7fe fd9a 	bl	8001a88 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b64      	cmp	r3, #100	; 0x64
 8002f5e:	d902      	bls.n	8002f66 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	f000 bee9 	b.w	8003d38 <HAL_RCC_OscConfig+0x106c>
 8002f66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f6a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002f7a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d102      	bne.n	8002f98 <HAL_RCC_OscConfig+0x2cc>
 8002f92:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	e015      	b.n	8002fc4 <HAL_RCC_OscConfig+0x2f8>
 8002f98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f9c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002fa4:	fa93 f3a3 	rbit	r3, r3
 8002fa8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002fac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fb0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002fb4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002fb8:	fa93 f3a3 	rbit	r3, r3
 8002fbc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <HAL_RCC_OscConfig+0x330>)
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fc8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002fcc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002fd0:	fa92 f2a2 	rbit	r2, r2
 8002fd4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002fd8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002fdc:	fab2 f282 	clz	r2, r2
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	f042 0220 	orr.w	r2, r2, #32
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	f002 021f 	and.w	r2, r2, #31
 8002fec:	2101      	movs	r1, #1
 8002fee:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1ab      	bne.n	8002f50 <HAL_RCC_OscConfig+0x284>
 8002ff8:	e003      	b.n	8003002 <HAL_RCC_OscConfig+0x336>
 8002ffa:	bf00      	nop
 8002ffc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003006:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 817d 	beq.w	8003312 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003018:	4ba6      	ldr	r3, [pc, #664]	; (80032b4 <HAL_RCC_OscConfig+0x5e8>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 030c 	and.w	r3, r3, #12
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00b      	beq.n	800303c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003024:	4ba3      	ldr	r3, [pc, #652]	; (80032b4 <HAL_RCC_OscConfig+0x5e8>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 030c 	and.w	r3, r3, #12
 800302c:	2b08      	cmp	r3, #8
 800302e:	d172      	bne.n	8003116 <HAL_RCC_OscConfig+0x44a>
 8003030:	4ba0      	ldr	r3, [pc, #640]	; (80032b4 <HAL_RCC_OscConfig+0x5e8>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d16c      	bne.n	8003116 <HAL_RCC_OscConfig+0x44a>
 800303c:	2302      	movs	r3, #2
 800303e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800304e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003052:	fab3 f383 	clz	r3, r3
 8003056:	b2db      	uxtb	r3, r3
 8003058:	095b      	lsrs	r3, r3, #5
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b01      	cmp	r3, #1
 8003064:	d102      	bne.n	800306c <HAL_RCC_OscConfig+0x3a0>
 8003066:	4b93      	ldr	r3, [pc, #588]	; (80032b4 <HAL_RCC_OscConfig+0x5e8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	e013      	b.n	8003094 <HAL_RCC_OscConfig+0x3c8>
 800306c:	2302      	movs	r3, #2
 800306e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800307e:	2302      	movs	r3, #2
 8003080:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003084:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003088:	fa93 f3a3 	rbit	r3, r3
 800308c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003090:	4b88      	ldr	r3, [pc, #544]	; (80032b4 <HAL_RCC_OscConfig+0x5e8>)
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	2202      	movs	r2, #2
 8003096:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800309a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800309e:	fa92 f2a2 	rbit	r2, r2
 80030a2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80030a6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80030aa:	fab2 f282 	clz	r2, r2
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	f042 0220 	orr.w	r2, r2, #32
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	f002 021f 	and.w	r2, r2, #31
 80030ba:	2101      	movs	r1, #1
 80030bc:	fa01 f202 	lsl.w	r2, r1, r2
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_RCC_OscConfig+0x410>
 80030c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d002      	beq.n	80030dc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f000 be2e 	b.w	8003d38 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030dc:	4b75      	ldr	r3, [pc, #468]	; (80032b4 <HAL_RCC_OscConfig+0x5e8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	21f8      	movs	r1, #248	; 0xf8
 80030f2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80030fa:	fa91 f1a1 	rbit	r1, r1
 80030fe:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003102:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003106:	fab1 f181 	clz	r1, r1
 800310a:	b2c9      	uxtb	r1, r1
 800310c:	408b      	lsls	r3, r1
 800310e:	4969      	ldr	r1, [pc, #420]	; (80032b4 <HAL_RCC_OscConfig+0x5e8>)
 8003110:	4313      	orrs	r3, r2
 8003112:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003114:	e0fd      	b.n	8003312 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 8088 	beq.w	8003238 <HAL_RCC_OscConfig+0x56c>
 8003128:	2301      	movs	r3, #1
 800312a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003132:	fa93 f3a3 	rbit	r3, r3
 8003136:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800313a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003148:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	461a      	mov	r2, r3
 8003150:	2301      	movs	r3, #1
 8003152:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7fe fc98 	bl	8001a88 <HAL_GetTick>
 8003158:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315c:	e00a      	b.n	8003174 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800315e:	f7fe fc93 	bl	8001a88 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d902      	bls.n	8003174 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	f000 bde2 	b.w	8003d38 <HAL_RCC_OscConfig+0x106c>
 8003174:	2302      	movs	r3, #2
 8003176:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003186:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	b2db      	uxtb	r3, r3
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d102      	bne.n	80031a4 <HAL_RCC_OscConfig+0x4d8>
 800319e:	4b45      	ldr	r3, [pc, #276]	; (80032b4 <HAL_RCC_OscConfig+0x5e8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	e013      	b.n	80031cc <HAL_RCC_OscConfig+0x500>
 80031a4:	2302      	movs	r3, #2
 80031a6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80031ae:	fa93 f3a3 	rbit	r3, r3
 80031b2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80031b6:	2302      	movs	r3, #2
 80031b8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80031bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80031c0:	fa93 f3a3 	rbit	r3, r3
 80031c4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80031c8:	4b3a      	ldr	r3, [pc, #232]	; (80032b4 <HAL_RCC_OscConfig+0x5e8>)
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	2202      	movs	r2, #2
 80031ce:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80031d2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80031d6:	fa92 f2a2 	rbit	r2, r2
 80031da:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80031de:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80031e2:	fab2 f282 	clz	r2, r2
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	f042 0220 	orr.w	r2, r2, #32
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	f002 021f 	and.w	r2, r2, #31
 80031f2:	2101      	movs	r1, #1
 80031f4:	fa01 f202 	lsl.w	r2, r1, r2
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0af      	beq.n	800315e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fe:	4b2d      	ldr	r3, [pc, #180]	; (80032b4 <HAL_RCC_OscConfig+0x5e8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	21f8      	movs	r1, #248	; 0xf8
 8003214:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800321c:	fa91 f1a1 	rbit	r1, r1
 8003220:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003224:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003228:	fab1 f181 	clz	r1, r1
 800322c:	b2c9      	uxtb	r1, r1
 800322e:	408b      	lsls	r3, r1
 8003230:	4920      	ldr	r1, [pc, #128]	; (80032b4 <HAL_RCC_OscConfig+0x5e8>)
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]
 8003236:	e06c      	b.n	8003312 <HAL_RCC_OscConfig+0x646>
 8003238:	2301      	movs	r3, #1
 800323a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003242:	fa93 f3a3 	rbit	r3, r3
 8003246:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800324a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003258:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	461a      	mov	r2, r3
 8003260:	2300      	movs	r3, #0
 8003262:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fe fc10 	bl	8001a88 <HAL_GetTick>
 8003268:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326c:	e00a      	b.n	8003284 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800326e:	f7fe fc0b 	bl	8001a88 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d902      	bls.n	8003284 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	f000 bd5a 	b.w	8003d38 <HAL_RCC_OscConfig+0x106c>
 8003284:	2302      	movs	r3, #2
 8003286:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d104      	bne.n	80032b8 <HAL_RCC_OscConfig+0x5ec>
 80032ae:	4b01      	ldr	r3, [pc, #4]	; (80032b4 <HAL_RCC_OscConfig+0x5e8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	e015      	b.n	80032e0 <HAL_RCC_OscConfig+0x614>
 80032b4:	40021000 	.word	0x40021000
 80032b8:	2302      	movs	r3, #2
 80032ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80032c2:	fa93 f3a3 	rbit	r3, r3
 80032c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80032ca:	2302      	movs	r3, #2
 80032cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80032d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80032d4:	fa93 f3a3 	rbit	r3, r3
 80032d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80032dc:	4bc8      	ldr	r3, [pc, #800]	; (8003600 <HAL_RCC_OscConfig+0x934>)
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	2202      	movs	r2, #2
 80032e2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80032e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80032ea:	fa92 f2a2 	rbit	r2, r2
 80032ee:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80032f2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80032f6:	fab2 f282 	clz	r2, r2
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	f042 0220 	orr.w	r2, r2, #32
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	f002 021f 	and.w	r2, r2, #31
 8003306:	2101      	movs	r1, #1
 8003308:	fa01 f202 	lsl.w	r2, r1, r2
 800330c:	4013      	ands	r3, r2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1ad      	bne.n	800326e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003316:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 8110 	beq.w	8003548 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d079      	beq.n	800342c <HAL_RCC_OscConfig+0x760>
 8003338:	2301      	movs	r3, #1
 800333a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800334a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800334e:	fab3 f383 	clz	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	461a      	mov	r2, r3
 8003356:	4bab      	ldr	r3, [pc, #684]	; (8003604 <HAL_RCC_OscConfig+0x938>)
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	461a      	mov	r2, r3
 800335e:	2301      	movs	r3, #1
 8003360:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003362:	f7fe fb91 	bl	8001a88 <HAL_GetTick>
 8003366:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800336a:	e00a      	b.n	8003382 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800336c:	f7fe fb8c 	bl	8001a88 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d902      	bls.n	8003382 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	f000 bcdb 	b.w	8003d38 <HAL_RCC_OscConfig+0x106c>
 8003382:	2302      	movs	r3, #2
 8003384:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003388:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800338c:	fa93 f3a3 	rbit	r3, r3
 8003390:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003398:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800339c:	2202      	movs	r2, #2
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	fa93 f2a3 	rbit	r2, r3
 80033ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80033c0:	2202      	movs	r2, #2
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	fa93 f2a3 	rbit	r2, r3
 80033d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80033da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033dc:	4b88      	ldr	r3, [pc, #544]	; (8003600 <HAL_RCC_OscConfig+0x934>)
 80033de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80033e8:	2102      	movs	r1, #2
 80033ea:	6019      	str	r1, [r3, #0]
 80033ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	fa93 f1a3 	rbit	r1, r3
 80033fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003402:	6019      	str	r1, [r3, #0]
  return result;
 8003404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003408:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003418:	b2db      	uxtb	r3, r3
 800341a:	f003 031f 	and.w	r3, r3, #31
 800341e:	2101      	movs	r1, #1
 8003420:	fa01 f303 	lsl.w	r3, r1, r3
 8003424:	4013      	ands	r3, r2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0a0      	beq.n	800336c <HAL_RCC_OscConfig+0x6a0>
 800342a:	e08d      	b.n	8003548 <HAL_RCC_OscConfig+0x87c>
 800342c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003430:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003434:	2201      	movs	r2, #1
 8003436:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	fa93 f2a3 	rbit	r2, r3
 8003446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800344e:	601a      	str	r2, [r3, #0]
  return result;
 8003450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003454:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003458:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	4b68      	ldr	r3, [pc, #416]	; (8003604 <HAL_RCC_OscConfig+0x938>)
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	461a      	mov	r2, r3
 800346a:	2300      	movs	r3, #0
 800346c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346e:	f7fe fb0b 	bl	8001a88 <HAL_GetTick>
 8003472:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003476:	e00a      	b.n	800348e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003478:	f7fe fb06 	bl	8001a88 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d902      	bls.n	800348e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	f000 bc55 	b.w	8003d38 <HAL_RCC_OscConfig+0x106c>
 800348e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003492:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003496:	2202      	movs	r2, #2
 8003498:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	fa93 f2a3 	rbit	r2, r3
 80034a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80034ba:	2202      	movs	r2, #2
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	fa93 f2a3 	rbit	r2, r3
 80034cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80034de:	2202      	movs	r2, #2
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	fa93 f2a3 	rbit	r2, r3
 80034f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80034f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034fa:	4b41      	ldr	r3, [pc, #260]	; (8003600 <HAL_RCC_OscConfig+0x934>)
 80034fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003502:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003506:	2102      	movs	r1, #2
 8003508:	6019      	str	r1, [r3, #0]
 800350a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	fa93 f1a3 	rbit	r1, r3
 8003518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003520:	6019      	str	r1, [r3, #0]
  return result;
 8003522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003526:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	fab3 f383 	clz	r3, r3
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f003 031f 	and.w	r3, r3, #31
 800353c:	2101      	movs	r1, #1
 800353e:	fa01 f303 	lsl.w	r3, r1, r3
 8003542:	4013      	ands	r3, r2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d197      	bne.n	8003478 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 81a1 	beq.w	80038a0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355e:	2300      	movs	r3, #0
 8003560:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003564:	4b26      	ldr	r3, [pc, #152]	; (8003600 <HAL_RCC_OscConfig+0x934>)
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d116      	bne.n	800359e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003570:	4b23      	ldr	r3, [pc, #140]	; (8003600 <HAL_RCC_OscConfig+0x934>)
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	4a22      	ldr	r2, [pc, #136]	; (8003600 <HAL_RCC_OscConfig+0x934>)
 8003576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357a:	61d3      	str	r3, [r2, #28]
 800357c:	4b20      	ldr	r3, [pc, #128]	; (8003600 <HAL_RCC_OscConfig+0x934>)
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003588:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003592:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003596:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003598:	2301      	movs	r3, #1
 800359a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359e:	4b1a      	ldr	r3, [pc, #104]	; (8003608 <HAL_RCC_OscConfig+0x93c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d11a      	bne.n	80035e0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035aa:	4b17      	ldr	r3, [pc, #92]	; (8003608 <HAL_RCC_OscConfig+0x93c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a16      	ldr	r2, [pc, #88]	; (8003608 <HAL_RCC_OscConfig+0x93c>)
 80035b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b6:	f7fe fa67 	bl	8001a88 <HAL_GetTick>
 80035ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035be:	e009      	b.n	80035d4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c0:	f7fe fa62 	bl	8001a88 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b64      	cmp	r3, #100	; 0x64
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e3b1      	b.n	8003d38 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <HAL_RCC_OscConfig+0x93c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0ef      	beq.n	80035c0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d10d      	bne.n	800360c <HAL_RCC_OscConfig+0x940>
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <HAL_RCC_OscConfig+0x934>)
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	4a02      	ldr	r2, [pc, #8]	; (8003600 <HAL_RCC_OscConfig+0x934>)
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	6213      	str	r3, [r2, #32]
 80035fc:	e03c      	b.n	8003678 <HAL_RCC_OscConfig+0x9ac>
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000
 8003604:	10908120 	.word	0x10908120
 8003608:	40007000 	.word	0x40007000
 800360c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003610:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10c      	bne.n	8003636 <HAL_RCC_OscConfig+0x96a>
 800361c:	4bc1      	ldr	r3, [pc, #772]	; (8003924 <HAL_RCC_OscConfig+0xc58>)
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	4ac0      	ldr	r2, [pc, #768]	; (8003924 <HAL_RCC_OscConfig+0xc58>)
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	6213      	str	r3, [r2, #32]
 8003628:	4bbe      	ldr	r3, [pc, #760]	; (8003924 <HAL_RCC_OscConfig+0xc58>)
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	4abd      	ldr	r2, [pc, #756]	; (8003924 <HAL_RCC_OscConfig+0xc58>)
 800362e:	f023 0304 	bic.w	r3, r3, #4
 8003632:	6213      	str	r3, [r2, #32]
 8003634:	e020      	b.n	8003678 <HAL_RCC_OscConfig+0x9ac>
 8003636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b05      	cmp	r3, #5
 8003644:	d10c      	bne.n	8003660 <HAL_RCC_OscConfig+0x994>
 8003646:	4bb7      	ldr	r3, [pc, #732]	; (8003924 <HAL_RCC_OscConfig+0xc58>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	4ab6      	ldr	r2, [pc, #728]	; (8003924 <HAL_RCC_OscConfig+0xc58>)
 800364c:	f043 0304 	orr.w	r3, r3, #4
 8003650:	6213      	str	r3, [r2, #32]
 8003652:	4bb4      	ldr	r3, [pc, #720]	; (8003924 <HAL_RCC_OscConfig+0xc58>)
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	4ab3      	ldr	r2, [pc, #716]	; (8003924 <HAL_RCC_OscConfig+0xc58>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	6213      	str	r3, [r2, #32]
 800365e:	e00b      	b.n	8003678 <HAL_RCC_OscConfig+0x9ac>
 8003660:	4bb0      	ldr	r3, [pc, #704]	; (8003924 <HAL_RCC_OscConfig+0xc58>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	4aaf      	ldr	r2, [pc, #700]	; (8003924 <HAL_RCC_OscConfig+0xc58>)
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	6213      	str	r3, [r2, #32]
 800366c:	4bad      	ldr	r3, [pc, #692]	; (8003924 <HAL_RCC_OscConfig+0xc58>)
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	4aac      	ldr	r2, [pc, #688]	; (8003924 <HAL_RCC_OscConfig+0xc58>)
 8003672:	f023 0304 	bic.w	r3, r3, #4
 8003676:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 8081 	beq.w	800378c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800368a:	f7fe f9fd 	bl	8001a88 <HAL_GetTick>
 800368e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003692:	e00b      	b.n	80036ac <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003694:	f7fe f9f8 	bl	8001a88 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e345      	b.n	8003d38 <HAL_RCC_OscConfig+0x106c>
 80036ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80036b4:	2202      	movs	r2, #2
 80036b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	fa93 f2a3 	rbit	r2, r3
 80036c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80036d8:	2202      	movs	r2, #2
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	fa93 f2a3 	rbit	r2, r3
 80036ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80036f2:	601a      	str	r2, [r3, #0]
  return result;
 80036f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80036fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	b2db      	uxtb	r3, r3
 8003708:	f043 0302 	orr.w	r3, r3, #2
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d102      	bne.n	8003718 <HAL_RCC_OscConfig+0xa4c>
 8003712:	4b84      	ldr	r3, [pc, #528]	; (8003924 <HAL_RCC_OscConfig+0xc58>)
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	e013      	b.n	8003740 <HAL_RCC_OscConfig+0xa74>
 8003718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003720:	2202      	movs	r2, #2
 8003722:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003728:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	fa93 f2a3 	rbit	r2, r3
 8003732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003736:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	4b79      	ldr	r3, [pc, #484]	; (8003924 <HAL_RCC_OscConfig+0xc58>)
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003744:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003748:	2102      	movs	r1, #2
 800374a:	6011      	str	r1, [r2, #0]
 800374c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003750:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	fa92 f1a2 	rbit	r1, r2
 800375a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800375e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003762:	6011      	str	r1, [r2, #0]
  return result;
 8003764:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003768:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	fab2 f282 	clz	r2, r2
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	f002 021f 	and.w	r2, r2, #31
 800377e:	2101      	movs	r1, #1
 8003780:	fa01 f202 	lsl.w	r2, r1, r2
 8003784:	4013      	ands	r3, r2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d084      	beq.n	8003694 <HAL_RCC_OscConfig+0x9c8>
 800378a:	e07f      	b.n	800388c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378c:	f7fe f97c 	bl	8001a88 <HAL_GetTick>
 8003790:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003794:	e00b      	b.n	80037ae <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003796:	f7fe f977 	bl	8001a88 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e2c4      	b.n	8003d38 <HAL_RCC_OscConfig+0x106c>
 80037ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80037b6:	2202      	movs	r2, #2
 80037b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037be:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	fa93 f2a3 	rbit	r2, r3
 80037c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037cc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80037da:	2202      	movs	r2, #2
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	fa93 f2a3 	rbit	r2, r3
 80037ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80037f4:	601a      	str	r2, [r3, #0]
  return result;
 80037f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80037fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003800:	fab3 f383 	clz	r3, r3
 8003804:	b2db      	uxtb	r3, r3
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	b2db      	uxtb	r3, r3
 800380a:	f043 0302 	orr.w	r3, r3, #2
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d102      	bne.n	800381a <HAL_RCC_OscConfig+0xb4e>
 8003814:	4b43      	ldr	r3, [pc, #268]	; (8003924 <HAL_RCC_OscConfig+0xc58>)
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	e013      	b.n	8003842 <HAL_RCC_OscConfig+0xb76>
 800381a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003822:	2202      	movs	r2, #2
 8003824:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	fa93 f2a3 	rbit	r2, r3
 8003834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003838:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	4b39      	ldr	r3, [pc, #228]	; (8003924 <HAL_RCC_OscConfig+0xc58>)
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003846:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800384a:	2102      	movs	r1, #2
 800384c:	6011      	str	r1, [r2, #0]
 800384e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003852:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	fa92 f1a2 	rbit	r1, r2
 800385c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003860:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003864:	6011      	str	r1, [r2, #0]
  return result;
 8003866:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800386a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	fab2 f282 	clz	r2, r2
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	f002 021f 	and.w	r2, r2, #31
 8003880:	2101      	movs	r1, #1
 8003882:	fa01 f202 	lsl.w	r2, r1, r2
 8003886:	4013      	ands	r3, r2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d184      	bne.n	8003796 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800388c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003890:	2b01      	cmp	r3, #1
 8003892:	d105      	bne.n	80038a0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003894:	4b23      	ldr	r3, [pc, #140]	; (8003924 <HAL_RCC_OscConfig+0xc58>)
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	4a22      	ldr	r2, [pc, #136]	; (8003924 <HAL_RCC_OscConfig+0xc58>)
 800389a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8242 	beq.w	8003d36 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038b2:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <HAL_RCC_OscConfig+0xc58>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	f000 8213 	beq.w	8003ce6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	f040 8162 	bne.w	8003b96 <HAL_RCC_OscConfig+0xeca>
 80038d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80038da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	fa93 f2a3 	rbit	r2, r3
 80038ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80038f6:	601a      	str	r2, [r3, #0]
  return result;
 80038f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003900:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800390c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	461a      	mov	r2, r3
 8003914:	2300      	movs	r3, #0
 8003916:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fe f8b6 	bl	8001a88 <HAL_GetTick>
 800391c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003920:	e00c      	b.n	800393c <HAL_RCC_OscConfig+0xc70>
 8003922:	bf00      	nop
 8003924:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003928:	f7fe f8ae 	bl	8001a88 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e1fd      	b.n	8003d38 <HAL_RCC_OscConfig+0x106c>
 800393c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003940:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003944:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003948:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	fa93 f2a3 	rbit	r2, r3
 8003958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800395c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003960:	601a      	str	r2, [r3, #0]
  return result;
 8003962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003966:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800396a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800396c:	fab3 f383 	clz	r3, r3
 8003970:	b2db      	uxtb	r3, r3
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	b2db      	uxtb	r3, r3
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b01      	cmp	r3, #1
 800397e:	d102      	bne.n	8003986 <HAL_RCC_OscConfig+0xcba>
 8003980:	4bb0      	ldr	r3, [pc, #704]	; (8003c44 <HAL_RCC_OscConfig+0xf78>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	e027      	b.n	80039d6 <HAL_RCC_OscConfig+0xd0a>
 8003986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800398e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003992:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003998:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	fa93 f2a3 	rbit	r2, r3
 80039a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80039b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039be:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	fa93 f2a3 	rbit	r2, r3
 80039c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039cc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	4b9c      	ldr	r3, [pc, #624]	; (8003c44 <HAL_RCC_OscConfig+0xf78>)
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039da:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80039de:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039e2:	6011      	str	r1, [r2, #0]
 80039e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039e8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80039ec:	6812      	ldr	r2, [r2, #0]
 80039ee:	fa92 f1a2 	rbit	r1, r2
 80039f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039f6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80039fa:	6011      	str	r1, [r2, #0]
  return result;
 80039fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a00:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	fab2 f282 	clz	r2, r2
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	f042 0220 	orr.w	r2, r2, #32
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	f002 021f 	and.w	r2, r2, #31
 8003a16:	2101      	movs	r1, #1
 8003a18:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d182      	bne.n	8003928 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a22:	4b88      	ldr	r3, [pc, #544]	; (8003c44 <HAL_RCC_OscConfig+0xf78>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	430b      	orrs	r3, r1
 8003a44:	497f      	ldr	r1, [pc, #508]	; (8003c44 <HAL_RCC_OscConfig+0xf78>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	604b      	str	r3, [r1, #4]
 8003a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	fa93 f2a3 	rbit	r2, r3
 8003a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003a6e:	601a      	str	r2, [r3, #0]
  return result;
 8003a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a74:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003a78:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a7a:	fab3 f383 	clz	r3, r3
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7fd fffa 	bl	8001a88 <HAL_GetTick>
 8003a94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a98:	e009      	b.n	8003aae <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a9a:	f7fd fff5 	bl	8001a88 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e144      	b.n	8003d38 <HAL_RCC_OscConfig+0x106c>
 8003aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003ab6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	fa93 f2a3 	rbit	r2, r3
 8003aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ace:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ad2:	601a      	str	r2, [r3, #0]
  return result;
 8003ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003adc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ade:	fab3 f383 	clz	r3, r3
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d102      	bne.n	8003af8 <HAL_RCC_OscConfig+0xe2c>
 8003af2:	4b54      	ldr	r3, [pc, #336]	; (8003c44 <HAL_RCC_OscConfig+0xf78>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	e027      	b.n	8003b48 <HAL_RCC_OscConfig+0xe7c>
 8003af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003b00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b0a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	fa93 f2a3 	rbit	r2, r3
 8003b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b18:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b22:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003b26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b30:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	fa93 f2a3 	rbit	r2, r3
 8003b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	4b3f      	ldr	r3, [pc, #252]	; (8003c44 <HAL_RCC_OscConfig+0xf78>)
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b4c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003b50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b54:	6011      	str	r1, [r2, #0]
 8003b56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b5a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	fa92 f1a2 	rbit	r1, r2
 8003b64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b68:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003b6c:	6011      	str	r1, [r2, #0]
  return result;
 8003b6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b72:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	fab2 f282 	clz	r2, r2
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	f042 0220 	orr.w	r2, r2, #32
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	f002 021f 	and.w	r2, r2, #31
 8003b88:	2101      	movs	r1, #1
 8003b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b8e:	4013      	ands	r3, r2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d082      	beq.n	8003a9a <HAL_RCC_OscConfig+0xdce>
 8003b94:	e0cf      	b.n	8003d36 <HAL_RCC_OscConfig+0x106a>
 8003b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003b9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ba2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	fa93 f2a3 	rbit	r2, r3
 8003bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003bba:	601a      	str	r2, [r3, #0]
  return result;
 8003bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003bc4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc6:	fab3 f383 	clz	r3, r3
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	2300      	movs	r3, #0
 8003bda:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bdc:	f7fd ff54 	bl	8001a88 <HAL_GetTick>
 8003be0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be4:	e009      	b.n	8003bfa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be6:	f7fd ff4f 	bl	8001a88 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e09e      	b.n	8003d38 <HAL_RCC_OscConfig+0x106c>
 8003bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bfe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003c02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	fa93 f2a3 	rbit	r2, r3
 8003c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c1e:	601a      	str	r2, [r3, #0]
  return result;
 8003c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c24:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c2a:	fab3 f383 	clz	r3, r3
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	095b      	lsrs	r3, r3, #5
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d104      	bne.n	8003c48 <HAL_RCC_OscConfig+0xf7c>
 8003c3e:	4b01      	ldr	r3, [pc, #4]	; (8003c44 <HAL_RCC_OscConfig+0xf78>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	e029      	b.n	8003c98 <HAL_RCC_OscConfig+0xfcc>
 8003c44:	40021000 	.word	0x40021000
 8003c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c4c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003c50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c5a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	fa93 f2a3 	rbit	r2, r3
 8003c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c68:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c72:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003c76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c80:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	fa93 f2a3 	rbit	r2, r3
 8003c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	4b2b      	ldr	r3, [pc, #172]	; (8003d44 <HAL_RCC_OscConfig+0x1078>)
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c9c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003ca0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ca4:	6011      	str	r1, [r2, #0]
 8003ca6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003caa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	fa92 f1a2 	rbit	r1, r2
 8003cb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cb8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003cbc:	6011      	str	r1, [r2, #0]
  return result;
 8003cbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cc2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	fab2 f282 	clz	r2, r2
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	f042 0220 	orr.w	r2, r2, #32
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	f002 021f 	and.w	r2, r2, #31
 8003cd8:	2101      	movs	r1, #1
 8003cda:	fa01 f202 	lsl.w	r2, r1, r2
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d180      	bne.n	8003be6 <HAL_RCC_OscConfig+0xf1a>
 8003ce4:	e027      	b.n	8003d36 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e01e      	b.n	8003d38 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <HAL_RCC_OscConfig+0x1078>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d02:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d06:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d10b      	bne.n	8003d32 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003d1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d001      	beq.n	8003d36 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000

08003d48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b09e      	sub	sp, #120	; 0x78
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e162      	b.n	8004026 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d60:	4b90      	ldr	r3, [pc, #576]	; (8003fa4 <HAL_RCC_ClockConfig+0x25c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d910      	bls.n	8003d90 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6e:	4b8d      	ldr	r3, [pc, #564]	; (8003fa4 <HAL_RCC_ClockConfig+0x25c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 0207 	bic.w	r2, r3, #7
 8003d76:	498b      	ldr	r1, [pc, #556]	; (8003fa4 <HAL_RCC_ClockConfig+0x25c>)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7e:	4b89      	ldr	r3, [pc, #548]	; (8003fa4 <HAL_RCC_ClockConfig+0x25c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e14a      	b.n	8004026 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d9c:	4b82      	ldr	r3, [pc, #520]	; (8003fa8 <HAL_RCC_ClockConfig+0x260>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	497f      	ldr	r1, [pc, #508]	; (8003fa8 <HAL_RCC_ClockConfig+0x260>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80dc 	beq.w	8003f74 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d13c      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xf6>
 8003dc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dc8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dcc:	fa93 f3a3 	rbit	r3, r3
 8003dd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd4:	fab3 f383 	clz	r3, r3
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d102      	bne.n	8003dee <HAL_RCC_ClockConfig+0xa6>
 8003de8:	4b6f      	ldr	r3, [pc, #444]	; (8003fa8 <HAL_RCC_ClockConfig+0x260>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	e00f      	b.n	8003e0e <HAL_RCC_ClockConfig+0xc6>
 8003dee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003df2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003df6:	fa93 f3a3 	rbit	r3, r3
 8003dfa:	667b      	str	r3, [r7, #100]	; 0x64
 8003dfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e00:	663b      	str	r3, [r7, #96]	; 0x60
 8003e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e04:	fa93 f3a3 	rbit	r3, r3
 8003e08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e0a:	4b67      	ldr	r3, [pc, #412]	; (8003fa8 <HAL_RCC_ClockConfig+0x260>)
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e12:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e16:	fa92 f2a2 	rbit	r2, r2
 8003e1a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003e1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e1e:	fab2 f282 	clz	r2, r2
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	f042 0220 	orr.w	r2, r2, #32
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	f002 021f 	and.w	r2, r2, #31
 8003e2e:	2101      	movs	r1, #1
 8003e30:	fa01 f202 	lsl.w	r2, r1, r2
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d17b      	bne.n	8003f32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e0f3      	b.n	8004026 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d13c      	bne.n	8003ec0 <HAL_RCC_ClockConfig+0x178>
 8003e46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e4e:	fa93 f3a3 	rbit	r3, r3
 8003e52:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e56:	fab3 f383 	clz	r3, r3
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d102      	bne.n	8003e70 <HAL_RCC_ClockConfig+0x128>
 8003e6a:	4b4f      	ldr	r3, [pc, #316]	; (8003fa8 <HAL_RCC_ClockConfig+0x260>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	e00f      	b.n	8003e90 <HAL_RCC_ClockConfig+0x148>
 8003e70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e78:	fa93 f3a3 	rbit	r3, r3
 8003e7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e82:	643b      	str	r3, [r7, #64]	; 0x40
 8003e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e86:	fa93 f3a3 	rbit	r3, r3
 8003e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e8c:	4b46      	ldr	r3, [pc, #280]	; (8003fa8 <HAL_RCC_ClockConfig+0x260>)
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e94:	63ba      	str	r2, [r7, #56]	; 0x38
 8003e96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e98:	fa92 f2a2 	rbit	r2, r2
 8003e9c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ea0:	fab2 f282 	clz	r2, r2
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	f042 0220 	orr.w	r2, r2, #32
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	f002 021f 	and.w	r2, r2, #31
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d13a      	bne.n	8003f32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0b2      	b.n	8004026 <HAL_RCC_ClockConfig+0x2de>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec6:	fa93 f3a3 	rbit	r3, r3
 8003eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ece:	fab3 f383 	clz	r3, r3
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	095b      	lsrs	r3, r3, #5
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d102      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0x1a0>
 8003ee2:	4b31      	ldr	r3, [pc, #196]	; (8003fa8 <HAL_RCC_ClockConfig+0x260>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	e00d      	b.n	8003f04 <HAL_RCC_ClockConfig+0x1bc>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eee:	fa93 f3a3 	rbit	r3, r3
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	623b      	str	r3, [r7, #32]
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	fa93 f3a3 	rbit	r3, r3
 8003efe:	61fb      	str	r3, [r7, #28]
 8003f00:	4b29      	ldr	r3, [pc, #164]	; (8003fa8 <HAL_RCC_ClockConfig+0x260>)
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	2202      	movs	r2, #2
 8003f06:	61ba      	str	r2, [r7, #24]
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	fa92 f2a2 	rbit	r2, r2
 8003f0e:	617a      	str	r2, [r7, #20]
  return result;
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	fab2 f282 	clz	r2, r2
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	f042 0220 	orr.w	r2, r2, #32
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	f002 021f 	and.w	r2, r2, #31
 8003f22:	2101      	movs	r1, #1
 8003f24:	fa01 f202 	lsl.w	r2, r1, r2
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e079      	b.n	8004026 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f32:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <HAL_RCC_ClockConfig+0x260>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f023 0203 	bic.w	r2, r3, #3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	491a      	ldr	r1, [pc, #104]	; (8003fa8 <HAL_RCC_ClockConfig+0x260>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f44:	f7fd fda0 	bl	8001a88 <HAL_GetTick>
 8003f48:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f4c:	f7fd fd9c 	bl	8001a88 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e061      	b.n	8004026 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f62:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <HAL_RCC_ClockConfig+0x260>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f003 020c 	and.w	r2, r3, #12
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d1eb      	bne.n	8003f4c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_RCC_ClockConfig+0x25c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d214      	bcs.n	8003fac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f82:	4b08      	ldr	r3, [pc, #32]	; (8003fa4 <HAL_RCC_ClockConfig+0x25c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 0207 	bic.w	r2, r3, #7
 8003f8a:	4906      	ldr	r1, [pc, #24]	; (8003fa4 <HAL_RCC_ClockConfig+0x25c>)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f92:	4b04      	ldr	r3, [pc, #16]	; (8003fa4 <HAL_RCC_ClockConfig+0x25c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d005      	beq.n	8003fac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e040      	b.n	8004026 <HAL_RCC_ClockConfig+0x2de>
 8003fa4:	40022000 	.word	0x40022000
 8003fa8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb8:	4b1d      	ldr	r3, [pc, #116]	; (8004030 <HAL_RCC_ClockConfig+0x2e8>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	491a      	ldr	r1, [pc, #104]	; (8004030 <HAL_RCC_ClockConfig+0x2e8>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fd6:	4b16      	ldr	r3, [pc, #88]	; (8004030 <HAL_RCC_ClockConfig+0x2e8>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4912      	ldr	r1, [pc, #72]	; (8004030 <HAL_RCC_ClockConfig+0x2e8>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003fea:	f000 f829 	bl	8004040 <HAL_RCC_GetSysClockFreq>
 8003fee:	4601      	mov	r1, r0
 8003ff0:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <HAL_RCC_ClockConfig+0x2e8>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff8:	22f0      	movs	r2, #240	; 0xf0
 8003ffa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	fa92 f2a2 	rbit	r2, r2
 8004002:	60fa      	str	r2, [r7, #12]
  return result;
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	fab2 f282 	clz	r2, r2
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	40d3      	lsrs	r3, r2
 800400e:	4a09      	ldr	r2, [pc, #36]	; (8004034 <HAL_RCC_ClockConfig+0x2ec>)
 8004010:	5cd3      	ldrb	r3, [r2, r3]
 8004012:	fa21 f303 	lsr.w	r3, r1, r3
 8004016:	4a08      	ldr	r2, [pc, #32]	; (8004038 <HAL_RCC_ClockConfig+0x2f0>)
 8004018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800401a:	4b08      	ldr	r3, [pc, #32]	; (800403c <HAL_RCC_ClockConfig+0x2f4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f7fd fcee 	bl	8001a00 <HAL_InitTick>
  
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3778      	adds	r7, #120	; 0x78
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40021000 	.word	0x40021000
 8004034:	080084a0 	.word	0x080084a0
 8004038:	20000004 	.word	0x20000004
 800403c:	20000008 	.word	0x20000008

08004040 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004040:	b480      	push	{r7}
 8004042:	b08b      	sub	sp, #44	; 0x2c
 8004044:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	2300      	movs	r3, #0
 800404c:	61bb      	str	r3, [r7, #24]
 800404e:	2300      	movs	r3, #0
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800405a:	4b29      	ldr	r3, [pc, #164]	; (8004100 <HAL_RCC_GetSysClockFreq+0xc0>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f003 030c 	and.w	r3, r3, #12
 8004066:	2b04      	cmp	r3, #4
 8004068:	d002      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0x30>
 800406a:	2b08      	cmp	r3, #8
 800406c:	d003      	beq.n	8004076 <HAL_RCC_GetSysClockFreq+0x36>
 800406e:	e03c      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004070:	4b24      	ldr	r3, [pc, #144]	; (8004104 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004072:	623b      	str	r3, [r7, #32]
      break;
 8004074:	e03c      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800407c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004080:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	fa92 f2a2 	rbit	r2, r2
 8004088:	607a      	str	r2, [r7, #4]
  return result;
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	fab2 f282 	clz	r2, r2
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	40d3      	lsrs	r3, r2
 8004094:	4a1c      	ldr	r2, [pc, #112]	; (8004108 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004096:	5cd3      	ldrb	r3, [r2, r3]
 8004098:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800409a:	4b19      	ldr	r3, [pc, #100]	; (8004100 <HAL_RCC_GetSysClockFreq+0xc0>)
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	220f      	movs	r2, #15
 80040a4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	fa92 f2a2 	rbit	r2, r2
 80040ac:	60fa      	str	r2, [r7, #12]
  return result;
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	fab2 f282 	clz	r2, r2
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	40d3      	lsrs	r3, r2
 80040b8:	4a14      	ldr	r2, [pc, #80]	; (800410c <HAL_RCC_GetSysClockFreq+0xcc>)
 80040ba:	5cd3      	ldrb	r3, [r2, r3]
 80040bc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80040c8:	4a0e      	ldr	r2, [pc, #56]	; (8004104 <HAL_RCC_GetSysClockFreq+0xc4>)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	fb02 f303 	mul.w	r3, r2, r3
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
 80040d8:	e004      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	4a0c      	ldr	r2, [pc, #48]	; (8004110 <HAL_RCC_GetSysClockFreq+0xd0>)
 80040de:	fb02 f303 	mul.w	r3, r2, r3
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	623b      	str	r3, [r7, #32]
      break;
 80040e8:	e002      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040ea:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <HAL_RCC_GetSysClockFreq+0xd4>)
 80040ec:	623b      	str	r3, [r7, #32]
      break;
 80040ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f0:	6a3b      	ldr	r3, [r7, #32]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	372c      	adds	r7, #44	; 0x2c
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40021000 	.word	0x40021000
 8004104:	00f42400 	.word	0x00f42400
 8004108:	080084b8 	.word	0x080084b8
 800410c:	080084c8 	.word	0x080084c8
 8004110:	003d0900 	.word	0x003d0900
 8004114:	007a1200 	.word	0x007a1200

08004118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800411c:	4b03      	ldr	r3, [pc, #12]	; (800412c <HAL_RCC_GetHCLKFreq+0x14>)
 800411e:	681b      	ldr	r3, [r3, #0]
}
 8004120:	4618      	mov	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	20000004 	.word	0x20000004

08004130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004136:	f7ff ffef 	bl	8004118 <HAL_RCC_GetHCLKFreq>
 800413a:	4601      	mov	r1, r0
 800413c:	4b0b      	ldr	r3, [pc, #44]	; (800416c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004144:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004148:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	fa92 f2a2 	rbit	r2, r2
 8004150:	603a      	str	r2, [r7, #0]
  return result;
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	fab2 f282 	clz	r2, r2
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	40d3      	lsrs	r3, r2
 800415c:	4a04      	ldr	r2, [pc, #16]	; (8004170 <HAL_RCC_GetPCLK1Freq+0x40>)
 800415e:	5cd3      	ldrb	r3, [r2, r3]
 8004160:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40021000 	.word	0x40021000
 8004170:	080084b0 	.word	0x080084b0

08004174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800417a:	f7ff ffcd 	bl	8004118 <HAL_RCC_GetHCLKFreq>
 800417e:	4601      	mov	r1, r0
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004188:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800418c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	fa92 f2a2 	rbit	r2, r2
 8004194:	603a      	str	r2, [r7, #0]
  return result;
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	fab2 f282 	clz	r2, r2
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	40d3      	lsrs	r3, r2
 80041a0:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80041a2:	5cd3      	ldrb	r3, [r2, r3]
 80041a4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40021000 	.word	0x40021000
 80041b4:	080084b0 	.word	0x080084b0

080041b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b092      	sub	sp, #72	; 0x48
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 80cd 	beq.w	8004376 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041dc:	4b86      	ldr	r3, [pc, #536]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10e      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e8:	4b83      	ldr	r3, [pc, #524]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	4a82      	ldr	r2, [pc, #520]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f2:	61d3      	str	r3, [r2, #28]
 80041f4:	4b80      	ldr	r3, [pc, #512]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004200:	2301      	movs	r3, #1
 8004202:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004206:	4b7d      	ldr	r3, [pc, #500]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d118      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004212:	4b7a      	ldr	r3, [pc, #488]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a79      	ldr	r2, [pc, #484]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800421e:	f7fd fc33 	bl	8001a88 <HAL_GetTick>
 8004222:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004224:	e008      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004226:	f7fd fc2f 	bl	8001a88 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b64      	cmp	r3, #100	; 0x64
 8004232:	d901      	bls.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e0db      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004238:	4b70      	ldr	r3, [pc, #448]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0f0      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004244:	4b6c      	ldr	r3, [pc, #432]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800424c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800424e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d07d      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800425c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800425e:	429a      	cmp	r2, r3
 8004260:	d076      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004262:	4b65      	ldr	r3, [pc, #404]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800426c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004270:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	fa93 f3a3 	rbit	r3, r3
 8004278:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800427c:	fab3 f383 	clz	r3, r3
 8004280:	b2db      	uxtb	r3, r3
 8004282:	461a      	mov	r2, r3
 8004284:	4b5e      	ldr	r3, [pc, #376]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004286:	4413      	add	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	461a      	mov	r2, r3
 800428c:	2301      	movs	r3, #1
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004298:	fa93 f3a3 	rbit	r3, r3
 800429c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800429e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042a0:	fab3 f383 	clz	r3, r3
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	461a      	mov	r2, r3
 80042a8:	4b55      	ldr	r3, [pc, #340]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80042aa:	4413      	add	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	461a      	mov	r2, r3
 80042b0:	2300      	movs	r3, #0
 80042b2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042b4:	4a50      	ldr	r2, [pc, #320]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d045      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c4:	f7fd fbe0 	bl	8001a88 <HAL_GetTick>
 80042c8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ca:	e00a      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042cc:	f7fd fbdc 	bl	8001a88 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e086      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80042e2:	2302      	movs	r3, #2
 80042e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	fa93 f3a3 	rbit	r3, r3
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
 80042ee:	2302      	movs	r3, #2
 80042f0:	623b      	str	r3, [r7, #32]
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	fa93 f3a3 	rbit	r3, r3
 80042f8:	61fb      	str	r3, [r7, #28]
  return result;
 80042fa:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fc:	fab3 f383 	clz	r3, r3
 8004300:	b2db      	uxtb	r3, r3
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	b2db      	uxtb	r3, r3
 8004306:	f043 0302 	orr.w	r3, r3, #2
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d102      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004310:	4b39      	ldr	r3, [pc, #228]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	e007      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004316:	2302      	movs	r3, #2
 8004318:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	fa93 f3a3 	rbit	r3, r3
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	4b35      	ldr	r3, [pc, #212]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	2202      	movs	r2, #2
 8004328:	613a      	str	r2, [r7, #16]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	fa92 f2a2 	rbit	r2, r2
 8004330:	60fa      	str	r2, [r7, #12]
  return result;
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	fab2 f282 	clz	r2, r2
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	f002 021f 	and.w	r2, r2, #31
 8004344:	2101      	movs	r1, #1
 8004346:	fa01 f202 	lsl.w	r2, r1, r2
 800434a:	4013      	ands	r3, r2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0bd      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004350:	4b29      	ldr	r3, [pc, #164]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	4926      	ldr	r1, [pc, #152]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800435e:	4313      	orrs	r3, r2
 8004360:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004362:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004366:	2b01      	cmp	r3, #1
 8004368:	d105      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800436a:	4b23      	ldr	r3, [pc, #140]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	4a22      	ldr	r2, [pc, #136]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004374:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d008      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004382:	4b1d      	ldr	r3, [pc, #116]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	f023 0203 	bic.w	r2, r3, #3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	491a      	ldr	r1, [pc, #104]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004390:	4313      	orrs	r3, r2
 8004392:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043a0:	4b15      	ldr	r3, [pc, #84]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	f023 0210 	bic.w	r2, r3, #16
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	4912      	ldr	r1, [pc, #72]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d008      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043be:	4b0e      	ldr	r3, [pc, #56]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	490b      	ldr	r1, [pc, #44]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	4903      	ldr	r1, [pc, #12]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3748      	adds	r7, #72	; 0x48
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40021000 	.word	0x40021000
 80043fc:	40007000 	.word	0x40007000
 8004400:	10908100 	.word	0x10908100

08004404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e049      	b.n	80044aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d106      	bne.n	8004430 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fd f87c 	bl	8001528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3304      	adds	r3, #4
 8004440:	4619      	mov	r1, r3
 8004442:	4610      	mov	r0, r2
 8004444:	f001 f870 	bl	8005528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e049      	b.n	8004558 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d106      	bne.n	80044de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7fc ffc5 	bl	8001468 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2202      	movs	r2, #2
 80044e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3304      	adds	r3, #4
 80044ee:	4619      	mov	r1, r3
 80044f0:	4610      	mov	r0, r2
 80044f2:	f001 f819 	bl	8005528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d109      	bne.n	8004584 <HAL_TIM_PWM_Start+0x24>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b01      	cmp	r3, #1
 800457a:	bf14      	ite	ne
 800457c:	2301      	movne	r3, #1
 800457e:	2300      	moveq	r3, #0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	e03c      	b.n	80045fe <HAL_TIM_PWM_Start+0x9e>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b04      	cmp	r3, #4
 8004588:	d109      	bne.n	800459e <HAL_TIM_PWM_Start+0x3e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b01      	cmp	r3, #1
 8004594:	bf14      	ite	ne
 8004596:	2301      	movne	r3, #1
 8004598:	2300      	moveq	r3, #0
 800459a:	b2db      	uxtb	r3, r3
 800459c:	e02f      	b.n	80045fe <HAL_TIM_PWM_Start+0x9e>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d109      	bne.n	80045b8 <HAL_TIM_PWM_Start+0x58>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	bf14      	ite	ne
 80045b0:	2301      	movne	r3, #1
 80045b2:	2300      	moveq	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	e022      	b.n	80045fe <HAL_TIM_PWM_Start+0x9e>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2b0c      	cmp	r3, #12
 80045bc:	d109      	bne.n	80045d2 <HAL_TIM_PWM_Start+0x72>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	bf14      	ite	ne
 80045ca:	2301      	movne	r3, #1
 80045cc:	2300      	moveq	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	e015      	b.n	80045fe <HAL_TIM_PWM_Start+0x9e>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d109      	bne.n	80045ec <HAL_TIM_PWM_Start+0x8c>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	bf14      	ite	ne
 80045e4:	2301      	movne	r3, #1
 80045e6:	2300      	moveq	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	e008      	b.n	80045fe <HAL_TIM_PWM_Start+0x9e>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	bf14      	ite	ne
 80045f8:	2301      	movne	r3, #1
 80045fa:	2300      	moveq	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e088      	b.n	8004718 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d104      	bne.n	8004616 <HAL_TIM_PWM_Start+0xb6>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004614:	e023      	b.n	800465e <HAL_TIM_PWM_Start+0xfe>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b04      	cmp	r3, #4
 800461a:	d104      	bne.n	8004626 <HAL_TIM_PWM_Start+0xc6>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004624:	e01b      	b.n	800465e <HAL_TIM_PWM_Start+0xfe>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b08      	cmp	r3, #8
 800462a:	d104      	bne.n	8004636 <HAL_TIM_PWM_Start+0xd6>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004634:	e013      	b.n	800465e <HAL_TIM_PWM_Start+0xfe>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b0c      	cmp	r3, #12
 800463a:	d104      	bne.n	8004646 <HAL_TIM_PWM_Start+0xe6>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004644:	e00b      	b.n	800465e <HAL_TIM_PWM_Start+0xfe>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b10      	cmp	r3, #16
 800464a:	d104      	bne.n	8004656 <HAL_TIM_PWM_Start+0xf6>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004654:	e003      	b.n	800465e <HAL_TIM_PWM_Start+0xfe>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2202      	movs	r2, #2
 800465a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2201      	movs	r2, #1
 8004664:	6839      	ldr	r1, [r7, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f001 fcbc 	bl	8005fe4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a2b      	ldr	r2, [pc, #172]	; (8004720 <HAL_TIM_PWM_Start+0x1c0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00e      	beq.n	8004694 <HAL_TIM_PWM_Start+0x134>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a2a      	ldr	r2, [pc, #168]	; (8004724 <HAL_TIM_PWM_Start+0x1c4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d009      	beq.n	8004694 <HAL_TIM_PWM_Start+0x134>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a28      	ldr	r2, [pc, #160]	; (8004728 <HAL_TIM_PWM_Start+0x1c8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d004      	beq.n	8004694 <HAL_TIM_PWM_Start+0x134>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a27      	ldr	r2, [pc, #156]	; (800472c <HAL_TIM_PWM_Start+0x1cc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d101      	bne.n	8004698 <HAL_TIM_PWM_Start+0x138>
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <HAL_TIM_PWM_Start+0x13a>
 8004698:	2300      	movs	r3, #0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1b      	ldr	r2, [pc, #108]	; (8004720 <HAL_TIM_PWM_Start+0x1c0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d00e      	beq.n	80046d6 <HAL_TIM_PWM_Start+0x176>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c0:	d009      	beq.n	80046d6 <HAL_TIM_PWM_Start+0x176>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1a      	ldr	r2, [pc, #104]	; (8004730 <HAL_TIM_PWM_Start+0x1d0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d004      	beq.n	80046d6 <HAL_TIM_PWM_Start+0x176>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a14      	ldr	r2, [pc, #80]	; (8004724 <HAL_TIM_PWM_Start+0x1c4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d115      	bne.n	8004702 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	4b15      	ldr	r3, [pc, #84]	; (8004734 <HAL_TIM_PWM_Start+0x1d4>)
 80046de:	4013      	ands	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2b06      	cmp	r3, #6
 80046e6:	d015      	beq.n	8004714 <HAL_TIM_PWM_Start+0x1b4>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ee:	d011      	beq.n	8004714 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004700:	e008      	b.n	8004714 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0201 	orr.w	r2, r2, #1
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	e000      	b.n	8004716 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004714:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40012c00 	.word	0x40012c00
 8004724:	40014000 	.word	0x40014000
 8004728:	40014400 	.word	0x40014400
 800472c:	40014800 	.word	0x40014800
 8004730:	40000400 	.word	0x40000400
 8004734:	00010007 	.word	0x00010007

08004738 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d109      	bne.n	8004764 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	bf0c      	ite	eq
 800475c:	2301      	moveq	r3, #1
 800475e:	2300      	movne	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	e03c      	b.n	80047de <HAL_TIM_PWM_Start_DMA+0xa6>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b04      	cmp	r3, #4
 8004768:	d109      	bne.n	800477e <HAL_TIM_PWM_Start_DMA+0x46>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	bf0c      	ite	eq
 8004776:	2301      	moveq	r3, #1
 8004778:	2300      	movne	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	e02f      	b.n	80047de <HAL_TIM_PWM_Start_DMA+0xa6>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b08      	cmp	r3, #8
 8004782:	d109      	bne.n	8004798 <HAL_TIM_PWM_Start_DMA+0x60>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	bf0c      	ite	eq
 8004790:	2301      	moveq	r3, #1
 8004792:	2300      	movne	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	e022      	b.n	80047de <HAL_TIM_PWM_Start_DMA+0xa6>
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b0c      	cmp	r3, #12
 800479c:	d109      	bne.n	80047b2 <HAL_TIM_PWM_Start_DMA+0x7a>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	e015      	b.n	80047de <HAL_TIM_PWM_Start_DMA+0xa6>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d109      	bne.n	80047cc <HAL_TIM_PWM_Start_DMA+0x94>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	bf0c      	ite	eq
 80047c4:	2301      	moveq	r3, #1
 80047c6:	2300      	movne	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	e008      	b.n	80047de <HAL_TIM_PWM_Start_DMA+0xa6>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	bf0c      	ite	eq
 80047d8:	2301      	moveq	r3, #1
 80047da:	2300      	movne	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 80047e2:	2302      	movs	r3, #2
 80047e4:	e197      	b.n	8004b16 <HAL_TIM_PWM_Start_DMA+0x3de>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d109      	bne.n	8004800 <HAL_TIM_PWM_Start_DMA+0xc8>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	bf0c      	ite	eq
 80047f8:	2301      	moveq	r3, #1
 80047fa:	2300      	movne	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	e03c      	b.n	800487a <HAL_TIM_PWM_Start_DMA+0x142>
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2b04      	cmp	r3, #4
 8004804:	d109      	bne.n	800481a <HAL_TIM_PWM_Start_DMA+0xe2>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b01      	cmp	r3, #1
 8004810:	bf0c      	ite	eq
 8004812:	2301      	moveq	r3, #1
 8004814:	2300      	movne	r3, #0
 8004816:	b2db      	uxtb	r3, r3
 8004818:	e02f      	b.n	800487a <HAL_TIM_PWM_Start_DMA+0x142>
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b08      	cmp	r3, #8
 800481e:	d109      	bne.n	8004834 <HAL_TIM_PWM_Start_DMA+0xfc>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	e022      	b.n	800487a <HAL_TIM_PWM_Start_DMA+0x142>
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b0c      	cmp	r3, #12
 8004838:	d109      	bne.n	800484e <HAL_TIM_PWM_Start_DMA+0x116>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b01      	cmp	r3, #1
 8004844:	bf0c      	ite	eq
 8004846:	2301      	moveq	r3, #1
 8004848:	2300      	movne	r3, #0
 800484a:	b2db      	uxtb	r3, r3
 800484c:	e015      	b.n	800487a <HAL_TIM_PWM_Start_DMA+0x142>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b10      	cmp	r3, #16
 8004852:	d109      	bne.n	8004868 <HAL_TIM_PWM_Start_DMA+0x130>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	e008      	b.n	800487a <HAL_TIM_PWM_Start_DMA+0x142>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	bf0c      	ite	eq
 8004874:	2301      	moveq	r3, #1
 8004876:	2300      	movne	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d034      	beq.n	80048e8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d104      	bne.n	800488e <HAL_TIM_PWM_Start_DMA+0x156>
 8004884:	887b      	ldrh	r3, [r7, #2]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e143      	b.n	8004b16 <HAL_TIM_PWM_Start_DMA+0x3de>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d104      	bne.n	800489e <HAL_TIM_PWM_Start_DMA+0x166>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800489c:	e026      	b.n	80048ec <HAL_TIM_PWM_Start_DMA+0x1b4>
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d104      	bne.n	80048ae <HAL_TIM_PWM_Start_DMA+0x176>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ac:	e01e      	b.n	80048ec <HAL_TIM_PWM_Start_DMA+0x1b4>
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d104      	bne.n	80048be <HAL_TIM_PWM_Start_DMA+0x186>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048bc:	e016      	b.n	80048ec <HAL_TIM_PWM_Start_DMA+0x1b4>
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b0c      	cmp	r3, #12
 80048c2:	d104      	bne.n	80048ce <HAL_TIM_PWM_Start_DMA+0x196>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048cc:	e00e      	b.n	80048ec <HAL_TIM_PWM_Start_DMA+0x1b4>
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b10      	cmp	r3, #16
 80048d2:	d104      	bne.n	80048de <HAL_TIM_PWM_Start_DMA+0x1a6>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048dc:	e006      	b.n	80048ec <HAL_TIM_PWM_Start_DMA+0x1b4>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2202      	movs	r2, #2
 80048e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048e6:	e001      	b.n	80048ec <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e114      	b.n	8004b16 <HAL_TIM_PWM_Start_DMA+0x3de>
  }

  switch (Channel)
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b0c      	cmp	r3, #12
 80048f0:	f200 80ae 	bhi.w	8004a50 <HAL_TIM_PWM_Start_DMA+0x318>
 80048f4:	a201      	add	r2, pc, #4	; (adr r2, 80048fc <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80048f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fa:	bf00      	nop
 80048fc:	08004931 	.word	0x08004931
 8004900:	08004a51 	.word	0x08004a51
 8004904:	08004a51 	.word	0x08004a51
 8004908:	08004a51 	.word	0x08004a51
 800490c:	08004979 	.word	0x08004979
 8004910:	08004a51 	.word	0x08004a51
 8004914:	08004a51 	.word	0x08004a51
 8004918:	08004a51 	.word	0x08004a51
 800491c:	080049c1 	.word	0x080049c1
 8004920:	08004a51 	.word	0x08004a51
 8004924:	08004a51 	.word	0x08004a51
 8004928:	08004a51 	.word	0x08004a51
 800492c:	08004a09 	.word	0x08004a09
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	4a7a      	ldr	r2, [pc, #488]	; (8004b20 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004936:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	4a79      	ldr	r2, [pc, #484]	; (8004b24 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800493e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	4a78      	ldr	r2, [pc, #480]	; (8004b28 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8004946:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3334      	adds	r3, #52	; 0x34
 8004954:	461a      	mov	r2, r3
 8004956:	887b      	ldrh	r3, [r7, #2]
 8004958:	f7fd fea0 	bl	800269c <HAL_DMA_Start_IT>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e0d7      	b.n	8004b16 <HAL_TIM_PWM_Start_DMA+0x3de>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004974:	60da      	str	r2, [r3, #12]
      break;
 8004976:	e06e      	b.n	8004a56 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	4a68      	ldr	r2, [pc, #416]	; (8004b20 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800497e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004984:	4a67      	ldr	r2, [pc, #412]	; (8004b24 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004986:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498c:	4a66      	ldr	r2, [pc, #408]	; (8004b28 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800498e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3338      	adds	r3, #56	; 0x38
 800499c:	461a      	mov	r2, r3
 800499e:	887b      	ldrh	r3, [r7, #2]
 80049a0:	f7fd fe7c 	bl	800269c <HAL_DMA_Start_IT>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e0b3      	b.n	8004b16 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049bc:	60da      	str	r2, [r3, #12]
      break;
 80049be:	e04a      	b.n	8004a56 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	4a56      	ldr	r2, [pc, #344]	; (8004b20 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80049c6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	4a55      	ldr	r2, [pc, #340]	; (8004b24 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80049ce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	4a54      	ldr	r2, [pc, #336]	; (8004b28 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80049d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	333c      	adds	r3, #60	; 0x3c
 80049e4:	461a      	mov	r2, r3
 80049e6:	887b      	ldrh	r3, [r7, #2]
 80049e8:	f7fd fe58 	bl	800269c <HAL_DMA_Start_IT>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e08f      	b.n	8004b16 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a04:	60da      	str	r2, [r3, #12]
      break;
 8004a06:	e026      	b.n	8004a56 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	4a44      	ldr	r2, [pc, #272]	; (8004b20 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004a0e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	4a43      	ldr	r2, [pc, #268]	; (8004b24 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004a16:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1c:	4a42      	ldr	r2, [pc, #264]	; (8004b28 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3340      	adds	r3, #64	; 0x40
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	887b      	ldrh	r3, [r7, #2]
 8004a30:	f7fd fe34 	bl	800269c <HAL_DMA_Start_IT>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e06b      	b.n	8004b16 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a4c:	60da      	str	r2, [r3, #12]
      break;
 8004a4e:	e002      	b.n	8004a56 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	75fb      	strb	r3, [r7, #23]
      break;
 8004a54:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a56:	7dfb      	ldrb	r3, [r7, #23]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d15b      	bne.n	8004b14 <HAL_TIM_PWM_Start_DMA+0x3dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2201      	movs	r2, #1
 8004a62:	68b9      	ldr	r1, [r7, #8]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f001 fabd 	bl	8005fe4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a2f      	ldr	r2, [pc, #188]	; (8004b2c <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00e      	beq.n	8004a92 <HAL_TIM_PWM_Start_DMA+0x35a>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a2d      	ldr	r2, [pc, #180]	; (8004b30 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d009      	beq.n	8004a92 <HAL_TIM_PWM_Start_DMA+0x35a>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a2c      	ldr	r2, [pc, #176]	; (8004b34 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d004      	beq.n	8004a92 <HAL_TIM_PWM_Start_DMA+0x35a>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a2a      	ldr	r2, [pc, #168]	; (8004b38 <HAL_TIM_PWM_Start_DMA+0x400>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d101      	bne.n	8004a96 <HAL_TIM_PWM_Start_DMA+0x35e>
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <HAL_TIM_PWM_Start_DMA+0x360>
 8004a96:	2300      	movs	r3, #0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d007      	beq.n	8004aac <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aaa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a1e      	ldr	r2, [pc, #120]	; (8004b2c <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00e      	beq.n	8004ad4 <HAL_TIM_PWM_Start_DMA+0x39c>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004abe:	d009      	beq.n	8004ad4 <HAL_TIM_PWM_Start_DMA+0x39c>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1d      	ldr	r2, [pc, #116]	; (8004b3c <HAL_TIM_PWM_Start_DMA+0x404>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <HAL_TIM_PWM_Start_DMA+0x39c>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a18      	ldr	r2, [pc, #96]	; (8004b30 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d115      	bne.n	8004b00 <HAL_TIM_PWM_Start_DMA+0x3c8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	4b19      	ldr	r3, [pc, #100]	; (8004b40 <HAL_TIM_PWM_Start_DMA+0x408>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	2b06      	cmp	r3, #6
 8004ae4:	d015      	beq.n	8004b12 <HAL_TIM_PWM_Start_DMA+0x3da>
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aec:	d011      	beq.n	8004b12 <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        __HAL_TIM_ENABLE(htim);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0201 	orr.w	r2, r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004afe:	e008      	b.n	8004b12 <HAL_TIM_PWM_Start_DMA+0x3da>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0201 	orr.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	e000      	b.n	8004b14 <HAL_TIM_PWM_Start_DMA+0x3dc>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b12:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	08005419 	.word	0x08005419
 8004b24:	080054c1 	.word	0x080054c1
 8004b28:	08005387 	.word	0x08005387
 8004b2c:	40012c00 	.word	0x40012c00
 8004b30:	40014000 	.word	0x40014000
 8004b34:	40014400 	.word	0x40014400
 8004b38:	40014800 	.word	0x40014800
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	00010007 	.word	0x00010007

08004b44 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b0c      	cmp	r3, #12
 8004b56:	d855      	bhi.n	8004c04 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004b58:	a201      	add	r2, pc, #4	; (adr r2, 8004b60 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5e:	bf00      	nop
 8004b60:	08004b95 	.word	0x08004b95
 8004b64:	08004c05 	.word	0x08004c05
 8004b68:	08004c05 	.word	0x08004c05
 8004b6c:	08004c05 	.word	0x08004c05
 8004b70:	08004bb1 	.word	0x08004bb1
 8004b74:	08004c05 	.word	0x08004c05
 8004b78:	08004c05 	.word	0x08004c05
 8004b7c:	08004c05 	.word	0x08004c05
 8004b80:	08004bcd 	.word	0x08004bcd
 8004b84:	08004c05 	.word	0x08004c05
 8004b88:	08004c05 	.word	0x08004c05
 8004b8c:	08004c05 	.word	0x08004c05
 8004b90:	08004be9 	.word	0x08004be9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ba2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fd fdd6 	bl	800275a <HAL_DMA_Abort_IT>
      break;
 8004bae:	e02c      	b.n	8004c0a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bbe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fd fdc8 	bl	800275a <HAL_DMA_Abort_IT>
      break;
 8004bca:	e01e      	b.n	8004c0a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bda:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fd fdba 	bl	800275a <HAL_DMA_Abort_IT>
      break;
 8004be6:	e010      	b.n	8004c0a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bf6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fd fdac 	bl	800275a <HAL_DMA_Abort_IT>
      break;
 8004c02:	e002      	b.n	8004c0a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
      break;
 8004c08:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d17b      	bne.n	8004d08 <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2200      	movs	r2, #0
 8004c16:	6839      	ldr	r1, [r7, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f001 f9e3 	bl	8005fe4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a3c      	ldr	r2, [pc, #240]	; (8004d14 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00e      	beq.n	8004c46 <HAL_TIM_PWM_Stop_DMA+0x102>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a3a      	ldr	r2, [pc, #232]	; (8004d18 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d009      	beq.n	8004c46 <HAL_TIM_PWM_Stop_DMA+0x102>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a39      	ldr	r2, [pc, #228]	; (8004d1c <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <HAL_TIM_PWM_Stop_DMA+0x102>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a37      	ldr	r2, [pc, #220]	; (8004d20 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d101      	bne.n	8004c4a <HAL_TIM_PWM_Stop_DMA+0x106>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <HAL_TIM_PWM_Stop_DMA+0x108>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d017      	beq.n	8004c80 <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6a1a      	ldr	r2, [r3, #32]
 8004c56:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10f      	bne.n	8004c80 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6a1a      	ldr	r2, [r3, #32]
 8004c66:	f240 4344 	movw	r3, #1092	; 0x444
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d107      	bne.n	8004c80 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c7e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6a1a      	ldr	r2, [r3, #32]
 8004c86:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10f      	bne.n	8004cb0 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6a1a      	ldr	r2, [r3, #32]
 8004c96:	f240 4344 	movw	r3, #1092	; 0x444
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d107      	bne.n	8004cb0 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0201 	bic.w	r2, r2, #1
 8004cae:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d104      	bne.n	8004cc0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cbe:	e023      	b.n	8004d08 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d104      	bne.n	8004cd0 <HAL_TIM_PWM_Stop_DMA+0x18c>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cce:	e01b      	b.n	8004d08 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d104      	bne.n	8004ce0 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cde:	e013      	b.n	8004d08 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b0c      	cmp	r3, #12
 8004ce4:	d104      	bne.n	8004cf0 <HAL_TIM_PWM_Stop_DMA+0x1ac>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cee:	e00b      	b.n	8004d08 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b10      	cmp	r3, #16
 8004cf4:	d104      	bne.n	8004d00 <HAL_TIM_PWM_Stop_DMA+0x1bc>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cfe:	e003      	b.n	8004d08 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	40012c00 	.word	0x40012c00
 8004d18:	40014000 	.word	0x40014000
 8004d1c:	40014400 	.word	0x40014400
 8004d20:	40014800 	.word	0x40014800

08004d24 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e049      	b.n	8004dca <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fc fbac 	bl	80014a8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4619      	mov	r1, r3
 8004d62:	4610      	mov	r0, r2
 8004d64:	f000 fbe0 	bl	8005528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b086      	sub	sp, #24
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e088      	b.n	8004f02 <HAL_TIM_IC_ConfigChannel+0x130>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d11b      	bne.n	8004e36 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	6819      	ldr	r1, [r3, #0]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f000 ff3d 	bl	8005c8c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699a      	ldr	r2, [r3, #24]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 020c 	bic.w	r2, r2, #12
 8004e20:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6999      	ldr	r1, [r3, #24]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	619a      	str	r2, [r3, #24]
 8004e34:	e060      	b.n	8004ef8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d11c      	bne.n	8004e76 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	6819      	ldr	r1, [r3, #0]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f000 ffa9 	bl	8005da2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699a      	ldr	r2, [r3, #24]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e5e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6999      	ldr	r1, [r3, #24]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	021a      	lsls	r2, r3, #8
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	619a      	str	r2, [r3, #24]
 8004e74:	e040      	b.n	8004ef8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d11b      	bne.n	8004eb4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	6819      	ldr	r1, [r3, #0]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f000 fff6 	bl	8005e7c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	69da      	ldr	r2, [r3, #28]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 020c 	bic.w	r2, r2, #12
 8004e9e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	69d9      	ldr	r1, [r3, #28]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	61da      	str	r2, [r3, #28]
 8004eb2:	e021      	b.n	8004ef8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b0c      	cmp	r3, #12
 8004eb8:	d11c      	bne.n	8004ef4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	6819      	ldr	r1, [r3, #0]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f001 f813 	bl	8005ef4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69da      	ldr	r2, [r3, #28]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004edc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69d9      	ldr	r1, [r3, #28]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	021a      	lsls	r2, r3, #8
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	61da      	str	r2, [r3, #28]
 8004ef2:	e001      	b.n	8004ef8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e0ff      	b.n	800512a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b14      	cmp	r3, #20
 8004f36:	f200 80f0 	bhi.w	800511a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f3a:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f95 	.word	0x08004f95
 8004f44:	0800511b 	.word	0x0800511b
 8004f48:	0800511b 	.word	0x0800511b
 8004f4c:	0800511b 	.word	0x0800511b
 8004f50:	08004fd5 	.word	0x08004fd5
 8004f54:	0800511b 	.word	0x0800511b
 8004f58:	0800511b 	.word	0x0800511b
 8004f5c:	0800511b 	.word	0x0800511b
 8004f60:	08005017 	.word	0x08005017
 8004f64:	0800511b 	.word	0x0800511b
 8004f68:	0800511b 	.word	0x0800511b
 8004f6c:	0800511b 	.word	0x0800511b
 8004f70:	08005057 	.word	0x08005057
 8004f74:	0800511b 	.word	0x0800511b
 8004f78:	0800511b 	.word	0x0800511b
 8004f7c:	0800511b 	.word	0x0800511b
 8004f80:	08005099 	.word	0x08005099
 8004f84:	0800511b 	.word	0x0800511b
 8004f88:	0800511b 	.word	0x0800511b
 8004f8c:	0800511b 	.word	0x0800511b
 8004f90:	080050d9 	.word	0x080050d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68b9      	ldr	r1, [r7, #8]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fb3c 	bl	8005618 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0208 	orr.w	r2, r2, #8
 8004fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0204 	bic.w	r2, r2, #4
 8004fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6999      	ldr	r1, [r3, #24]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	691a      	ldr	r2, [r3, #16]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	619a      	str	r2, [r3, #24]
      break;
 8004fd2:	e0a5      	b.n	8005120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fba2 	bl	8005724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699a      	ldr	r2, [r3, #24]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6999      	ldr	r1, [r3, #24]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	021a      	lsls	r2, r3, #8
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	619a      	str	r2, [r3, #24]
      break;
 8005014:	e084      	b.n	8005120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fc01 	bl	8005824 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0208 	orr.w	r2, r2, #8
 8005030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69da      	ldr	r2, [r3, #28]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0204 	bic.w	r2, r2, #4
 8005040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69d9      	ldr	r1, [r3, #28]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	61da      	str	r2, [r3, #28]
      break;
 8005054:	e064      	b.n	8005120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68b9      	ldr	r1, [r7, #8]
 800505c:	4618      	mov	r0, r3
 800505e:	f000 fc5f 	bl	8005920 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69da      	ldr	r2, [r3, #28]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69da      	ldr	r2, [r3, #28]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69d9      	ldr	r1, [r3, #28]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	021a      	lsls	r2, r3, #8
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	61da      	str	r2, [r3, #28]
      break;
 8005096:	e043      	b.n	8005120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68b9      	ldr	r1, [r7, #8]
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fca2 	bl	80059e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0208 	orr.w	r2, r2, #8
 80050b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0204 	bic.w	r2, r2, #4
 80050c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	691a      	ldr	r2, [r3, #16]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050d6:	e023      	b.n	8005120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68b9      	ldr	r1, [r7, #8]
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fce0 	bl	8005aa4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005102:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	021a      	lsls	r2, r3, #8
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005118:	e002      	b.n	8005120 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	75fb      	strb	r3, [r7, #23]
      break;
 800511e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005128:	7dfb      	ldrb	r3, [r7, #23]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop

08005134 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_TIM_ConfigClockSource+0x1c>
 800514c:	2302      	movs	r3, #2
 800514e:	e0b6      	b.n	80052be <HAL_TIM_ConfigClockSource+0x18a>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800516e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800517a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800518c:	d03e      	beq.n	800520c <HAL_TIM_ConfigClockSource+0xd8>
 800518e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005192:	f200 8087 	bhi.w	80052a4 <HAL_TIM_ConfigClockSource+0x170>
 8005196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800519a:	f000 8086 	beq.w	80052aa <HAL_TIM_ConfigClockSource+0x176>
 800519e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a2:	d87f      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x170>
 80051a4:	2b70      	cmp	r3, #112	; 0x70
 80051a6:	d01a      	beq.n	80051de <HAL_TIM_ConfigClockSource+0xaa>
 80051a8:	2b70      	cmp	r3, #112	; 0x70
 80051aa:	d87b      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x170>
 80051ac:	2b60      	cmp	r3, #96	; 0x60
 80051ae:	d050      	beq.n	8005252 <HAL_TIM_ConfigClockSource+0x11e>
 80051b0:	2b60      	cmp	r3, #96	; 0x60
 80051b2:	d877      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x170>
 80051b4:	2b50      	cmp	r3, #80	; 0x50
 80051b6:	d03c      	beq.n	8005232 <HAL_TIM_ConfigClockSource+0xfe>
 80051b8:	2b50      	cmp	r3, #80	; 0x50
 80051ba:	d873      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x170>
 80051bc:	2b40      	cmp	r3, #64	; 0x40
 80051be:	d058      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x13e>
 80051c0:	2b40      	cmp	r3, #64	; 0x40
 80051c2:	d86f      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x170>
 80051c4:	2b30      	cmp	r3, #48	; 0x30
 80051c6:	d064      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x15e>
 80051c8:	2b30      	cmp	r3, #48	; 0x30
 80051ca:	d86b      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x170>
 80051cc:	2b20      	cmp	r3, #32
 80051ce:	d060      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x15e>
 80051d0:	2b20      	cmp	r3, #32
 80051d2:	d867      	bhi.n	80052a4 <HAL_TIM_ConfigClockSource+0x170>
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d05c      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x15e>
 80051d8:	2b10      	cmp	r3, #16
 80051da:	d05a      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x15e>
 80051dc:	e062      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	6899      	ldr	r1, [r3, #8]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f000 fed9 	bl	8005fa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005200:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	609a      	str	r2, [r3, #8]
      break;
 800520a:	e04f      	b.n	80052ac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	6899      	ldr	r1, [r3, #8]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f000 fec2 	bl	8005fa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800522e:	609a      	str	r2, [r3, #8]
      break;
 8005230:	e03c      	b.n	80052ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	6859      	ldr	r1, [r3, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	461a      	mov	r2, r3
 8005240:	f000 fd80 	bl	8005d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2150      	movs	r1, #80	; 0x50
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fe8f 	bl	8005f6e <TIM_ITRx_SetConfig>
      break;
 8005250:	e02c      	b.n	80052ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	6859      	ldr	r1, [r3, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	461a      	mov	r2, r3
 8005260:	f000 fddc 	bl	8005e1c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2160      	movs	r1, #96	; 0x60
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fe7f 	bl	8005f6e <TIM_ITRx_SetConfig>
      break;
 8005270:	e01c      	b.n	80052ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	6859      	ldr	r1, [r3, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	461a      	mov	r2, r3
 8005280:	f000 fd60 	bl	8005d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2140      	movs	r1, #64	; 0x40
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fe6f 	bl	8005f6e <TIM_ITRx_SetConfig>
      break;
 8005290:	e00c      	b.n	80052ac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4619      	mov	r1, r3
 800529c:	4610      	mov	r0, r2
 800529e:	f000 fe66 	bl	8005f6e <TIM_ITRx_SetConfig>
      break;
 80052a2:	e003      	b.n	80052ac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	73fb      	strb	r3, [r7, #15]
      break;
 80052a8:	e000      	b.n	80052ac <HAL_TIM_ConfigClockSource+0x178>
      break;
 80052aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b082      	sub	sp, #8
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_TIM_SlaveConfigSynchro+0x18>
 80052da:	2302      	movs	r3, #2
 80052dc:	e031      	b.n	8005342 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2202      	movs	r2, #2
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80052ee:	6839      	ldr	r1, [r7, #0]
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fc37 	bl	8005b64 <TIM_SlaveTimer_SetConfig>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d009      	beq.n	8005310 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e018      	b.n	8005342 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800531e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68da      	ldr	r2, [r3, #12]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800532e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	429a      	cmp	r2, r3
 800539c:	d107      	bne.n	80053ae <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2201      	movs	r2, #1
 80053a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053ac:	e02a      	b.n	8005404 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d107      	bne.n	80053c8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2202      	movs	r2, #2
 80053bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053c6:	e01d      	b.n	8005404 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d107      	bne.n	80053e2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2204      	movs	r2, #4
 80053d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053e0:	e010      	b.n	8005404 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d107      	bne.n	80053fc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2208      	movs	r2, #8
 80053f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053fa:	e003      	b.n	8005404 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f7ff ffb4 	bl	8005372 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	771a      	strb	r2, [r3, #28]
}
 8005410:	bf00      	nop
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	429a      	cmp	r2, r3
 800542e:	d10b      	bne.n	8005448 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2201      	movs	r2, #1
 8005434:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d136      	bne.n	80054ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005446:	e031      	b.n	80054ac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	429a      	cmp	r2, r3
 8005450:	d10b      	bne.n	800546a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2202      	movs	r2, #2
 8005456:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d125      	bne.n	80054ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005468:	e020      	b.n	80054ac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	429a      	cmp	r2, r3
 8005472:	d10b      	bne.n	800548c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2204      	movs	r2, #4
 8005478:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d114      	bne.n	80054ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800548a:	e00f      	b.n	80054ac <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	429a      	cmp	r2, r3
 8005494:	d10a      	bne.n	80054ac <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2208      	movs	r2, #8
 800549a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d103      	bne.n	80054ac <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f7ff ff4c 	bl	800534a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	771a      	strb	r2, [r3, #28]
}
 80054b8:	bf00      	nop
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d103      	bne.n	80054e0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2201      	movs	r2, #1
 80054dc:	771a      	strb	r2, [r3, #28]
 80054de:	e019      	b.n	8005514 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d103      	bne.n	80054f2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2202      	movs	r2, #2
 80054ee:	771a      	strb	r2, [r3, #28]
 80054f0:	e010      	b.n	8005514 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d103      	bne.n	8005504 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2204      	movs	r2, #4
 8005500:	771a      	strb	r2, [r3, #28]
 8005502:	e007      	b.n	8005514 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	429a      	cmp	r2, r3
 800550c:	d102      	bne.n	8005514 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2208      	movs	r2, #8
 8005512:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f7ff ff22 	bl	800535e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	771a      	strb	r2, [r3, #28]
}
 8005520:	bf00      	nop
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a32      	ldr	r2, [pc, #200]	; (8005604 <TIM_Base_SetConfig+0xdc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d007      	beq.n	8005550 <TIM_Base_SetConfig+0x28>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005546:	d003      	beq.n	8005550 <TIM_Base_SetConfig+0x28>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a2f      	ldr	r2, [pc, #188]	; (8005608 <TIM_Base_SetConfig+0xe0>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d108      	bne.n	8005562 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a27      	ldr	r2, [pc, #156]	; (8005604 <TIM_Base_SetConfig+0xdc>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d013      	beq.n	8005592 <TIM_Base_SetConfig+0x6a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005570:	d00f      	beq.n	8005592 <TIM_Base_SetConfig+0x6a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a24      	ldr	r2, [pc, #144]	; (8005608 <TIM_Base_SetConfig+0xe0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00b      	beq.n	8005592 <TIM_Base_SetConfig+0x6a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a23      	ldr	r2, [pc, #140]	; (800560c <TIM_Base_SetConfig+0xe4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d007      	beq.n	8005592 <TIM_Base_SetConfig+0x6a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a22      	ldr	r2, [pc, #136]	; (8005610 <TIM_Base_SetConfig+0xe8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d003      	beq.n	8005592 <TIM_Base_SetConfig+0x6a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a21      	ldr	r2, [pc, #132]	; (8005614 <TIM_Base_SetConfig+0xec>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d108      	bne.n	80055a4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a0e      	ldr	r2, [pc, #56]	; (8005604 <TIM_Base_SetConfig+0xdc>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00b      	beq.n	80055e8 <TIM_Base_SetConfig+0xc0>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a0e      	ldr	r2, [pc, #56]	; (800560c <TIM_Base_SetConfig+0xe4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d007      	beq.n	80055e8 <TIM_Base_SetConfig+0xc0>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a0d      	ldr	r2, [pc, #52]	; (8005610 <TIM_Base_SetConfig+0xe8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d003      	beq.n	80055e8 <TIM_Base_SetConfig+0xc0>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a0c      	ldr	r2, [pc, #48]	; (8005614 <TIM_Base_SetConfig+0xec>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d103      	bne.n	80055f0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	691a      	ldr	r2, [r3, #16]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	615a      	str	r2, [r3, #20]
}
 80055f6:	bf00      	nop
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	40012c00 	.word	0x40012c00
 8005608:	40000400 	.word	0x40000400
 800560c:	40014000 	.word	0x40014000
 8005610:	40014400 	.word	0x40014400
 8005614:	40014800 	.word	0x40014800

08005618 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	f023 0201 	bic.w	r2, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 0303 	bic.w	r3, r3, #3
 8005652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	4313      	orrs	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f023 0302 	bic.w	r3, r3, #2
 8005664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	4313      	orrs	r3, r2
 800566e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a28      	ldr	r2, [pc, #160]	; (8005714 <TIM_OC1_SetConfig+0xfc>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00b      	beq.n	8005690 <TIM_OC1_SetConfig+0x78>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a27      	ldr	r2, [pc, #156]	; (8005718 <TIM_OC1_SetConfig+0x100>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d007      	beq.n	8005690 <TIM_OC1_SetConfig+0x78>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a26      	ldr	r2, [pc, #152]	; (800571c <TIM_OC1_SetConfig+0x104>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d003      	beq.n	8005690 <TIM_OC1_SetConfig+0x78>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a25      	ldr	r2, [pc, #148]	; (8005720 <TIM_OC1_SetConfig+0x108>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d10c      	bne.n	80056aa <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f023 0308 	bic.w	r3, r3, #8
 8005696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f023 0304 	bic.w	r3, r3, #4
 80056a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a19      	ldr	r2, [pc, #100]	; (8005714 <TIM_OC1_SetConfig+0xfc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00b      	beq.n	80056ca <TIM_OC1_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a18      	ldr	r2, [pc, #96]	; (8005718 <TIM_OC1_SetConfig+0x100>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d007      	beq.n	80056ca <TIM_OC1_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a17      	ldr	r2, [pc, #92]	; (800571c <TIM_OC1_SetConfig+0x104>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d003      	beq.n	80056ca <TIM_OC1_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a16      	ldr	r2, [pc, #88]	; (8005720 <TIM_OC1_SetConfig+0x108>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d111      	bne.n	80056ee <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	621a      	str	r2, [r3, #32]
}
 8005708:	bf00      	nop
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	40012c00 	.word	0x40012c00
 8005718:	40014000 	.word	0x40014000
 800571c:	40014400 	.word	0x40014400
 8005720:	40014800 	.word	0x40014800

08005724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	f023 0210 	bic.w	r2, r3, #16
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	021b      	lsls	r3, r3, #8
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f023 0320 	bic.w	r3, r3, #32
 8005772:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a24      	ldr	r2, [pc, #144]	; (8005814 <TIM_OC2_SetConfig+0xf0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d10d      	bne.n	80057a4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800578e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4313      	orrs	r3, r2
 800579a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a1b      	ldr	r2, [pc, #108]	; (8005814 <TIM_OC2_SetConfig+0xf0>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00b      	beq.n	80057c4 <TIM_OC2_SetConfig+0xa0>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a1a      	ldr	r2, [pc, #104]	; (8005818 <TIM_OC2_SetConfig+0xf4>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d007      	beq.n	80057c4 <TIM_OC2_SetConfig+0xa0>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a19      	ldr	r2, [pc, #100]	; (800581c <TIM_OC2_SetConfig+0xf8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d003      	beq.n	80057c4 <TIM_OC2_SetConfig+0xa0>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a18      	ldr	r2, [pc, #96]	; (8005820 <TIM_OC2_SetConfig+0xfc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d113      	bne.n	80057ec <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057ca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057d2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	621a      	str	r2, [r3, #32]
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40012c00 	.word	0x40012c00
 8005818:	40014000 	.word	0x40014000
 800581c:	40014400 	.word	0x40014400
 8005820:	40014800 	.word	0x40014800

08005824 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0303 	bic.w	r3, r3, #3
 800585e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	021b      	lsls	r3, r3, #8
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a23      	ldr	r2, [pc, #140]	; (8005910 <TIM_OC3_SetConfig+0xec>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d10d      	bne.n	80058a2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800588c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058a0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a1a      	ldr	r2, [pc, #104]	; (8005910 <TIM_OC3_SetConfig+0xec>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00b      	beq.n	80058c2 <TIM_OC3_SetConfig+0x9e>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a19      	ldr	r2, [pc, #100]	; (8005914 <TIM_OC3_SetConfig+0xf0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d007      	beq.n	80058c2 <TIM_OC3_SetConfig+0x9e>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a18      	ldr	r2, [pc, #96]	; (8005918 <TIM_OC3_SetConfig+0xf4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d003      	beq.n	80058c2 <TIM_OC3_SetConfig+0x9e>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a17      	ldr	r2, [pc, #92]	; (800591c <TIM_OC3_SetConfig+0xf8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d113      	bne.n	80058ea <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	4313      	orrs	r3, r2
 80058dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	621a      	str	r2, [r3, #32]
}
 8005904:	bf00      	nop
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	40012c00 	.word	0x40012c00
 8005914:	40014000 	.word	0x40014000
 8005918:	40014400 	.word	0x40014400
 800591c:	40014800 	.word	0x40014800

08005920 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800594e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800595a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	021b      	lsls	r3, r3, #8
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800596e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	031b      	lsls	r3, r3, #12
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a16      	ldr	r2, [pc, #88]	; (80059d8 <TIM_OC4_SetConfig+0xb8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00b      	beq.n	800599c <TIM_OC4_SetConfig+0x7c>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a15      	ldr	r2, [pc, #84]	; (80059dc <TIM_OC4_SetConfig+0xbc>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d007      	beq.n	800599c <TIM_OC4_SetConfig+0x7c>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a14      	ldr	r2, [pc, #80]	; (80059e0 <TIM_OC4_SetConfig+0xc0>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d003      	beq.n	800599c <TIM_OC4_SetConfig+0x7c>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a13      	ldr	r2, [pc, #76]	; (80059e4 <TIM_OC4_SetConfig+0xc4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d109      	bne.n	80059b0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	019b      	lsls	r3, r3, #6
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	621a      	str	r2, [r3, #32]
}
 80059ca:	bf00      	nop
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	40012c00 	.word	0x40012c00
 80059dc:	40014000 	.word	0x40014000
 80059e0:	40014400 	.word	0x40014400
 80059e4:	40014800 	.word	0x40014800

080059e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	041b      	lsls	r3, r3, #16
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a15      	ldr	r2, [pc, #84]	; (8005a94 <TIM_OC5_SetConfig+0xac>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00b      	beq.n	8005a5a <TIM_OC5_SetConfig+0x72>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a14      	ldr	r2, [pc, #80]	; (8005a98 <TIM_OC5_SetConfig+0xb0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d007      	beq.n	8005a5a <TIM_OC5_SetConfig+0x72>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a13      	ldr	r2, [pc, #76]	; (8005a9c <TIM_OC5_SetConfig+0xb4>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d003      	beq.n	8005a5a <TIM_OC5_SetConfig+0x72>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a12      	ldr	r2, [pc, #72]	; (8005aa0 <TIM_OC5_SetConfig+0xb8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d109      	bne.n	8005a6e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	621a      	str	r2, [r3, #32]
}
 8005a88:	bf00      	nop
 8005a8a:	371c      	adds	r7, #28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	40012c00 	.word	0x40012c00
 8005a98:	40014000 	.word	0x40014000
 8005a9c:	40014400 	.word	0x40014400
 8005aa0:	40014800 	.word	0x40014800

08005aa4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	021b      	lsls	r3, r3, #8
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	051b      	lsls	r3, r3, #20
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a16      	ldr	r2, [pc, #88]	; (8005b54 <TIM_OC6_SetConfig+0xb0>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00b      	beq.n	8005b18 <TIM_OC6_SetConfig+0x74>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a15      	ldr	r2, [pc, #84]	; (8005b58 <TIM_OC6_SetConfig+0xb4>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d007      	beq.n	8005b18 <TIM_OC6_SetConfig+0x74>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a14      	ldr	r2, [pc, #80]	; (8005b5c <TIM_OC6_SetConfig+0xb8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <TIM_OC6_SetConfig+0x74>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a13      	ldr	r2, [pc, #76]	; (8005b60 <TIM_OC6_SetConfig+0xbc>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d109      	bne.n	8005b2c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	029b      	lsls	r3, r3, #10
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	621a      	str	r2, [r3, #32]
}
 8005b46:	bf00      	nop
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40012c00 	.word	0x40012c00
 8005b58:	40014000 	.word	0x40014000
 8005b5c:	40014400 	.word	0x40014400
 8005b60:	40014800 	.word	0x40014800

08005b64 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b80:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b92:	f023 0307 	bic.w	r3, r3, #7
 8005b96:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	2b70      	cmp	r3, #112	; 0x70
 8005bb0:	d01a      	beq.n	8005be8 <TIM_SlaveTimer_SetConfig+0x84>
 8005bb2:	2b70      	cmp	r3, #112	; 0x70
 8005bb4:	d860      	bhi.n	8005c78 <TIM_SlaveTimer_SetConfig+0x114>
 8005bb6:	2b60      	cmp	r3, #96	; 0x60
 8005bb8:	d054      	beq.n	8005c64 <TIM_SlaveTimer_SetConfig+0x100>
 8005bba:	2b60      	cmp	r3, #96	; 0x60
 8005bbc:	d85c      	bhi.n	8005c78 <TIM_SlaveTimer_SetConfig+0x114>
 8005bbe:	2b50      	cmp	r3, #80	; 0x50
 8005bc0:	d046      	beq.n	8005c50 <TIM_SlaveTimer_SetConfig+0xec>
 8005bc2:	2b50      	cmp	r3, #80	; 0x50
 8005bc4:	d858      	bhi.n	8005c78 <TIM_SlaveTimer_SetConfig+0x114>
 8005bc6:	2b40      	cmp	r3, #64	; 0x40
 8005bc8:	d019      	beq.n	8005bfe <TIM_SlaveTimer_SetConfig+0x9a>
 8005bca:	2b40      	cmp	r3, #64	; 0x40
 8005bcc:	d854      	bhi.n	8005c78 <TIM_SlaveTimer_SetConfig+0x114>
 8005bce:	2b30      	cmp	r3, #48	; 0x30
 8005bd0:	d055      	beq.n	8005c7e <TIM_SlaveTimer_SetConfig+0x11a>
 8005bd2:	2b30      	cmp	r3, #48	; 0x30
 8005bd4:	d850      	bhi.n	8005c78 <TIM_SlaveTimer_SetConfig+0x114>
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	d051      	beq.n	8005c7e <TIM_SlaveTimer_SetConfig+0x11a>
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d84c      	bhi.n	8005c78 <TIM_SlaveTimer_SetConfig+0x114>
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d04d      	beq.n	8005c7e <TIM_SlaveTimer_SetConfig+0x11a>
 8005be2:	2b10      	cmp	r3, #16
 8005be4:	d04b      	beq.n	8005c7e <TIM_SlaveTimer_SetConfig+0x11a>
 8005be6:	e047      	b.n	8005c78 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6818      	ldr	r0, [r3, #0]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	68d9      	ldr	r1, [r3, #12]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f000 f9d4 	bl	8005fa4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005bfc:	e040      	b.n	8005c80 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b05      	cmp	r3, #5
 8005c04:	d101      	bne.n	8005c0a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e03b      	b.n	8005c82 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6a1a      	ldr	r2, [r3, #32]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0201 	bic.w	r2, r2, #1
 8005c20:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c30:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	621a      	str	r2, [r3, #32]
      break;
 8005c4e:	e017      	b.n	8005c80 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6818      	ldr	r0, [r3, #0]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	6899      	ldr	r1, [r3, #8]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f000 f871 	bl	8005d44 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005c62:	e00d      	b.n	8005c80 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	6899      	ldr	r1, [r3, #8]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	461a      	mov	r2, r3
 8005c72:	f000 f8d3 	bl	8005e1c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005c76:	e003      	b.n	8005c80 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c7c:	e000      	b.n	8005c80 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8005c7e:	bf00      	nop
  }

  return status;
 8005c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3718      	adds	r7, #24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
	...

08005c8c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f023 0201 	bic.w	r2, r3, #1
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	4a20      	ldr	r2, [pc, #128]	; (8005d38 <TIM_TI1_SetConfig+0xac>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00b      	beq.n	8005cd2 <TIM_TI1_SetConfig+0x46>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc0:	d007      	beq.n	8005cd2 <TIM_TI1_SetConfig+0x46>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4a1d      	ldr	r2, [pc, #116]	; (8005d3c <TIM_TI1_SetConfig+0xb0>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d003      	beq.n	8005cd2 <TIM_TI1_SetConfig+0x46>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4a1c      	ldr	r2, [pc, #112]	; (8005d40 <TIM_TI1_SetConfig+0xb4>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d101      	bne.n	8005cd6 <TIM_TI1_SetConfig+0x4a>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e000      	b.n	8005cd8 <TIM_TI1_SetConfig+0x4c>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d008      	beq.n	8005cee <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f023 0303 	bic.w	r3, r3, #3
 8005ce2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	e003      	b.n	8005cf6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f043 0301 	orr.w	r3, r3, #1
 8005cf4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f023 030a 	bic.w	r3, r3, #10
 8005d10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f003 030a 	and.w	r3, r3, #10
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	621a      	str	r2, [r3, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40012c00 	.word	0x40012c00
 8005d3c:	40000400 	.word	0x40000400
 8005d40:	40014000 	.word	0x40014000

08005d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	f023 0201 	bic.w	r2, r3, #1
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f023 030a 	bic.w	r3, r3, #10
 8005d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	621a      	str	r2, [r3, #32]
}
 8005d96:	bf00      	nop
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b087      	sub	sp, #28
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	607a      	str	r2, [r7, #4]
 8005dae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	f023 0210 	bic.w	r2, r3, #16
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005de0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	031b      	lsls	r3, r3, #12
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005df4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	011b      	lsls	r3, r3, #4
 8005dfa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	621a      	str	r2, [r3, #32]
}
 8005e10:	bf00      	nop
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	f023 0210 	bic.w	r2, r3, #16
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	031b      	lsls	r3, r3, #12
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	011b      	lsls	r3, r3, #4
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	621a      	str	r2, [r3, #32]
}
 8005e70:	bf00      	nop
 8005e72:	371c      	adds	r7, #28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f023 0303 	bic.w	r3, r3, #3
 8005ea8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eb8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	011b      	lsls	r3, r3, #4
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005ecc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	021b      	lsls	r3, r3, #8
 8005ed2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	621a      	str	r2, [r3, #32]
}
 8005ee8:	bf00      	nop
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	021b      	lsls	r3, r3, #8
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f32:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	031b      	lsls	r3, r3, #12
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f46:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	031b      	lsls	r3, r3, #12
 8005f4c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	621a      	str	r2, [r3, #32]
}
 8005f62:	bf00      	nop
 8005f64:	371c      	adds	r7, #28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b085      	sub	sp, #20
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	f043 0307 	orr.w	r3, r3, #7
 8005f90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	609a      	str	r2, [r3, #8]
}
 8005f98:	bf00      	nop
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b087      	sub	sp, #28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	021a      	lsls	r2, r3, #8
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	609a      	str	r2, [r3, #8]
}
 8005fd8:	bf00      	nop
 8005fda:	371c      	adds	r7, #28
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f003 031f 	and.w	r3, r3, #31
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a1a      	ldr	r2, [r3, #32]
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	43db      	mvns	r3, r3
 8006006:	401a      	ands	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6a1a      	ldr	r2, [r3, #32]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f003 031f 	and.w	r3, r3, #31
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	fa01 f303 	lsl.w	r3, r1, r3
 800601c:	431a      	orrs	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	621a      	str	r2, [r3, #32]
}
 8006022:	bf00      	nop
 8006024:	371c      	adds	r7, #28
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
	...

08006030 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d109      	bne.n	8006054 <HAL_TIMEx_PWMN_Start+0x24>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b01      	cmp	r3, #1
 800604a:	bf14      	ite	ne
 800604c:	2301      	movne	r3, #1
 800604e:	2300      	moveq	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	e022      	b.n	800609a <HAL_TIMEx_PWMN_Start+0x6a>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b04      	cmp	r3, #4
 8006058:	d109      	bne.n	800606e <HAL_TIMEx_PWMN_Start+0x3e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b01      	cmp	r3, #1
 8006064:	bf14      	ite	ne
 8006066:	2301      	movne	r3, #1
 8006068:	2300      	moveq	r3, #0
 800606a:	b2db      	uxtb	r3, r3
 800606c:	e015      	b.n	800609a <HAL_TIMEx_PWMN_Start+0x6a>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b08      	cmp	r3, #8
 8006072:	d109      	bne.n	8006088 <HAL_TIMEx_PWMN_Start+0x58>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b01      	cmp	r3, #1
 800607e:	bf14      	ite	ne
 8006080:	2301      	movne	r3, #1
 8006082:	2300      	moveq	r3, #0
 8006084:	b2db      	uxtb	r3, r3
 8006086:	e008      	b.n	800609a <HAL_TIMEx_PWMN_Start+0x6a>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b01      	cmp	r3, #1
 8006092:	bf14      	ite	ne
 8006094:	2301      	movne	r3, #1
 8006096:	2300      	moveq	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e05f      	b.n	8006162 <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d104      	bne.n	80060b2 <HAL_TIMEx_PWMN_Start+0x82>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060b0:	e013      	b.n	80060da <HAL_TIMEx_PWMN_Start+0xaa>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b04      	cmp	r3, #4
 80060b6:	d104      	bne.n	80060c2 <HAL_TIMEx_PWMN_Start+0x92>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060c0:	e00b      	b.n	80060da <HAL_TIMEx_PWMN_Start+0xaa>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d104      	bne.n	80060d2 <HAL_TIMEx_PWMN_Start+0xa2>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060d0:	e003      	b.n	80060da <HAL_TIMEx_PWMN_Start+0xaa>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2202      	movs	r2, #2
 80060d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2204      	movs	r2, #4
 80060e0:	6839      	ldr	r1, [r7, #0]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 f930 	bl	8006348 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a1b      	ldr	r2, [pc, #108]	; (800616c <HAL_TIMEx_PWMN_Start+0x13c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00e      	beq.n	8006120 <HAL_TIMEx_PWMN_Start+0xf0>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610a:	d009      	beq.n	8006120 <HAL_TIMEx_PWMN_Start+0xf0>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a17      	ldr	r2, [pc, #92]	; (8006170 <HAL_TIMEx_PWMN_Start+0x140>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d004      	beq.n	8006120 <HAL_TIMEx_PWMN_Start+0xf0>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a16      	ldr	r2, [pc, #88]	; (8006174 <HAL_TIMEx_PWMN_Start+0x144>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d115      	bne.n	800614c <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689a      	ldr	r2, [r3, #8]
 8006126:	4b14      	ldr	r3, [pc, #80]	; (8006178 <HAL_TIMEx_PWMN_Start+0x148>)
 8006128:	4013      	ands	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2b06      	cmp	r3, #6
 8006130:	d015      	beq.n	800615e <HAL_TIMEx_PWMN_Start+0x12e>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006138:	d011      	beq.n	800615e <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f042 0201 	orr.w	r2, r2, #1
 8006148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800614a:	e008      	b.n	800615e <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0201 	orr.w	r2, r2, #1
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	e000      	b.n	8006160 <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	40012c00 	.word	0x40012c00
 8006170:	40000400 	.word	0x40000400
 8006174:	40014000 	.word	0x40014000
 8006178:	00010007 	.word	0x00010007

0800617c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006190:	2302      	movs	r3, #2
 8006192:	e054      	b.n	800623e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a24      	ldr	r2, [pc, #144]	; (800624c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d108      	bne.n	80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a17      	ldr	r2, [pc, #92]	; (800624c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d00e      	beq.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fc:	d009      	beq.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a13      	ldr	r2, [pc, #76]	; (8006250 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d004      	beq.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a11      	ldr	r2, [pc, #68]	; (8006254 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d10c      	bne.n	800622c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	4313      	orrs	r3, r2
 8006222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	40012c00 	.word	0x40012c00
 8006250:	40000400 	.word	0x40000400
 8006254:	40014000 	.word	0x40014000

08006258 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006262:	2300      	movs	r3, #0
 8006264:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800626c:	2b01      	cmp	r3, #1
 800626e:	d101      	bne.n	8006274 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006270:	2302      	movs	r3, #2
 8006272:	e060      	b.n	8006336 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	4313      	orrs	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	041b      	lsls	r3, r3, #16
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a14      	ldr	r2, [pc, #80]	; (8006344 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d115      	bne.n	8006324 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	051b      	lsls	r3, r3, #20
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	4313      	orrs	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	40012c00 	.word	0x40012c00

08006348 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f003 031f 	and.w	r3, r3, #31
 800635a:	2204      	movs	r2, #4
 800635c:	fa02 f303 	lsl.w	r3, r2, r3
 8006360:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a1a      	ldr	r2, [r3, #32]
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	43db      	mvns	r3, r3
 800636a:	401a      	ands	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6a1a      	ldr	r2, [r3, #32]
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f003 031f 	and.w	r3, r3, #31
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	fa01 f303 	lsl.w	r3, r1, r3
 8006380:	431a      	orrs	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	621a      	str	r2, [r3, #32]
}
 8006386:	bf00      	nop
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b082      	sub	sp, #8
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e040      	b.n	8006426 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d106      	bne.n	80063ba <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7fb f981 	bl	80016bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2224      	movs	r2, #36	; 0x24
 80063be:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 0201 	bic.w	r2, r2, #1
 80063ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f8bf 	bl	8006554 <UART_SetConfig>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e022      	b.n	8006426 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 f9e9 	bl	80067c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800640c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f042 0201 	orr.w	r2, r2, #1
 800641c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fa70 	bl	8006904 <UART_CheckIdleState>
 8006424:	4603      	mov	r3, r0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b08a      	sub	sp, #40	; 0x28
 8006432:	af02      	add	r7, sp, #8
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	603b      	str	r3, [r7, #0]
 800643a:	4613      	mov	r3, r2
 800643c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006442:	2b20      	cmp	r3, #32
 8006444:	f040 8081 	bne.w	800654a <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <HAL_UART_Transmit+0x26>
 800644e:	88fb      	ldrh	r3, [r7, #6]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d101      	bne.n	8006458 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e079      	b.n	800654c <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800645e:	2b01      	cmp	r3, #1
 8006460:	d101      	bne.n	8006466 <HAL_UART_Transmit+0x38>
 8006462:	2302      	movs	r3, #2
 8006464:	e072      	b.n	800654c <HAL_UART_Transmit+0x11e>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2221      	movs	r2, #33	; 0x21
 800647a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800647c:	f7fb fb04 	bl	8001a88 <HAL_GetTick>
 8006480:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	88fa      	ldrh	r2, [r7, #6]
 8006486:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	88fa      	ldrh	r2, [r7, #6]
 800648e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800649a:	d108      	bne.n	80064ae <HAL_UART_Transmit+0x80>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d104      	bne.n	80064ae <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80064a4:	2300      	movs	r3, #0
 80064a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	61bb      	str	r3, [r7, #24]
 80064ac:	e003      	b.n	80064b6 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80064be:	e02c      	b.n	800651a <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2200      	movs	r2, #0
 80064c8:	2180      	movs	r1, #128	; 0x80
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 fa63 	bl	8006996 <UART_WaitOnFlagUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e038      	b.n	800654c <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10b      	bne.n	80064f8 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	881a      	ldrh	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064ec:	b292      	uxth	r2, r2
 80064ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	3302      	adds	r3, #2
 80064f4:	61bb      	str	r3, [r7, #24]
 80064f6:	e007      	b.n	8006508 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	781a      	ldrb	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	3301      	adds	r3, #1
 8006506:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800650e:	b29b      	uxth	r3, r3
 8006510:	3b01      	subs	r3, #1
 8006512:	b29a      	uxth	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006520:	b29b      	uxth	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1cc      	bne.n	80064c0 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2200      	movs	r2, #0
 800652e:	2140      	movs	r1, #64	; 0x40
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 fa30 	bl	8006996 <UART_WaitOnFlagUntilTimeout>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e005      	b.n	800654c <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2220      	movs	r2, #32
 8006544:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	e000      	b.n	800654c <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800654a:	2302      	movs	r3, #2
  }
}
 800654c:	4618      	mov	r0, r3
 800654e:	3720      	adds	r7, #32
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800655c:	2300      	movs	r3, #0
 800655e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	431a      	orrs	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	4313      	orrs	r3, r2
 8006576:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	4b8a      	ldr	r3, [pc, #552]	; (80067a8 <UART_SetConfig+0x254>)
 8006580:	4013      	ands	r3, r2
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6812      	ldr	r2, [r2, #0]
 8006586:	6979      	ldr	r1, [r7, #20]
 8006588:	430b      	orrs	r3, r1
 800658a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a78      	ldr	r2, [pc, #480]	; (80067ac <UART_SetConfig+0x258>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d120      	bne.n	8006612 <UART_SetConfig+0xbe>
 80065d0:	4b77      	ldr	r3, [pc, #476]	; (80067b0 <UART_SetConfig+0x25c>)
 80065d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d4:	f003 0303 	and.w	r3, r3, #3
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d817      	bhi.n	800660c <UART_SetConfig+0xb8>
 80065dc:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <UART_SetConfig+0x90>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	080065f5 	.word	0x080065f5
 80065e8:	08006601 	.word	0x08006601
 80065ec:	08006607 	.word	0x08006607
 80065f0:	080065fb 	.word	0x080065fb
 80065f4:	2300      	movs	r3, #0
 80065f6:	77fb      	strb	r3, [r7, #31]
 80065f8:	e01d      	b.n	8006636 <UART_SetConfig+0xe2>
 80065fa:	2302      	movs	r3, #2
 80065fc:	77fb      	strb	r3, [r7, #31]
 80065fe:	e01a      	b.n	8006636 <UART_SetConfig+0xe2>
 8006600:	2304      	movs	r3, #4
 8006602:	77fb      	strb	r3, [r7, #31]
 8006604:	e017      	b.n	8006636 <UART_SetConfig+0xe2>
 8006606:	2308      	movs	r3, #8
 8006608:	77fb      	strb	r3, [r7, #31]
 800660a:	e014      	b.n	8006636 <UART_SetConfig+0xe2>
 800660c:	2310      	movs	r3, #16
 800660e:	77fb      	strb	r3, [r7, #31]
 8006610:	e011      	b.n	8006636 <UART_SetConfig+0xe2>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a67      	ldr	r2, [pc, #412]	; (80067b4 <UART_SetConfig+0x260>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d102      	bne.n	8006622 <UART_SetConfig+0xce>
 800661c:	2300      	movs	r3, #0
 800661e:	77fb      	strb	r3, [r7, #31]
 8006620:	e009      	b.n	8006636 <UART_SetConfig+0xe2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a64      	ldr	r2, [pc, #400]	; (80067b8 <UART_SetConfig+0x264>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d102      	bne.n	8006632 <UART_SetConfig+0xde>
 800662c:	2300      	movs	r3, #0
 800662e:	77fb      	strb	r3, [r7, #31]
 8006630:	e001      	b.n	8006636 <UART_SetConfig+0xe2>
 8006632:	2310      	movs	r3, #16
 8006634:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800663e:	d15b      	bne.n	80066f8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8006640:	7ffb      	ldrb	r3, [r7, #31]
 8006642:	2b08      	cmp	r3, #8
 8006644:	d827      	bhi.n	8006696 <UART_SetConfig+0x142>
 8006646:	a201      	add	r2, pc, #4	; (adr r2, 800664c <UART_SetConfig+0xf8>)
 8006648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664c:	08006671 	.word	0x08006671
 8006650:	08006679 	.word	0x08006679
 8006654:	08006681 	.word	0x08006681
 8006658:	08006697 	.word	0x08006697
 800665c:	08006687 	.word	0x08006687
 8006660:	08006697 	.word	0x08006697
 8006664:	08006697 	.word	0x08006697
 8006668:	08006697 	.word	0x08006697
 800666c:	0800668f 	.word	0x0800668f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006670:	f7fd fd5e 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 8006674:	61b8      	str	r0, [r7, #24]
        break;
 8006676:	e013      	b.n	80066a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006678:	f7fd fd7c 	bl	8004174 <HAL_RCC_GetPCLK2Freq>
 800667c:	61b8      	str	r0, [r7, #24]
        break;
 800667e:	e00f      	b.n	80066a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006680:	4b4e      	ldr	r3, [pc, #312]	; (80067bc <UART_SetConfig+0x268>)
 8006682:	61bb      	str	r3, [r7, #24]
        break;
 8006684:	e00c      	b.n	80066a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006686:	f7fd fcdb 	bl	8004040 <HAL_RCC_GetSysClockFreq>
 800668a:	61b8      	str	r0, [r7, #24]
        break;
 800668c:	e008      	b.n	80066a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800668e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006692:	61bb      	str	r3, [r7, #24]
        break;
 8006694:	e004      	b.n	80066a0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	77bb      	strb	r3, [r7, #30]
        break;
 800669e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d074      	beq.n	8006790 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	005a      	lsls	r2, r3, #1
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	085b      	lsrs	r3, r3, #1
 80066b0:	441a      	add	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b0f      	cmp	r3, #15
 80066c2:	d916      	bls.n	80066f2 <UART_SetConfig+0x19e>
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ca:	d212      	bcs.n	80066f2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	f023 030f 	bic.w	r3, r3, #15
 80066d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	085b      	lsrs	r3, r3, #1
 80066da:	b29b      	uxth	r3, r3
 80066dc:	f003 0307 	and.w	r3, r3, #7
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	89fb      	ldrh	r3, [r7, #14]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	89fa      	ldrh	r2, [r7, #14]
 80066ee:	60da      	str	r2, [r3, #12]
 80066f0:	e04e      	b.n	8006790 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	77bb      	strb	r3, [r7, #30]
 80066f6:	e04b      	b.n	8006790 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066f8:	7ffb      	ldrb	r3, [r7, #31]
 80066fa:	2b08      	cmp	r3, #8
 80066fc:	d827      	bhi.n	800674e <UART_SetConfig+0x1fa>
 80066fe:	a201      	add	r2, pc, #4	; (adr r2, 8006704 <UART_SetConfig+0x1b0>)
 8006700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006704:	08006729 	.word	0x08006729
 8006708:	08006731 	.word	0x08006731
 800670c:	08006739 	.word	0x08006739
 8006710:	0800674f 	.word	0x0800674f
 8006714:	0800673f 	.word	0x0800673f
 8006718:	0800674f 	.word	0x0800674f
 800671c:	0800674f 	.word	0x0800674f
 8006720:	0800674f 	.word	0x0800674f
 8006724:	08006747 	.word	0x08006747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006728:	f7fd fd02 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 800672c:	61b8      	str	r0, [r7, #24]
        break;
 800672e:	e013      	b.n	8006758 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006730:	f7fd fd20 	bl	8004174 <HAL_RCC_GetPCLK2Freq>
 8006734:	61b8      	str	r0, [r7, #24]
        break;
 8006736:	e00f      	b.n	8006758 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006738:	4b20      	ldr	r3, [pc, #128]	; (80067bc <UART_SetConfig+0x268>)
 800673a:	61bb      	str	r3, [r7, #24]
        break;
 800673c:	e00c      	b.n	8006758 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800673e:	f7fd fc7f 	bl	8004040 <HAL_RCC_GetSysClockFreq>
 8006742:	61b8      	str	r0, [r7, #24]
        break;
 8006744:	e008      	b.n	8006758 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800674a:	61bb      	str	r3, [r7, #24]
        break;
 800674c:	e004      	b.n	8006758 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	77bb      	strb	r3, [r7, #30]
        break;
 8006756:	bf00      	nop
    }

    if (pclk != 0U)
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d018      	beq.n	8006790 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	085a      	lsrs	r2, r3, #1
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	441a      	add	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006770:	b29b      	uxth	r3, r3
 8006772:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	2b0f      	cmp	r3, #15
 8006778:	d908      	bls.n	800678c <UART_SetConfig+0x238>
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006780:	d204      	bcs.n	800678c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	60da      	str	r2, [r3, #12]
 800678a:	e001      	b.n	8006790 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800679c:	7fbb      	ldrb	r3, [r7, #30]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3720      	adds	r7, #32
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	efff69f3 	.word	0xefff69f3
 80067ac:	40013800 	.word	0x40013800
 80067b0:	40021000 	.word	0x40021000
 80067b4:	40004400 	.word	0x40004400
 80067b8:	40004800 	.word	0x40004800
 80067bc:	007a1200 	.word	0x007a1200

080067c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00a      	beq.n	80067ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00a      	beq.n	800682e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	f003 0308 	and.w	r3, r3, #8
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	f003 0310 	and.w	r3, r3, #16
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006876:	f003 0320 	and.w	r3, r3, #32
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01a      	beq.n	80068d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068be:	d10a      	bne.n	80068d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	605a      	str	r2, [r3, #4]
  }
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af02      	add	r7, sp, #8
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006914:	f7fb f8b8 	bl	8001a88 <HAL_GetTick>
 8006918:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0308 	and.w	r3, r3, #8
 8006924:	2b08      	cmp	r3, #8
 8006926:	d10e      	bne.n	8006946 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f82d 	bl	8006996 <UART_WaitOnFlagUntilTimeout>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e023      	b.n	800698e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0304 	and.w	r3, r3, #4
 8006950:	2b04      	cmp	r3, #4
 8006952:	d10e      	bne.n	8006972 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006954:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f817 	bl	8006996 <UART_WaitOnFlagUntilTimeout>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e00d      	b.n	800698e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2220      	movs	r2, #32
 8006976:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2220      	movs	r2, #32
 800697c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b09c      	sub	sp, #112	; 0x70
 800699a:	af00      	add	r7, sp, #0
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	60b9      	str	r1, [r7, #8]
 80069a0:	603b      	str	r3, [r7, #0]
 80069a2:	4613      	mov	r3, r2
 80069a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069a6:	e0a5      	b.n	8006af4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ae:	f000 80a1 	beq.w	8006af4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069b2:	f7fb f869 	bl	8001a88 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80069be:	429a      	cmp	r2, r3
 80069c0:	d302      	bcc.n	80069c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80069c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d13e      	bne.n	8006a46 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80069d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069dc:	667b      	str	r3, [r7, #100]	; 0x64
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80069f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e6      	bne.n	80069c8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3308      	adds	r3, #8
 8006a00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0c:	f023 0301 	bic.w	r3, r3, #1
 8006a10:	663b      	str	r3, [r7, #96]	; 0x60
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3308      	adds	r3, #8
 8006a18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e5      	bne.n	80069fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2220      	movs	r2, #32
 8006a32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2220      	movs	r2, #32
 8006a38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e067      	b.n	8006b16 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d04f      	beq.n	8006af4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a62:	d147      	bne.n	8006af4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a94:	e841 2300 	strex	r3, r2, [r1]
 8006a98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e6      	bne.n	8006a6e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	e853 3f00 	ldrex	r3, [r3]
 8006aae:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f023 0301 	bic.w	r3, r3, #1
 8006ab6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3308      	adds	r3, #8
 8006abe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ac0:	623a      	str	r2, [r7, #32]
 8006ac2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	69f9      	ldr	r1, [r7, #28]
 8006ac6:	6a3a      	ldr	r2, [r7, #32]
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e5      	bne.n	8006aa0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2220      	movs	r2, #32
 8006ade:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e010      	b.n	8006b16 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	69da      	ldr	r2, [r3, #28]
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	4013      	ands	r3, r2
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	bf0c      	ite	eq
 8006b04:	2301      	moveq	r3, #1
 8006b06:	2300      	movne	r3, #0
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	79fb      	ldrb	r3, [r7, #7]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	f43f af4a 	beq.w	80069a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3770      	adds	r7, #112	; 0x70
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <_ZdlPvj>:
 8006b1e:	f000 bc63 	b.w	80073e8 <_ZdlPv>

08006b22 <__cxa_end_cleanup>:
 8006b22:	b41e      	push	{r1, r2, r3, r4}
 8006b24:	f000 f88d 	bl	8006c42 <__gnu_end_cleanup>
 8006b28:	bc1e      	pop	{r1, r2, r3, r4}
 8006b2a:	f7f9 fbc5 	bl	80002b8 <_Unwind_Resume>

08006b2e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8006b2e:	7803      	ldrb	r3, [r0, #0]
 8006b30:	2b47      	cmp	r3, #71	; 0x47
 8006b32:	d117      	bne.n	8006b64 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006b34:	7843      	ldrb	r3, [r0, #1]
 8006b36:	2b4e      	cmp	r3, #78	; 0x4e
 8006b38:	d114      	bne.n	8006b64 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006b3a:	7883      	ldrb	r3, [r0, #2]
 8006b3c:	2b55      	cmp	r3, #85	; 0x55
 8006b3e:	d111      	bne.n	8006b64 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006b40:	78c3      	ldrb	r3, [r0, #3]
 8006b42:	2b43      	cmp	r3, #67	; 0x43
 8006b44:	d10e      	bne.n	8006b64 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006b46:	7903      	ldrb	r3, [r0, #4]
 8006b48:	2b43      	cmp	r3, #67	; 0x43
 8006b4a:	d10b      	bne.n	8006b64 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006b4c:	7943      	ldrb	r3, [r0, #5]
 8006b4e:	2b2b      	cmp	r3, #43	; 0x2b
 8006b50:	d108      	bne.n	8006b64 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006b52:	7983      	ldrb	r3, [r0, #6]
 8006b54:	2b2b      	cmp	r3, #43	; 0x2b
 8006b56:	d105      	bne.n	8006b64 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006b58:	79c0      	ldrb	r0, [r0, #7]
 8006b5a:	2801      	cmp	r0, #1
 8006b5c:	bf8c      	ite	hi
 8006b5e:	2000      	movhi	r0, #0
 8006b60:	2001      	movls	r0, #1
 8006b62:	4770      	bx	lr
 8006b64:	2000      	movs	r0, #0
 8006b66:	4770      	bx	lr

08006b68 <__cxa_type_match>:
 8006b68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006b6c:	461e      	mov	r6, r3
 8006b6e:	7803      	ldrb	r3, [r0, #0]
 8006b70:	2b47      	cmp	r3, #71	; 0x47
 8006b72:	4604      	mov	r4, r0
 8006b74:	460f      	mov	r7, r1
 8006b76:	d113      	bne.n	8006ba0 <__cxa_type_match+0x38>
 8006b78:	7843      	ldrb	r3, [r0, #1]
 8006b7a:	2b4e      	cmp	r3, #78	; 0x4e
 8006b7c:	d110      	bne.n	8006ba0 <__cxa_type_match+0x38>
 8006b7e:	7883      	ldrb	r3, [r0, #2]
 8006b80:	2b55      	cmp	r3, #85	; 0x55
 8006b82:	d10d      	bne.n	8006ba0 <__cxa_type_match+0x38>
 8006b84:	78c3      	ldrb	r3, [r0, #3]
 8006b86:	2b43      	cmp	r3, #67	; 0x43
 8006b88:	d10a      	bne.n	8006ba0 <__cxa_type_match+0x38>
 8006b8a:	7903      	ldrb	r3, [r0, #4]
 8006b8c:	2b46      	cmp	r3, #70	; 0x46
 8006b8e:	d107      	bne.n	8006ba0 <__cxa_type_match+0x38>
 8006b90:	7943      	ldrb	r3, [r0, #5]
 8006b92:	2b4f      	cmp	r3, #79	; 0x4f
 8006b94:	d104      	bne.n	8006ba0 <__cxa_type_match+0x38>
 8006b96:	7983      	ldrb	r3, [r0, #6]
 8006b98:	2b52      	cmp	r3, #82	; 0x52
 8006b9a:	d101      	bne.n	8006ba0 <__cxa_type_match+0x38>
 8006b9c:	79c2      	ldrb	r2, [r0, #7]
 8006b9e:	b33a      	cbz	r2, 8006bf0 <__cxa_type_match+0x88>
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f7ff ffc4 	bl	8006b2e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	b320      	cbz	r0, 8006bf4 <__cxa_type_match+0x8c>
 8006baa:	79e3      	ldrb	r3, [r4, #7]
 8006bac:	f854 2c20 	ldr.w	r2, [r4, #-32]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	bf0e      	itee	eq
 8006bb4:	f852 5c78 	ldreq.w	r5, [r2, #-120]
 8006bb8:	4615      	movne	r5, r2
 8006bba:	f104 0258 	addne.w	r2, r4, #88	; 0x58
 8006bbe:	682b      	ldr	r3, [r5, #0]
 8006bc0:	9201      	str	r2, [sp, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	4798      	blx	r3
 8006bc8:	b1b0      	cbz	r0, 8006bf8 <__cxa_type_match+0x90>
 8006bca:	9b01      	ldr	r3, [sp, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	9301      	str	r3, [sp, #4]
 8006bd0:	2402      	movs	r4, #2
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	aa01      	add	r2, sp, #4
 8006bd6:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8006bda:	4629      	mov	r1, r5
 8006bdc:	2301      	movs	r3, #1
 8006bde:	4638      	mov	r0, r7
 8006be0:	47c0      	blx	r8
 8006be2:	b158      	cbz	r0, 8006bfc <__cxa_type_match+0x94>
 8006be4:	9b01      	ldr	r3, [sp, #4]
 8006be6:	6033      	str	r3, [r6, #0]
 8006be8:	4620      	mov	r0, r4
 8006bea:	b002      	add	sp, #8
 8006bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf0:	4d03      	ldr	r5, [pc, #12]	; (8006c00 <__cxa_type_match+0x98>)
 8006bf2:	e7e4      	b.n	8006bbe <__cxa_type_match+0x56>
 8006bf4:	4d03      	ldr	r5, [pc, #12]	; (8006c04 <__cxa_type_match+0x9c>)
 8006bf6:	e7e2      	b.n	8006bbe <__cxa_type_match+0x56>
 8006bf8:	2401      	movs	r4, #1
 8006bfa:	e7ea      	b.n	8006bd2 <__cxa_type_match+0x6a>
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	e7f3      	b.n	8006be8 <__cxa_type_match+0x80>
 8006c00:	080084f8 	.word	0x080084f8
 8006c04:	08008524 	.word	0x08008524

08006c08 <__cxa_begin_cleanup>:
 8006c08:	b510      	push	{r4, lr}
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	f000 f834 	bl	8006c78 <__cxa_get_globals>
 8006c10:	4602      	mov	r2, r0
 8006c12:	4620      	mov	r0, r4
 8006c14:	f1a4 0120 	sub.w	r1, r4, #32
 8006c18:	f7ff ff89 	bl	8006b2e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006c1c:	b160      	cbz	r0, 8006c38 <__cxa_begin_cleanup+0x30>
 8006c1e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006c22:	3301      	adds	r3, #1
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	f844 3c04 	str.w	r3, [r4, #-4]
 8006c2a:	d103      	bne.n	8006c34 <__cxa_begin_cleanup+0x2c>
 8006c2c:	6893      	ldr	r3, [r2, #8]
 8006c2e:	f844 3c08 	str.w	r3, [r4, #-8]
 8006c32:	6091      	str	r1, [r2, #8]
 8006c34:	2001      	movs	r0, #1
 8006c36:	bd10      	pop	{r4, pc}
 8006c38:	6893      	ldr	r3, [r2, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d0f9      	beq.n	8006c32 <__cxa_begin_cleanup+0x2a>
 8006c3e:	f000 faa9 	bl	8007194 <_ZSt9terminatev>

08006c42 <__gnu_end_cleanup>:
 8006c42:	b510      	push	{r4, lr}
 8006c44:	f000 f818 	bl	8006c78 <__cxa_get_globals>
 8006c48:	6882      	ldr	r2, [r0, #8]
 8006c4a:	4601      	mov	r1, r0
 8006c4c:	b90a      	cbnz	r2, 8006c52 <__gnu_end_cleanup+0x10>
 8006c4e:	f000 faa1 	bl	8007194 <_ZSt9terminatev>
 8006c52:	f102 0420 	add.w	r4, r2, #32
 8006c56:	4620      	mov	r0, r4
 8006c58:	f7ff ff69 	bl	8006b2e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006c5c:	b140      	cbz	r0, 8006c70 <__gnu_end_cleanup+0x2e>
 8006c5e:	69d3      	ldr	r3, [r2, #28]
 8006c60:	3b01      	subs	r3, #1
 8006c62:	61d3      	str	r3, [r2, #28]
 8006c64:	b913      	cbnz	r3, 8006c6c <__gnu_end_cleanup+0x2a>
 8006c66:	6990      	ldr	r0, [r2, #24]
 8006c68:	6088      	str	r0, [r1, #8]
 8006c6a:	6193      	str	r3, [r2, #24]
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	bd10      	pop	{r4, pc}
 8006c70:	6088      	str	r0, [r1, #8]
 8006c72:	e7fb      	b.n	8006c6c <__gnu_end_cleanup+0x2a>

08006c74 <_ZN12_GLOBAL__N_113constant_initD1Ev>:
 8006c74:	4770      	bx	lr
	...

08006c78 <__cxa_get_globals>:
 8006c78:	4800      	ldr	r0, [pc, #0]	; (8006c7c <__cxa_get_globals+0x4>)
 8006c7a:	4770      	bx	lr
 8006c7c:	2000025c 	.word	0x2000025c

08006c80 <_GLOBAL__sub_I___cxa_get_globals_fast>:
 8006c80:	4a02      	ldr	r2, [pc, #8]	; (8006c8c <_GLOBAL__sub_I___cxa_get_globals_fast+0xc>)
 8006c82:	4903      	ldr	r1, [pc, #12]	; (8006c90 <_GLOBAL__sub_I___cxa_get_globals_fast+0x10>)
 8006c84:	4803      	ldr	r0, [pc, #12]	; (8006c94 <_GLOBAL__sub_I___cxa_get_globals_fast+0x14>)
 8006c86:	f000 bb37 	b.w	80072f8 <__aeabi_atexit>
 8006c8a:	bf00      	nop
 8006c8c:	20000000 	.word	0x20000000
 8006c90:	08006c75 	.word	0x08006c75
 8006c94:	2000025c 	.word	0x2000025c

08006c98 <_ZL12read_uleb128PKhPm>:
 8006c98:	b530      	push	{r4, r5, lr}
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	f810 5b01 	ldrb.w	r5, [r0], #1
 8006ca2:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 8006ca6:	4094      	lsls	r4, r2
 8006ca8:	4323      	orrs	r3, r4
 8006caa:	062c      	lsls	r4, r5, #24
 8006cac:	f102 0207 	add.w	r2, r2, #7
 8006cb0:	d4f5      	bmi.n	8006c9e <_ZL12read_uleb128PKhPm+0x6>
 8006cb2:	600b      	str	r3, [r1, #0]
 8006cb4:	bd30      	pop	{r4, r5, pc}

08006cb6 <_ZL12read_sleb128PKhPl>:
 8006cb6:	b530      	push	{r4, r5, lr}
 8006cb8:	2300      	movs	r3, #0
 8006cba:	461a      	mov	r2, r3
 8006cbc:	f810 4b01 	ldrb.w	r4, [r0], #1
 8006cc0:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8006cc4:	4095      	lsls	r5, r2
 8006cc6:	432b      	orrs	r3, r5
 8006cc8:	0625      	lsls	r5, r4, #24
 8006cca:	f102 0207 	add.w	r2, r2, #7
 8006cce:	d4f5      	bmi.n	8006cbc <_ZL12read_sleb128PKhPl+0x6>
 8006cd0:	2a1f      	cmp	r2, #31
 8006cd2:	d806      	bhi.n	8006ce2 <_ZL12read_sleb128PKhPl+0x2c>
 8006cd4:	0664      	lsls	r4, r4, #25
 8006cd6:	bf42      	ittt	mi
 8006cd8:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
 8006cdc:	fa04 f202 	lslmi.w	r2, r4, r2
 8006ce0:	4313      	orrmi	r3, r2
 8006ce2:	600b      	str	r3, [r1, #0]
 8006ce4:	bd30      	pop	{r4, r5, pc}

08006ce6 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8006ce6:	2850      	cmp	r0, #80	; 0x50
 8006ce8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006cec:	4606      	mov	r6, r0
 8006cee:	4688      	mov	r8, r1
 8006cf0:	4615      	mov	r5, r2
 8006cf2:	461f      	mov	r7, r3
 8006cf4:	d108      	bne.n	8006d08 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 8006cf6:	1cd0      	adds	r0, r2, #3
 8006cf8:	f020 0003 	bic.w	r0, r0, #3
 8006cfc:	f850 4b04 	ldr.w	r4, [r0], #4
 8006d00:	603c      	str	r4, [r7, #0]
 8006d02:	b002      	add	sp, #8
 8006d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d08:	f000 030f 	and.w	r3, r0, #15
 8006d0c:	2b0c      	cmp	r3, #12
 8006d0e:	d82e      	bhi.n	8006d6e <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 8006d10:	e8df f003 	tbb	[pc, r3]
 8006d14:	251d0725 	.word	0x251d0725
 8006d18:	2d2d2d29 	.word	0x2d2d2d29
 8006d1c:	2521182d 	.word	0x2521182d
 8006d20:	29          	.byte	0x29
 8006d21:	00          	.byte	0x00
 8006d22:	a901      	add	r1, sp, #4
 8006d24:	4628      	mov	r0, r5
 8006d26:	f7ff ffb7 	bl	8006c98 <_ZL12read_uleb128PKhPm>
 8006d2a:	9c01      	ldr	r4, [sp, #4]
 8006d2c:	2c00      	cmp	r4, #0
 8006d2e:	d0e7      	beq.n	8006d00 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8006d30:	f006 0370 	and.w	r3, r6, #112	; 0x70
 8006d34:	2b10      	cmp	r3, #16
 8006d36:	bf08      	it	eq
 8006d38:	46a8      	moveq	r8, r5
 8006d3a:	4444      	add	r4, r8
 8006d3c:	0633      	lsls	r3, r6, #24
 8006d3e:	bf48      	it	mi
 8006d40:	6824      	ldrmi	r4, [r4, #0]
 8006d42:	e7dd      	b.n	8006d00 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8006d44:	a901      	add	r1, sp, #4
 8006d46:	4628      	mov	r0, r5
 8006d48:	f7ff ffb5 	bl	8006cb6 <_ZL12read_sleb128PKhPl>
 8006d4c:	e7ed      	b.n	8006d2a <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 8006d4e:	4628      	mov	r0, r5
 8006d50:	f830 4b02 	ldrh.w	r4, [r0], #2
 8006d54:	e7ea      	b.n	8006d2c <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8006d56:	4628      	mov	r0, r5
 8006d58:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8006d5c:	e7e6      	b.n	8006d2c <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8006d5e:	4628      	mov	r0, r5
 8006d60:	f850 4b04 	ldr.w	r4, [r0], #4
 8006d64:	e7e2      	b.n	8006d2c <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8006d66:	4628      	mov	r0, r5
 8006d68:	f850 4b08 	ldr.w	r4, [r0], #8
 8006d6c:	e7de      	b.n	8006d2c <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8006d6e:	f000 fbed 	bl	800754c <abort>

08006d72 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8006d72:	b508      	push	{r3, lr}
 8006d74:	4603      	mov	r3, r0
 8006d76:	2bff      	cmp	r3, #255	; 0xff
 8006d78:	4608      	mov	r0, r1
 8006d7a:	d00d      	beq.n	8006d98 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8006d7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d80:	2b30      	cmp	r3, #48	; 0x30
 8006d82:	d00f      	beq.n	8006da4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
 8006d84:	d804      	bhi.n	8006d90 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	d008      	beq.n	8006d9c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 8006d8a:	d905      	bls.n	8006d98 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
 8006d8c:	f000 fbde 	bl	800754c <abort>
 8006d90:	2b40      	cmp	r3, #64	; 0x40
 8006d92:	d00b      	beq.n	8006dac <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3a>
 8006d94:	2b50      	cmp	r3, #80	; 0x50
 8006d96:	d1f9      	bne.n	8006d8c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8006d98:	2000      	movs	r0, #0
 8006d9a:	bd08      	pop	{r3, pc}
 8006d9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006da0:	f001 bb43 	b.w	800842a <_Unwind_GetTextRelBase>
 8006da4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006da8:	f001 bb3c 	b.w	8008424 <_Unwind_GetDataRelBase>
 8006dac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006db0:	f001 bb28 	b.w	8008404 <_Unwind_GetRegionStart>

08006db4 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	460c      	mov	r4, r1
 8006db8:	4601      	mov	r1, r0
 8006dba:	4620      	mov	r0, r4
 8006dbc:	4615      	mov	r5, r2
 8006dbe:	461e      	mov	r6, r3
 8006dc0:	f7ff ffd7 	bl	8006d72 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8006dc4:	4633      	mov	r3, r6
 8006dc6:	4601      	mov	r1, r0
 8006dc8:	462a      	mov	r2, r5
 8006dca:	4620      	mov	r0, r4
 8006dcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006dd0:	f7ff bf89 	b.w	8006ce6 <_ZL28read_encoded_value_with_basehjPKhPj>

08006dd4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8006dd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006dd6:	460c      	mov	r4, r1
 8006dd8:	4615      	mov	r5, r2
 8006dda:	4606      	mov	r6, r0
 8006ddc:	b108      	cbz	r0, 8006de2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 8006dde:	f001 fb11 	bl	8008404 <_Unwind_GetRegionStart>
 8006de2:	4622      	mov	r2, r4
 8006de4:	6028      	str	r0, [r5, #0]
 8006de6:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006dea:	29ff      	cmp	r1, #255	; 0xff
 8006dec:	d01c      	beq.n	8006e28 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 8006dee:	1d2b      	adds	r3, r5, #4
 8006df0:	4630      	mov	r0, r6
 8006df2:	f7ff ffdf 	bl	8006db4 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006df6:	4602      	mov	r2, r0
 8006df8:	4610      	mov	r0, r2
 8006dfa:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006dfe:	2bff      	cmp	r3, #255	; 0xff
 8006e00:	d014      	beq.n	8006e2c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 8006e02:	2310      	movs	r3, #16
 8006e04:	752b      	strb	r3, [r5, #20]
 8006e06:	a901      	add	r1, sp, #4
 8006e08:	f7ff ff46 	bl	8006c98 <_ZL12read_uleb128PKhPm>
 8006e0c:	9b01      	ldr	r3, [sp, #4]
 8006e0e:	4403      	add	r3, r0
 8006e10:	60eb      	str	r3, [r5, #12]
 8006e12:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006e16:	756b      	strb	r3, [r5, #21]
 8006e18:	a901      	add	r1, sp, #4
 8006e1a:	f7ff ff3d 	bl	8006c98 <_ZL12read_uleb128PKhPm>
 8006e1e:	9b01      	ldr	r3, [sp, #4]
 8006e20:	4403      	add	r3, r0
 8006e22:	612b      	str	r3, [r5, #16]
 8006e24:	b002      	add	sp, #8
 8006e26:	bd70      	pop	{r4, r5, r6, pc}
 8006e28:	6068      	str	r0, [r5, #4]
 8006e2a:	e7e5      	b.n	8006df8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 8006e2c:	752b      	strb	r3, [r5, #20]
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e7ee      	b.n	8006e10 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>

08006e32 <_Unwind_GetGR>:
 8006e32:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e34:	ab03      	add	r3, sp, #12
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	2300      	movs	r3, #0
 8006e3a:	460a      	mov	r2, r1
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	f000 fe01 	bl	8007a44 <_Unwind_VRS_Get>
 8006e42:	9803      	ldr	r0, [sp, #12]
 8006e44:	b005      	add	sp, #20
 8006e46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006e4c <__gxx_personality_v0>:
 8006e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e50:	b093      	sub	sp, #76	; 0x4c
 8006e52:	2300      	movs	r3, #0
 8006e54:	9307      	str	r3, [sp, #28]
 8006e56:	f000 0303 	and.w	r3, r0, #3
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	4606      	mov	r6, r0
 8006e5e:	460c      	mov	r4, r1
 8006e60:	4615      	mov	r5, r2
 8006e62:	d010      	beq.n	8006e86 <__gxx_personality_v0+0x3a>
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d003      	beq.n	8006e70 <__gxx_personality_v0+0x24>
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d15d      	bne.n	8006f28 <__gxx_personality_v0+0xdc>
 8006e6c:	0703      	lsls	r3, r0, #28
 8006e6e:	d55d      	bpl.n	8006f2c <__gxx_personality_v0+0xe0>
 8006e70:	4629      	mov	r1, r5
 8006e72:	4620      	mov	r0, r4
 8006e74:	f001 fab0 	bl	80083d8 <__gnu_unwind_frame>
 8006e78:	b118      	cbz	r0, 8006e82 <__gxx_personality_v0+0x36>
 8006e7a:	2009      	movs	r0, #9
 8006e7c:	b013      	add	sp, #76	; 0x4c
 8006e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e82:	2008      	movs	r0, #8
 8006e84:	e7fa      	b.n	8006e7c <__gxx_personality_v0+0x30>
 8006e86:	0707      	lsls	r7, r0, #28
 8006e88:	d545      	bpl.n	8006f16 <__gxx_personality_v0+0xca>
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	f006 0608 	and.w	r6, r6, #8
 8006e90:	431e      	orrs	r6, r3
 8006e92:	ab0c      	add	r3, sp, #48	; 0x30
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	2300      	movs	r3, #0
 8006e98:	220c      	movs	r2, #12
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	940c      	str	r4, [sp, #48]	; 0x30
 8006ea0:	f000 fdf6 	bl	8007a90 <_Unwind_VRS_Set>
 8006ea4:	2e06      	cmp	r6, #6
 8006ea6:	d143      	bne.n	8006f30 <__gxx_personality_v0+0xe4>
 8006ea8:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8006eac:	e9d4 730a 	ldrd	r7, r3, [r4, #40]	; 0x28
 8006eb0:	f1b8 0f00 	cmp.w	r8, #0
 8006eb4:	f000 813c 	beq.w	8007130 <__gxx_personality_v0+0x2e4>
 8006eb8:	4699      	mov	r9, r3
 8006eba:	2f00      	cmp	r7, #0
 8006ebc:	f2c0 813b 	blt.w	8007136 <__gxx_personality_v0+0x2ea>
 8006ec0:	2603      	movs	r6, #3
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 8006ec8:	461a      	mov	r2, r3
 8006eca:	4619      	mov	r1, r3
 8006ecc:	f8cd 9000 	str.w	r9, [sp]
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	940b      	str	r4, [sp, #44]	; 0x2c
 8006ed4:	f000 fddc 	bl	8007a90 <_Unwind_VRS_Set>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	4619      	mov	r1, r3
 8006edc:	2201      	movs	r2, #1
 8006ede:	f8cd 9000 	str.w	r9, [sp]
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	970b      	str	r7, [sp, #44]	; 0x2c
 8006ee6:	f000 fdd3 	bl	8007a90 <_Unwind_VRS_Set>
 8006eea:	210f      	movs	r1, #15
 8006eec:	4628      	mov	r0, r5
 8006eee:	f7ff ffa0 	bl	8006e32 <_Unwind_GetGR>
 8006ef2:	f000 0001 	and.w	r0, r0, #1
 8006ef6:	ea40 0008 	orr.w	r0, r0, r8
 8006efa:	2300      	movs	r3, #0
 8006efc:	900b      	str	r0, [sp, #44]	; 0x2c
 8006efe:	f8cd 9000 	str.w	r9, [sp]
 8006f02:	220f      	movs	r2, #15
 8006f04:	4619      	mov	r1, r3
 8006f06:	4628      	mov	r0, r5
 8006f08:	f000 fdc2 	bl	8007a90 <_Unwind_VRS_Set>
 8006f0c:	2e02      	cmp	r6, #2
 8006f0e:	f000 812c 	beq.w	800716a <__gxx_personality_v0+0x31e>
 8006f12:	2007      	movs	r0, #7
 8006f14:	e7b2      	b.n	8006e7c <__gxx_personality_v0+0x30>
 8006f16:	6a0f      	ldr	r7, [r1, #32]
 8006f18:	4610      	mov	r0, r2
 8006f1a:	210d      	movs	r1, #13
 8006f1c:	f7ff ff89 	bl	8006e32 <_Unwind_GetGR>
 8006f20:	4287      	cmp	r7, r0
 8006f22:	d1b2      	bne.n	8006e8a <__gxx_personality_v0+0x3e>
 8006f24:	2306      	movs	r3, #6
 8006f26:	e7b1      	b.n	8006e8c <__gxx_personality_v0+0x40>
 8006f28:	f000 fb10 	bl	800754c <abort>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e7ad      	b.n	8006e8c <__gxx_personality_v0+0x40>
 8006f30:	4628      	mov	r0, r5
 8006f32:	f001 fa6d 	bl	8008410 <_Unwind_GetLanguageSpecificData>
 8006f36:	4681      	mov	r9, r0
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d099      	beq.n	8006e70 <__gxx_personality_v0+0x24>
 8006f3c:	aa0c      	add	r2, sp, #48	; 0x30
 8006f3e:	4601      	mov	r1, r0
 8006f40:	4628      	mov	r0, r5
 8006f42:	f7ff ff47 	bl	8006dd4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8006f46:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
 8006f4a:	9003      	str	r0, [sp, #12]
 8006f4c:	4629      	mov	r1, r5
 8006f4e:	4658      	mov	r0, fp
 8006f50:	f7ff ff0f 	bl	8006d72 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8006f54:	210f      	movs	r1, #15
 8006f56:	9002      	str	r0, [sp, #8]
 8006f58:	900e      	str	r0, [sp, #56]	; 0x38
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	f7ff ff69 	bl	8006e32 <_Unwind_GetGR>
 8006f60:	9a03      	ldr	r2, [sp, #12]
 8006f62:	f020 0801 	bic.w	r8, r0, #1
 8006f66:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006f6a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8006f6c:	4297      	cmp	r7, r2
 8006f6e:	d80d      	bhi.n	8006f8c <__gxx_personality_v0+0x140>
 8006f70:	2700      	movs	r7, #0
 8006f72:	46b8      	mov	r8, r7
 8006f74:	2301      	movs	r3, #1
 8006f76:	07f1      	lsls	r1, r6, #31
 8006f78:	f100 80c5 	bmi.w	8007106 <__gxx_personality_v0+0x2ba>
 8006f7c:	0732      	lsls	r2, r6, #28
 8006f7e:	f140 80d4 	bpl.w	800712a <__gxx_personality_v0+0x2de>
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	f040 80cc 	bne.w	8007120 <__gxx_personality_v0+0x2d4>
 8006f88:	f000 f904 	bl	8007194 <_ZSt9terminatev>
 8006f8c:	f89d a045 	ldrb.w	sl, [sp, #69]	; 0x45
 8006f90:	ab08      	add	r3, sp, #32
 8006f92:	4651      	mov	r1, sl
 8006f94:	2000      	movs	r0, #0
 8006f96:	f7ff ff0d 	bl	8006db4 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006f9a:	ab09      	add	r3, sp, #36	; 0x24
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	4651      	mov	r1, sl
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	f7ff ff07 	bl	8006db4 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006fa6:	ab0a      	add	r3, sp, #40	; 0x28
 8006fa8:	4602      	mov	r2, r0
 8006faa:	4651      	mov	r1, sl
 8006fac:	2000      	movs	r0, #0
 8006fae:	f7ff ff01 	bl	8006db4 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006fb2:	a90b      	add	r1, sp, #44	; 0x2c
 8006fb4:	f7ff fe70 	bl	8006c98 <_ZL12read_uleb128PKhPm>
 8006fb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fba:	9908      	ldr	r1, [sp, #32]
 8006fbc:	440b      	add	r3, r1
 8006fbe:	4543      	cmp	r3, r8
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	d853      	bhi.n	800706c <__gxx_personality_v0+0x220>
 8006fc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fc6:	440b      	add	r3, r1
 8006fc8:	4543      	cmp	r3, r8
 8006fca:	d9ce      	bls.n	8006f6a <__gxx_personality_v0+0x11e>
 8006fcc:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f43f af4d 	beq.w	8006e70 <__gxx_personality_v0+0x24>
 8006fd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fd8:	eb03 0802 	add.w	r8, r3, r2
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	d03b      	beq.n	8007058 <__gxx_personality_v0+0x20c>
 8006fe0:	3801      	subs	r0, #1
 8006fe2:	4438      	add	r0, r7
 8006fe4:	f1b8 0f00 	cmp.w	r8, #0
 8006fe8:	f43f af42 	beq.w	8006e70 <__gxx_personality_v0+0x24>
 8006fec:	f016 0308 	ands.w	r3, r6, #8
 8006ff0:	9304      	str	r3, [sp, #16]
 8006ff2:	d03d      	beq.n	8007070 <__gxx_personality_v0+0x224>
 8006ff4:	2347      	movs	r3, #71	; 0x47
 8006ff6:	7023      	strb	r3, [r4, #0]
 8006ff8:	234e      	movs	r3, #78	; 0x4e
 8006ffa:	7063      	strb	r3, [r4, #1]
 8006ffc:	2355      	movs	r3, #85	; 0x55
 8006ffe:	70a3      	strb	r3, [r4, #2]
 8007000:	2343      	movs	r3, #67	; 0x43
 8007002:	70e3      	strb	r3, [r4, #3]
 8007004:	2346      	movs	r3, #70	; 0x46
 8007006:	7123      	strb	r3, [r4, #4]
 8007008:	234f      	movs	r3, #79	; 0x4f
 800700a:	7163      	strb	r3, [r4, #5]
 800700c:	2352      	movs	r3, #82	; 0x52
 800700e:	71a3      	strb	r3, [r4, #6]
 8007010:	2300      	movs	r3, #0
 8007012:	71e3      	strb	r3, [r4, #7]
 8007014:	2300      	movs	r3, #0
 8007016:	9303      	str	r3, [sp, #12]
 8007018:	a909      	add	r1, sp, #36	; 0x24
 800701a:	f7ff fe4c 	bl	8006cb6 <_ZL12read_sleb128PKhPl>
 800701e:	a90a      	add	r1, sp, #40	; 0x28
 8007020:	9005      	str	r0, [sp, #20]
 8007022:	f7ff fe48 	bl	8006cb6 <_ZL12read_sleb128PKhPl>
 8007026:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007028:	2f00      	cmp	r7, #0
 800702a:	d069      	beq.n	8007100 <__gxx_personality_v0+0x2b4>
 800702c:	dd43      	ble.n	80070b6 <__gxx_personality_v0+0x26a>
 800702e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8007032:	d03c      	beq.n	80070ae <__gxx_personality_v0+0x262>
 8007034:	f00b 0307 	and.w	r3, fp, #7
 8007038:	2b04      	cmp	r3, #4
 800703a:	f63f af75 	bhi.w	8006f28 <__gxx_personality_v0+0xdc>
 800703e:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <__gxx_personality_v0+0x1f8>)
 8007040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007044:	080070b3 	.word	0x080070b3
 8007048:	08006f29 	.word	0x08006f29
 800704c:	08007083 	.word	0x08007083
 8007050:	080070b3 	.word	0x080070b3
 8007054:	080070ab 	.word	0x080070ab
 8007058:	f1b8 0f00 	cmp.w	r8, #0
 800705c:	f43f af08 	beq.w	8006e70 <__gxx_personality_v0+0x24>
 8007060:	07f0      	lsls	r0, r6, #31
 8007062:	f53f af05 	bmi.w	8006e70 <__gxx_personality_v0+0x24>
 8007066:	2700      	movs	r7, #0
 8007068:	2602      	movs	r6, #2
 800706a:	e72a      	b.n	8006ec2 <__gxx_personality_v0+0x76>
 800706c:	463a      	mov	r2, r7
 800706e:	e77c      	b.n	8006f6a <__gxx_personality_v0+0x11e>
 8007070:	79e3      	ldrb	r3, [r4, #7]
 8007072:	2b01      	cmp	r3, #1
 8007074:	bf0c      	ite	eq
 8007076:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 800707a:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 800707e:	9307      	str	r3, [sp, #28]
 8007080:	e7c8      	b.n	8007014 <__gxx_personality_v0+0x1c8>
 8007082:	2202      	movs	r2, #2
 8007084:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007086:	ab0b      	add	r3, sp, #44	; 0x2c
 8007088:	fb02 1217 	mls	r2, r2, r7, r1
 800708c:	4658      	mov	r0, fp
 800708e:	9902      	ldr	r1, [sp, #8]
 8007090:	f7ff fe29 	bl	8006ce6 <_ZL28read_encoded_value_with_basehjPKhPj>
 8007094:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007096:	b131      	cbz	r1, 80070a6 <__gxx_personality_v0+0x25a>
 8007098:	b334      	cbz	r4, 80070e8 <__gxx_personality_v0+0x29c>
 800709a:	ab07      	add	r3, sp, #28
 800709c:	2200      	movs	r2, #0
 800709e:	4620      	mov	r0, r4
 80070a0:	f7ff fd62 	bl	8006b68 <__cxa_type_match>
 80070a4:	b300      	cbz	r0, 80070e8 <__gxx_personality_v0+0x29c>
 80070a6:	2303      	movs	r3, #3
 80070a8:	e765      	b.n	8006f76 <__gxx_personality_v0+0x12a>
 80070aa:	2208      	movs	r2, #8
 80070ac:	e7ea      	b.n	8007084 <__gxx_personality_v0+0x238>
 80070ae:	2200      	movs	r2, #0
 80070b0:	e7e8      	b.n	8007084 <__gxx_personality_v0+0x238>
 80070b2:	2204      	movs	r2, #4
 80070b4:	e7e6      	b.n	8007084 <__gxx_personality_v0+0x238>
 80070b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070b8:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80070bc:	1bd2      	subs	r2, r2, r7
 80070be:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 80070c2:	b1c4      	cbz	r4, 80070f6 <__gxx_personality_v0+0x2aa>
 80070c4:	9904      	ldr	r1, [sp, #16]
 80070c6:	b9b1      	cbnz	r1, 80070f6 <__gxx_personality_v0+0x2aa>
 80070c8:	9b07      	ldr	r3, [sp, #28]
 80070ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80070cc:	f1aa 0a04 	sub.w	sl, sl, #4
 80070d0:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 80070d4:	2900      	cmp	r1, #0
 80070d6:	d0e6      	beq.n	80070a6 <__gxx_personality_v0+0x25a>
 80070d8:	ab0b      	add	r3, sp, #44	; 0x2c
 80070da:	2200      	movs	r2, #0
 80070dc:	4451      	add	r1, sl
 80070de:	4620      	mov	r0, r4
 80070e0:	f7ff fd42 	bl	8006b68 <__cxa_type_match>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d0f3      	beq.n	80070d0 <__gxx_personality_v0+0x284>
 80070e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80070ea:	2800      	cmp	r0, #0
 80070ec:	d041      	beq.n	8007172 <__gxx_personality_v0+0x326>
 80070ee:	9b05      	ldr	r3, [sp, #20]
 80070f0:	4403      	add	r3, r0
 80070f2:	4618      	mov	r0, r3
 80070f4:	e790      	b.n	8007018 <__gxx_personality_v0+0x1cc>
 80070f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1f4      	bne.n	80070e8 <__gxx_personality_v0+0x29c>
 80070fe:	e7d2      	b.n	80070a6 <__gxx_personality_v0+0x25a>
 8007100:	2301      	movs	r3, #1
 8007102:	9303      	str	r3, [sp, #12]
 8007104:	e7f0      	b.n	80070e8 <__gxx_personality_v0+0x29c>
 8007106:	210d      	movs	r1, #13
 8007108:	4628      	mov	r0, r5
 800710a:	9e07      	ldr	r6, [sp, #28]
 800710c:	f7ff fe91 	bl	8006e32 <_Unwind_GetGR>
 8007110:	e9c4 790a 	strd	r7, r9, [r4, #40]	; 0x28
 8007114:	e9c4 0608 	strd	r0, r6, [r4, #32]
 8007118:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 800711c:	2006      	movs	r0, #6
 800711e:	e6ad      	b.n	8006e7c <__gxx_personality_v0+0x30>
 8007120:	2f00      	cmp	r7, #0
 8007122:	f6bf aecd 	bge.w	8006ec0 <__gxx_personality_v0+0x74>
 8007126:	f000 f847 	bl	80071b8 <_ZSt10unexpectedv>
 800712a:	2b01      	cmp	r3, #1
 800712c:	f47f aec5 	bne.w	8006eba <__gxx_personality_v0+0x6e>
 8007130:	4620      	mov	r0, r4
 8007132:	f000 f978 	bl	8007426 <__cxa_call_terminate>
 8007136:	aa0c      	add	r2, sp, #48	; 0x30
 8007138:	4649      	mov	r1, r9
 800713a:	4628      	mov	r0, r5
 800713c:	f7ff fe4a 	bl	8006dd4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8007140:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8007144:	4629      	mov	r1, r5
 8007146:	f7ff fe14 	bl	8006d72 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800714a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800714c:	43fa      	mvns	r2, r7
 800714e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007152:	2200      	movs	r2, #0
 8007154:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007158:	b929      	cbnz	r1, 8007166 <__gxx_personality_v0+0x31a>
 800715a:	e9c4 200a 	strd	r2, r0, [r4, #40]	; 0x28
 800715e:	2204      	movs	r2, #4
 8007160:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8007164:	e6ac      	b.n	8006ec0 <__gxx_personality_v0+0x74>
 8007166:	3201      	adds	r2, #1
 8007168:	e7f4      	b.n	8007154 <__gxx_personality_v0+0x308>
 800716a:	4620      	mov	r0, r4
 800716c:	f7ff fd4c 	bl	8006c08 <__cxa_begin_cleanup>
 8007170:	e6cf      	b.n	8006f12 <__gxx_personality_v0+0xc6>
 8007172:	9b03      	ldr	r3, [sp, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	f47f af73 	bne.w	8007060 <__gxx_personality_v0+0x214>
 800717a:	e679      	b.n	8006e70 <__gxx_personality_v0+0x24>

0800717c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800717c:	b508      	push	{r3, lr}
 800717e:	4780      	blx	r0
 8007180:	f000 f9e4 	bl	800754c <abort>

08007184 <_ZSt13get_terminatev>:
 8007184:	4b02      	ldr	r3, [pc, #8]	; (8007190 <_ZSt13get_terminatev+0xc>)
 8007186:	6818      	ldr	r0, [r3, #0]
 8007188:	f3bf 8f5b 	dmb	ish
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	20000014 	.word	0x20000014

08007194 <_ZSt9terminatev>:
 8007194:	b508      	push	{r3, lr}
 8007196:	f7ff fff5 	bl	8007184 <_ZSt13get_terminatev>
 800719a:	f7ff ffef 	bl	800717c <_ZN10__cxxabiv111__terminateEPFvvE>

0800719e <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800719e:	b508      	push	{r3, lr}
 80071a0:	4780      	blx	r0
 80071a2:	f7ff fff7 	bl	8007194 <_ZSt9terminatev>
	...

080071a8 <_ZSt14get_unexpectedv>:
 80071a8:	4b02      	ldr	r3, [pc, #8]	; (80071b4 <_ZSt14get_unexpectedv+0xc>)
 80071aa:	6818      	ldr	r0, [r3, #0]
 80071ac:	f3bf 8f5b 	dmb	ish
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	20000010 	.word	0x20000010

080071b8 <_ZSt10unexpectedv>:
 80071b8:	b508      	push	{r3, lr}
 80071ba:	f7ff fff5 	bl	80071a8 <_ZSt14get_unexpectedv>
 80071be:	f7ff ffee 	bl	800719e <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

080071c4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80071c4:	b510      	push	{r4, lr}
 80071c6:	4b03      	ldr	r3, [pc, #12]	; (80071d4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80071c8:	6003      	str	r3, [r0, #0]
 80071ca:	4604      	mov	r4, r0
 80071cc:	f000 f8b8 	bl	8007340 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80071d0:	4620      	mov	r0, r4
 80071d2:	bd10      	pop	{r4, pc}
 80071d4:	08008568 	.word	0x08008568

080071d8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80071d8:	b510      	push	{r4, lr}
 80071da:	4604      	mov	r4, r0
 80071dc:	f7ff fff2 	bl	80071c4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80071e0:	4620      	mov	r0, r4
 80071e2:	210c      	movs	r1, #12
 80071e4:	f7ff fc9b 	bl	8006b1e <_ZdlPvj>
 80071e8:	4620      	mov	r0, r4
 80071ea:	bd10      	pop	{r4, pc}

080071ec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80071ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071f0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80071f4:	4590      	cmp	r8, r2
 80071f6:	4606      	mov	r6, r0
 80071f8:	460f      	mov	r7, r1
 80071fa:	4615      	mov	r5, r2
 80071fc:	461c      	mov	r4, r3
 80071fe:	d00b      	beq.n	8007218 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8007200:	68b0      	ldr	r0, [r6, #8]
 8007202:	6803      	ldr	r3, [r0, #0]
 8007204:	f8cd 8018 	str.w	r8, [sp, #24]
 8007208:	6a1e      	ldr	r6, [r3, #32]
 800720a:	462a      	mov	r2, r5
 800720c:	4623      	mov	r3, r4
 800720e:	4639      	mov	r1, r7
 8007210:	46b4      	mov	ip, r6
 8007212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007216:	4760      	bx	ip
 8007218:	4619      	mov	r1, r3
 800721a:	f000 f857 	bl	80072cc <_ZNKSt9type_info7__equalERKS_>
 800721e:	2800      	cmp	r0, #0
 8007220:	d0ee      	beq.n	8007200 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8007222:	2006      	movs	r0, #6
 8007224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007228 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8007228:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722c:	460d      	mov	r5, r1
 800722e:	4619      	mov	r1, r3
 8007230:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8007234:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8007238:	4681      	mov	r9, r0
 800723a:	4617      	mov	r7, r2
 800723c:	4698      	mov	r8, r3
 800723e:	f000 f845 	bl	80072cc <_ZNKSt9type_info7__equalERKS_>
 8007242:	b190      	cbz	r0, 800726a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8007244:	2d00      	cmp	r5, #0
 8007246:	6034      	str	r4, [r6, #0]
 8007248:	7137      	strb	r7, [r6, #4]
 800724a:	db09      	blt.n	8007260 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800724c:	442c      	add	r4, r5
 800724e:	45a2      	cmp	sl, r4
 8007250:	bf14      	ite	ne
 8007252:	2401      	movne	r4, #1
 8007254:	2406      	moveq	r4, #6
 8007256:	71b4      	strb	r4, [r6, #6]
 8007258:	2000      	movs	r0, #0
 800725a:	b001      	add	sp, #4
 800725c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007260:	3502      	adds	r5, #2
 8007262:	d1f9      	bne.n	8007258 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8007264:	2301      	movs	r3, #1
 8007266:	71b3      	strb	r3, [r6, #6]
 8007268:	e7f6      	b.n	8007258 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800726a:	4554      	cmp	r4, sl
 800726c:	d106      	bne.n	800727c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800726e:	4659      	mov	r1, fp
 8007270:	4648      	mov	r0, r9
 8007272:	f000 f82b 	bl	80072cc <_ZNKSt9type_info7__equalERKS_>
 8007276:	b108      	cbz	r0, 800727c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8007278:	7177      	strb	r7, [r6, #5]
 800727a:	e7ed      	b.n	8007258 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800727c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8007280:	6803      	ldr	r3, [r0, #0]
 8007282:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8007286:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 800728a:	69dc      	ldr	r4, [r3, #28]
 800728c:	463a      	mov	r2, r7
 800728e:	4643      	mov	r3, r8
 8007290:	4629      	mov	r1, r5
 8007292:	46a4      	mov	ip, r4
 8007294:	b001      	add	sp, #4
 8007296:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800729a:	4760      	bx	ip

0800729c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800729c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a0:	4607      	mov	r7, r0
 80072a2:	460c      	mov	r4, r1
 80072a4:	4615      	mov	r5, r2
 80072a6:	461e      	mov	r6, r3
 80072a8:	f000 f87d 	bl	80073a6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80072ac:	b948      	cbnz	r0, 80072c2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80072ae:	68b8      	ldr	r0, [r7, #8]
 80072b0:	6803      	ldr	r3, [r0, #0]
 80072b2:	699f      	ldr	r7, [r3, #24]
 80072b4:	462a      	mov	r2, r5
 80072b6:	4633      	mov	r3, r6
 80072b8:	4621      	mov	r1, r4
 80072ba:	46bc      	mov	ip, r7
 80072bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072c0:	4760      	bx	ip
 80072c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080072c6 <_ZNSt9type_infoD1Ev>:
 80072c6:	4770      	bx	lr

080072c8 <_ZNKSt9type_info14__is_pointer_pEv>:
 80072c8:	2000      	movs	r0, #0
 80072ca:	4770      	bx	lr

080072cc <_ZNKSt9type_info7__equalERKS_>:
 80072cc:	4281      	cmp	r1, r0
 80072ce:	b508      	push	{r3, lr}
 80072d0:	d00e      	beq.n	80072f0 <_ZNKSt9type_info7__equalERKS_+0x24>
 80072d2:	6840      	ldr	r0, [r0, #4]
 80072d4:	7803      	ldrb	r3, [r0, #0]
 80072d6:	2b2a      	cmp	r3, #42	; 0x2a
 80072d8:	d00c      	beq.n	80072f4 <_ZNKSt9type_info7__equalERKS_+0x28>
 80072da:	6849      	ldr	r1, [r1, #4]
 80072dc:	780b      	ldrb	r3, [r1, #0]
 80072de:	2b2a      	cmp	r3, #42	; 0x2a
 80072e0:	bf08      	it	eq
 80072e2:	3101      	addeq	r1, #1
 80072e4:	f7f8 ff50 	bl	8000188 <strcmp>
 80072e8:	fab0 f080 	clz	r0, r0
 80072ec:	0940      	lsrs	r0, r0, #5
 80072ee:	bd08      	pop	{r3, pc}
 80072f0:	2001      	movs	r0, #1
 80072f2:	e7fc      	b.n	80072ee <_ZNKSt9type_info7__equalERKS_+0x22>
 80072f4:	2000      	movs	r0, #0
 80072f6:	e7fa      	b.n	80072ee <_ZNKSt9type_info7__equalERKS_+0x22>

080072f8 <__aeabi_atexit>:
 80072f8:	460b      	mov	r3, r1
 80072fa:	4601      	mov	r1, r0
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 b92d 	b.w	800755c <__cxa_atexit>

08007302 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8007302:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007304:	2400      	movs	r4, #0
 8007306:	2310      	movs	r3, #16
 8007308:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800730c:	6803      	ldr	r3, [r0, #0]
 800730e:	4615      	mov	r5, r2
 8007310:	699e      	ldr	r6, [r3, #24]
 8007312:	6812      	ldr	r2, [r2, #0]
 8007314:	466b      	mov	r3, sp
 8007316:	e9cd 4400 	strd	r4, r4, [sp]
 800731a:	47b0      	blx	r6
 800731c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007320:	f003 0306 	and.w	r3, r3, #6
 8007324:	2b06      	cmp	r3, #6
 8007326:	bf03      	ittte	eq
 8007328:	9b00      	ldreq	r3, [sp, #0]
 800732a:	602b      	streq	r3, [r5, #0]
 800732c:	2001      	moveq	r0, #1
 800732e:	4620      	movne	r0, r4
 8007330:	b004      	add	sp, #16
 8007332:	bd70      	pop	{r4, r5, r6, pc}

08007334 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8007334:	9800      	ldr	r0, [sp, #0]
 8007336:	4290      	cmp	r0, r2
 8007338:	bf0c      	ite	eq
 800733a:	2006      	moveq	r0, #6
 800733c:	2001      	movne	r0, #1
 800733e:	4770      	bx	lr

08007340 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8007340:	b510      	push	{r4, lr}
 8007342:	4b03      	ldr	r3, [pc, #12]	; (8007350 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8007344:	6003      	str	r3, [r0, #0]
 8007346:	4604      	mov	r4, r0
 8007348:	f7ff ffbd 	bl	80072c6 <_ZNSt9type_infoD1Ev>
 800734c:	4620      	mov	r0, r4
 800734e:	bd10      	pop	{r4, pc}
 8007350:	080085dc 	.word	0x080085dc

08007354 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8007354:	b510      	push	{r4, lr}
 8007356:	4604      	mov	r4, r0
 8007358:	f7ff fff2 	bl	8007340 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800735c:	4620      	mov	r0, r4
 800735e:	2108      	movs	r1, #8
 8007360:	f7ff fbdd 	bl	8006b1e <_ZdlPvj>
 8007364:	4620      	mov	r0, r4
 8007366:	bd10      	pop	{r4, pc}

08007368 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8007368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800736c:	461f      	mov	r7, r3
 800736e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8007372:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007376:	4598      	cmp	r8, r3
 8007378:	4606      	mov	r6, r0
 800737a:	4615      	mov	r5, r2
 800737c:	d107      	bne.n	800738e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800737e:	9907      	ldr	r1, [sp, #28]
 8007380:	f7ff ffa4 	bl	80072cc <_ZNKSt9type_info7__equalERKS_>
 8007384:	b118      	cbz	r0, 800738e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8007386:	7165      	strb	r5, [r4, #5]
 8007388:	2000      	movs	r0, #0
 800738a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800738e:	4639      	mov	r1, r7
 8007390:	4630      	mov	r0, r6
 8007392:	f7ff ff9b 	bl	80072cc <_ZNKSt9type_info7__equalERKS_>
 8007396:	2800      	cmp	r0, #0
 8007398:	d0f6      	beq.n	8007388 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 800739a:	2301      	movs	r3, #1
 800739c:	f8c4 8000 	str.w	r8, [r4]
 80073a0:	7125      	strb	r5, [r4, #4]
 80073a2:	71a3      	strb	r3, [r4, #6]
 80073a4:	e7f0      	b.n	8007388 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080073a6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80073a6:	b538      	push	{r3, r4, r5, lr}
 80073a8:	4615      	mov	r5, r2
 80073aa:	461c      	mov	r4, r3
 80073ac:	f7ff ff8e 	bl	80072cc <_ZNKSt9type_info7__equalERKS_>
 80073b0:	b120      	cbz	r0, 80073bc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80073b2:	2308      	movs	r3, #8
 80073b4:	60e3      	str	r3, [r4, #12]
 80073b6:	2306      	movs	r3, #6
 80073b8:	6025      	str	r5, [r4, #0]
 80073ba:	7123      	strb	r3, [r4, #4]
 80073bc:	bd38      	pop	{r3, r4, r5, pc}

080073be <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80073be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c2:	4605      	mov	r5, r0
 80073c4:	460c      	mov	r4, r1
 80073c6:	4616      	mov	r6, r2
 80073c8:	461f      	mov	r7, r3
 80073ca:	f7ff ff7f 	bl	80072cc <_ZNKSt9type_info7__equalERKS_>
 80073ce:	b948      	cbnz	r0, 80073e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80073d0:	2f03      	cmp	r7, #3
 80073d2:	d807      	bhi.n	80073e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	4632      	mov	r2, r6
 80073d8:	4629      	mov	r1, r5
 80073da:	4620      	mov	r0, r4
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073e2:	4718      	bx	r3
 80073e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080073e8 <_ZdlPv>:
 80073e8:	f000 b8a8 	b.w	800753c <free>

080073ec <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80073ec:	7803      	ldrb	r3, [r0, #0]
 80073ee:	2b47      	cmp	r3, #71	; 0x47
 80073f0:	d117      	bne.n	8007422 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80073f2:	7843      	ldrb	r3, [r0, #1]
 80073f4:	2b4e      	cmp	r3, #78	; 0x4e
 80073f6:	d114      	bne.n	8007422 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80073f8:	7883      	ldrb	r3, [r0, #2]
 80073fa:	2b55      	cmp	r3, #85	; 0x55
 80073fc:	d111      	bne.n	8007422 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80073fe:	78c3      	ldrb	r3, [r0, #3]
 8007400:	2b43      	cmp	r3, #67	; 0x43
 8007402:	d10e      	bne.n	8007422 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007404:	7903      	ldrb	r3, [r0, #4]
 8007406:	2b43      	cmp	r3, #67	; 0x43
 8007408:	d10b      	bne.n	8007422 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800740a:	7943      	ldrb	r3, [r0, #5]
 800740c:	2b2b      	cmp	r3, #43	; 0x2b
 800740e:	d108      	bne.n	8007422 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007410:	7983      	ldrb	r3, [r0, #6]
 8007412:	2b2b      	cmp	r3, #43	; 0x2b
 8007414:	d105      	bne.n	8007422 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007416:	79c0      	ldrb	r0, [r0, #7]
 8007418:	2801      	cmp	r0, #1
 800741a:	bf8c      	ite	hi
 800741c:	2000      	movhi	r0, #0
 800741e:	2001      	movls	r0, #1
 8007420:	4770      	bx	lr
 8007422:	2000      	movs	r0, #0
 8007424:	4770      	bx	lr

08007426 <__cxa_call_terminate>:
 8007426:	b510      	push	{r4, lr}
 8007428:	4604      	mov	r4, r0
 800742a:	b148      	cbz	r0, 8007440 <__cxa_call_terminate+0x1a>
 800742c:	f000 f839 	bl	80074a2 <__cxa_begin_catch>
 8007430:	4620      	mov	r0, r4
 8007432:	f7ff ffdb 	bl	80073ec <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8007436:	b118      	cbz	r0, 8007440 <__cxa_call_terminate+0x1a>
 8007438:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800743c:	f7ff fe9e 	bl	800717c <_ZN10__cxxabiv111__terminateEPFvvE>
 8007440:	f7ff fea8 	bl	8007194 <_ZSt9terminatev>

08007444 <__cxa_call_unexpected>:
 8007444:	b510      	push	{r4, lr}
 8007446:	4602      	mov	r2, r0
 8007448:	f7ff ffd0 	bl	80073ec <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800744c:	b138      	cbz	r0, 800745e <__cxa_call_unexpected+0x1a>
 800744e:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8007452:	4610      	mov	r0, r2
 8007454:	f000 f825 	bl	80074a2 <__cxa_begin_catch>
 8007458:	4620      	mov	r0, r4
 800745a:	f7ff fea0 	bl	800719e <_ZN10__cxxabiv112__unexpectedEPFvvE>
 800745e:	4610      	mov	r0, r2
 8007460:	f000 f81f 	bl	80074a2 <__cxa_begin_catch>
 8007464:	f7ff fea8 	bl	80071b8 <_ZSt10unexpectedv>

08007468 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8007468:	7803      	ldrb	r3, [r0, #0]
 800746a:	2b47      	cmp	r3, #71	; 0x47
 800746c:	d117      	bne.n	800749e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800746e:	7843      	ldrb	r3, [r0, #1]
 8007470:	2b4e      	cmp	r3, #78	; 0x4e
 8007472:	d114      	bne.n	800749e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007474:	7883      	ldrb	r3, [r0, #2]
 8007476:	2b55      	cmp	r3, #85	; 0x55
 8007478:	d111      	bne.n	800749e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800747a:	78c3      	ldrb	r3, [r0, #3]
 800747c:	2b43      	cmp	r3, #67	; 0x43
 800747e:	d10e      	bne.n	800749e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007480:	7903      	ldrb	r3, [r0, #4]
 8007482:	2b43      	cmp	r3, #67	; 0x43
 8007484:	d10b      	bne.n	800749e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007486:	7943      	ldrb	r3, [r0, #5]
 8007488:	2b2b      	cmp	r3, #43	; 0x2b
 800748a:	d108      	bne.n	800749e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800748c:	7983      	ldrb	r3, [r0, #6]
 800748e:	2b2b      	cmp	r3, #43	; 0x2b
 8007490:	d105      	bne.n	800749e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007492:	79c0      	ldrb	r0, [r0, #7]
 8007494:	2801      	cmp	r0, #1
 8007496:	bf8c      	ite	hi
 8007498:	2000      	movhi	r0, #0
 800749a:	2001      	movls	r0, #1
 800749c:	4770      	bx	lr
 800749e:	2000      	movs	r0, #0
 80074a0:	4770      	bx	lr

080074a2 <__cxa_begin_catch>:
 80074a2:	b538      	push	{r3, r4, r5, lr}
 80074a4:	4604      	mov	r4, r0
 80074a6:	f7ff fbe7 	bl	8006c78 <__cxa_get_globals>
 80074aa:	6805      	ldr	r5, [r0, #0]
 80074ac:	4602      	mov	r2, r0
 80074ae:	4620      	mov	r0, r4
 80074b0:	f1a4 0120 	sub.w	r1, r4, #32
 80074b4:	f7ff ffd8 	bl	8007468 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80074b8:	b928      	cbnz	r0, 80074c6 <__cxa_begin_catch+0x24>
 80074ba:	b10d      	cbz	r5, 80074c0 <__cxa_begin_catch+0x1e>
 80074bc:	f7ff fe6a 	bl	8007194 <_ZSt9terminatev>
 80074c0:	6011      	str	r1, [r2, #0]
 80074c2:	4628      	mov	r0, r5
 80074c4:	bd38      	pop	{r3, r4, r5, pc}
 80074c6:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	bfb4      	ite	lt
 80074ce:	f1c3 0301 	rsblt	r3, r3, #1
 80074d2:	3301      	addge	r3, #1
 80074d4:	f844 3c0c 	str.w	r3, [r4, #-12]
 80074d8:	6853      	ldr	r3, [r2, #4]
 80074da:	428d      	cmp	r5, r1
 80074dc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80074e0:	6053      	str	r3, [r2, #4]
 80074e2:	4620      	mov	r0, r4
 80074e4:	bf1c      	itt	ne
 80074e6:	f844 5c10 	strne.w	r5, [r4, #-16]
 80074ea:	6011      	strne	r1, [r2, #0]
 80074ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80074ee:	f000 faa7 	bl	8007a40 <_Unwind_Complete>
 80074f2:	e7e6      	b.n	80074c2 <__cxa_begin_catch+0x20>

080074f4 <__libc_init_array>:
 80074f4:	b570      	push	{r4, r5, r6, lr}
 80074f6:	4d0d      	ldr	r5, [pc, #52]	; (800752c <__libc_init_array+0x38>)
 80074f8:	4c0d      	ldr	r4, [pc, #52]	; (8007530 <__libc_init_array+0x3c>)
 80074fa:	1b64      	subs	r4, r4, r5
 80074fc:	10a4      	asrs	r4, r4, #2
 80074fe:	2600      	movs	r6, #0
 8007500:	42a6      	cmp	r6, r4
 8007502:	d109      	bne.n	8007518 <__libc_init_array+0x24>
 8007504:	4d0b      	ldr	r5, [pc, #44]	; (8007534 <__libc_init_array+0x40>)
 8007506:	4c0c      	ldr	r4, [pc, #48]	; (8007538 <__libc_init_array+0x44>)
 8007508:	f000 ffa0 	bl	800844c <_init>
 800750c:	1b64      	subs	r4, r4, r5
 800750e:	10a4      	asrs	r4, r4, #2
 8007510:	2600      	movs	r6, #0
 8007512:	42a6      	cmp	r6, r4
 8007514:	d105      	bne.n	8007522 <__libc_init_array+0x2e>
 8007516:	bd70      	pop	{r4, r5, r6, pc}
 8007518:	f855 3b04 	ldr.w	r3, [r5], #4
 800751c:	4798      	blx	r3
 800751e:	3601      	adds	r6, #1
 8007520:	e7ee      	b.n	8007500 <__libc_init_array+0xc>
 8007522:	f855 3b04 	ldr.w	r3, [r5], #4
 8007526:	4798      	blx	r3
 8007528:	3601      	adds	r6, #1
 800752a:	e7f2      	b.n	8007512 <__libc_init_array+0x1e>
 800752c:	080087a0 	.word	0x080087a0
 8007530:	080087a0 	.word	0x080087a0
 8007534:	080087a0 	.word	0x080087a0
 8007538:	080087a8 	.word	0x080087a8

0800753c <free>:
 800753c:	4b02      	ldr	r3, [pc, #8]	; (8007548 <free+0xc>)
 800753e:	4601      	mov	r1, r0
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	f000 b833 	b.w	80075ac <_free_r>
 8007546:	bf00      	nop
 8007548:	20000018 	.word	0x20000018

0800754c <abort>:
 800754c:	b508      	push	{r3, lr}
 800754e:	2006      	movs	r0, #6
 8007550:	f000 f8a0 	bl	8007694 <raise>
 8007554:	2001      	movs	r0, #1
 8007556:	f7fa f947 	bl	80017e8 <_exit>
	...

0800755c <__cxa_atexit>:
 800755c:	b510      	push	{r4, lr}
 800755e:	4604      	mov	r4, r0
 8007560:	4804      	ldr	r0, [pc, #16]	; (8007574 <__cxa_atexit+0x18>)
 8007562:	4613      	mov	r3, r2
 8007564:	b120      	cbz	r0, 8007570 <__cxa_atexit+0x14>
 8007566:	460a      	mov	r2, r1
 8007568:	2002      	movs	r0, #2
 800756a:	4621      	mov	r1, r4
 800756c:	f3af 8000 	nop.w
 8007570:	bd10      	pop	{r4, pc}
 8007572:	bf00      	nop
 8007574:	00000000 	.word	0x00000000

08007578 <__malloc_lock>:
 8007578:	4801      	ldr	r0, [pc, #4]	; (8007580 <__malloc_lock+0x8>)
 800757a:	f000 b861 	b.w	8007640 <__retarget_lock_acquire_recursive>
 800757e:	bf00      	nop
 8007580:	200003a4 	.word	0x200003a4

08007584 <__malloc_unlock>:
 8007584:	4801      	ldr	r0, [pc, #4]	; (800758c <__malloc_unlock+0x8>)
 8007586:	f000 b85c 	b.w	8007642 <__retarget_lock_release_recursive>
 800758a:	bf00      	nop
 800758c:	200003a4 	.word	0x200003a4

08007590 <__errno>:
 8007590:	4b01      	ldr	r3, [pc, #4]	; (8007598 <__errno+0x8>)
 8007592:	6818      	ldr	r0, [r3, #0]
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	20000018 	.word	0x20000018

0800759c <memset>:
 800759c:	4402      	add	r2, r0
 800759e:	4603      	mov	r3, r0
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d100      	bne.n	80075a6 <memset+0xa>
 80075a4:	4770      	bx	lr
 80075a6:	f803 1b01 	strb.w	r1, [r3], #1
 80075aa:	e7f9      	b.n	80075a0 <memset+0x4>

080075ac <_free_r>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	4605      	mov	r5, r0
 80075b0:	2900      	cmp	r1, #0
 80075b2:	d041      	beq.n	8007638 <_free_r+0x8c>
 80075b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075b8:	1f0c      	subs	r4, r1, #4
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	bfb8      	it	lt
 80075be:	18e4      	addlt	r4, r4, r3
 80075c0:	f7ff ffda 	bl	8007578 <__malloc_lock>
 80075c4:	4a1d      	ldr	r2, [pc, #116]	; (800763c <_free_r+0x90>)
 80075c6:	6813      	ldr	r3, [r2, #0]
 80075c8:	b933      	cbnz	r3, 80075d8 <_free_r+0x2c>
 80075ca:	6063      	str	r3, [r4, #4]
 80075cc:	6014      	str	r4, [r2, #0]
 80075ce:	4628      	mov	r0, r5
 80075d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075d4:	f7ff bfd6 	b.w	8007584 <__malloc_unlock>
 80075d8:	42a3      	cmp	r3, r4
 80075da:	d908      	bls.n	80075ee <_free_r+0x42>
 80075dc:	6820      	ldr	r0, [r4, #0]
 80075de:	1821      	adds	r1, r4, r0
 80075e0:	428b      	cmp	r3, r1
 80075e2:	bf01      	itttt	eq
 80075e4:	6819      	ldreq	r1, [r3, #0]
 80075e6:	685b      	ldreq	r3, [r3, #4]
 80075e8:	1809      	addeq	r1, r1, r0
 80075ea:	6021      	streq	r1, [r4, #0]
 80075ec:	e7ed      	b.n	80075ca <_free_r+0x1e>
 80075ee:	461a      	mov	r2, r3
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	b10b      	cbz	r3, 80075f8 <_free_r+0x4c>
 80075f4:	42a3      	cmp	r3, r4
 80075f6:	d9fa      	bls.n	80075ee <_free_r+0x42>
 80075f8:	6811      	ldr	r1, [r2, #0]
 80075fa:	1850      	adds	r0, r2, r1
 80075fc:	42a0      	cmp	r0, r4
 80075fe:	d10b      	bne.n	8007618 <_free_r+0x6c>
 8007600:	6820      	ldr	r0, [r4, #0]
 8007602:	4401      	add	r1, r0
 8007604:	1850      	adds	r0, r2, r1
 8007606:	4283      	cmp	r3, r0
 8007608:	6011      	str	r1, [r2, #0]
 800760a:	d1e0      	bne.n	80075ce <_free_r+0x22>
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	6053      	str	r3, [r2, #4]
 8007612:	4408      	add	r0, r1
 8007614:	6010      	str	r0, [r2, #0]
 8007616:	e7da      	b.n	80075ce <_free_r+0x22>
 8007618:	d902      	bls.n	8007620 <_free_r+0x74>
 800761a:	230c      	movs	r3, #12
 800761c:	602b      	str	r3, [r5, #0]
 800761e:	e7d6      	b.n	80075ce <_free_r+0x22>
 8007620:	6820      	ldr	r0, [r4, #0]
 8007622:	1821      	adds	r1, r4, r0
 8007624:	428b      	cmp	r3, r1
 8007626:	bf04      	itt	eq
 8007628:	6819      	ldreq	r1, [r3, #0]
 800762a:	685b      	ldreq	r3, [r3, #4]
 800762c:	6063      	str	r3, [r4, #4]
 800762e:	bf04      	itt	eq
 8007630:	1809      	addeq	r1, r1, r0
 8007632:	6021      	streq	r1, [r4, #0]
 8007634:	6054      	str	r4, [r2, #4]
 8007636:	e7ca      	b.n	80075ce <_free_r+0x22>
 8007638:	bd38      	pop	{r3, r4, r5, pc}
 800763a:	bf00      	nop
 800763c:	20000268 	.word	0x20000268

08007640 <__retarget_lock_acquire_recursive>:
 8007640:	4770      	bx	lr

08007642 <__retarget_lock_release_recursive>:
 8007642:	4770      	bx	lr

08007644 <_raise_r>:
 8007644:	291f      	cmp	r1, #31
 8007646:	b538      	push	{r3, r4, r5, lr}
 8007648:	4605      	mov	r5, r0
 800764a:	460c      	mov	r4, r1
 800764c:	d904      	bls.n	8007658 <_raise_r+0x14>
 800764e:	2316      	movs	r3, #22
 8007650:	6003      	str	r3, [r0, #0]
 8007652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007656:	bd38      	pop	{r3, r4, r5, pc}
 8007658:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800765a:	b112      	cbz	r2, 8007662 <_raise_r+0x1e>
 800765c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007660:	b94b      	cbnz	r3, 8007676 <_raise_r+0x32>
 8007662:	4628      	mov	r0, r5
 8007664:	f000 f830 	bl	80076c8 <_getpid_r>
 8007668:	4622      	mov	r2, r4
 800766a:	4601      	mov	r1, r0
 800766c:	4628      	mov	r0, r5
 800766e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007672:	f000 b817 	b.w	80076a4 <_kill_r>
 8007676:	2b01      	cmp	r3, #1
 8007678:	d00a      	beq.n	8007690 <_raise_r+0x4c>
 800767a:	1c59      	adds	r1, r3, #1
 800767c:	d103      	bne.n	8007686 <_raise_r+0x42>
 800767e:	2316      	movs	r3, #22
 8007680:	6003      	str	r3, [r0, #0]
 8007682:	2001      	movs	r0, #1
 8007684:	e7e7      	b.n	8007656 <_raise_r+0x12>
 8007686:	2100      	movs	r1, #0
 8007688:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800768c:	4620      	mov	r0, r4
 800768e:	4798      	blx	r3
 8007690:	2000      	movs	r0, #0
 8007692:	e7e0      	b.n	8007656 <_raise_r+0x12>

08007694 <raise>:
 8007694:	4b02      	ldr	r3, [pc, #8]	; (80076a0 <raise+0xc>)
 8007696:	4601      	mov	r1, r0
 8007698:	6818      	ldr	r0, [r3, #0]
 800769a:	f7ff bfd3 	b.w	8007644 <_raise_r>
 800769e:	bf00      	nop
 80076a0:	20000018 	.word	0x20000018

080076a4 <_kill_r>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	4d07      	ldr	r5, [pc, #28]	; (80076c4 <_kill_r+0x20>)
 80076a8:	2300      	movs	r3, #0
 80076aa:	4604      	mov	r4, r0
 80076ac:	4608      	mov	r0, r1
 80076ae:	4611      	mov	r1, r2
 80076b0:	602b      	str	r3, [r5, #0]
 80076b2:	f7fa f889 	bl	80017c8 <_kill>
 80076b6:	1c43      	adds	r3, r0, #1
 80076b8:	d102      	bne.n	80076c0 <_kill_r+0x1c>
 80076ba:	682b      	ldr	r3, [r5, #0]
 80076bc:	b103      	cbz	r3, 80076c0 <_kill_r+0x1c>
 80076be:	6023      	str	r3, [r4, #0]
 80076c0:	bd38      	pop	{r3, r4, r5, pc}
 80076c2:	bf00      	nop
 80076c4:	200003a8 	.word	0x200003a8

080076c8 <_getpid_r>:
 80076c8:	f7fa b876 	b.w	80017b8 <_getpid>

080076cc <selfrel_offset31>:
 80076cc:	6803      	ldr	r3, [r0, #0]
 80076ce:	005a      	lsls	r2, r3, #1
 80076d0:	bf4c      	ite	mi
 80076d2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80076d6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80076da:	4418      	add	r0, r3
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop

080076e0 <search_EIT_table>:
 80076e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076e4:	b349      	cbz	r1, 800773a <search_EIT_table+0x5a>
 80076e6:	1e4f      	subs	r7, r1, #1
 80076e8:	4604      	mov	r4, r0
 80076ea:	4615      	mov	r5, r2
 80076ec:	463e      	mov	r6, r7
 80076ee:	f04f 0900 	mov.w	r9, #0
 80076f2:	eb09 0106 	add.w	r1, r9, r6
 80076f6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80076fa:	1049      	asrs	r1, r1, #1
 80076fc:	eb04 08c1 	add.w	r8, r4, r1, lsl #3
 8007700:	4640      	mov	r0, r8
 8007702:	f7ff ffe3 	bl	80076cc <selfrel_offset31>
 8007706:	428f      	cmp	r7, r1
 8007708:	4603      	mov	r3, r0
 800770a:	ea4f 00c1 	mov.w	r0, r1, lsl #3
 800770e:	d00f      	beq.n	8007730 <search_EIT_table+0x50>
 8007710:	3008      	adds	r0, #8
 8007712:	42ab      	cmp	r3, r5
 8007714:	4420      	add	r0, r4
 8007716:	d807      	bhi.n	8007728 <search_EIT_table+0x48>
 8007718:	f7ff ffd8 	bl	80076cc <selfrel_offset31>
 800771c:	3801      	subs	r0, #1
 800771e:	42a8      	cmp	r0, r5
 8007720:	d208      	bcs.n	8007734 <search_EIT_table+0x54>
 8007722:	f101 0901 	add.w	r9, r1, #1
 8007726:	e7e4      	b.n	80076f2 <search_EIT_table+0x12>
 8007728:	4589      	cmp	r9, r1
 800772a:	d006      	beq.n	800773a <search_EIT_table+0x5a>
 800772c:	1e4e      	subs	r6, r1, #1
 800772e:	e7e0      	b.n	80076f2 <search_EIT_table+0x12>
 8007730:	42ab      	cmp	r3, r5
 8007732:	d8f9      	bhi.n	8007728 <search_EIT_table+0x48>
 8007734:	4640      	mov	r0, r8
 8007736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800773a:	f04f 0800 	mov.w	r8, #0
 800773e:	4640      	mov	r0, r8
 8007740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007744 <__gnu_unwind_get_pr_addr>:
 8007744:	2801      	cmp	r0, #1
 8007746:	d007      	beq.n	8007758 <__gnu_unwind_get_pr_addr+0x14>
 8007748:	2802      	cmp	r0, #2
 800774a:	d007      	beq.n	800775c <__gnu_unwind_get_pr_addr+0x18>
 800774c:	4b04      	ldr	r3, [pc, #16]	; (8007760 <__gnu_unwind_get_pr_addr+0x1c>)
 800774e:	2800      	cmp	r0, #0
 8007750:	bf0c      	ite	eq
 8007752:	4618      	moveq	r0, r3
 8007754:	2000      	movne	r0, #0
 8007756:	4770      	bx	lr
 8007758:	4802      	ldr	r0, [pc, #8]	; (8007764 <__gnu_unwind_get_pr_addr+0x20>)
 800775a:	4770      	bx	lr
 800775c:	4802      	ldr	r0, [pc, #8]	; (8007768 <__gnu_unwind_get_pr_addr+0x24>)
 800775e:	4770      	bx	lr
 8007760:	08007ded 	.word	0x08007ded
 8007764:	08007df5 	.word	0x08007df5
 8007768:	08007dfd 	.word	0x08007dfd

0800776c <get_eit_entry>:
 800776c:	b530      	push	{r4, r5, lr}
 800776e:	4b21      	ldr	r3, [pc, #132]	; (80077f4 <get_eit_entry+0x88>)
 8007770:	b083      	sub	sp, #12
 8007772:	4604      	mov	r4, r0
 8007774:	1e8d      	subs	r5, r1, #2
 8007776:	b31b      	cbz	r3, 80077c0 <get_eit_entry+0x54>
 8007778:	a901      	add	r1, sp, #4
 800777a:	4628      	mov	r0, r5
 800777c:	f3af 8000 	nop.w
 8007780:	b388      	cbz	r0, 80077e6 <get_eit_entry+0x7a>
 8007782:	9901      	ldr	r1, [sp, #4]
 8007784:	462a      	mov	r2, r5
 8007786:	f7ff ffab 	bl	80076e0 <search_EIT_table>
 800778a:	4601      	mov	r1, r0
 800778c:	b358      	cbz	r0, 80077e6 <get_eit_entry+0x7a>
 800778e:	f7ff ff9d 	bl	80076cc <selfrel_offset31>
 8007792:	684b      	ldr	r3, [r1, #4]
 8007794:	64a0      	str	r0, [r4, #72]	; 0x48
 8007796:	2b01      	cmp	r3, #1
 8007798:	d028      	beq.n	80077ec <get_eit_entry+0x80>
 800779a:	2b00      	cmp	r3, #0
 800779c:	f101 0004 	add.w	r0, r1, #4
 80077a0:	db1f      	blt.n	80077e2 <get_eit_entry+0x76>
 80077a2:	f7ff ff93 	bl	80076cc <selfrel_offset31>
 80077a6:	2300      	movs	r3, #0
 80077a8:	6523      	str	r3, [r4, #80]	; 0x50
 80077aa:	6803      	ldr	r3, [r0, #0]
 80077ac:	64e0      	str	r0, [r4, #76]	; 0x4c
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	db0d      	blt.n	80077ce <get_eit_entry+0x62>
 80077b2:	f7ff ff8b 	bl	80076cc <selfrel_offset31>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2000      	movs	r0, #0
 80077ba:	6123      	str	r3, [r4, #16]
 80077bc:	b003      	add	sp, #12
 80077be:	bd30      	pop	{r4, r5, pc}
 80077c0:	4b0d      	ldr	r3, [pc, #52]	; (80077f8 <get_eit_entry+0x8c>)
 80077c2:	490e      	ldr	r1, [pc, #56]	; (80077fc <get_eit_entry+0x90>)
 80077c4:	1ac9      	subs	r1, r1, r3
 80077c6:	10c9      	asrs	r1, r1, #3
 80077c8:	4618      	mov	r0, r3
 80077ca:	9101      	str	r1, [sp, #4]
 80077cc:	e7da      	b.n	8007784 <get_eit_entry+0x18>
 80077ce:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80077d2:	f7ff ffb7 	bl	8007744 <__gnu_unwind_get_pr_addr>
 80077d6:	4603      	mov	r3, r0
 80077d8:	b128      	cbz	r0, 80077e6 <get_eit_entry+0x7a>
 80077da:	2000      	movs	r0, #0
 80077dc:	6123      	str	r3, [r4, #16]
 80077de:	b003      	add	sp, #12
 80077e0:	bd30      	pop	{r4, r5, pc}
 80077e2:	2301      	movs	r3, #1
 80077e4:	e7e0      	b.n	80077a8 <get_eit_entry+0x3c>
 80077e6:	2300      	movs	r3, #0
 80077e8:	2009      	movs	r0, #9
 80077ea:	e7e6      	b.n	80077ba <get_eit_entry+0x4e>
 80077ec:	2300      	movs	r3, #0
 80077ee:	2005      	movs	r0, #5
 80077f0:	e7e3      	b.n	80077ba <get_eit_entry+0x4e>
 80077f2:	bf00      	nop
 80077f4:	00000000 	.word	0x00000000
 80077f8:	08008698 	.word	0x08008698
 80077fc:	080087a0 	.word	0x080087a0

08007800 <restore_non_core_regs>:
 8007800:	6803      	ldr	r3, [r0, #0]
 8007802:	07da      	lsls	r2, r3, #31
 8007804:	b510      	push	{r4, lr}
 8007806:	4604      	mov	r4, r0
 8007808:	d406      	bmi.n	8007818 <restore_non_core_regs+0x18>
 800780a:	079b      	lsls	r3, r3, #30
 800780c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8007810:	d509      	bpl.n	8007826 <restore_non_core_regs+0x26>
 8007812:	f7f8 fcd7 	bl	80001c4 <__gnu_Unwind_Restore_VFP_D>
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	0759      	lsls	r1, r3, #29
 800781a:	d509      	bpl.n	8007830 <restore_non_core_regs+0x30>
 800781c:	071a      	lsls	r2, r3, #28
 800781e:	d50e      	bpl.n	800783e <restore_non_core_regs+0x3e>
 8007820:	06db      	lsls	r3, r3, #27
 8007822:	d513      	bpl.n	800784c <restore_non_core_regs+0x4c>
 8007824:	bd10      	pop	{r4, pc}
 8007826:	f7f8 fcc5 	bl	80001b4 <__gnu_Unwind_Restore_VFP>
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	0759      	lsls	r1, r3, #29
 800782e:	d4f5      	bmi.n	800781c <restore_non_core_regs+0x1c>
 8007830:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007834:	f7f8 fcce 	bl	80001d4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	071a      	lsls	r2, r3, #28
 800783c:	d4f0      	bmi.n	8007820 <restore_non_core_regs+0x20>
 800783e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8007842:	f7f8 fccf 	bl	80001e4 <__gnu_Unwind_Restore_WMMXD>
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	06db      	lsls	r3, r3, #27
 800784a:	d4eb      	bmi.n	8007824 <restore_non_core_regs+0x24>
 800784c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8007850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007854:	f7f8 bd0a 	b.w	800026c <__gnu_Unwind_Restore_WMMXC>

08007858 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8007858:	4603      	mov	r3, r0
 800785a:	6800      	ldr	r0, [r0, #0]
 800785c:	b100      	cbz	r0, 8007860 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 800785e:	4418      	add	r0, r3
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop

08007864 <_Unwind_DebugHook>:
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop

08007868 <unwind_phase2>:
 8007868:	b570      	push	{r4, r5, r6, lr}
 800786a:	4604      	mov	r4, r0
 800786c:	460e      	mov	r6, r1
 800786e:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8007870:	4620      	mov	r0, r4
 8007872:	f7ff ff7b 	bl	800776c <get_eit_entry>
 8007876:	4605      	mov	r5, r0
 8007878:	b988      	cbnz	r0, 800789e <unwind_phase2+0x36>
 800787a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800787c:	6162      	str	r2, [r4, #20]
 800787e:	6923      	ldr	r3, [r4, #16]
 8007880:	4632      	mov	r2, r6
 8007882:	4621      	mov	r1, r4
 8007884:	2001      	movs	r0, #1
 8007886:	4798      	blx	r3
 8007888:	2808      	cmp	r0, #8
 800788a:	d0f0      	beq.n	800786e <unwind_phase2+0x6>
 800788c:	2807      	cmp	r0, #7
 800788e:	d106      	bne.n	800789e <unwind_phase2+0x36>
 8007890:	4628      	mov	r0, r5
 8007892:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8007894:	f7ff ffe6 	bl	8007864 <_Unwind_DebugHook>
 8007898:	1d30      	adds	r0, r6, #4
 800789a:	f7f8 fc7f 	bl	800019c <__restore_core_regs>
 800789e:	deff      	udf	#255	; 0xff

080078a0 <unwind_phase2_forced>:
 80078a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a4:	1d0d      	adds	r5, r1, #4
 80078a6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80078aa:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80078ae:	4607      	mov	r7, r0
 80078b0:	4614      	mov	r4, r2
 80078b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078b4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80078b8:	f10d 0c0c 	add.w	ip, sp, #12
 80078bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80078c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80078c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80078cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80078d0:	ae02      	add	r6, sp, #8
 80078d2:	f04f 0e00 	mov.w	lr, #0
 80078d6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80078da:	f8c6 e000 	str.w	lr, [r6]
 80078de:	e020      	b.n	8007922 <unwind_phase2_forced+0x82>
 80078e0:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80078e2:	617b      	str	r3, [r7, #20]
 80078e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80078e8:	4631      	mov	r1, r6
 80078ea:	a87a      	add	r0, sp, #488	; 0x1e8
 80078ec:	f000 fda0 	bl	8008430 <memcpy>
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	aa7a      	add	r2, sp, #488	; 0x1e8
 80078f4:	4639      	mov	r1, r7
 80078f6:	4650      	mov	r0, sl
 80078f8:	4798      	blx	r3
 80078fa:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80078fc:	6473      	str	r3, [r6, #68]	; 0x44
 80078fe:	4621      	mov	r1, r4
 8007900:	e9cd 6900 	strd	r6, r9, [sp]
 8007904:	4605      	mov	r5, r0
 8007906:	463b      	mov	r3, r7
 8007908:	463a      	mov	r2, r7
 800790a:	2001      	movs	r0, #1
 800790c:	47c0      	blx	r8
 800790e:	4604      	mov	r4, r0
 8007910:	bb18      	cbnz	r0, 800795a <unwind_phase2_forced+0xba>
 8007912:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007916:	a97a      	add	r1, sp, #488	; 0x1e8
 8007918:	4630      	mov	r0, r6
 800791a:	f000 fd89 	bl	8008430 <memcpy>
 800791e:	2d08      	cmp	r5, #8
 8007920:	d119      	bne.n	8007956 <unwind_phase2_forced+0xb6>
 8007922:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8007924:	4638      	mov	r0, r7
 8007926:	f7ff ff21 	bl	800776c <get_eit_entry>
 800792a:	3409      	adds	r4, #9
 800792c:	fa5f fa84 	uxtb.w	sl, r4
 8007930:	4605      	mov	r5, r0
 8007932:	2800      	cmp	r0, #0
 8007934:	d0d4      	beq.n	80078e0 <unwind_phase2_forced+0x40>
 8007936:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8007938:	6473      	str	r3, [r6, #68]	; 0x44
 800793a:	463a      	mov	r2, r7
 800793c:	e9cd 6900 	strd	r6, r9, [sp]
 8007940:	463b      	mov	r3, r7
 8007942:	f04a 0110 	orr.w	r1, sl, #16
 8007946:	2001      	movs	r0, #1
 8007948:	47c0      	blx	r8
 800794a:	b930      	cbnz	r0, 800795a <unwind_phase2_forced+0xba>
 800794c:	4628      	mov	r0, r5
 800794e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8007952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007956:	2d07      	cmp	r5, #7
 8007958:	d005      	beq.n	8007966 <unwind_phase2_forced+0xc6>
 800795a:	2509      	movs	r5, #9
 800795c:	4628      	mov	r0, r5
 800795e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8007962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007966:	4620      	mov	r0, r4
 8007968:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800796a:	f7ff ff7b 	bl	8007864 <_Unwind_DebugHook>
 800796e:	a803      	add	r0, sp, #12
 8007970:	f7f8 fc14 	bl	800019c <__restore_core_regs>

08007974 <__gnu_Unwind_RaiseException>:
 8007974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007976:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8007978:	640b      	str	r3, [r1, #64]	; 0x40
 800797a:	f101 0c04 	add.w	ip, r1, #4
 800797e:	460e      	mov	r6, r1
 8007980:	4605      	mov	r5, r0
 8007982:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007986:	b0f9      	sub	sp, #484	; 0x1e4
 8007988:	ac01      	add	r4, sp, #4
 800798a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800798c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007992:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007998:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800799c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80079a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80079a4:	9700      	str	r7, [sp, #0]
 80079a6:	e006      	b.n	80079b6 <__gnu_Unwind_RaiseException+0x42>
 80079a8:	692b      	ldr	r3, [r5, #16]
 80079aa:	466a      	mov	r2, sp
 80079ac:	4629      	mov	r1, r5
 80079ae:	4798      	blx	r3
 80079b0:	2808      	cmp	r0, #8
 80079b2:	4604      	mov	r4, r0
 80079b4:	d108      	bne.n	80079c8 <__gnu_Unwind_RaiseException+0x54>
 80079b6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80079b8:	4628      	mov	r0, r5
 80079ba:	f7ff fed7 	bl	800776c <get_eit_entry>
 80079be:	2800      	cmp	r0, #0
 80079c0:	d0f2      	beq.n	80079a8 <__gnu_Unwind_RaiseException+0x34>
 80079c2:	2009      	movs	r0, #9
 80079c4:	b079      	add	sp, #484	; 0x1e4
 80079c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079c8:	4668      	mov	r0, sp
 80079ca:	f7ff ff19 	bl	8007800 <restore_non_core_regs>
 80079ce:	2c06      	cmp	r4, #6
 80079d0:	d1f7      	bne.n	80079c2 <__gnu_Unwind_RaiseException+0x4e>
 80079d2:	4631      	mov	r1, r6
 80079d4:	4628      	mov	r0, r5
 80079d6:	f7ff ff47 	bl	8007868 <unwind_phase2>
 80079da:	bf00      	nop

080079dc <__gnu_Unwind_ForcedUnwind>:
 80079dc:	60c1      	str	r1, [r0, #12]
 80079de:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80079e0:	6182      	str	r2, [r0, #24]
 80079e2:	6419      	str	r1, [r3, #64]	; 0x40
 80079e4:	2200      	movs	r2, #0
 80079e6:	4619      	mov	r1, r3
 80079e8:	f7ff bf5a 	b.w	80078a0 <unwind_phase2_forced>

080079ec <__gnu_Unwind_Resume>:
 80079ec:	b570      	push	{r4, r5, r6, lr}
 80079ee:	68c6      	ldr	r6, [r0, #12]
 80079f0:	6943      	ldr	r3, [r0, #20]
 80079f2:	640b      	str	r3, [r1, #64]	; 0x40
 80079f4:	b9ae      	cbnz	r6, 8007a22 <__gnu_Unwind_Resume+0x36>
 80079f6:	6903      	ldr	r3, [r0, #16]
 80079f8:	460a      	mov	r2, r1
 80079fa:	4604      	mov	r4, r0
 80079fc:	460d      	mov	r5, r1
 80079fe:	4601      	mov	r1, r0
 8007a00:	2002      	movs	r0, #2
 8007a02:	4798      	blx	r3
 8007a04:	2807      	cmp	r0, #7
 8007a06:	d005      	beq.n	8007a14 <__gnu_Unwind_Resume+0x28>
 8007a08:	2808      	cmp	r0, #8
 8007a0a:	d10e      	bne.n	8007a2a <__gnu_Unwind_Resume+0x3e>
 8007a0c:	4629      	mov	r1, r5
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f7ff ff2a 	bl	8007868 <unwind_phase2>
 8007a14:	4630      	mov	r0, r6
 8007a16:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007a18:	f7ff ff24 	bl	8007864 <_Unwind_DebugHook>
 8007a1c:	1d28      	adds	r0, r5, #4
 8007a1e:	f7f8 fbbd 	bl	800019c <__restore_core_regs>
 8007a22:	2201      	movs	r2, #1
 8007a24:	f7ff ff3c 	bl	80078a0 <unwind_phase2_forced>
 8007a28:	deff      	udf	#255	; 0xff
 8007a2a:	deff      	udf	#255	; 0xff

08007a2c <__gnu_Unwind_Resume_or_Rethrow>:
 8007a2c:	68c2      	ldr	r2, [r0, #12]
 8007a2e:	b122      	cbz	r2, 8007a3a <__gnu_Unwind_Resume_or_Rethrow+0xe>
 8007a30:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8007a32:	640a      	str	r2, [r1, #64]	; 0x40
 8007a34:	2200      	movs	r2, #0
 8007a36:	f7ff bf33 	b.w	80078a0 <unwind_phase2_forced>
 8007a3a:	f7ff bf9b 	b.w	8007974 <__gnu_Unwind_RaiseException>
 8007a3e:	bf00      	nop

08007a40 <_Unwind_Complete>:
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop

08007a44 <_Unwind_VRS_Get>:
 8007a44:	2901      	cmp	r1, #1
 8007a46:	d010      	beq.n	8007a6a <_Unwind_VRS_Get+0x26>
 8007a48:	d809      	bhi.n	8007a5e <_Unwind_VRS_Get+0x1a>
 8007a4a:	b983      	cbnz	r3, 8007a6e <_Unwind_VRS_Get+0x2a>
 8007a4c:	2a0f      	cmp	r2, #15
 8007a4e:	d80e      	bhi.n	8007a6e <_Unwind_VRS_Get+0x2a>
 8007a50:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007a54:	4618      	mov	r0, r3
 8007a56:	6853      	ldr	r3, [r2, #4]
 8007a58:	9a00      	ldr	r2, [sp, #0]
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	4770      	bx	lr
 8007a5e:	3903      	subs	r1, #3
 8007a60:	2901      	cmp	r1, #1
 8007a62:	bf8c      	ite	hi
 8007a64:	2002      	movhi	r0, #2
 8007a66:	2001      	movls	r0, #1
 8007a68:	4770      	bx	lr
 8007a6a:	4608      	mov	r0, r1
 8007a6c:	4770      	bx	lr
 8007a6e:	2002      	movs	r0, #2
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop

08007a74 <_Unwind_GetGR>:
 8007a74:	b500      	push	{lr}
 8007a76:	b085      	sub	sp, #20
 8007a78:	460a      	mov	r2, r1
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	a903      	add	r1, sp, #12
 8007a7e:	9100      	str	r1, [sp, #0]
 8007a80:	4619      	mov	r1, r3
 8007a82:	f7ff ffdf 	bl	8007a44 <_Unwind_VRS_Get>
 8007a86:	9803      	ldr	r0, [sp, #12]
 8007a88:	b005      	add	sp, #20
 8007a8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a8e:	bf00      	nop

08007a90 <_Unwind_VRS_Set>:
 8007a90:	2901      	cmp	r1, #1
 8007a92:	d010      	beq.n	8007ab6 <_Unwind_VRS_Set+0x26>
 8007a94:	d809      	bhi.n	8007aaa <_Unwind_VRS_Set+0x1a>
 8007a96:	b983      	cbnz	r3, 8007aba <_Unwind_VRS_Set+0x2a>
 8007a98:	2a0f      	cmp	r2, #15
 8007a9a:	d80e      	bhi.n	8007aba <_Unwind_VRS_Set+0x2a>
 8007a9c:	9900      	ldr	r1, [sp, #0]
 8007a9e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007aa2:	6809      	ldr	r1, [r1, #0]
 8007aa4:	6051      	str	r1, [r2, #4]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	4770      	bx	lr
 8007aaa:	3903      	subs	r1, #3
 8007aac:	2901      	cmp	r1, #1
 8007aae:	bf8c      	ite	hi
 8007ab0:	2002      	movhi	r0, #2
 8007ab2:	2001      	movls	r0, #1
 8007ab4:	4770      	bx	lr
 8007ab6:	4608      	mov	r0, r1
 8007ab8:	4770      	bx	lr
 8007aba:	2002      	movs	r0, #2
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop

08007ac0 <_Unwind_SetGR>:
 8007ac0:	b510      	push	{r4, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	ac03      	add	r4, sp, #12
 8007ac8:	9203      	str	r2, [sp, #12]
 8007aca:	9400      	str	r4, [sp, #0]
 8007acc:	460a      	mov	r2, r1
 8007ace:	4619      	mov	r1, r3
 8007ad0:	f7ff ffde 	bl	8007a90 <_Unwind_VRS_Set>
 8007ad4:	b004      	add	sp, #16
 8007ad6:	bd10      	pop	{r4, pc}

08007ad8 <__gnu_Unwind_Backtrace>:
 8007ad8:	b570      	push	{r4, r5, r6, lr}
 8007ada:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007adc:	6413      	str	r3, [r2, #64]	; 0x40
 8007ade:	f102 0c04 	add.w	ip, r2, #4
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	460c      	mov	r4, r1
 8007ae6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007aea:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8007aee:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 8007af2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8007af6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007afa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8007afe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007b02:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8007b06:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8007b0a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007b0e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8007b12:	9616      	str	r6, [sp, #88]	; 0x58
 8007b14:	e010      	b.n	8007b38 <__gnu_Unwind_Backtrace+0x60>
 8007b16:	f7ff ffd3 	bl	8007ac0 <_Unwind_SetGR>
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	a816      	add	r0, sp, #88	; 0x58
 8007b1e:	47a8      	blx	r5
 8007b20:	4603      	mov	r3, r0
 8007b22:	aa16      	add	r2, sp, #88	; 0x58
 8007b24:	4669      	mov	r1, sp
 8007b26:	2008      	movs	r0, #8
 8007b28:	b983      	cbnz	r3, 8007b4c <__gnu_Unwind_Backtrace+0x74>
 8007b2a:	9b04      	ldr	r3, [sp, #16]
 8007b2c:	4798      	blx	r3
 8007b2e:	2805      	cmp	r0, #5
 8007b30:	4606      	mov	r6, r0
 8007b32:	d00c      	beq.n	8007b4e <__gnu_Unwind_Backtrace+0x76>
 8007b34:	2809      	cmp	r0, #9
 8007b36:	d009      	beq.n	8007b4c <__gnu_Unwind_Backtrace+0x74>
 8007b38:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007b3a:	4668      	mov	r0, sp
 8007b3c:	f7ff fe16 	bl	800776c <get_eit_entry>
 8007b40:	4603      	mov	r3, r0
 8007b42:	466a      	mov	r2, sp
 8007b44:	210c      	movs	r1, #12
 8007b46:	a816      	add	r0, sp, #88	; 0x58
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d0e4      	beq.n	8007b16 <__gnu_Unwind_Backtrace+0x3e>
 8007b4c:	2609      	movs	r6, #9
 8007b4e:	a816      	add	r0, sp, #88	; 0x58
 8007b50:	f7ff fe56 	bl	8007800 <restore_non_core_regs>
 8007b54:	4630      	mov	r0, r6
 8007b56:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8007b5a:	bd70      	pop	{r4, r5, r6, pc}

08007b5c <__gnu_unwind_pr_common>:
 8007b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b60:	4693      	mov	fp, r2
 8007b62:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007b64:	b089      	sub	sp, #36	; 0x24
 8007b66:	460d      	mov	r5, r1
 8007b68:	f852 1b04 	ldr.w	r1, [r2], #4
 8007b6c:	9206      	str	r2, [sp, #24]
 8007b6e:	f000 0c03 	and.w	ip, r0, #3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d079      	beq.n	8007c6a <__gnu_unwind_pr_common+0x10e>
 8007b76:	0c0c      	lsrs	r4, r1, #16
 8007b78:	f88d 401d 	strb.w	r4, [sp, #29]
 8007b7c:	0409      	lsls	r1, r1, #16
 8007b7e:	b2e4      	uxtb	r4, r4
 8007b80:	9105      	str	r1, [sp, #20]
 8007b82:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007b86:	2102      	movs	r1, #2
 8007b88:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 8007b8a:	f88d 101c 	strb.w	r1, [sp, #28]
 8007b8e:	f1bc 0f02 	cmp.w	ip, #2
 8007b92:	bf08      	it	eq
 8007b94:	6baa      	ldreq	r2, [r5, #56]	; 0x38
 8007b96:	f017 0701 	ands.w	r7, r7, #1
 8007b9a:	d00c      	beq.n	8007bb6 <__gnu_unwind_pr_common+0x5a>
 8007b9c:	a905      	add	r1, sp, #20
 8007b9e:	4658      	mov	r0, fp
 8007ba0:	f000 fab0 	bl	8008104 <__gnu_unwind_execute>
 8007ba4:	b918      	cbnz	r0, 8007bae <__gnu_unwind_pr_common+0x52>
 8007ba6:	2008      	movs	r0, #8
 8007ba8:	b009      	add	sp, #36	; 0x24
 8007baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bae:	2009      	movs	r0, #9
 8007bb0:	b009      	add	sp, #36	; 0x24
 8007bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb6:	6816      	ldr	r6, [r2, #0]
 8007bb8:	2e00      	cmp	r6, #0
 8007bba:	d0ef      	beq.n	8007b9c <__gnu_unwind_pr_common+0x40>
 8007bbc:	f000 0108 	and.w	r1, r0, #8
 8007bc0:	9101      	str	r1, [sp, #4]
 8007bc2:	46b1      	mov	r9, r6
 8007bc4:	9702      	str	r7, [sp, #8]
 8007bc6:	4664      	mov	r4, ip
 8007bc8:	469a      	mov	sl, r3
 8007bca:	f1ba 0f02 	cmp.w	sl, #2
 8007bce:	d048      	beq.n	8007c62 <__gnu_unwind_pr_common+0x106>
 8007bd0:	f8b2 9000 	ldrh.w	r9, [r2]
 8007bd4:	8856      	ldrh	r6, [r2, #2]
 8007bd6:	f102 0804 	add.w	r8, r2, #4
 8007bda:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8007bdc:	f026 0301 	bic.w	r3, r6, #1
 8007be0:	210f      	movs	r1, #15
 8007be2:	4658      	mov	r0, fp
 8007be4:	189f      	adds	r7, r3, r2
 8007be6:	f7ff ff45 	bl	8007a74 <_Unwind_GetGR>
 8007bea:	4287      	cmp	r7, r0
 8007bec:	d837      	bhi.n	8007c5e <__gnu_unwind_pr_common+0x102>
 8007bee:	f029 0201 	bic.w	r2, r9, #1
 8007bf2:	443a      	add	r2, r7
 8007bf4:	4282      	cmp	r2, r0
 8007bf6:	bf94      	ite	ls
 8007bf8:	2200      	movls	r2, #0
 8007bfa:	2201      	movhi	r2, #1
 8007bfc:	0073      	lsls	r3, r6, #1
 8007bfe:	f003 0302 	and.w	r3, r3, #2
 8007c02:	f009 0901 	and.w	r9, r9, #1
 8007c06:	ea43 0309 	orr.w	r3, r3, r9
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d047      	beq.n	8007c9e <__gnu_unwind_pr_common+0x142>
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d031      	beq.n	8007c76 <__gnu_unwind_pr_common+0x11a>
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1cb      	bne.n	8007bae <__gnu_unwind_pr_common+0x52>
 8007c16:	b114      	cbz	r4, 8007c1e <__gnu_unwind_pr_common+0xc2>
 8007c18:	2a00      	cmp	r2, #0
 8007c1a:	f040 80c6 	bne.w	8007daa <__gnu_unwind_pr_common+0x24e>
 8007c1e:	f108 0204 	add.w	r2, r8, #4
 8007c22:	f8d2 9000 	ldr.w	r9, [r2]
 8007c26:	f1b9 0f00 	cmp.w	r9, #0
 8007c2a:	d1ce      	bne.n	8007bca <__gnu_unwind_pr_common+0x6e>
 8007c2c:	a905      	add	r1, sp, #20
 8007c2e:	4658      	mov	r0, fp
 8007c30:	9f02      	ldr	r7, [sp, #8]
 8007c32:	f000 fa67 	bl	8008104 <__gnu_unwind_execute>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d1b9      	bne.n	8007bae <__gnu_unwind_pr_common+0x52>
 8007c3a:	2f00      	cmp	r7, #0
 8007c3c:	d0b3      	beq.n	8007ba6 <__gnu_unwind_pr_common+0x4a>
 8007c3e:	210f      	movs	r1, #15
 8007c40:	4658      	mov	r0, fp
 8007c42:	f7ff ff17 	bl	8007a74 <_Unwind_GetGR>
 8007c46:	210e      	movs	r1, #14
 8007c48:	4602      	mov	r2, r0
 8007c4a:	4658      	mov	r0, fp
 8007c4c:	f7ff ff38 	bl	8007ac0 <_Unwind_SetGR>
 8007c50:	4a65      	ldr	r2, [pc, #404]	; (8007de8 <__gnu_unwind_pr_common+0x28c>)
 8007c52:	210f      	movs	r1, #15
 8007c54:	4658      	mov	r0, fp
 8007c56:	f7ff ff33 	bl	8007ac0 <_Unwind_SetGR>
 8007c5a:	2007      	movs	r0, #7
 8007c5c:	e7a8      	b.n	8007bb0 <__gnu_unwind_pr_common+0x54>
 8007c5e:	2200      	movs	r2, #0
 8007c60:	e7cc      	b.n	8007bfc <__gnu_unwind_pr_common+0xa0>
 8007c62:	6856      	ldr	r6, [r2, #4]
 8007c64:	f102 0808 	add.w	r8, r2, #8
 8007c68:	e7b7      	b.n	8007bda <__gnu_unwind_pr_common+0x7e>
 8007c6a:	0209      	lsls	r1, r1, #8
 8007c6c:	9105      	str	r1, [sp, #20]
 8007c6e:	f88d 301d 	strb.w	r3, [sp, #29]
 8007c72:	2103      	movs	r1, #3
 8007c74:	e788      	b.n	8007b88 <__gnu_unwind_pr_common+0x2c>
 8007c76:	f8d8 6000 	ldr.w	r6, [r8]
 8007c7a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8007c7e:	2c00      	cmp	r4, #0
 8007c80:	d144      	bne.n	8007d0c <__gnu_unwind_pr_common+0x1b0>
 8007c82:	b122      	cbz	r2, 8007c8e <__gnu_unwind_pr_common+0x132>
 8007c84:	9a01      	ldr	r2, [sp, #4]
 8007c86:	2a00      	cmp	r2, #0
 8007c88:	d05a      	beq.n	8007d40 <__gnu_unwind_pr_common+0x1e4>
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d058      	beq.n	8007d40 <__gnu_unwind_pr_common+0x1e4>
 8007c8e:	2e00      	cmp	r6, #0
 8007c90:	da01      	bge.n	8007c96 <__gnu_unwind_pr_common+0x13a>
 8007c92:	f108 0804 	add.w	r8, r8, #4
 8007c96:	3301      	adds	r3, #1
 8007c98:	eb08 0283 	add.w	r2, r8, r3, lsl #2
 8007c9c:	e7c1      	b.n	8007c22 <__gnu_unwind_pr_common+0xc6>
 8007c9e:	b9ec      	cbnz	r4, 8007cdc <__gnu_unwind_pr_common+0x180>
 8007ca0:	b1ca      	cbz	r2, 8007cd6 <__gnu_unwind_pr_common+0x17a>
 8007ca2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007ca6:	f8d8 2000 	ldr.w	r2, [r8]
 8007caa:	1c99      	adds	r1, r3, #2
 8007cac:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8007cb0:	f43f af7d 	beq.w	8007bae <__gnu_unwind_pr_common+0x52>
 8007cb4:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8007cb8:	3301      	adds	r3, #1
 8007cba:	9104      	str	r1, [sp, #16]
 8007cbc:	f000 8088 	beq.w	8007dd0 <__gnu_unwind_pr_common+0x274>
 8007cc0:	f108 0004 	add.w	r0, r8, #4
 8007cc4:	f7ff fdc8 	bl	8007858 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8007cc8:	ab04      	add	r3, sp, #16
 8007cca:	4601      	mov	r1, r0
 8007ccc:	4628      	mov	r0, r5
 8007cce:	f7fe ff4b 	bl	8006b68 <__cxa_type_match>
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	d156      	bne.n	8007d84 <__gnu_unwind_pr_common+0x228>
 8007cd6:	f108 0208 	add.w	r2, r8, #8
 8007cda:	e7a2      	b.n	8007c22 <__gnu_unwind_pr_common+0xc6>
 8007cdc:	210d      	movs	r1, #13
 8007cde:	4658      	mov	r0, fp
 8007ce0:	f7ff fec8 	bl	8007a74 <_Unwind_GetGR>
 8007ce4:	6a2b      	ldr	r3, [r5, #32]
 8007ce6:	4283      	cmp	r3, r0
 8007ce8:	d1f5      	bne.n	8007cd6 <__gnu_unwind_pr_common+0x17a>
 8007cea:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007cec:	4598      	cmp	r8, r3
 8007cee:	d1f2      	bne.n	8007cd6 <__gnu_unwind_pr_common+0x17a>
 8007cf0:	4640      	mov	r0, r8
 8007cf2:	f7ff fceb 	bl	80076cc <selfrel_offset31>
 8007cf6:	210f      	movs	r1, #15
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	4658      	mov	r0, fp
 8007cfc:	f7ff fee0 	bl	8007ac0 <_Unwind_SetGR>
 8007d00:	462a      	mov	r2, r5
 8007d02:	2100      	movs	r1, #0
 8007d04:	4658      	mov	r0, fp
 8007d06:	f7ff fedb 	bl	8007ac0 <_Unwind_SetGR>
 8007d0a:	e7a6      	b.n	8007c5a <__gnu_unwind_pr_common+0xfe>
 8007d0c:	210d      	movs	r1, #13
 8007d0e:	4658      	mov	r0, fp
 8007d10:	9303      	str	r3, [sp, #12]
 8007d12:	f7ff feaf 	bl	8007a74 <_Unwind_GetGR>
 8007d16:	6a2a      	ldr	r2, [r5, #32]
 8007d18:	9b03      	ldr	r3, [sp, #12]
 8007d1a:	4282      	cmp	r2, r0
 8007d1c:	d1b7      	bne.n	8007c8e <__gnu_unwind_pr_common+0x132>
 8007d1e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007d20:	4590      	cmp	r8, r2
 8007d22:	d1b4      	bne.n	8007c8e <__gnu_unwind_pr_common+0x132>
 8007d24:	2700      	movs	r7, #0
 8007d26:	2204      	movs	r2, #4
 8007d28:	e9c5 720b 	strd	r7, r2, [r5, #44]	; 0x2c
 8007d2c:	4442      	add	r2, r8
 8007d2e:	62ab      	str	r3, [r5, #40]	; 0x28
 8007d30:	636a      	str	r2, [r5, #52]	; 0x34
 8007d32:	f8d8 2000 	ldr.w	r2, [r8]
 8007d36:	42ba      	cmp	r2, r7
 8007d38:	db52      	blt.n	8007de0 <__gnu_unwind_pr_common+0x284>
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	9202      	str	r2, [sp, #8]
 8007d3e:	e7aa      	b.n	8007c96 <__gnu_unwind_pr_common+0x13a>
 8007d40:	9403      	str	r4, [sp, #12]
 8007d42:	f108 0904 	add.w	r9, r8, #4
 8007d46:	2600      	movs	r6, #0
 8007d48:	f105 0758 	add.w	r7, r5, #88	; 0x58
 8007d4c:	461c      	mov	r4, r3
 8007d4e:	e00d      	b.n	8007d6c <__gnu_unwind_pr_common+0x210>
 8007d50:	4648      	mov	r0, r9
 8007d52:	9704      	str	r7, [sp, #16]
 8007d54:	f7ff fd80 	bl	8007858 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8007d58:	2200      	movs	r2, #0
 8007d5a:	4601      	mov	r1, r0
 8007d5c:	ab04      	add	r3, sp, #16
 8007d5e:	4628      	mov	r0, r5
 8007d60:	3601      	adds	r6, #1
 8007d62:	f109 0904 	add.w	r9, r9, #4
 8007d66:	f7fe feff 	bl	8006b68 <__cxa_type_match>
 8007d6a:	b9c8      	cbnz	r0, 8007da0 <__gnu_unwind_pr_common+0x244>
 8007d6c:	42a6      	cmp	r6, r4
 8007d6e:	d1ef      	bne.n	8007d50 <__gnu_unwind_pr_common+0x1f4>
 8007d70:	210d      	movs	r1, #13
 8007d72:	4658      	mov	r0, fp
 8007d74:	f7ff fe7e 	bl	8007a74 <_Unwind_GetGR>
 8007d78:	9b04      	ldr	r3, [sp, #16]
 8007d7a:	6228      	str	r0, [r5, #32]
 8007d7c:	e9c5 3809 	strd	r3, r8, [r5, #36]	; 0x24
 8007d80:	2006      	movs	r0, #6
 8007d82:	e715      	b.n	8007bb0 <__gnu_unwind_pr_common+0x54>
 8007d84:	4604      	mov	r4, r0
 8007d86:	210d      	movs	r1, #13
 8007d88:	4658      	mov	r0, fp
 8007d8a:	f7ff fe73 	bl	8007a74 <_Unwind_GetGR>
 8007d8e:	2c02      	cmp	r4, #2
 8007d90:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8007d94:	6228      	str	r0, [r5, #32]
 8007d96:	d121      	bne.n	8007ddc <__gnu_unwind_pr_common+0x280>
 8007d98:	462b      	mov	r3, r5
 8007d9a:	f843 9f2c 	str.w	r9, [r3, #44]!
 8007d9e:	e7ed      	b.n	8007d7c <__gnu_unwind_pr_common+0x220>
 8007da0:	4623      	mov	r3, r4
 8007da2:	f8d8 6000 	ldr.w	r6, [r8]
 8007da6:	9c03      	ldr	r4, [sp, #12]
 8007da8:	e771      	b.n	8007c8e <__gnu_unwind_pr_common+0x132>
 8007daa:	4640      	mov	r0, r8
 8007dac:	f7ff fc8e 	bl	80076cc <selfrel_offset31>
 8007db0:	f108 0204 	add.w	r2, r8, #4
 8007db4:	4604      	mov	r4, r0
 8007db6:	63aa      	str	r2, [r5, #56]	; 0x38
 8007db8:	4628      	mov	r0, r5
 8007dba:	f7fe ff25 	bl	8006c08 <__cxa_begin_cleanup>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	f43f aef5 	beq.w	8007bae <__gnu_unwind_pr_common+0x52>
 8007dc4:	4622      	mov	r2, r4
 8007dc6:	210f      	movs	r1, #15
 8007dc8:	4658      	mov	r0, fp
 8007dca:	f7ff fe79 	bl	8007ac0 <_Unwind_SetGR>
 8007dce:	e744      	b.n	8007c5a <__gnu_unwind_pr_common+0xfe>
 8007dd0:	4689      	mov	r9, r1
 8007dd2:	4658      	mov	r0, fp
 8007dd4:	210d      	movs	r1, #13
 8007dd6:	f7ff fe4d 	bl	8007a74 <_Unwind_GetGR>
 8007dda:	6228      	str	r0, [r5, #32]
 8007ddc:	464b      	mov	r3, r9
 8007dde:	e7cd      	b.n	8007d7c <__gnu_unwind_pr_common+0x220>
 8007de0:	1c58      	adds	r0, r3, #1
 8007de2:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8007de6:	e784      	b.n	8007cf2 <__gnu_unwind_pr_common+0x196>
 8007de8:	08007445 	.word	0x08007445

08007dec <__aeabi_unwind_cpp_pr0>:
 8007dec:	2300      	movs	r3, #0
 8007dee:	f7ff beb5 	b.w	8007b5c <__gnu_unwind_pr_common>
 8007df2:	bf00      	nop

08007df4 <__aeabi_unwind_cpp_pr1>:
 8007df4:	2301      	movs	r3, #1
 8007df6:	f7ff beb1 	b.w	8007b5c <__gnu_unwind_pr_common>
 8007dfa:	bf00      	nop

08007dfc <__aeabi_unwind_cpp_pr2>:
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	f7ff bead 	b.w	8007b5c <__gnu_unwind_pr_common>
 8007e02:	bf00      	nop

08007e04 <_Unwind_VRS_Pop>:
 8007e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e08:	4606      	mov	r6, r0
 8007e0a:	b0c3      	sub	sp, #268	; 0x10c
 8007e0c:	4615      	mov	r5, r2
 8007e0e:	461c      	mov	r4, r3
 8007e10:	2904      	cmp	r1, #4
 8007e12:	f200 80d1 	bhi.w	8007fb8 <_Unwind_VRS_Pop+0x1b4>
 8007e16:	e8df f001 	tbb	[pc, r1]
 8007e1a:	51ac      	.short	0x51ac
 8007e1c:	2acf      	.short	0x2acf
 8007e1e:	03          	.byte	0x03
 8007e1f:	00          	.byte	0x00
 8007e20:	2c00      	cmp	r4, #0
 8007e22:	f040 80c9 	bne.w	8007fb8 <_Unwind_VRS_Pop+0x1b4>
 8007e26:	2a10      	cmp	r2, #16
 8007e28:	f200 80c6 	bhi.w	8007fb8 <_Unwind_VRS_Pop+0x1b4>
 8007e2c:	6803      	ldr	r3, [r0, #0]
 8007e2e:	06dc      	lsls	r4, r3, #27
 8007e30:	f100 80e7 	bmi.w	8008002 <_Unwind_VRS_Pop+0x1fe>
 8007e34:	af20      	add	r7, sp, #128	; 0x80
 8007e36:	4638      	mov	r0, r7
 8007e38:	f7f8 fa22 	bl	8000280 <__gnu_Unwind_Save_WMMXC>
 8007e3c:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 8007e3e:	4639      	mov	r1, r7
 8007e40:	2300      	movs	r3, #0
 8007e42:	f04f 0c01 	mov.w	ip, #1
 8007e46:	fa0c f203 	lsl.w	r2, ip, r3
 8007e4a:	422a      	tst	r2, r5
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f103 0301 	add.w	r3, r3, #1
 8007e52:	d003      	beq.n	8007e5c <_Unwind_VRS_Pop+0x58>
 8007e54:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e58:	600a      	str	r2, [r1, #0]
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	2b04      	cmp	r3, #4
 8007e5e:	f101 0104 	add.w	r1, r1, #4
 8007e62:	d1f0      	bne.n	8007e46 <_Unwind_VRS_Pop+0x42>
 8007e64:	63b4      	str	r4, [r6, #56]	; 0x38
 8007e66:	4638      	mov	r0, r7
 8007e68:	f7f8 fa00 	bl	800026c <__gnu_Unwind_Restore_WMMXC>
 8007e6c:	e099      	b.n	8007fa2 <_Unwind_VRS_Pop+0x19e>
 8007e6e:	2c03      	cmp	r4, #3
 8007e70:	f040 80a2 	bne.w	8007fb8 <_Unwind_VRS_Pop+0x1b4>
 8007e74:	b294      	uxth	r4, r2
 8007e76:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8007e7a:	2b10      	cmp	r3, #16
 8007e7c:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8007e80:	f200 809a 	bhi.w	8007fb8 <_Unwind_VRS_Pop+0x1b4>
 8007e84:	6803      	ldr	r3, [r0, #0]
 8007e86:	071f      	lsls	r7, r3, #28
 8007e88:	f100 80c3 	bmi.w	8008012 <_Unwind_VRS_Pop+0x20e>
 8007e8c:	af20      	add	r7, sp, #128	; 0x80
 8007e8e:	4638      	mov	r0, r7
 8007e90:	f7f8 f9ca 	bl	8000228 <__gnu_Unwind_Save_WMMXD>
 8007e94:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8007e96:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8007e9a:	b154      	cbz	r4, 8007eb2 <_Unwind_VRS_Pop+0xae>
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	1ad0      	subs	r0, r2, r3
 8007ea0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007ea4:	00e4      	lsls	r4, r4, #3
 8007ea6:	581d      	ldr	r5, [r3, r0]
 8007ea8:	f843 5b04 	str.w	r5, [r3], #4
 8007eac:	428b      	cmp	r3, r1
 8007eae:	d1fa      	bne.n	8007ea6 <_Unwind_VRS_Pop+0xa2>
 8007eb0:	4422      	add	r2, r4
 8007eb2:	63b2      	str	r2, [r6, #56]	; 0x38
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	f7f8 f995 	bl	80001e4 <__gnu_Unwind_Restore_WMMXD>
 8007eba:	e072      	b.n	8007fa2 <_Unwind_VRS_Pop+0x19e>
 8007ebc:	2c01      	cmp	r4, #1
 8007ebe:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8007ec2:	b295      	uxth	r5, r2
 8007ec4:	d071      	beq.n	8007faa <_Unwind_VRS_Pop+0x1a6>
 8007ec6:	2c05      	cmp	r4, #5
 8007ec8:	d176      	bne.n	8007fb8 <_Unwind_VRS_Pop+0x1b4>
 8007eca:	eb08 0905 	add.w	r9, r8, r5
 8007ece:	f1b9 0f20 	cmp.w	r9, #32
 8007ed2:	d871      	bhi.n	8007fb8 <_Unwind_VRS_Pop+0x1b4>
 8007ed4:	f1b8 0f0f 	cmp.w	r8, #15
 8007ed8:	d872      	bhi.n	8007fc0 <_Unwind_VRS_Pop+0x1bc>
 8007eda:	f1b9 0f10 	cmp.w	r9, #16
 8007ede:	6803      	ldr	r3, [r0, #0]
 8007ee0:	f200 809f 	bhi.w	8008022 <_Unwind_VRS_Pop+0x21e>
 8007ee4:	07d9      	lsls	r1, r3, #31
 8007ee6:	d508      	bpl.n	8007efa <_Unwind_VRS_Pop+0xf6>
 8007ee8:	f023 0301 	bic.w	r3, r3, #1
 8007eec:	4630      	mov	r0, r6
 8007eee:	f043 0302 	orr.w	r3, r3, #2
 8007ef2:	f840 3b48 	str.w	r3, [r0], #72
 8007ef6:	f7f8 f969 	bl	80001cc <__gnu_Unwind_Save_VFP_D>
 8007efa:	af20      	add	r7, sp, #128	; 0x80
 8007efc:	4638      	mov	r0, r7
 8007efe:	f7f8 f965 	bl	80001cc <__gnu_Unwind_Save_VFP_D>
 8007f02:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8007f04:	2d00      	cmp	r5, #0
 8007f06:	f000 80b9 	beq.w	800807c <_Unwind_VRS_Pop+0x278>
 8007f0a:	006d      	lsls	r5, r5, #1
 8007f0c:	1e6a      	subs	r2, r5, #1
 8007f0e:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8007f12:	2500      	movs	r5, #0
 8007f14:	3201      	adds	r2, #1
 8007f16:	3904      	subs	r1, #4
 8007f18:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007f1c:	f853 0b04 	ldr.w	r0, [r3], #4
 8007f20:	f841 0f04 	str.w	r0, [r1, #4]!
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d1f9      	bne.n	8007f1c <_Unwind_VRS_Pop+0x118>
 8007f28:	2d00      	cmp	r5, #0
 8007f2a:	f000 80a1 	beq.w	8008070 <_Unwind_VRS_Pop+0x26c>
 8007f2e:	4641      	mov	r1, r8
 8007f30:	2910      	cmp	r1, #16
 8007f32:	bf38      	it	cc
 8007f34:	2110      	movcc	r1, #16
 8007f36:	006b      	lsls	r3, r5, #1
 8007f38:	3910      	subs	r1, #16
 8007f3a:	466f      	mov	r7, sp
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8007f42:	3301      	adds	r3, #1
 8007f44:	3904      	subs	r1, #4
 8007f46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007f4a:	f852 0b04 	ldr.w	r0, [r2], #4
 8007f4e:	f841 0f04 	str.w	r0, [r1, #4]!
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d1f9      	bne.n	8007f4a <_Unwind_VRS_Pop+0x146>
 8007f56:	2c01      	cmp	r4, #1
 8007f58:	f000 8088 	beq.w	800806c <_Unwind_VRS_Pop+0x268>
 8007f5c:	f1b8 0f0f 	cmp.w	r8, #15
 8007f60:	63b2      	str	r2, [r6, #56]	; 0x38
 8007f62:	d802      	bhi.n	8007f6a <_Unwind_VRS_Pop+0x166>
 8007f64:	a820      	add	r0, sp, #128	; 0x80
 8007f66:	f7f8 f92d 	bl	80001c4 <__gnu_Unwind_Restore_VFP_D>
 8007f6a:	4638      	mov	r0, r7
 8007f6c:	f7f8 f932 	bl	80001d4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8007f70:	e017      	b.n	8007fa2 <_Unwind_VRS_Pop+0x19e>
 8007f72:	bb0c      	cbnz	r4, 8007fb8 <_Unwind_VRS_Pop+0x1b4>
 8007f74:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007f76:	4623      	mov	r3, r4
 8007f78:	fa1f fc82 	uxth.w	ip, r2
 8007f7c:	2401      	movs	r4, #1
 8007f7e:	1d37      	adds	r7, r6, #4
 8007f80:	fa04 f103 	lsl.w	r1, r4, r3
 8007f84:	ea11 0f0c 	tst.w	r1, ip
 8007f88:	4602      	mov	r2, r0
 8007f8a:	d004      	beq.n	8007f96 <_Unwind_VRS_Pop+0x192>
 8007f8c:	f852 1b04 	ldr.w	r1, [r2], #4
 8007f90:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
 8007f94:	4610      	mov	r0, r2
 8007f96:	3301      	adds	r3, #1
 8007f98:	2b10      	cmp	r3, #16
 8007f9a:	d1f1      	bne.n	8007f80 <_Unwind_VRS_Pop+0x17c>
 8007f9c:	04ac      	lsls	r4, r5, #18
 8007f9e:	d400      	bmi.n	8007fa2 <_Unwind_VRS_Pop+0x19e>
 8007fa0:	63b0      	str	r0, [r6, #56]	; 0x38
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	b043      	add	sp, #268	; 0x10c
 8007fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007faa:	eb08 0305 	add.w	r3, r8, r5
 8007fae:	2b10      	cmp	r3, #16
 8007fb0:	d802      	bhi.n	8007fb8 <_Unwind_VRS_Pop+0x1b4>
 8007fb2:	f1b8 0f10 	cmp.w	r8, #16
 8007fb6:	d114      	bne.n	8007fe2 <_Unwind_VRS_Pop+0x1de>
 8007fb8:	2002      	movs	r0, #2
 8007fba:	b043      	add	sp, #268	; 0x10c
 8007fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fc0:	2d00      	cmp	r5, #0
 8007fc2:	d0ee      	beq.n	8007fa2 <_Unwind_VRS_Pop+0x19e>
 8007fc4:	6803      	ldr	r3, [r0, #0]
 8007fc6:	075a      	lsls	r2, r3, #29
 8007fc8:	d45c      	bmi.n	8008084 <_Unwind_VRS_Pop+0x280>
 8007fca:	466f      	mov	r7, sp
 8007fcc:	4638      	mov	r0, r7
 8007fce:	f7f8 f905 	bl	80001dc <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007fd2:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8007fd4:	006b      	lsls	r3, r5, #1
 8007fd6:	f1a8 0110 	sub.w	r1, r8, #16
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8007fe0:	e7af      	b.n	8007f42 <_Unwind_VRS_Pop+0x13e>
 8007fe2:	6803      	ldr	r3, [r0, #0]
 8007fe4:	07da      	lsls	r2, r3, #31
 8007fe6:	d459      	bmi.n	800809c <_Unwind_VRS_Pop+0x298>
 8007fe8:	af20      	add	r7, sp, #128	; 0x80
 8007fea:	4638      	mov	r0, r7
 8007fec:	f7f8 f8e6 	bl	80001bc <__gnu_Unwind_Save_VFP>
 8007ff0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8007ff2:	2d00      	cmp	r5, #0
 8007ff4:	d189      	bne.n	8007f0a <_Unwind_VRS_Pop+0x106>
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	63b3      	str	r3, [r6, #56]	; 0x38
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	f7f8 f8da 	bl	80001b4 <__gnu_Unwind_Restore_VFP>
 8008000:	e7cf      	b.n	8007fa2 <_Unwind_VRS_Pop+0x19e>
 8008002:	f023 0310 	bic.w	r3, r3, #16
 8008006:	6003      	str	r3, [r0, #0]
 8008008:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 800800c:	f7f8 f938 	bl	8000280 <__gnu_Unwind_Save_WMMXC>
 8008010:	e710      	b.n	8007e34 <_Unwind_VRS_Pop+0x30>
 8008012:	f023 0308 	bic.w	r3, r3, #8
 8008016:	6003      	str	r3, [r0, #0]
 8008018:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 800801c:	f7f8 f904 	bl	8000228 <__gnu_Unwind_Save_WMMXD>
 8008020:	e734      	b.n	8007e8c <_Unwind_VRS_Pop+0x88>
 8008022:	07d9      	lsls	r1, r3, #31
 8008024:	d508      	bpl.n	8008038 <_Unwind_VRS_Pop+0x234>
 8008026:	f023 0301 	bic.w	r3, r3, #1
 800802a:	f043 0302 	orr.w	r3, r3, #2
 800802e:	f840 3b48 	str.w	r3, [r0], #72
 8008032:	f7f8 f8cb 	bl	80001cc <__gnu_Unwind_Save_VFP_D>
 8008036:	6833      	ldr	r3, [r6, #0]
 8008038:	0758      	lsls	r0, r3, #29
 800803a:	d506      	bpl.n	800804a <_Unwind_VRS_Pop+0x246>
 800803c:	4630      	mov	r0, r6
 800803e:	f023 0304 	bic.w	r3, r3, #4
 8008042:	f840 3bd0 	str.w	r3, [r0], #208
 8008046:	f7f8 f8c9 	bl	80001dc <__gnu_Unwind_Save_VFP_D_16_to_31>
 800804a:	af20      	add	r7, sp, #128	; 0x80
 800804c:	4638      	mov	r0, r7
 800804e:	f7f8 f8bd 	bl	80001cc <__gnu_Unwind_Save_VFP_D>
 8008052:	4668      	mov	r0, sp
 8008054:	f7f8 f8c2 	bl	80001dc <__gnu_Unwind_Save_VFP_D_16_to_31>
 8008058:	f1c8 0210 	rsb	r2, r8, #16
 800805c:	0052      	lsls	r2, r2, #1
 800805e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8008060:	f1a9 0510 	sub.w	r5, r9, #16
 8008064:	3a01      	subs	r2, #1
 8008066:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 800806a:	e753      	b.n	8007f14 <_Unwind_VRS_Pop+0x110>
 800806c:	af20      	add	r7, sp, #128	; 0x80
 800806e:	e7c2      	b.n	8007ff6 <_Unwind_VRS_Pop+0x1f2>
 8008070:	2c01      	cmp	r4, #1
 8008072:	d0c0      	beq.n	8007ff6 <_Unwind_VRS_Pop+0x1f2>
 8008074:	f1b8 0f0f 	cmp.w	r8, #15
 8008078:	63b3      	str	r3, [r6, #56]	; 0x38
 800807a:	d892      	bhi.n	8007fa2 <_Unwind_VRS_Pop+0x19e>
 800807c:	4638      	mov	r0, r7
 800807e:	f7f8 f8a1 	bl	80001c4 <__gnu_Unwind_Restore_VFP_D>
 8008082:	e78e      	b.n	8007fa2 <_Unwind_VRS_Pop+0x19e>
 8008084:	f023 0304 	bic.w	r3, r3, #4
 8008088:	f840 3bd0 	str.w	r3, [r0], #208
 800808c:	466f      	mov	r7, sp
 800808e:	f7f8 f8a5 	bl	80001dc <__gnu_Unwind_Save_VFP_D_16_to_31>
 8008092:	4638      	mov	r0, r7
 8008094:	f7f8 f8a2 	bl	80001dc <__gnu_Unwind_Save_VFP_D_16_to_31>
 8008098:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800809a:	e79b      	b.n	8007fd4 <_Unwind_VRS_Pop+0x1d0>
 800809c:	4630      	mov	r0, r6
 800809e:	f023 0303 	bic.w	r3, r3, #3
 80080a2:	f840 3b48 	str.w	r3, [r0], #72
 80080a6:	f7f8 f889 	bl	80001bc <__gnu_Unwind_Save_VFP>
 80080aa:	e79d      	b.n	8007fe8 <_Unwind_VRS_Pop+0x1e4>

080080ac <next_unwind_byte>:
 80080ac:	7a02      	ldrb	r2, [r0, #8]
 80080ae:	4603      	mov	r3, r0
 80080b0:	b97a      	cbnz	r2, 80080d2 <next_unwind_byte+0x26>
 80080b2:	7a42      	ldrb	r2, [r0, #9]
 80080b4:	b1a2      	cbz	r2, 80080e0 <next_unwind_byte+0x34>
 80080b6:	6841      	ldr	r1, [r0, #4]
 80080b8:	3a01      	subs	r2, #1
 80080ba:	b410      	push	{r4}
 80080bc:	7242      	strb	r2, [r0, #9]
 80080be:	6808      	ldr	r0, [r1, #0]
 80080c0:	2203      	movs	r2, #3
 80080c2:	1d0c      	adds	r4, r1, #4
 80080c4:	721a      	strb	r2, [r3, #8]
 80080c6:	0202      	lsls	r2, r0, #8
 80080c8:	605c      	str	r4, [r3, #4]
 80080ca:	0e00      	lsrs	r0, r0, #24
 80080cc:	bc10      	pop	{r4}
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	4770      	bx	lr
 80080d2:	6800      	ldr	r0, [r0, #0]
 80080d4:	3a01      	subs	r2, #1
 80080d6:	721a      	strb	r2, [r3, #8]
 80080d8:	0202      	lsls	r2, r0, #8
 80080da:	601a      	str	r2, [r3, #0]
 80080dc:	0e00      	lsrs	r0, r0, #24
 80080de:	4770      	bx	lr
 80080e0:	20b0      	movs	r0, #176	; 0xb0
 80080e2:	4770      	bx	lr

080080e4 <_Unwind_GetGR.constprop.0>:
 80080e4:	b500      	push	{lr}
 80080e6:	b085      	sub	sp, #20
 80080e8:	2300      	movs	r3, #0
 80080ea:	aa03      	add	r2, sp, #12
 80080ec:	9200      	str	r2, [sp, #0]
 80080ee:	4619      	mov	r1, r3
 80080f0:	220c      	movs	r2, #12
 80080f2:	f7ff fca7 	bl	8007a44 <_Unwind_VRS_Get>
 80080f6:	9803      	ldr	r0, [sp, #12]
 80080f8:	b005      	add	sp, #20
 80080fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80080fe:	bf00      	nop

08008100 <unwind_UCB_from_context>:
 8008100:	f7ff bff0 	b.w	80080e4 <_Unwind_GetGR.constprop.0>

08008104 <__gnu_unwind_execute>:
 8008104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008108:	4606      	mov	r6, r0
 800810a:	b085      	sub	sp, #20
 800810c:	460d      	mov	r5, r1
 800810e:	f04f 0800 	mov.w	r8, #0
 8008112:	4628      	mov	r0, r5
 8008114:	f7ff ffca 	bl	80080ac <next_unwind_byte>
 8008118:	28b0      	cmp	r0, #176	; 0xb0
 800811a:	4604      	mov	r4, r0
 800811c:	f000 80da 	beq.w	80082d4 <__gnu_unwind_execute+0x1d0>
 8008120:	0607      	lsls	r7, r0, #24
 8008122:	d546      	bpl.n	80081b2 <__gnu_unwind_execute+0xae>
 8008124:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8008128:	2b80      	cmp	r3, #128	; 0x80
 800812a:	d05e      	beq.n	80081ea <__gnu_unwind_execute+0xe6>
 800812c:	2bb0      	cmp	r3, #176	; 0xb0
 800812e:	d073      	beq.n	8008218 <__gnu_unwind_execute+0x114>
 8008130:	d81b      	bhi.n	800816a <__gnu_unwind_execute+0x66>
 8008132:	2b90      	cmp	r3, #144	; 0x90
 8008134:	f000 809b 	beq.w	800826e <__gnu_unwind_execute+0x16a>
 8008138:	2ba0      	cmp	r3, #160	; 0xa0
 800813a:	d112      	bne.n	8008162 <__gnu_unwind_execute+0x5e>
 800813c:	43c3      	mvns	r3, r0
 800813e:	f003 0307 	and.w	r3, r3, #7
 8008142:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8008146:	411a      	asrs	r2, r3
 8008148:	0701      	lsls	r1, r0, #28
 800814a:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800814e:	d501      	bpl.n	8008154 <__gnu_unwind_execute+0x50>
 8008150:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008154:	2300      	movs	r3, #0
 8008156:	4619      	mov	r1, r3
 8008158:	4630      	mov	r0, r6
 800815a:	f7ff fe53 	bl	8007e04 <_Unwind_VRS_Pop>
 800815e:	2800      	cmp	r0, #0
 8008160:	d0d7      	beq.n	8008112 <__gnu_unwind_execute+0xe>
 8008162:	2009      	movs	r0, #9
 8008164:	b005      	add	sp, #20
 8008166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800816a:	2bc0      	cmp	r3, #192	; 0xc0
 800816c:	d16d      	bne.n	800824a <__gnu_unwind_execute+0x146>
 800816e:	28c6      	cmp	r0, #198	; 0xc6
 8008170:	f000 8093 	beq.w	800829a <__gnu_unwind_execute+0x196>
 8008174:	28c7      	cmp	r0, #199	; 0xc7
 8008176:	f000 80b2 	beq.w	80082de <__gnu_unwind_execute+0x1da>
 800817a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800817e:	2bc0      	cmp	r3, #192	; 0xc0
 8008180:	f000 80d2 	beq.w	8008328 <__gnu_unwind_execute+0x224>
 8008184:	28c8      	cmp	r0, #200	; 0xc8
 8008186:	f000 80dd 	beq.w	8008344 <__gnu_unwind_execute+0x240>
 800818a:	28c9      	cmp	r0, #201	; 0xc9
 800818c:	d1e9      	bne.n	8008162 <__gnu_unwind_execute+0x5e>
 800818e:	4628      	mov	r0, r5
 8008190:	f7ff ff8c 	bl	80080ac <next_unwind_byte>
 8008194:	0302      	lsls	r2, r0, #12
 8008196:	f000 000f 	and.w	r0, r0, #15
 800819a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800819e:	3001      	adds	r0, #1
 80081a0:	4302      	orrs	r2, r0
 80081a2:	2101      	movs	r1, #1
 80081a4:	2305      	movs	r3, #5
 80081a6:	4630      	mov	r0, r6
 80081a8:	f7ff fe2c 	bl	8007e04 <_Unwind_VRS_Pop>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d0b0      	beq.n	8008112 <__gnu_unwind_execute+0xe>
 80081b0:	e7d7      	b.n	8008162 <__gnu_unwind_execute+0x5e>
 80081b2:	0083      	lsls	r3, r0, #2
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	1d1f      	adds	r7, r3, #4
 80081b8:	f10d 090c 	add.w	r9, sp, #12
 80081bc:	2300      	movs	r3, #0
 80081be:	4619      	mov	r1, r3
 80081c0:	f8cd 9000 	str.w	r9, [sp]
 80081c4:	220d      	movs	r2, #13
 80081c6:	4630      	mov	r0, r6
 80081c8:	f7ff fc3c 	bl	8007a44 <_Unwind_VRS_Get>
 80081cc:	9b03      	ldr	r3, [sp, #12]
 80081ce:	f8cd 9000 	str.w	r9, [sp]
 80081d2:	0660      	lsls	r0, r4, #25
 80081d4:	bf4c      	ite	mi
 80081d6:	1bdf      	submi	r7, r3, r7
 80081d8:	18ff      	addpl	r7, r7, r3
 80081da:	2300      	movs	r3, #0
 80081dc:	220d      	movs	r2, #13
 80081de:	4619      	mov	r1, r3
 80081e0:	4630      	mov	r0, r6
 80081e2:	9703      	str	r7, [sp, #12]
 80081e4:	f7ff fc54 	bl	8007a90 <_Unwind_VRS_Set>
 80081e8:	e793      	b.n	8008112 <__gnu_unwind_execute+0xe>
 80081ea:	4628      	mov	r0, r5
 80081ec:	f7ff ff5e 	bl	80080ac <next_unwind_byte>
 80081f0:	0224      	lsls	r4, r4, #8
 80081f2:	4320      	orrs	r0, r4
 80081f4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80081f8:	d0b3      	beq.n	8008162 <__gnu_unwind_execute+0x5e>
 80081fa:	0104      	lsls	r4, r0, #4
 80081fc:	2300      	movs	r3, #0
 80081fe:	b2a2      	uxth	r2, r4
 8008200:	4619      	mov	r1, r3
 8008202:	4630      	mov	r0, r6
 8008204:	f7ff fdfe 	bl	8007e04 <_Unwind_VRS_Pop>
 8008208:	2800      	cmp	r0, #0
 800820a:	d1aa      	bne.n	8008162 <__gnu_unwind_execute+0x5e>
 800820c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8008210:	bf18      	it	ne
 8008212:	f04f 0801 	movne.w	r8, #1
 8008216:	e77c      	b.n	8008112 <__gnu_unwind_execute+0xe>
 8008218:	28b1      	cmp	r0, #177	; 0xb1
 800821a:	d051      	beq.n	80082c0 <__gnu_unwind_execute+0x1bc>
 800821c:	28b2      	cmp	r0, #178	; 0xb2
 800821e:	f000 80ad 	beq.w	800837c <__gnu_unwind_execute+0x278>
 8008222:	28b3      	cmp	r0, #179	; 0xb3
 8008224:	d06d      	beq.n	8008302 <__gnu_unwind_execute+0x1fe>
 8008226:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 800822a:	2bb4      	cmp	r3, #180	; 0xb4
 800822c:	d099      	beq.n	8008162 <__gnu_unwind_execute+0x5e>
 800822e:	f000 0207 	and.w	r2, r0, #7
 8008232:	3201      	adds	r2, #1
 8008234:	2301      	movs	r3, #1
 8008236:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800823a:	4619      	mov	r1, r3
 800823c:	4630      	mov	r0, r6
 800823e:	f7ff fde1 	bl	8007e04 <_Unwind_VRS_Pop>
 8008242:	2800      	cmp	r0, #0
 8008244:	f43f af65 	beq.w	8008112 <__gnu_unwind_execute+0xe>
 8008248:	e78b      	b.n	8008162 <__gnu_unwind_execute+0x5e>
 800824a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800824e:	2bd0      	cmp	r3, #208	; 0xd0
 8008250:	d187      	bne.n	8008162 <__gnu_unwind_execute+0x5e>
 8008252:	f000 0207 	and.w	r2, r0, #7
 8008256:	3201      	adds	r2, #1
 8008258:	2305      	movs	r3, #5
 800825a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800825e:	2101      	movs	r1, #1
 8008260:	4630      	mov	r0, r6
 8008262:	f7ff fdcf 	bl	8007e04 <_Unwind_VRS_Pop>
 8008266:	2800      	cmp	r0, #0
 8008268:	f43f af53 	beq.w	8008112 <__gnu_unwind_execute+0xe>
 800826c:	e779      	b.n	8008162 <__gnu_unwind_execute+0x5e>
 800826e:	f000 030d 	and.w	r3, r0, #13
 8008272:	2b0d      	cmp	r3, #13
 8008274:	f43f af75 	beq.w	8008162 <__gnu_unwind_execute+0x5e>
 8008278:	af03      	add	r7, sp, #12
 800827a:	2300      	movs	r3, #0
 800827c:	f000 020f 	and.w	r2, r0, #15
 8008280:	4619      	mov	r1, r3
 8008282:	9700      	str	r7, [sp, #0]
 8008284:	4630      	mov	r0, r6
 8008286:	f7ff fbdd 	bl	8007a44 <_Unwind_VRS_Get>
 800828a:	2300      	movs	r3, #0
 800828c:	9700      	str	r7, [sp, #0]
 800828e:	220d      	movs	r2, #13
 8008290:	4619      	mov	r1, r3
 8008292:	4630      	mov	r0, r6
 8008294:	f7ff fbfc 	bl	8007a90 <_Unwind_VRS_Set>
 8008298:	e73b      	b.n	8008112 <__gnu_unwind_execute+0xe>
 800829a:	4628      	mov	r0, r5
 800829c:	f7ff ff06 	bl	80080ac <next_unwind_byte>
 80082a0:	0302      	lsls	r2, r0, #12
 80082a2:	f000 000f 	and.w	r0, r0, #15
 80082a6:	3001      	adds	r0, #1
 80082a8:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80082ac:	2303      	movs	r3, #3
 80082ae:	4302      	orrs	r2, r0
 80082b0:	4619      	mov	r1, r3
 80082b2:	4630      	mov	r0, r6
 80082b4:	f7ff fda6 	bl	8007e04 <_Unwind_VRS_Pop>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	f43f af2a 	beq.w	8008112 <__gnu_unwind_execute+0xe>
 80082be:	e750      	b.n	8008162 <__gnu_unwind_execute+0x5e>
 80082c0:	4628      	mov	r0, r5
 80082c2:	f7ff fef3 	bl	80080ac <next_unwind_byte>
 80082c6:	1e43      	subs	r3, r0, #1
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b0e      	cmp	r3, #14
 80082cc:	4602      	mov	r2, r0
 80082ce:	f67f af41 	bls.w	8008154 <__gnu_unwind_execute+0x50>
 80082d2:	e746      	b.n	8008162 <__gnu_unwind_execute+0x5e>
 80082d4:	f1b8 0f00 	cmp.w	r8, #0
 80082d8:	d040      	beq.n	800835c <__gnu_unwind_execute+0x258>
 80082da:	2000      	movs	r0, #0
 80082dc:	e742      	b.n	8008164 <__gnu_unwind_execute+0x60>
 80082de:	4628      	mov	r0, r5
 80082e0:	f7ff fee4 	bl	80080ac <next_unwind_byte>
 80082e4:	1e43      	subs	r3, r0, #1
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b0e      	cmp	r3, #14
 80082ea:	4602      	mov	r2, r0
 80082ec:	f63f af39 	bhi.w	8008162 <__gnu_unwind_execute+0x5e>
 80082f0:	2300      	movs	r3, #0
 80082f2:	2104      	movs	r1, #4
 80082f4:	4630      	mov	r0, r6
 80082f6:	f7ff fd85 	bl	8007e04 <_Unwind_VRS_Pop>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	f43f af09 	beq.w	8008112 <__gnu_unwind_execute+0xe>
 8008300:	e72f      	b.n	8008162 <__gnu_unwind_execute+0x5e>
 8008302:	4628      	mov	r0, r5
 8008304:	f7ff fed2 	bl	80080ac <next_unwind_byte>
 8008308:	0302      	lsls	r2, r0, #12
 800830a:	f000 000f 	and.w	r0, r0, #15
 800830e:	3001      	adds	r0, #1
 8008310:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8008314:	2301      	movs	r3, #1
 8008316:	4302      	orrs	r2, r0
 8008318:	4619      	mov	r1, r3
 800831a:	4630      	mov	r0, r6
 800831c:	f7ff fd72 	bl	8007e04 <_Unwind_VRS_Pop>
 8008320:	2800      	cmp	r0, #0
 8008322:	f43f aef6 	beq.w	8008112 <__gnu_unwind_execute+0xe>
 8008326:	e71c      	b.n	8008162 <__gnu_unwind_execute+0x5e>
 8008328:	f000 020f 	and.w	r2, r0, #15
 800832c:	3201      	adds	r2, #1
 800832e:	2303      	movs	r3, #3
 8008330:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8008334:	4619      	mov	r1, r3
 8008336:	4630      	mov	r0, r6
 8008338:	f7ff fd64 	bl	8007e04 <_Unwind_VRS_Pop>
 800833c:	2800      	cmp	r0, #0
 800833e:	f43f aee8 	beq.w	8008112 <__gnu_unwind_execute+0xe>
 8008342:	e70e      	b.n	8008162 <__gnu_unwind_execute+0x5e>
 8008344:	4628      	mov	r0, r5
 8008346:	f7ff feb1 	bl	80080ac <next_unwind_byte>
 800834a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800834e:	f000 030f 	and.w	r3, r0, #15
 8008352:	3210      	adds	r2, #16
 8008354:	3301      	adds	r3, #1
 8008356:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800835a:	e722      	b.n	80081a2 <__gnu_unwind_execute+0x9e>
 800835c:	ac03      	add	r4, sp, #12
 800835e:	4643      	mov	r3, r8
 8008360:	4641      	mov	r1, r8
 8008362:	220e      	movs	r2, #14
 8008364:	9400      	str	r4, [sp, #0]
 8008366:	4630      	mov	r0, r6
 8008368:	f7ff fb6c 	bl	8007a44 <_Unwind_VRS_Get>
 800836c:	9400      	str	r4, [sp, #0]
 800836e:	4643      	mov	r3, r8
 8008370:	220f      	movs	r2, #15
 8008372:	4641      	mov	r1, r8
 8008374:	4630      	mov	r0, r6
 8008376:	f7ff fb8b 	bl	8007a90 <_Unwind_VRS_Set>
 800837a:	e7ae      	b.n	80082da <__gnu_unwind_execute+0x1d6>
 800837c:	2300      	movs	r3, #0
 800837e:	f10d 090c 	add.w	r9, sp, #12
 8008382:	220d      	movs	r2, #13
 8008384:	4619      	mov	r1, r3
 8008386:	f8cd 9000 	str.w	r9, [sp]
 800838a:	4630      	mov	r0, r6
 800838c:	f7ff fb5a 	bl	8007a44 <_Unwind_VRS_Get>
 8008390:	4628      	mov	r0, r5
 8008392:	f7ff fe8b 	bl	80080ac <next_unwind_byte>
 8008396:	0602      	lsls	r2, r0, #24
 8008398:	9c03      	ldr	r4, [sp, #12]
 800839a:	f04f 0702 	mov.w	r7, #2
 800839e:	d50b      	bpl.n	80083b8 <__gnu_unwind_execute+0x2b4>
 80083a0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80083a4:	40b8      	lsls	r0, r7
 80083a6:	4404      	add	r4, r0
 80083a8:	4628      	mov	r0, r5
 80083aa:	9403      	str	r4, [sp, #12]
 80083ac:	f7ff fe7e 	bl	80080ac <next_unwind_byte>
 80083b0:	0603      	lsls	r3, r0, #24
 80083b2:	f107 0707 	add.w	r7, r7, #7
 80083b6:	d4f3      	bmi.n	80083a0 <__gnu_unwind_execute+0x29c>
 80083b8:	fa00 f207 	lsl.w	r2, r0, r7
 80083bc:	f504 7401 	add.w	r4, r4, #516	; 0x204
 80083c0:	4422      	add	r2, r4
 80083c2:	2300      	movs	r3, #0
 80083c4:	9203      	str	r2, [sp, #12]
 80083c6:	f8cd 9000 	str.w	r9, [sp]
 80083ca:	220d      	movs	r2, #13
 80083cc:	4619      	mov	r1, r3
 80083ce:	4630      	mov	r0, r6
 80083d0:	f7ff fb5e 	bl	8007a90 <_Unwind_VRS_Set>
 80083d4:	e69d      	b.n	8008112 <__gnu_unwind_execute+0xe>
 80083d6:	bf00      	nop

080083d8 <__gnu_unwind_frame>:
 80083d8:	b510      	push	{r4, lr}
 80083da:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80083dc:	6853      	ldr	r3, [r2, #4]
 80083de:	b084      	sub	sp, #16
 80083e0:	f04f 0c03 	mov.w	ip, #3
 80083e4:	3208      	adds	r2, #8
 80083e6:	021c      	lsls	r4, r3, #8
 80083e8:	4608      	mov	r0, r1
 80083ea:	0e1b      	lsrs	r3, r3, #24
 80083ec:	a901      	add	r1, sp, #4
 80083ee:	9401      	str	r4, [sp, #4]
 80083f0:	9202      	str	r2, [sp, #8]
 80083f2:	f88d c00c 	strb.w	ip, [sp, #12]
 80083f6:	f88d 300d 	strb.w	r3, [sp, #13]
 80083fa:	f7ff fe83 	bl	8008104 <__gnu_unwind_execute>
 80083fe:	b004      	add	sp, #16
 8008400:	bd10      	pop	{r4, pc}
 8008402:	bf00      	nop

08008404 <_Unwind_GetRegionStart>:
 8008404:	b508      	push	{r3, lr}
 8008406:	f7ff fe7b 	bl	8008100 <unwind_UCB_from_context>
 800840a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800840c:	bd08      	pop	{r3, pc}
 800840e:	bf00      	nop

08008410 <_Unwind_GetLanguageSpecificData>:
 8008410:	b508      	push	{r3, lr}
 8008412:	f7ff fe75 	bl	8008100 <unwind_UCB_from_context>
 8008416:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008418:	79c3      	ldrb	r3, [r0, #7]
 800841a:	3302      	adds	r3, #2
 800841c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008420:	bd08      	pop	{r3, pc}
 8008422:	bf00      	nop

08008424 <_Unwind_GetDataRelBase>:
 8008424:	b508      	push	{r3, lr}
 8008426:	f7ff f891 	bl	800754c <abort>

0800842a <_Unwind_GetTextRelBase>:
 800842a:	b508      	push	{r3, lr}
 800842c:	f7ff fffa 	bl	8008424 <_Unwind_GetDataRelBase>

08008430 <memcpy>:
 8008430:	440a      	add	r2, r1
 8008432:	4291      	cmp	r1, r2
 8008434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008438:	d100      	bne.n	800843c <memcpy+0xc>
 800843a:	4770      	bx	lr
 800843c:	b510      	push	{r4, lr}
 800843e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008442:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008446:	4291      	cmp	r1, r2
 8008448:	d1f9      	bne.n	800843e <memcpy+0xe>
 800844a:	bd10      	pop	{r4, pc}

0800844c <_init>:
 800844c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844e:	bf00      	nop
 8008450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008452:	bc08      	pop	{r3}
 8008454:	469e      	mov	lr, r3
 8008456:	4770      	bx	lr

08008458 <_fini>:
 8008458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845a:	bf00      	nop
 800845c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800845e:	bc08      	pop	{r3}
 8008460:	469e      	mov	lr, r3
 8008462:	4770      	bx	lr
