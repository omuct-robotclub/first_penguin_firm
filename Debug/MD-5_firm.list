
MD-5_firm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004930  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004ab8  08004ab8  00014ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004af0  08004af0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004af0  08004af0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004af0  08004af0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004af0  08004af0  00014af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001f4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000200  20000200  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fed6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f2b  00000000  00000000  0002ff12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  00031e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d08  00000000  00000000  00032c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af1e  00000000  00000000  00033908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010468  00000000  00000000  0004e826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a30dd  00000000  00000000  0005ec8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00101d6b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a54  00000000  00000000  00101dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004aa0 	.word	0x08004aa0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004aa0 	.word	0x08004aa0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fd98 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f83e 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fae6 	bl	80007a4 <MX_GPIO_Init>
  MX_CAN_Init();
 80001d8:	f000 f89a 	bl	8000310 <MX_CAN_Init>
  MX_TIM1_Init();
 80001dc:	f000 f8ce 	bl	800037c <MX_TIM1_Init>
  MX_TIM2_Init();
 80001e0:	f000 f968 	bl	80004b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80001e4:	f000 f9e6 	bl	80005b4 <MX_TIM3_Init>
  MX_DMA_Init();
 80001e8:	f000 fabe 	bl	8000768 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80001ec:	f000 fa8c 	bl	8000708 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001f0:	2100      	movs	r1, #0
 80001f2:	4816      	ldr	r0, [pc, #88]	; (800024c <main+0x84>)
 80001f4:	f002 fea4 	bl	8002f40 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80001f8:	2100      	movs	r1, #0
 80001fa:	4814      	ldr	r0, [pc, #80]	; (800024c <main+0x84>)
 80001fc:	f003 ff3e 	bl	800407c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000200:	2104      	movs	r1, #4
 8000202:	4812      	ldr	r0, [pc, #72]	; (800024c <main+0x84>)
 8000204:	f002 fe9c 	bl	8002f40 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000208:	2104      	movs	r1, #4
 800020a:	4810      	ldr	r0, [pc, #64]	; (800024c <main+0x84>)
 800020c:	f003 ff36 	bl	800407c <HAL_TIMEx_PWMN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1600);
 8000210:	4b0e      	ldr	r3, [pc, #56]	; (800024c <main+0x84>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000218:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 300);
 800021a:	4b0c      	ldr	r3, [pc, #48]	; (800024c <main+0x84>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000222:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_Delay(1000);
 8000224:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000228:	f000 fdd0 	bl	8000dcc <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 300);
 800022c:	4b07      	ldr	r3, [pc, #28]	; (800024c <main+0x84>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000234:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1600);
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <main+0x84>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800023e:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_Delay(1000);
 8000240:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000244:	f000 fdc2 	bl	8000dcc <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1600);
 8000248:	e7e2      	b.n	8000210 <main+0x48>
 800024a:	bf00      	nop
 800024c:	20000050 	.word	0x20000050

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b096      	sub	sp, #88	; 0x58
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800025a:	2228      	movs	r2, #40	; 0x28
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f004 fc16 	bl	8004a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	f107 031c 	add.w	r3, r7, #28
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	609a      	str	r2, [r3, #8]
 8000270:	60da      	str	r2, [r3, #12]
 8000272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]
 800027c:	609a      	str	r2, [r3, #8]
 800027e:	60da      	str	r2, [r3, #12]
 8000280:	611a      	str	r2, [r3, #16]
 8000282:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000284:	2301      	movs	r3, #1
 8000286:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800028e:	2301      	movs	r3, #1
 8000290:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000292:	2301      	movs	r3, #1
 8000294:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000296:	2302      	movs	r3, #2
 8000298:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800029a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fa54 	bl	8001758 <HAL_RCC_OscConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002b6:	f000 fabf 	bl	8000838 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	230f      	movs	r3, #15
 80002bc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002be:	2302      	movs	r3, #2
 80002c0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d0:	f107 031c 	add.w	r3, r7, #28
 80002d4:	2102      	movs	r1, #2
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 fa7c 	bl	80027d4 <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002e2:	f000 faa9 	bl	8000838 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 80002e6:	f241 0301 	movw	r3, #4097	; 0x1001
 80002ea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002f0:	2300      	movs	r3, #0
 80002f2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	4618      	mov	r0, r3
 80002f8:	f002 fca4 	bl	8002c44 <HAL_RCCEx_PeriphCLKConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000302:	f000 fa99 	bl	8000838 <Error_Handler>
  }
}
 8000306:	bf00      	nop
 8000308:	3758      	adds	r7, #88	; 0x58
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000314:	4b17      	ldr	r3, [pc, #92]	; (8000374 <MX_CAN_Init+0x64>)
 8000316:	4a18      	ldr	r2, [pc, #96]	; (8000378 <MX_CAN_Init+0x68>)
 8000318:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800031a:	4b16      	ldr	r3, [pc, #88]	; (8000374 <MX_CAN_Init+0x64>)
 800031c:	2202      	movs	r2, #2
 800031e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000320:	4b14      	ldr	r3, [pc, #80]	; (8000374 <MX_CAN_Init+0x64>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000326:	4b13      	ldr	r3, [pc, #76]	; (8000374 <MX_CAN_Init+0x64>)
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <MX_CAN_Init+0x64>)
 800032e:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000332:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <MX_CAN_Init+0x64>)
 8000336:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800033a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800033c:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <MX_CAN_Init+0x64>)
 800033e:	2200      	movs	r2, #0
 8000340:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000342:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <MX_CAN_Init+0x64>)
 8000344:	2200      	movs	r2, #0
 8000346:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000348:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <MX_CAN_Init+0x64>)
 800034a:	2200      	movs	r2, #0
 800034c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800034e:	4b09      	ldr	r3, [pc, #36]	; (8000374 <MX_CAN_Init+0x64>)
 8000350:	2200      	movs	r2, #0
 8000352:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000354:	4b07      	ldr	r3, [pc, #28]	; (8000374 <MX_CAN_Init+0x64>)
 8000356:	2200      	movs	r2, #0
 8000358:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800035a:	4b06      	ldr	r3, [pc, #24]	; (8000374 <MX_CAN_Init+0x64>)
 800035c:	2200      	movs	r2, #0
 800035e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000360:	4804      	ldr	r0, [pc, #16]	; (8000374 <MX_CAN_Init+0x64>)
 8000362:	f000 fd57 	bl	8000e14 <HAL_CAN_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800036c:	f000 fa64 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000028 	.word	0x20000028
 8000378:	40006400 	.word	0x40006400

0800037c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b096      	sub	sp, #88	; 0x58
 8000380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000382:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800038e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	611a      	str	r2, [r3, #16]
 800039e:	615a      	str	r2, [r3, #20]
 80003a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	222c      	movs	r2, #44	; 0x2c
 80003a6:	2100      	movs	r1, #0
 80003a8:	4618      	mov	r0, r3
 80003aa:	f004 fb71 	bl	8004a90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003ae:	4b3f      	ldr	r3, [pc, #252]	; (80004ac <MX_TIM1_Init+0x130>)
 80003b0:	4a3f      	ldr	r2, [pc, #252]	; (80004b0 <MX_TIM1_Init+0x134>)
 80003b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003b4:	4b3d      	ldr	r3, [pc, #244]	; (80004ac <MX_TIM1_Init+0x130>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80003ba:	4b3c      	ldr	r3, [pc, #240]	; (80004ac <MX_TIM1_Init+0x130>)
 80003bc:	2220      	movs	r2, #32
 80003be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3277;
 80003c0:	4b3a      	ldr	r3, [pc, #232]	; (80004ac <MX_TIM1_Init+0x130>)
 80003c2:	f640 42cd 	movw	r2, #3277	; 0xccd
 80003c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c8:	4b38      	ldr	r3, [pc, #224]	; (80004ac <MX_TIM1_Init+0x130>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003ce:	4b37      	ldr	r3, [pc, #220]	; (80004ac <MX_TIM1_Init+0x130>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d4:	4b35      	ldr	r3, [pc, #212]	; (80004ac <MX_TIM1_Init+0x130>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003da:	4834      	ldr	r0, [pc, #208]	; (80004ac <MX_TIM1_Init+0x130>)
 80003dc:	f002 fd58 	bl	8002e90 <HAL_TIM_PWM_Init>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80003e6:	f000 fa27 	bl	8000838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ea:	2300      	movs	r3, #0
 80003ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003ee:	2300      	movs	r3, #0
 80003f0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f2:	2300      	movs	r3, #0
 80003f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80003fa:	4619      	mov	r1, r3
 80003fc:	482b      	ldr	r0, [pc, #172]	; (80004ac <MX_TIM1_Init+0x130>)
 80003fe:	f003 fee3 	bl	80041c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000408:	f000 fa16 	bl	8000838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800040c:	2360      	movs	r3, #96	; 0x60
 800040e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000414:	2300      	movs	r3, #0
 8000416:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000418:	2300      	movs	r3, #0
 800041a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800041c:	2300      	movs	r3, #0
 800041e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000420:	2300      	movs	r3, #0
 8000422:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000424:	2300      	movs	r3, #0
 8000426:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000428:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800042c:	2200      	movs	r2, #0
 800042e:	4619      	mov	r1, r3
 8000430:	481e      	ldr	r0, [pc, #120]	; (80004ac <MX_TIM1_Init+0x130>)
 8000432:	f002 ff65 	bl	8003300 <HAL_TIM_PWM_ConfigChannel>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800043c:	f000 f9fc 	bl	8000838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000440:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000444:	2204      	movs	r2, #4
 8000446:	4619      	mov	r1, r3
 8000448:	4818      	ldr	r0, [pc, #96]	; (80004ac <MX_TIM1_Init+0x130>)
 800044a:	f002 ff59 	bl	8003300 <HAL_TIM_PWM_ConfigChannel>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000454:	f000 f9f0 	bl	8000838 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000458:	2300      	movs	r3, #0
 800045a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800045c:	2300      	movs	r3, #0
 800045e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 16;
 8000464:	2310      	movs	r3, #16
 8000466:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000468:	2300      	movs	r3, #0
 800046a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800046c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000470:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000476:	2300      	movs	r3, #0
 8000478:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800047a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800047e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000484:	2300      	movs	r3, #0
 8000486:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	4619      	mov	r1, r3
 800048c:	4807      	ldr	r0, [pc, #28]	; (80004ac <MX_TIM1_Init+0x130>)
 800048e:	f003 ff09 	bl	80042a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000498:	f000 f9ce 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800049c:	4803      	ldr	r0, [pc, #12]	; (80004ac <MX_TIM1_Init+0x130>)
 800049e:	f000 fb01 	bl	8000aa4 <HAL_TIM_MspPostInit>

}
 80004a2:	bf00      	nop
 80004a4:	3758      	adds	r7, #88	; 0x58
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000050 	.word	0x20000050
 80004b0:	40012c00 	.word	0x40012c00

080004b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08c      	sub	sp, #48	; 0x30
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80004ba:	f107 031c 	add.w	r3, r7, #28
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
 80004c8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d8:	463b      	mov	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004e2:	4b33      	ldr	r3, [pc, #204]	; (80005b0 <MX_TIM2_Init+0xfc>)
 80004e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80004ea:	4b31      	ldr	r3, [pc, #196]	; (80005b0 <MX_TIM2_Init+0xfc>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f0:	4b2f      	ldr	r3, [pc, #188]	; (80005b0 <MX_TIM2_Init+0xfc>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80004f6:	4b2e      	ldr	r3, [pc, #184]	; (80005b0 <MX_TIM2_Init+0xfc>)
 80004f8:	f04f 32ff 	mov.w	r2, #4294967295
 80004fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004fe:	4b2c      	ldr	r3, [pc, #176]	; (80005b0 <MX_TIM2_Init+0xfc>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000504:	4b2a      	ldr	r3, [pc, #168]	; (80005b0 <MX_TIM2_Init+0xfc>)
 8000506:	2200      	movs	r2, #0
 8000508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800050a:	4829      	ldr	r0, [pc, #164]	; (80005b0 <MX_TIM2_Init+0xfc>)
 800050c:	f002 fe04 	bl	8003118 <HAL_TIM_IC_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000516:	f000 f98f 	bl	8000838 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800051a:	2304      	movs	r3, #4
 800051c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800051e:	2350      	movs	r3, #80	; 0x50
 8000520:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000522:	2300      	movs	r3, #0
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000526:	2300      	movs	r3, #0
 8000528:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800052e:	f107 031c 	add.w	r3, r7, #28
 8000532:	4619      	mov	r1, r3
 8000534:	481e      	ldr	r0, [pc, #120]	; (80005b0 <MX_TIM2_Init+0xfc>)
 8000536:	f002 fff7 	bl	8003528 <HAL_TIM_SlaveConfigSynchro>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000540:	f000 f97a 	bl	8000838 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000548:	2301      	movs	r3, #1
 800054a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	4619      	mov	r1, r3
 800055c:	4814      	ldr	r0, [pc, #80]	; (80005b0 <MX_TIM2_Init+0xfc>)
 800055e:	f002 fe32 	bl	80031c6 <HAL_TIM_IC_ConfigChannel>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000568:	f000 f966 	bl	8000838 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800056c:	2302      	movs	r3, #2
 800056e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000570:	2302      	movs	r3, #2
 8000572:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2204      	movs	r2, #4
 800057a:	4619      	mov	r1, r3
 800057c:	480c      	ldr	r0, [pc, #48]	; (80005b0 <MX_TIM2_Init+0xfc>)
 800057e:	f002 fe22 	bl	80031c6 <HAL_TIM_IC_ConfigChannel>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000588:	f000 f956 	bl	8000838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800058c:	2300      	movs	r3, #0
 800058e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000594:	463b      	mov	r3, r7
 8000596:	4619      	mov	r1, r3
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_TIM2_Init+0xfc>)
 800059a:	f003 fe15 	bl	80041c8 <HAL_TIMEx_MasterConfigSynchronization>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 80005a4:	f000 f948 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005a8:	bf00      	nop
 80005aa:	3730      	adds	r7, #48	; 0x30
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	2000009c 	.word	0x2000009c

080005b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80005ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80005ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]
 80005f2:	615a      	str	r2, [r3, #20]
 80005f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005f6:	4b42      	ldr	r3, [pc, #264]	; (8000700 <MX_TIM3_Init+0x14c>)
 80005f8:	4a42      	ldr	r2, [pc, #264]	; (8000704 <MX_TIM3_Init+0x150>)
 80005fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80005fc:	4b40      	ldr	r3, [pc, #256]	; (8000700 <MX_TIM3_Init+0x14c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000602:	4b3f      	ldr	r3, [pc, #252]	; (8000700 <MX_TIM3_Init+0x14c>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 8000608:	4b3d      	ldr	r3, [pc, #244]	; (8000700 <MX_TIM3_Init+0x14c>)
 800060a:	2259      	movs	r2, #89	; 0x59
 800060c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800060e:	4b3c      	ldr	r3, [pc, #240]	; (8000700 <MX_TIM3_Init+0x14c>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000614:	4b3a      	ldr	r3, [pc, #232]	; (8000700 <MX_TIM3_Init+0x14c>)
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800061a:	4839      	ldr	r0, [pc, #228]	; (8000700 <MX_TIM3_Init+0x14c>)
 800061c:	f002 fc38 	bl	8002e90 <HAL_TIM_PWM_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000626:	f000 f907 	bl	8000838 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800062a:	4835      	ldr	r0, [pc, #212]	; (8000700 <MX_TIM3_Init+0x14c>)
 800062c:	f002 fd74 	bl	8003118 <HAL_TIM_IC_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000636:	f000 f8ff 	bl	8000838 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800063a:	2304      	movs	r3, #4
 800063c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800063e:	2350      	movs	r3, #80	; 0x50
 8000640:	643b      	str	r3, [r7, #64]	; 0x40
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000642:	2300      	movs	r3, #0
 8000644:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	64bb      	str	r3, [r7, #72]	; 0x48
  sSlaveConfig.TriggerFilter = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800064e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000652:	4619      	mov	r1, r3
 8000654:	482a      	ldr	r0, [pc, #168]	; (8000700 <MX_TIM3_Init+0x14c>)
 8000656:	f002 ff67 	bl	8003528 <HAL_TIM_SlaveConfigSynchro>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000660:	f000 f8ea 	bl	8000838 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000664:	2300      	movs	r3, #0
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000668:	2301      	movs	r3, #1
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICFilter = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000674:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000678:	2200      	movs	r2, #0
 800067a:	4619      	mov	r1, r3
 800067c:	4820      	ldr	r0, [pc, #128]	; (8000700 <MX_TIM3_Init+0x14c>)
 800067e:	f002 fda2 	bl	80031c6 <HAL_TIM_IC_ConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000688:	f000 f8d6 	bl	8000838 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800068c:	2302      	movs	r3, #2
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000690:	2302      	movs	r3, #2
 8000692:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000694:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000698:	2204      	movs	r2, #4
 800069a:	4619      	mov	r1, r3
 800069c:	4818      	ldr	r0, [pc, #96]	; (8000700 <MX_TIM3_Init+0x14c>)
 800069e:	f002 fd92 	bl	80031c6 <HAL_TIM_IC_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 80006a8:	f000 f8c6 	bl	8000838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4619      	mov	r1, r3
 80006ba:	4811      	ldr	r0, [pc, #68]	; (8000700 <MX_TIM3_Init+0x14c>)
 80006bc:	f003 fd84 	bl	80041c8 <HAL_TIMEx_MasterConfigSynchronization>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 80006c6:	f000 f8b7 	bl	8000838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ca:	2360      	movs	r3, #96	; 0x60
 80006cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	220c      	movs	r2, #12
 80006de:	4619      	mov	r1, r3
 80006e0:	4807      	ldr	r0, [pc, #28]	; (8000700 <MX_TIM3_Init+0x14c>)
 80006e2:	f002 fe0d 	bl	8003300 <HAL_TIM_PWM_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM3_Init+0x13c>
  {
    Error_Handler();
 80006ec:	f000 f8a4 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006f0:	4803      	ldr	r0, [pc, #12]	; (8000700 <MX_TIM3_Init+0x14c>)
 80006f2:	f000 f9d7 	bl	8000aa4 <HAL_TIM_MspPostInit>

}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	; 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200000e8 	.word	0x200000e8
 8000704:	40000400 	.word	0x40000400

08000708 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800070e:	4a15      	ldr	r2, [pc, #84]	; (8000764 <MX_USART1_UART_Init+0x5c>)
 8000710:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000714:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000718:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART1_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART1_UART_Init+0x58>)
 800074c:	f003 fe47 	bl	80043de <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000756:	f000 f86f 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000178 	.word	0x20000178
 8000764:	40013800 	.word	0x40013800

08000768 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_DMA_Init+0x38>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <MX_DMA_Init+0x38>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6153      	str	r3, [r2, #20]
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_DMA_Init+0x38>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	200d      	movs	r0, #13
 800078c:	f000 fd19 	bl	80011c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000790:	200d      	movs	r0, #13
 8000792:	f000 fd32 	bl	80011fa <HAL_NVIC_EnableIRQ>

}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ba:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007c4:	6153      	str	r3, [r2, #20]
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	4a16      	ldr	r2, [pc, #88]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007dc:	6153      	str	r3, [r2, #20]
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	4a10      	ldr	r2, [pc, #64]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007f4:	6153      	str	r3, [r2, #20]
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISABLE_GPIO_Port, DISABLE_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2120      	movs	r1, #32
 8000806:	480b      	ldr	r0, [pc, #44]	; (8000834 <MX_GPIO_Init+0x90>)
 8000808:	f000 ff8e 	bl	8001728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISABLE_Pin */
  GPIO_InitStruct.Pin = DISABLE_Pin;
 800080c:	2320      	movs	r3, #32
 800080e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISABLE_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_GPIO_Init+0x90>)
 8000824:	f000 fe0e 	bl	8001444 <HAL_GPIO_Init>

}
 8000828:	bf00      	nop
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000
 8000834:	48000400 	.word	0x48000400

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	e7fe      	b.n	8000840 <Error_Handler+0x8>
	...

08000844 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <HAL_MspInit+0x44>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a0e      	ldr	r2, [pc, #56]	; (8000888 <HAL_MspInit+0x44>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6193      	str	r3, [r2, #24]
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <HAL_MspInit+0x44>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_MspInit+0x44>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_MspInit+0x44>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	61d3      	str	r3, [r2, #28]
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_MspInit+0x44>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a18      	ldr	r2, [pc, #96]	; (800090c <HAL_CAN_MspInit+0x80>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d129      	bne.n	8000902 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <HAL_CAN_MspInit+0x84>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	4a17      	ldr	r2, [pc, #92]	; (8000910 <HAL_CAN_MspInit+0x84>)
 80008b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008b8:	61d3      	str	r3, [r2, #28]
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_CAN_MspInit+0x84>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_CAN_MspInit+0x84>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	4a11      	ldr	r2, [pc, #68]	; (8000910 <HAL_CAN_MspInit+0x84>)
 80008cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d0:	6153      	str	r3, [r2, #20]
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <HAL_CAN_MspInit+0x84>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80008f0:	2309      	movs	r3, #9
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fe:	f000 fda1 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	; 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40006400 	.word	0x40006400
 8000910:	40021000 	.word	0x40021000

08000914 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a37      	ldr	r2, [pc, #220]	; (8000a10 <HAL_TIM_PWM_MspInit+0xfc>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d10c      	bne.n	8000950 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000936:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <HAL_TIM_PWM_MspInit+0x100>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	4a36      	ldr	r2, [pc, #216]	; (8000a14 <HAL_TIM_PWM_MspInit+0x100>)
 800093c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000940:	6193      	str	r3, [r2, #24]
 8000942:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <HAL_TIM_PWM_MspInit+0x100>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800094e:	e05a      	b.n	8000a06 <HAL_TIM_PWM_MspInit+0xf2>
  else if(htim_pwm->Instance==TIM3)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a30      	ldr	r2, [pc, #192]	; (8000a18 <HAL_TIM_PWM_MspInit+0x104>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d155      	bne.n	8000a06 <HAL_TIM_PWM_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800095a:	4b2e      	ldr	r3, [pc, #184]	; (8000a14 <HAL_TIM_PWM_MspInit+0x100>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	4a2d      	ldr	r2, [pc, #180]	; (8000a14 <HAL_TIM_PWM_MspInit+0x100>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	61d3      	str	r3, [r2, #28]
 8000966:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <HAL_TIM_PWM_MspInit+0x100>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <HAL_TIM_PWM_MspInit+0x100>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	4a27      	ldr	r2, [pc, #156]	; (8000a14 <HAL_TIM_PWM_MspInit+0x100>)
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	6153      	str	r3, [r2, #20]
 800097e:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <HAL_TIM_PWM_MspInit+0x100>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800098a:	2340      	movs	r3, #64	; 0x40
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800099a:	2302      	movs	r3, #2
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a8:	f000 fd4c 	bl	8001444 <HAL_GPIO_Init>
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <HAL_TIM_PWM_MspInit+0x108>)
 80009ae:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <HAL_TIM_PWM_MspInit+0x10c>)
 80009b0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <HAL_TIM_PWM_MspInit+0x108>)
 80009b4:	2210      	movs	r2, #16
 80009b6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <HAL_TIM_PWM_MspInit+0x108>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <HAL_TIM_PWM_MspInit+0x108>)
 80009c0:	2280      	movs	r2, #128	; 0x80
 80009c2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_TIM_PWM_MspInit+0x108>)
 80009c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ca:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <HAL_TIM_PWM_MspInit+0x108>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_TIM_PWM_MspInit+0x108>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <HAL_TIM_PWM_MspInit+0x108>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80009de:	480f      	ldr	r0, [pc, #60]	; (8000a1c <HAL_TIM_PWM_MspInit+0x108>)
 80009e0:	f000 fc25 	bl	800122e <HAL_DMA_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_TIM_PWM_MspInit+0xda>
      Error_Handler();
 80009ea:	f7ff ff25 	bl	8000838 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_TIM_PWM_MspInit+0x108>)
 80009f2:	631a      	str	r2, [r3, #48]	; 0x30
 80009f4:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <HAL_TIM_PWM_MspInit+0x108>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_TIM_PWM_MspInit+0x108>)
 80009fe:	621a      	str	r2, [r3, #32]
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <HAL_TIM_PWM_MspInit+0x108>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000a06:	bf00      	nop
 8000a08:	3728      	adds	r7, #40	; 0x28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40012c00 	.word	0x40012c00
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40000400 	.word	0x40000400
 8000a1c:	20000134 	.word	0x20000134
 8000a20:	40020030 	.word	0x40020030

08000a24 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a44:	d128      	bne.n	8000a98 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <HAL_TIM_IC_MspInit+0x7c>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	4a15      	ldr	r2, [pc, #84]	; (8000aa0 <HAL_TIM_IC_MspInit+0x7c>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	61d3      	str	r3, [r2, #28]
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <HAL_TIM_IC_MspInit+0x7c>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <HAL_TIM_IC_MspInit+0x7c>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <HAL_TIM_IC_MspInit+0x7c>)
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a68:	6153      	str	r3, [r2, #20]
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <HAL_TIM_IC_MspInit+0x7c>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a76:	2320      	movs	r3, #32
 8000a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a86:	2301      	movs	r3, #1
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f000 fcd6 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a98:	bf00      	nop
 8000a9a:	3728      	adds	r7, #40	; 0x28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a31      	ldr	r2, [pc, #196]	; (8000b88 <HAL_TIM_MspPostInit+0xe4>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d13a      	bne.n	8000b3c <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <HAL_TIM_MspPostInit+0xe8>)
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	4a30      	ldr	r2, [pc, #192]	; (8000b8c <HAL_TIM_MspPostInit+0xe8>)
 8000acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad0:	6153      	str	r3, [r2, #20]
 8000ad2:	4b2e      	ldr	r3, [pc, #184]	; (8000b8c <HAL_TIM_MspPostInit+0xe8>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <HAL_TIM_MspPostInit+0xe8>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	4a2a      	ldr	r2, [pc, #168]	; (8000b8c <HAL_TIM_MspPostInit+0xe8>)
 8000ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ae8:	6153      	str	r3, [r2, #20]
 8000aea:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <HAL_TIM_MspPostInit+0xe8>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000af6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000b08:	2306      	movs	r3, #6
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b16:	f000 fc95 	bl	8001444 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000b2a:	2306      	movs	r3, #6
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4816      	ldr	r0, [pc, #88]	; (8000b90 <HAL_TIM_MspPostInit+0xec>)
 8000b36:	f000 fc85 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b3a:	e020      	b.n	8000b7e <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM3)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <HAL_TIM_MspPostInit+0xf0>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d11b      	bne.n	8000b7e <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_TIM_MspPostInit+0xe8>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <HAL_TIM_MspPostInit+0xe8>)
 8000b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b50:	6153      	str	r3, [r2, #20]
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_TIM_MspPostInit+0xe8>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <HAL_TIM_MspPostInit+0xec>)
 8000b7a:	f000 fc63 	bl	8001444 <HAL_GPIO_Init>
}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	; 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40012c00 	.word	0x40012c00
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	48000400 	.word	0x48000400
 8000b94:	40000400 	.word	0x40000400

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <HAL_UART_MspInit+0x7c>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d127      	bne.n	8000c0a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	4a16      	ldr	r2, [pc, #88]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc4:	6193      	str	r3, [r2, #24]
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bdc:	6153      	str	r3, [r2, #20]
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bea:	23c0      	movs	r3, #192	; 0xc0
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <HAL_UART_MspInit+0x84>)
 8000c06:	f000 fc1d 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	; 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40013800 	.word	0x40013800
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	48000400 	.word	0x48000400

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6c:	f000 f88e 	bl	8000d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <DMA1_Channel3_IRQHandler+0x10>)
 8000c7a:	f000 fb1f 	bl	80012bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000134 	.word	0x20000134

08000c88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <SystemInit+0x20>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <SystemInit+0x20>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cb2:	490e      	ldr	r1, [pc, #56]	; (8000cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb4:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <LoopForever+0xe>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc8:	4c0b      	ldr	r4, [pc, #44]	; (8000cf8 <LoopForever+0x16>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cd6:	f7ff ffd7 	bl	8000c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cda:	f003 feb5 	bl	8004a48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cde:	f7ff fa73 	bl	80001c8 <main>

08000ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce2:	e7fe      	b.n	8000ce2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ce4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cf0:	08004af8 	.word	0x08004af8
  ldr r2, =_sbss
 8000cf4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cf8:	20000200 	.word	0x20000200

08000cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_2_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_Init+0x28>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_Init+0x28>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 fa4b 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	200f      	movs	r0, #15
 8000d18:	f000 f808 	bl	8000d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff fd92 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40022000 	.word	0x40022000

08000d2c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x54>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_InitTick+0x58>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fa63 	bl	8001216 <HAL_SYSTICK_Config>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00e      	b.n	8000d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b0f      	cmp	r3, #15
 8000d5e:	d80a      	bhi.n	8000d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d60:	2200      	movs	r2, #0
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f000 fa2b 	bl	80011c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d6c:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <HAL_InitTick+0x5c>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e000      	b.n	8000d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000000 	.word	0x20000000
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000004 	.word	0x20000004

08000d8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x20>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x24>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_IncTick+0x24>)
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000008 	.word	0x20000008
 8000db0:	200001fc 	.word	0x200001fc

08000db4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <HAL_GetTick+0x14>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	200001fc 	.word	0x200001fc

08000dcc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd4:	f7ff ffee 	bl	8000db4 <HAL_GetTick>
 8000dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de4:	d005      	beq.n	8000df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_Delay+0x44>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4413      	add	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000df2:	bf00      	nop
 8000df4:	f7ff ffde 	bl	8000db4 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d8f7      	bhi.n	8000df4 <HAL_Delay+0x28>
  {
  }
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008

08000e14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d101      	bne.n	8000e26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e0ed      	b.n	8001002 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d102      	bne.n	8000e38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff fd2a 	bl	800088c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0201 	orr.w	r2, r2, #1
 8000e46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e48:	f7ff ffb4 	bl	8000db4 <HAL_GetTick>
 8000e4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e4e:	e012      	b.n	8000e76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e50:	f7ff ffb0 	bl	8000db4 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b0a      	cmp	r3, #10
 8000e5c:	d90b      	bls.n	8000e76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2205      	movs	r2, #5
 8000e6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e0c5      	b.n	8001002 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0e5      	beq.n	8000e50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 0202 	bic.w	r2, r2, #2
 8000e92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e94:	f7ff ff8e 	bl	8000db4 <HAL_GetTick>
 8000e98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e9a:	e012      	b.n	8000ec2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e9c:	f7ff ff8a 	bl	8000db4 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b0a      	cmp	r3, #10
 8000ea8:	d90b      	bls.n	8000ec2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2205      	movs	r2, #5
 8000eba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e09f      	b.n	8001002 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1e5      	bne.n	8000e9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7e1b      	ldrb	r3, [r3, #24]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d108      	bne.n	8000eea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	e007      	b.n	8000efa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ef8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	7e5b      	ldrb	r3, [r3, #25]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d108      	bne.n	8000f14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	e007      	b.n	8000f24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7e9b      	ldrb	r3, [r3, #26]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d108      	bne.n	8000f3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 0220 	orr.w	r2, r2, #32
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	e007      	b.n	8000f4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 0220 	bic.w	r2, r2, #32
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	7edb      	ldrb	r3, [r3, #27]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d108      	bne.n	8000f68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f022 0210 	bic.w	r2, r2, #16
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	e007      	b.n	8000f78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f042 0210 	orr.w	r2, r2, #16
 8000f76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7f1b      	ldrb	r3, [r3, #28]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d108      	bne.n	8000f92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f042 0208 	orr.w	r2, r2, #8
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	e007      	b.n	8000fa2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0208 	bic.w	r2, r2, #8
 8000fa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	7f5b      	ldrb	r3, [r3, #29]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d108      	bne.n	8000fbc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f042 0204 	orr.w	r2, r2, #4
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	e007      	b.n	8000fcc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 0204 	bic.w	r2, r2, #4
 8000fca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	ea42 0103 	orr.w	r1, r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	1e5a      	subs	r2, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4907      	ldr	r1, [pc, #28]	; (80010a8 <__NVIC_EnableIRQ+0x38>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	; 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001178:	d301      	bcc.n	800117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2301      	movs	r3, #1
 800117c:	e00f      	b.n	800119e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <SysTick_Config+0x40>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001186:	210f      	movs	r1, #15
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f7ff ff8e 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <SysTick_Config+0x40>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <SysTick_Config+0x40>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff29 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff3e 	bl	8001054 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ff8e 	bl	8001100 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff5d 	bl	80010ac <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff31 	bl	8001070 <__NVIC_EnableIRQ>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffa2 	bl	8001168 <SysTick_Config>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e037      	b.n	80012b4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2202      	movs	r2, #2
 8001248:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800125a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800125e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001268:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001274:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001280:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	4313      	orrs	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 f8b4 	bl	8001404 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
}  
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	2204      	movs	r2, #4
 80012da:	409a      	lsls	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4013      	ands	r3, r2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d024      	beq.n	800132e <HAL_DMA_IRQHandler+0x72>
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d01f      	beq.n	800132e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0320 	and.w	r3, r3, #32
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d107      	bne.n	800130c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0204 	bic.w	r2, r2, #4
 800130a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001314:	2104      	movs	r1, #4
 8001316:	fa01 f202 	lsl.w	r2, r1, r2
 800131a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	2b00      	cmp	r3, #0
 8001322:	d06a      	beq.n	80013fa <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800132c:	e065      	b.n	80013fa <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	2202      	movs	r2, #2
 8001334:	409a      	lsls	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4013      	ands	r3, r2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d02c      	beq.n	8001398 <HAL_DMA_IRQHandler+0xdc>
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d027      	beq.n	8001398 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0320 	and.w	r3, r3, #32
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10b      	bne.n	800136e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 020a 	bic.w	r2, r2, #10
 8001364:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001376:	2102      	movs	r1, #2
 8001378:	fa01 f202 	lsl.w	r2, r1, r2
 800137c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	2b00      	cmp	r3, #0
 800138c:	d035      	beq.n	80013fa <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001396:	e030      	b.n	80013fa <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	2208      	movs	r2, #8
 800139e:	409a      	lsls	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d028      	beq.n	80013fa <HAL_DMA_IRQHandler+0x13e>
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d023      	beq.n	80013fa <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 020e 	bic.w	r2, r2, #14
 80013c0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ca:	2101      	movs	r1, #1
 80013cc:	fa01 f202 	lsl.w	r2, r1, r2
 80013d0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d004      	beq.n	80013fa <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	4798      	blx	r3
    }
  }
}  
 80013f8:	e7ff      	b.n	80013fa <HAL_DMA_IRQHandler+0x13e>
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <DMA_CalcBaseAndBitshift+0x34>)
 8001414:	4413      	add	r3, r2
 8001416:	4a09      	ldr	r2, [pc, #36]	; (800143c <DMA_CalcBaseAndBitshift+0x38>)
 8001418:	fba2 2303 	umull	r2, r3, r2, r3
 800141c:	091b      	lsrs	r3, r3, #4
 800141e:	009a      	lsls	r2, r3, #2
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a06      	ldr	r2, [pc, #24]	; (8001440 <DMA_CalcBaseAndBitshift+0x3c>)
 8001428:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	bffdfff8 	.word	0xbffdfff8
 800143c:	cccccccd 	.word	0xcccccccd
 8001440:	40020000 	.word	0x40020000

08001444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001452:	e14e      	b.n	80016f2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	2101      	movs	r1, #1
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	4013      	ands	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 8140 	beq.w	80016ec <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b01      	cmp	r3, #1
 8001476:	d005      	beq.n	8001484 <HAL_GPIO_Init+0x40>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d130      	bne.n	80014e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ba:	2201      	movs	r2, #1
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	091b      	lsrs	r3, r3, #4
 80014d0:	f003 0201 	and.w	r2, r3, #1
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d017      	beq.n	8001522 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	2203      	movs	r2, #3
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d123      	bne.n	8001576 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	08da      	lsrs	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3208      	adds	r2, #8
 8001536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	220f      	movs	r2, #15
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	691a      	ldr	r2, [r3, #16]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	08da      	lsrs	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3208      	adds	r2, #8
 8001570:	6939      	ldr	r1, [r7, #16]
 8001572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0203 	and.w	r2, r3, #3
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 809a 	beq.w	80016ec <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b8:	4b55      	ldr	r3, [pc, #340]	; (8001710 <HAL_GPIO_Init+0x2cc>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a54      	ldr	r2, [pc, #336]	; (8001710 <HAL_GPIO_Init+0x2cc>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b52      	ldr	r3, [pc, #328]	; (8001710 <HAL_GPIO_Init+0x2cc>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015d0:	4a50      	ldr	r2, [pc, #320]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	220f      	movs	r2, #15
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1e0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a46      	ldr	r2, [pc, #280]	; (8001718 <HAL_GPIO_Init+0x2d4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1dc>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a45      	ldr	r2, [pc, #276]	; (800171c <HAL_GPIO_Init+0x2d8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1d8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a44      	ldr	r2, [pc, #272]	; (8001720 <HAL_GPIO_Init+0x2dc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1d4>
 8001614:	2303      	movs	r3, #3
 8001616:	e006      	b.n	8001626 <HAL_GPIO_Init+0x1e2>
 8001618:	2305      	movs	r3, #5
 800161a:	e004      	b.n	8001626 <HAL_GPIO_Init+0x1e2>
 800161c:	2302      	movs	r3, #2
 800161e:	e002      	b.n	8001626 <HAL_GPIO_Init+0x1e2>
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <HAL_GPIO_Init+0x1e2>
 8001624:	2300      	movs	r3, #0
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	f002 0203 	and.w	r2, r2, #3
 800162c:	0092      	lsls	r2, r2, #2
 800162e:	4093      	lsls	r3, r2
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001636:	4937      	ldr	r1, [pc, #220]	; (8001714 <HAL_GPIO_Init+0x2d0>)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	089b      	lsrs	r3, r3, #2
 800163c:	3302      	adds	r3, #2
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001644:	4b37      	ldr	r3, [pc, #220]	; (8001724 <HAL_GPIO_Init+0x2e0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	43db      	mvns	r3, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001668:	4a2e      	ldr	r2, [pc, #184]	; (8001724 <HAL_GPIO_Init+0x2e0>)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800166e:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <HAL_GPIO_Init+0x2e0>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43db      	mvns	r3, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001692:	4a24      	ldr	r2, [pc, #144]	; (8001724 <HAL_GPIO_Init+0x2e0>)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <HAL_GPIO_Init+0x2e0>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016bc:	4a19      	ldr	r2, [pc, #100]	; (8001724 <HAL_GPIO_Init+0x2e0>)
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <HAL_GPIO_Init+0x2e0>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016e6:	4a0f      	ldr	r2, [pc, #60]	; (8001724 <HAL_GPIO_Init+0x2e0>)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	3301      	adds	r3, #1
 80016f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	fa22 f303 	lsr.w	r3, r2, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f47f aea9 	bne.w	8001454 <HAL_GPIO_Init+0x10>
  }
}
 8001702:	bf00      	nop
 8001704:	bf00      	nop
 8001706:	371c      	adds	r7, #28
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	40021000 	.word	0x40021000
 8001714:	40010000 	.word	0x40010000
 8001718:	48000400 	.word	0x48000400
 800171c:	48000800 	.word	0x48000800
 8001720:	48000c00 	.word	0x48000c00
 8001724:	40010400 	.word	0x40010400

08001728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	807b      	strh	r3, [r7, #2]
 8001734:	4613      	mov	r3, r2
 8001736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001738:	787b      	ldrb	r3, [r7, #1]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800173e:	887a      	ldrh	r2, [r7, #2]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001744:	e002      	b.n	800174c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800175e:	af00      	add	r7, sp, #0
 8001760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001764:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001768:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800176a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d102      	bne.n	800177e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	f001 b823 	b.w	80027c4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001782:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 817d 	beq.w	8001a8e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001794:	4bbc      	ldr	r3, [pc, #752]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b04      	cmp	r3, #4
 800179e:	d00c      	beq.n	80017ba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017a0:	4bb9      	ldr	r3, [pc, #740]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 030c 	and.w	r3, r3, #12
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d15c      	bne.n	8001866 <HAL_RCC_OscConfig+0x10e>
 80017ac:	4bb6      	ldr	r3, [pc, #728]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b8:	d155      	bne.n	8001866 <HAL_RCC_OscConfig+0x10e>
 80017ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017be:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017ce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d2:	fab3 f383 	clz	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	095b      	lsrs	r3, r3, #5
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d102      	bne.n	80017ec <HAL_RCC_OscConfig+0x94>
 80017e6:	4ba8      	ldr	r3, [pc, #672]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	e015      	b.n	8001818 <HAL_RCC_OscConfig+0xc0>
 80017ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017f0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80017f8:	fa93 f3a3 	rbit	r3, r3
 80017fc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001800:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001804:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001808:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800180c:	fa93 f3a3 	rbit	r3, r3
 8001810:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001814:	4b9c      	ldr	r3, [pc, #624]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800181c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001820:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001824:	fa92 f2a2 	rbit	r2, r2
 8001828:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800182c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001830:	fab2 f282 	clz	r2, r2
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	f042 0220 	orr.w	r2, r2, #32
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	f002 021f 	and.w	r2, r2, #31
 8001840:	2101      	movs	r1, #1
 8001842:	fa01 f202 	lsl.w	r2, r1, r2
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 811f 	beq.w	8001a8c <HAL_RCC_OscConfig+0x334>
 800184e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001852:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	f040 8116 	bne.w	8001a8c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	f000 bfaf 	b.w	80027c4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001876:	d106      	bne.n	8001886 <HAL_RCC_OscConfig+0x12e>
 8001878:	4b83      	ldr	r3, [pc, #524]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a82      	ldr	r2, [pc, #520]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 800187e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	e036      	b.n	80018f4 <HAL_RCC_OscConfig+0x19c>
 8001886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x158>
 8001896:	4b7c      	ldr	r3, [pc, #496]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a7b      	ldr	r2, [pc, #492]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 800189c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b79      	ldr	r3, [pc, #484]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a78      	ldr	r2, [pc, #480]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 80018a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e021      	b.n	80018f4 <HAL_RCC_OscConfig+0x19c>
 80018b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0x184>
 80018c2:	4b71      	ldr	r3, [pc, #452]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a70      	ldr	r2, [pc, #448]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b6e      	ldr	r3, [pc, #440]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a6d      	ldr	r2, [pc, #436]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0x19c>
 80018dc:	4b6a      	ldr	r3, [pc, #424]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a69      	ldr	r2, [pc, #420]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 80018e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b67      	ldr	r3, [pc, #412]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a66      	ldr	r2, [pc, #408]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 80018ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018f4:	4b64      	ldr	r3, [pc, #400]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	f023 020f 	bic.w	r2, r3, #15
 80018fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001900:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	495f      	ldr	r1, [pc, #380]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 800190a:	4313      	orrs	r3, r2
 800190c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800190e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001912:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d059      	beq.n	80019d2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191e:	f7ff fa49 	bl	8000db4 <HAL_GetTick>
 8001922:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	e00a      	b.n	800193e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff fa44 	bl	8000db4 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b64      	cmp	r3, #100	; 0x64
 8001936:	d902      	bls.n	800193e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	f000 bf43 	b.w	80027c4 <HAL_RCC_OscConfig+0x106c>
 800193e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001942:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001946:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800194a:	fa93 f3a3 	rbit	r3, r3
 800194e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001952:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	fab3 f383 	clz	r3, r3
 800195a:	b2db      	uxtb	r3, r3
 800195c:	095b      	lsrs	r3, r3, #5
 800195e:	b2db      	uxtb	r3, r3
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b01      	cmp	r3, #1
 8001968:	d102      	bne.n	8001970 <HAL_RCC_OscConfig+0x218>
 800196a:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	e015      	b.n	800199c <HAL_RCC_OscConfig+0x244>
 8001970:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001974:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800197c:	fa93 f3a3 	rbit	r3, r3
 8001980:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001984:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001988:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800198c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001998:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019a0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80019a4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80019a8:	fa92 f2a2 	rbit	r2, r2
 80019ac:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80019b0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80019b4:	fab2 f282 	clz	r2, r2
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	f042 0220 	orr.w	r2, r2, #32
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	f002 021f 	and.w	r2, r2, #31
 80019c4:	2101      	movs	r1, #1
 80019c6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0ab      	beq.n	8001928 <HAL_RCC_OscConfig+0x1d0>
 80019d0:	e05d      	b.n	8001a8e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d2:	f7ff f9ef 	bl	8000db4 <HAL_GetTick>
 80019d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019dc:	f7ff f9ea 	bl	8000db4 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b64      	cmp	r3, #100	; 0x64
 80019ea:	d902      	bls.n	80019f2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	f000 bee9 	b.w	80027c4 <HAL_RCC_OscConfig+0x106c>
 80019f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019f6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001a06:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0a:	fab3 f383 	clz	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	095b      	lsrs	r3, r3, #5
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d102      	bne.n	8001a24 <HAL_RCC_OscConfig+0x2cc>
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	e015      	b.n	8001a50 <HAL_RCC_OscConfig+0x2f8>
 8001a24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a28:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001a30:	fa93 f3a3 	rbit	r3, r3
 8001a34:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a3c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a40:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001a44:	fa93 f3a3 	rbit	r3, r3
 8001a48:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_RCC_OscConfig+0x330>)
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a54:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001a58:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a5c:	fa92 f2a2 	rbit	r2, r2
 8001a60:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001a64:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a68:	fab2 f282 	clz	r2, r2
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	f042 0220 	orr.w	r2, r2, #32
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	f002 021f 	and.w	r2, r2, #31
 8001a78:	2101      	movs	r1, #1
 8001a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1ab      	bne.n	80019dc <HAL_RCC_OscConfig+0x284>
 8001a84:	e003      	b.n	8001a8e <HAL_RCC_OscConfig+0x336>
 8001a86:	bf00      	nop
 8001a88:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 817d 	beq.w	8001d9e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001aa4:	4ba6      	ldr	r3, [pc, #664]	; (8001d40 <HAL_RCC_OscConfig+0x5e8>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00b      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ab0:	4ba3      	ldr	r3, [pc, #652]	; (8001d40 <HAL_RCC_OscConfig+0x5e8>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d172      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x44a>
 8001abc:	4ba0      	ldr	r3, [pc, #640]	; (8001d40 <HAL_RCC_OscConfig+0x5e8>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d16c      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x44a>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001ada:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ade:	fab3 f383 	clz	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	095b      	lsrs	r3, r3, #5
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d102      	bne.n	8001af8 <HAL_RCC_OscConfig+0x3a0>
 8001af2:	4b93      	ldr	r3, [pc, #588]	; (8001d40 <HAL_RCC_OscConfig+0x5e8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	e013      	b.n	8001b20 <HAL_RCC_OscConfig+0x3c8>
 8001af8:	2302      	movs	r3, #2
 8001afa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001b02:	fa93 f3a3 	rbit	r3, r3
 8001b06:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b10:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001b14:	fa93 f3a3 	rbit	r3, r3
 8001b18:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001b1c:	4b88      	ldr	r3, [pc, #544]	; (8001d40 <HAL_RCC_OscConfig+0x5e8>)
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	2202      	movs	r2, #2
 8001b22:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001b26:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b2a:	fa92 f2a2 	rbit	r2, r2
 8001b2e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001b32:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b36:	fab2 f282 	clz	r2, r2
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	f042 0220 	orr.w	r2, r2, #32
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	f002 021f 	and.w	r2, r2, #31
 8001b46:	2101      	movs	r1, #1
 8001b48:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00a      	beq.n	8001b68 <HAL_RCC_OscConfig+0x410>
 8001b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d002      	beq.n	8001b68 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	f000 be2e 	b.w	80027c4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b68:	4b75      	ldr	r3, [pc, #468]	; (8001d40 <HAL_RCC_OscConfig+0x5e8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	21f8      	movs	r1, #248	; 0xf8
 8001b7e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b86:	fa91 f1a1 	rbit	r1, r1
 8001b8a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b8e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b92:	fab1 f181 	clz	r1, r1
 8001b96:	b2c9      	uxtb	r1, r1
 8001b98:	408b      	lsls	r3, r1
 8001b9a:	4969      	ldr	r1, [pc, #420]	; (8001d40 <HAL_RCC_OscConfig+0x5e8>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba0:	e0fd      	b.n	8001d9e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 8088 	beq.w	8001cc4 <HAL_RCC_OscConfig+0x56c>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001bc6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	461a      	mov	r2, r3
 8001bdc:	2301      	movs	r3, #1
 8001bde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff f8e8 	bl	8000db4 <HAL_GetTick>
 8001be4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bea:	f7ff f8e3 	bl	8000db4 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d902      	bls.n	8001c00 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	f000 bde2 	b.w	80027c4 <HAL_RCC_OscConfig+0x106c>
 8001c00:	2302      	movs	r3, #2
 8001c02:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001c0a:	fa93 f3a3 	rbit	r3, r3
 8001c0e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001c12:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	095b      	lsrs	r3, r3, #5
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d102      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4d8>
 8001c2a:	4b45      	ldr	r3, [pc, #276]	; (8001d40 <HAL_RCC_OscConfig+0x5e8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	e013      	b.n	8001c58 <HAL_RCC_OscConfig+0x500>
 8001c30:	2302      	movs	r3, #2
 8001c32:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c42:	2302      	movs	r3, #2
 8001c44:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c48:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c4c:	fa93 f3a3 	rbit	r3, r3
 8001c50:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001c54:	4b3a      	ldr	r3, [pc, #232]	; (8001d40 <HAL_RCC_OscConfig+0x5e8>)
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	2202      	movs	r2, #2
 8001c5a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001c5e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c62:	fa92 f2a2 	rbit	r2, r2
 8001c66:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001c6a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001c6e:	fab2 f282 	clz	r2, r2
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	f042 0220 	orr.w	r2, r2, #32
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	f002 021f 	and.w	r2, r2, #31
 8001c7e:	2101      	movs	r1, #1
 8001c80:	fa01 f202 	lsl.w	r2, r1, r2
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0af      	beq.n	8001bea <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <HAL_RCC_OscConfig+0x5e8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	21f8      	movs	r1, #248	; 0xf8
 8001ca0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ca8:	fa91 f1a1 	rbit	r1, r1
 8001cac:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001cb0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001cb4:	fab1 f181 	clz	r1, r1
 8001cb8:	b2c9      	uxtb	r1, r1
 8001cba:	408b      	lsls	r3, r1
 8001cbc:	4920      	ldr	r1, [pc, #128]	; (8001d40 <HAL_RCC_OscConfig+0x5e8>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]
 8001cc2:	e06c      	b.n	8001d9e <HAL_RCC_OscConfig+0x646>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001cd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ce4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	461a      	mov	r2, r3
 8001cec:	2300      	movs	r3, #0
 8001cee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff f860 	bl	8000db4 <HAL_GetTick>
 8001cf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cfa:	f7ff f85b 	bl	8000db4 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d902      	bls.n	8001d10 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	f000 bd5a 	b.w	80027c4 <HAL_RCC_OscConfig+0x106c>
 8001d10:	2302      	movs	r3, #2
 8001d12:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001d22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	095b      	lsrs	r3, r3, #5
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d104      	bne.n	8001d44 <HAL_RCC_OscConfig+0x5ec>
 8001d3a:	4b01      	ldr	r3, [pc, #4]	; (8001d40 <HAL_RCC_OscConfig+0x5e8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	e015      	b.n	8001d6c <HAL_RCC_OscConfig+0x614>
 8001d40:	40021000 	.word	0x40021000
 8001d44:	2302      	movs	r3, #2
 8001d46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d56:	2302      	movs	r3, #2
 8001d58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d68:	4bc8      	ldr	r3, [pc, #800]	; (800208c <HAL_RCC_OscConfig+0x934>)
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001d72:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d76:	fa92 f2a2 	rbit	r2, r2
 8001d7a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001d7e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d82:	fab2 f282 	clz	r2, r2
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	f042 0220 	orr.w	r2, r2, #32
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	f002 021f 	and.w	r2, r2, #31
 8001d92:	2101      	movs	r1, #1
 8001d94:	fa01 f202 	lsl.w	r2, r1, r2
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1ad      	bne.n	8001cfa <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8110 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d079      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x760>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dda:	fab3 f383 	clz	r3, r3
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	4bab      	ldr	r3, [pc, #684]	; (8002090 <HAL_RCC_OscConfig+0x938>)
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	461a      	mov	r2, r3
 8001dea:	2301      	movs	r3, #1
 8001dec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dee:	f7fe ffe1 	bl	8000db4 <HAL_GetTick>
 8001df2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df8:	f7fe ffdc 	bl	8000db4 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d902      	bls.n	8001e0e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	f000 bcdb 	b.w	80027c4 <HAL_RCC_OscConfig+0x106c>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001e18:	fa93 f3a3 	rbit	r3, r3
 8001e1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e24:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e28:	2202      	movs	r2, #2
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e30:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	fa93 f2a3 	rbit	r2, r3
 8001e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	fa93 f2a3 	rbit	r2, r3
 8001e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e66:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e68:	4b88      	ldr	r3, [pc, #544]	; (800208c <HAL_RCC_OscConfig+0x934>)
 8001e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e74:	2102      	movs	r1, #2
 8001e76:	6019      	str	r1, [r3, #0]
 8001e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	fa93 f1a3 	rbit	r1, r3
 8001e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e8e:	6019      	str	r1, [r3, #0]
  return result;
 8001e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e94:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	f003 031f 	and.w	r3, r3, #31
 8001eaa:	2101      	movs	r1, #1
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0a0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x6a0>
 8001eb6:	e08d      	b.n	8001fd4 <HAL_RCC_OscConfig+0x87c>
 8001eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	fa93 f2a3 	rbit	r2, r3
 8001ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001eda:	601a      	str	r2, [r3, #0]
  return result;
 8001edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ee4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b68      	ldr	r3, [pc, #416]	; (8002090 <HAL_RCC_OscConfig+0x938>)
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efa:	f7fe ff5b 	bl	8000db4 <HAL_GetTick>
 8001efe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f04:	f7fe ff56 	bl	8000db4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d902      	bls.n	8001f1a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	f000 bc55 	b.w	80027c4 <HAL_RCC_OscConfig+0x106c>
 8001f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f22:	2202      	movs	r2, #2
 8001f24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	fa93 f2a3 	rbit	r2, r3
 8001f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f38:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f42:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f46:	2202      	movs	r2, #2
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	fa93 f2a3 	rbit	r2, r3
 8001f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	fa93 f2a3 	rbit	r2, r3
 8001f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f80:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f84:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f86:	4b41      	ldr	r3, [pc, #260]	; (800208c <HAL_RCC_OscConfig+0x934>)
 8001f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f92:	2102      	movs	r1, #2
 8001f94:	6019      	str	r1, [r3, #0]
 8001f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	fa93 f1a3 	rbit	r1, r3
 8001fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001fac:	6019      	str	r1, [r3, #0]
  return result;
 8001fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	2101      	movs	r1, #1
 8001fca:	fa01 f303 	lsl.w	r3, r1, r3
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d197      	bne.n	8001f04 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 81a1 	beq.w	800232c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff0:	4b26      	ldr	r3, [pc, #152]	; (800208c <HAL_RCC_OscConfig+0x934>)
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d116      	bne.n	800202a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffc:	4b23      	ldr	r3, [pc, #140]	; (800208c <HAL_RCC_OscConfig+0x934>)
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	4a22      	ldr	r2, [pc, #136]	; (800208c <HAL_RCC_OscConfig+0x934>)
 8002002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002006:	61d3      	str	r3, [r2, #28]
 8002008:	4b20      	ldr	r3, [pc, #128]	; (800208c <HAL_RCC_OscConfig+0x934>)
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002014:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002022:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002024:	2301      	movs	r3, #1
 8002026:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202a:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <HAL_RCC_OscConfig+0x93c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d11a      	bne.n	800206c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <HAL_RCC_OscConfig+0x93c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a16      	ldr	r2, [pc, #88]	; (8002094 <HAL_RCC_OscConfig+0x93c>)
 800203c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002040:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002042:	f7fe feb7 	bl	8000db4 <HAL_GetTick>
 8002046:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204a:	e009      	b.n	8002060 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204c:	f7fe feb2 	bl	8000db4 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b64      	cmp	r3, #100	; 0x64
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e3b1      	b.n	80027c4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <HAL_RCC_OscConfig+0x93c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ef      	beq.n	800204c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800206c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002070:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d10d      	bne.n	8002098 <HAL_RCC_OscConfig+0x940>
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <HAL_RCC_OscConfig+0x934>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	4a02      	ldr	r2, [pc, #8]	; (800208c <HAL_RCC_OscConfig+0x934>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6213      	str	r3, [r2, #32]
 8002088:	e03c      	b.n	8002104 <HAL_RCC_OscConfig+0x9ac>
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000
 8002090:	10908120 	.word	0x10908120
 8002094:	40007000 	.word	0x40007000
 8002098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10c      	bne.n	80020c2 <HAL_RCC_OscConfig+0x96a>
 80020a8:	4bc1      	ldr	r3, [pc, #772]	; (80023b0 <HAL_RCC_OscConfig+0xc58>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	4ac0      	ldr	r2, [pc, #768]	; (80023b0 <HAL_RCC_OscConfig+0xc58>)
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	6213      	str	r3, [r2, #32]
 80020b4:	4bbe      	ldr	r3, [pc, #760]	; (80023b0 <HAL_RCC_OscConfig+0xc58>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4abd      	ldr	r2, [pc, #756]	; (80023b0 <HAL_RCC_OscConfig+0xc58>)
 80020ba:	f023 0304 	bic.w	r3, r3, #4
 80020be:	6213      	str	r3, [r2, #32]
 80020c0:	e020      	b.n	8002104 <HAL_RCC_OscConfig+0x9ac>
 80020c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	2b05      	cmp	r3, #5
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0x994>
 80020d2:	4bb7      	ldr	r3, [pc, #732]	; (80023b0 <HAL_RCC_OscConfig+0xc58>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	4ab6      	ldr	r2, [pc, #728]	; (80023b0 <HAL_RCC_OscConfig+0xc58>)
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	6213      	str	r3, [r2, #32]
 80020de:	4bb4      	ldr	r3, [pc, #720]	; (80023b0 <HAL_RCC_OscConfig+0xc58>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4ab3      	ldr	r2, [pc, #716]	; (80023b0 <HAL_RCC_OscConfig+0xc58>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6213      	str	r3, [r2, #32]
 80020ea:	e00b      	b.n	8002104 <HAL_RCC_OscConfig+0x9ac>
 80020ec:	4bb0      	ldr	r3, [pc, #704]	; (80023b0 <HAL_RCC_OscConfig+0xc58>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4aaf      	ldr	r2, [pc, #700]	; (80023b0 <HAL_RCC_OscConfig+0xc58>)
 80020f2:	f023 0301 	bic.w	r3, r3, #1
 80020f6:	6213      	str	r3, [r2, #32]
 80020f8:	4bad      	ldr	r3, [pc, #692]	; (80023b0 <HAL_RCC_OscConfig+0xc58>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4aac      	ldr	r2, [pc, #688]	; (80023b0 <HAL_RCC_OscConfig+0xc58>)
 80020fe:	f023 0304 	bic.w	r3, r3, #4
 8002102:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002108:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 8081 	beq.w	8002218 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002116:	f7fe fe4d 	bl	8000db4 <HAL_GetTick>
 800211a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211e:	e00b      	b.n	8002138 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002120:	f7fe fe48 	bl	8000db4 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002130:	4293      	cmp	r3, r2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e345      	b.n	80027c4 <HAL_RCC_OscConfig+0x106c>
 8002138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002140:	2202      	movs	r2, #2
 8002142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002148:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	fa93 f2a3 	rbit	r2, r3
 8002152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002156:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002160:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002164:	2202      	movs	r2, #2
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	fa93 f2a3 	rbit	r2, r3
 8002176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800217e:	601a      	str	r2, [r3, #0]
  return result;
 8002180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002184:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002188:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	095b      	lsrs	r3, r3, #5
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d102      	bne.n	80021a4 <HAL_RCC_OscConfig+0xa4c>
 800219e:	4b84      	ldr	r3, [pc, #528]	; (80023b0 <HAL_RCC_OscConfig+0xc58>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	e013      	b.n	80021cc <HAL_RCC_OscConfig+0xa74>
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80021ac:	2202      	movs	r2, #2
 80021ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	fa93 f2a3 	rbit	r2, r3
 80021be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	4b79      	ldr	r3, [pc, #484]	; (80023b0 <HAL_RCC_OscConfig+0xc58>)
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021d0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80021d4:	2102      	movs	r1, #2
 80021d6:	6011      	str	r1, [r2, #0]
 80021d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021dc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	fa92 f1a2 	rbit	r1, r2
 80021e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021ea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80021ee:	6011      	str	r1, [r2, #0]
  return result;
 80021f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021f4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	fab2 f282 	clz	r2, r2
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	f002 021f 	and.w	r2, r2, #31
 800220a:	2101      	movs	r1, #1
 800220c:	fa01 f202 	lsl.w	r2, r1, r2
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d084      	beq.n	8002120 <HAL_RCC_OscConfig+0x9c8>
 8002216:	e07f      	b.n	8002318 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002218:	f7fe fdcc 	bl	8000db4 <HAL_GetTick>
 800221c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002220:	e00b      	b.n	800223a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7fe fdc7 	bl	8000db4 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e2c4      	b.n	80027c4 <HAL_RCC_OscConfig+0x106c>
 800223a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002242:	2202      	movs	r2, #2
 8002244:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	fa93 f2a3 	rbit	r2, r3
 8002254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002258:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002262:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002266:	2202      	movs	r2, #2
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	fa93 f2a3 	rbit	r2, r3
 8002278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002280:	601a      	str	r2, [r3, #0]
  return result;
 8002282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002286:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800228a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228c:	fab3 f383 	clz	r3, r3
 8002290:	b2db      	uxtb	r3, r3
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f043 0302 	orr.w	r3, r3, #2
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d102      	bne.n	80022a6 <HAL_RCC_OscConfig+0xb4e>
 80022a0:	4b43      	ldr	r3, [pc, #268]	; (80023b0 <HAL_RCC_OscConfig+0xc58>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	e013      	b.n	80022ce <HAL_RCC_OscConfig+0xb76>
 80022a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022aa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80022ae:	2202      	movs	r2, #2
 80022b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	fa93 f2a3 	rbit	r2, r3
 80022c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	4b39      	ldr	r3, [pc, #228]	; (80023b0 <HAL_RCC_OscConfig+0xc58>)
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022d2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80022d6:	2102      	movs	r1, #2
 80022d8:	6011      	str	r1, [r2, #0]
 80022da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022de:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	fa92 f1a2 	rbit	r1, r2
 80022e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ec:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80022f0:	6011      	str	r1, [r2, #0]
  return result;
 80022f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022f6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	fab2 f282 	clz	r2, r2
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	f002 021f 	and.w	r2, r2, #31
 800230c:	2101      	movs	r1, #1
 800230e:	fa01 f202 	lsl.w	r2, r1, r2
 8002312:	4013      	ands	r3, r2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d184      	bne.n	8002222 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002318:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800231c:	2b01      	cmp	r3, #1
 800231e:	d105      	bne.n	800232c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002320:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <HAL_RCC_OscConfig+0xc58>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	4a22      	ldr	r2, [pc, #136]	; (80023b0 <HAL_RCC_OscConfig+0xc58>)
 8002326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800232a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800232c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002330:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 8242 	beq.w	80027c2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800233e:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <HAL_RCC_OscConfig+0xc58>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b08      	cmp	r3, #8
 8002348:	f000 8213 	beq.w	8002772 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800234c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002350:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	2b02      	cmp	r3, #2
 800235a:	f040 8162 	bne.w	8002622 <HAL_RCC_OscConfig+0xeca>
 800235e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002362:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002366:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800236a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002370:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	fa93 f2a3 	rbit	r2, r3
 800237a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002382:	601a      	str	r2, [r3, #0]
  return result;
 8002384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002388:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800238c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002398:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	461a      	mov	r2, r3
 80023a0:	2300      	movs	r3, #0
 80023a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7fe fd06 	bl	8000db4 <HAL_GetTick>
 80023a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ac:	e00c      	b.n	80023c8 <HAL_RCC_OscConfig+0xc70>
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b4:	f7fe fcfe 	bl	8000db4 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e1fd      	b.n	80027c4 <HAL_RCC_OscConfig+0x106c>
 80023c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023cc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80023d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023da:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	fa93 f2a3 	rbit	r2, r3
 80023e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80023ec:	601a      	str	r2, [r3, #0]
  return result;
 80023ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80023f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f8:	fab3 f383 	clz	r3, r3
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	b2db      	uxtb	r3, r3
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b01      	cmp	r3, #1
 800240a:	d102      	bne.n	8002412 <HAL_RCC_OscConfig+0xcba>
 800240c:	4bb0      	ldr	r3, [pc, #704]	; (80026d0 <HAL_RCC_OscConfig+0xf78>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	e027      	b.n	8002462 <HAL_RCC_OscConfig+0xd0a>
 8002412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002416:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800241a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800241e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002424:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	fa93 f2a3 	rbit	r2, r3
 800242e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002432:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002440:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	fa93 f2a3 	rbit	r2, r3
 8002454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002458:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	4b9c      	ldr	r3, [pc, #624]	; (80026d0 <HAL_RCC_OscConfig+0xf78>)
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002466:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800246a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800246e:	6011      	str	r1, [r2, #0]
 8002470:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002474:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	fa92 f1a2 	rbit	r1, r2
 800247e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002482:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002486:	6011      	str	r1, [r2, #0]
  return result;
 8002488:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800248c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	fab2 f282 	clz	r2, r2
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	f042 0220 	orr.w	r2, r2, #32
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	f002 021f 	and.w	r2, r2, #31
 80024a2:	2101      	movs	r1, #1
 80024a4:	fa01 f202 	lsl.w	r2, r1, r2
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d182      	bne.n	80023b4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ae:	4b88      	ldr	r3, [pc, #544]	; (80026d0 <HAL_RCC_OscConfig+0xf78>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	430b      	orrs	r3, r1
 80024d0:	497f      	ldr	r1, [pc, #508]	; (80026d0 <HAL_RCC_OscConfig+0xf78>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	604b      	str	r3, [r1, #4]
 80024d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024da:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80024de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	fa93 f2a3 	rbit	r2, r3
 80024f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024fa:	601a      	str	r2, [r3, #0]
  return result;
 80024fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002500:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002504:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002510:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	461a      	mov	r2, r3
 8002518:	2301      	movs	r3, #1
 800251a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fe fc4a 	bl	8000db4 <HAL_GetTick>
 8002520:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002524:	e009      	b.n	800253a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002526:	f7fe fc45 	bl	8000db4 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e144      	b.n	80027c4 <HAL_RCC_OscConfig+0x106c>
 800253a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002542:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	fa93 f2a3 	rbit	r2, r3
 8002556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800255e:	601a      	str	r2, [r3, #0]
  return result;
 8002560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002564:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002568:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	095b      	lsrs	r3, r3, #5
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d102      	bne.n	8002584 <HAL_RCC_OscConfig+0xe2c>
 800257e:	4b54      	ldr	r3, [pc, #336]	; (80026d0 <HAL_RCC_OscConfig+0xf78>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	e027      	b.n	80025d4 <HAL_RCC_OscConfig+0xe7c>
 8002584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002588:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800258c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002596:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	fa93 f2a3 	rbit	r2, r3
 80025a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ae:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80025b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025bc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	fa93 f2a3 	rbit	r2, r3
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	4b3f      	ldr	r3, [pc, #252]	; (80026d0 <HAL_RCC_OscConfig+0xf78>)
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025d8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80025dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025e0:	6011      	str	r1, [r2, #0]
 80025e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025e6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	fa92 f1a2 	rbit	r1, r2
 80025f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025f4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80025f8:	6011      	str	r1, [r2, #0]
  return result;
 80025fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025fe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	fab2 f282 	clz	r2, r2
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	f042 0220 	orr.w	r2, r2, #32
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	f002 021f 	and.w	r2, r2, #31
 8002614:	2101      	movs	r1, #1
 8002616:	fa01 f202 	lsl.w	r2, r1, r2
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d082      	beq.n	8002526 <HAL_RCC_OscConfig+0xdce>
 8002620:	e0cf      	b.n	80027c2 <HAL_RCC_OscConfig+0x106a>
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800262a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800262e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002634:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	fa93 f2a3 	rbit	r2, r3
 800263e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002642:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002646:	601a      	str	r2, [r3, #0]
  return result;
 8002648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002650:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800265c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	461a      	mov	r2, r3
 8002664:	2300      	movs	r3, #0
 8002666:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe fba4 	bl	8000db4 <HAL_GetTick>
 800266c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002670:	e009      	b.n	8002686 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002672:	f7fe fb9f 	bl	8000db4 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e09e      	b.n	80027c4 <HAL_RCC_OscConfig+0x106c>
 8002686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800268e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002692:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002698:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	fa93 f2a3 	rbit	r2, r3
 80026a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026aa:	601a      	str	r2, [r3, #0]
  return result;
 80026ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	095b      	lsrs	r3, r3, #5
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d104      	bne.n	80026d4 <HAL_RCC_OscConfig+0xf7c>
 80026ca:	4b01      	ldr	r3, [pc, #4]	; (80026d0 <HAL_RCC_OscConfig+0xf78>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	e029      	b.n	8002724 <HAL_RCC_OscConfig+0xfcc>
 80026d0:	40021000 	.word	0x40021000
 80026d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	fa93 f2a3 	rbit	r2, r3
 80026f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002702:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	fa93 f2a3 	rbit	r2, r3
 8002716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <HAL_RCC_OscConfig+0x1078>)
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002728:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800272c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002730:	6011      	str	r1, [r2, #0]
 8002732:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002736:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	fa92 f1a2 	rbit	r1, r2
 8002740:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002744:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002748:	6011      	str	r1, [r2, #0]
  return result;
 800274a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800274e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	fab2 f282 	clz	r2, r2
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	f042 0220 	orr.w	r2, r2, #32
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	f002 021f 	and.w	r2, r2, #31
 8002764:	2101      	movs	r1, #1
 8002766:	fa01 f202 	lsl.w	r2, r1, r2
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d180      	bne.n	8002672 <HAL_RCC_OscConfig+0xf1a>
 8002770:	e027      	b.n	80027c2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002776:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e01e      	b.n	80027c4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002786:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_RCC_OscConfig+0x1078>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800278e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002792:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d10b      	bne.n	80027be <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80027a6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000

080027d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b09e      	sub	sp, #120	; 0x78
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e162      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027ec:	4b90      	ldr	r3, [pc, #576]	; (8002a30 <HAL_RCC_ClockConfig+0x25c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d910      	bls.n	800281c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fa:	4b8d      	ldr	r3, [pc, #564]	; (8002a30 <HAL_RCC_ClockConfig+0x25c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 0207 	bic.w	r2, r3, #7
 8002802:	498b      	ldr	r1, [pc, #556]	; (8002a30 <HAL_RCC_ClockConfig+0x25c>)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	4313      	orrs	r3, r2
 8002808:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280a:	4b89      	ldr	r3, [pc, #548]	; (8002a30 <HAL_RCC_ClockConfig+0x25c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d001      	beq.n	800281c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e14a      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002828:	4b82      	ldr	r3, [pc, #520]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	497f      	ldr	r1, [pc, #508]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80dc 	beq.w	8002a00 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d13c      	bne.n	80028ca <HAL_RCC_ClockConfig+0xf6>
 8002850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002854:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800285e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002860:	fab3 f383 	clz	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	b2db      	uxtb	r3, r3
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b01      	cmp	r3, #1
 8002872:	d102      	bne.n	800287a <HAL_RCC_ClockConfig+0xa6>
 8002874:	4b6f      	ldr	r3, [pc, #444]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	e00f      	b.n	800289a <HAL_RCC_ClockConfig+0xc6>
 800287a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800287e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	667b      	str	r3, [r7, #100]	; 0x64
 8002888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800288c:	663b      	str	r3, [r7, #96]	; 0x60
 800288e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002896:	4b67      	ldr	r3, [pc, #412]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800289e:	65ba      	str	r2, [r7, #88]	; 0x58
 80028a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028a2:	fa92 f2a2 	rbit	r2, r2
 80028a6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80028a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028aa:	fab2 f282 	clz	r2, r2
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	f042 0220 	orr.w	r2, r2, #32
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	f002 021f 	and.w	r2, r2, #31
 80028ba:	2101      	movs	r1, #1
 80028bc:	fa01 f202 	lsl.w	r2, r1, r2
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d17b      	bne.n	80029be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0f3      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d13c      	bne.n	800294c <HAL_RCC_ClockConfig+0x178>
 80028d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028da:	fa93 f3a3 	rbit	r3, r3
 80028de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d102      	bne.n	80028fc <HAL_RCC_ClockConfig+0x128>
 80028f6:	4b4f      	ldr	r3, [pc, #316]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	e00f      	b.n	800291c <HAL_RCC_ClockConfig+0x148>
 80028fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002900:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	647b      	str	r3, [r7, #68]	; 0x44
 800290a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290e:	643b      	str	r3, [r7, #64]	; 0x40
 8002910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002918:	4b46      	ldr	r3, [pc, #280]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002920:	63ba      	str	r2, [r7, #56]	; 0x38
 8002922:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002924:	fa92 f2a2 	rbit	r2, r2
 8002928:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800292a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800292c:	fab2 f282 	clz	r2, r2
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	f042 0220 	orr.w	r2, r2, #32
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	f002 021f 	and.w	r2, r2, #31
 800293c:	2101      	movs	r1, #1
 800293e:	fa01 f202 	lsl.w	r2, r1, r2
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d13a      	bne.n	80029be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0b2      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x2de>
 800294c:	2302      	movs	r3, #2
 800294e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	095b      	lsrs	r3, r3, #5
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b01      	cmp	r3, #1
 800296c:	d102      	bne.n	8002974 <HAL_RCC_ClockConfig+0x1a0>
 800296e:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	e00d      	b.n	8002990 <HAL_RCC_ClockConfig+0x1bc>
 8002974:	2302      	movs	r3, #2
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
 8002980:	2302      	movs	r3, #2
 8002982:	623b      	str	r3, [r7, #32]
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	4b29      	ldr	r3, [pc, #164]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	2202      	movs	r2, #2
 8002992:	61ba      	str	r2, [r7, #24]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	fa92 f2a2 	rbit	r2, r2
 800299a:	617a      	str	r2, [r7, #20]
  return result;
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	fab2 f282 	clz	r2, r2
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	f042 0220 	orr.w	r2, r2, #32
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	f002 021f 	and.w	r2, r2, #31
 80029ae:	2101      	movs	r1, #1
 80029b0:	fa01 f202 	lsl.w	r2, r1, r2
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e079      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029be:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f023 0203 	bic.w	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	491a      	ldr	r1, [pc, #104]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d0:	f7fe f9f0 	bl	8000db4 <HAL_GetTick>
 80029d4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d8:	f7fe f9ec 	bl	8000db4 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e061      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ee:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 020c 	and.w	r2, r3, #12
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d1eb      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_RCC_ClockConfig+0x25c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d214      	bcs.n	8002a38 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <HAL_RCC_ClockConfig+0x25c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 0207 	bic.w	r2, r3, #7
 8002a16:	4906      	ldr	r1, [pc, #24]	; (8002a30 <HAL_RCC_ClockConfig+0x25c>)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <HAL_RCC_ClockConfig+0x25c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e040      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x2de>
 8002a30:	40022000 	.word	0x40022000
 8002a34:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <HAL_RCC_ClockConfig+0x2e8>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	491a      	ldr	r1, [pc, #104]	; (8002abc <HAL_RCC_ClockConfig+0x2e8>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a62:	4b16      	ldr	r3, [pc, #88]	; (8002abc <HAL_RCC_ClockConfig+0x2e8>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4912      	ldr	r1, [pc, #72]	; (8002abc <HAL_RCC_ClockConfig+0x2e8>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a76:	f000 f829 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 8002a7a:	4601      	mov	r1, r0
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <HAL_RCC_ClockConfig+0x2e8>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a84:	22f0      	movs	r2, #240	; 0xf0
 8002a86:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	fa92 f2a2 	rbit	r2, r2
 8002a8e:	60fa      	str	r2, [r7, #12]
  return result;
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	fab2 f282 	clz	r2, r2
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	40d3      	lsrs	r3, r2
 8002a9a:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <HAL_RCC_ClockConfig+0x2ec>)
 8002a9c:	5cd3      	ldrb	r3, [r2, r3]
 8002a9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002aa2:	4a08      	ldr	r2, [pc, #32]	; (8002ac4 <HAL_RCC_ClockConfig+0x2f0>)
 8002aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002aa6:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <HAL_RCC_ClockConfig+0x2f4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe f93e 	bl	8000d2c <HAL_InitTick>
  
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3778      	adds	r7, #120	; 0x78
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	08004ab8 	.word	0x08004ab8
 8002ac4:	20000000 	.word	0x20000000
 8002ac8:	20000004 	.word	0x20000004

08002acc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b08b      	sub	sp, #44	; 0x2c
 8002ad0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	2300      	movs	r3, #0
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ae6:	4b29      	ldr	r3, [pc, #164]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d002      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0x30>
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d003      	beq.n	8002b02 <HAL_RCC_GetSysClockFreq+0x36>
 8002afa:	e03c      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002afc:	4b24      	ldr	r3, [pc, #144]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002afe:	623b      	str	r3, [r7, #32]
      break;
 8002b00:	e03c      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b08:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b0c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	fa92 f2a2 	rbit	r2, r2
 8002b14:	607a      	str	r2, [r7, #4]
  return result;
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	fab2 f282 	clz	r2, r2
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	40d3      	lsrs	r3, r2
 8002b20:	4a1c      	ldr	r2, [pc, #112]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b22:	5cd3      	ldrb	r3, [r2, r3]
 8002b24:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b26:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	220f      	movs	r2, #15
 8002b30:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	fa92 f2a2 	rbit	r2, r2
 8002b38:	60fa      	str	r2, [r7, #12]
  return result;
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	fab2 f282 	clz	r2, r2
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	40d3      	lsrs	r3, r2
 8002b44:	4a14      	ldr	r2, [pc, #80]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b46:	5cd3      	ldrb	r3, [r2, r3]
 8002b48:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b54:	4a0e      	ldr	r2, [pc, #56]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	fb02 f303 	mul.w	r3, r2, r3
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
 8002b64:	e004      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	4a0c      	ldr	r2, [pc, #48]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	623b      	str	r3, [r7, #32]
      break;
 8002b74:	e002      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b76:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002b78:	623b      	str	r3, [r7, #32]
      break;
 8002b7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	372c      	adds	r7, #44	; 0x2c
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	00f42400 	.word	0x00f42400
 8002b94:	08004ad0 	.word	0x08004ad0
 8002b98:	08004ae0 	.word	0x08004ae0
 8002b9c:	003d0900 	.word	0x003d0900
 8002ba0:	007a1200 	.word	0x007a1200

08002ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba8:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002baa:	681b      	ldr	r3, [r3, #0]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	20000000 	.word	0x20000000

08002bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002bc2:	f7ff ffef 	bl	8002ba4 <HAL_RCC_GetHCLKFreq>
 8002bc6:	4601      	mov	r1, r0
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bd0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002bd4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	fa92 f2a2 	rbit	r2, r2
 8002bdc:	603a      	str	r2, [r7, #0]
  return result;
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	fab2 f282 	clz	r2, r2
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	40d3      	lsrs	r3, r2
 8002be8:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002bea:	5cd3      	ldrb	r3, [r2, r3]
 8002bec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	08004ac8 	.word	0x08004ac8

08002c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002c06:	f7ff ffcd 	bl	8002ba4 <HAL_RCC_GetHCLKFreq>
 8002c0a:	4601      	mov	r1, r0
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002c14:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002c18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	fa92 f2a2 	rbit	r2, r2
 8002c20:	603a      	str	r2, [r7, #0]
  return result;
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	fab2 f282 	clz	r2, r2
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	40d3      	lsrs	r3, r2
 8002c2c:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002c2e:	5cd3      	ldrb	r3, [r2, r3]
 8002c30:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	08004ac8 	.word	0x08004ac8

08002c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b092      	sub	sp, #72	; 0x48
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80cd 	beq.w	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c68:	4b86      	ldr	r3, [pc, #536]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10e      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c74:	4b83      	ldr	r3, [pc, #524]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	4a82      	ldr	r2, [pc, #520]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	61d3      	str	r3, [r2, #28]
 8002c80:	4b80      	ldr	r3, [pc, #512]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c92:	4b7d      	ldr	r3, [pc, #500]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d118      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9e:	4b7a      	ldr	r3, [pc, #488]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a79      	ldr	r2, [pc, #484]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002caa:	f7fe f883 	bl	8000db4 <HAL_GetTick>
 8002cae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb2:	f7fe f87f 	bl	8000db4 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b64      	cmp	r3, #100	; 0x64
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e0db      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc4:	4b70      	ldr	r3, [pc, #448]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cd0:	4b6c      	ldr	r3, [pc, #432]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d07d      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d076      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cee:	4b65      	ldr	r3, [pc, #404]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cfc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4b5e      	ldr	r3, [pc, #376]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	461a      	mov	r2, r3
 8002d18:	2301      	movs	r3, #1
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d2c:	fab3 f383 	clz	r3, r3
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	461a      	mov	r2, r3
 8002d34:	4b55      	ldr	r3, [pc, #340]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d40:	4a50      	ldr	r2, [pc, #320]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d44:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d045      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7fe f830 	bl	8000db4 <HAL_GetTick>
 8002d54:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d56:	e00a      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d58:	f7fe f82c 	bl	8000db4 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e086      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	623b      	str	r3, [r7, #32]
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	fa93 f3a3 	rbit	r3, r3
 8002d84:	61fb      	str	r3, [r7, #28]
  return result;
 8002d86:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d88:	fab3 f383 	clz	r3, r3
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	f043 0302 	orr.w	r3, r3, #2
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d102      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002d9c:	4b39      	ldr	r3, [pc, #228]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	e007      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002da2:	2302      	movs	r3, #2
 8002da4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	fa93 f3a3 	rbit	r3, r3
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	4b35      	ldr	r3, [pc, #212]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2202      	movs	r2, #2
 8002db4:	613a      	str	r2, [r7, #16]
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	fa92 f2a2 	rbit	r2, r2
 8002dbc:	60fa      	str	r2, [r7, #12]
  return result;
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	fab2 f282 	clz	r2, r2
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	f002 021f 	and.w	r2, r2, #31
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0bd      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ddc:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4926      	ldr	r1, [pc, #152]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d105      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df6:	4b23      	ldr	r3, [pc, #140]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4a22      	ldr	r2, [pc, #136]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e00:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f023 0203 	bic.w	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	491a      	ldr	r1, [pc, #104]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e2c:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	f023 0210 	bic.w	r2, r3, #16
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4912      	ldr	r1, [pc, #72]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	490b      	ldr	r1, [pc, #44]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	4903      	ldr	r1, [pc, #12]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3748      	adds	r7, #72	; 0x48
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	10908100 	.word	0x10908100

08002e90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e049      	b.n	8002f36 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fd fd2c 	bl	8000914 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4610      	mov	r0, r2
 8002ed0:	f000 fb6c 	bl	80035ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <HAL_TIM_PWM_Start+0x24>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	bf14      	ite	ne
 8002f5c:	2301      	movne	r3, #1
 8002f5e:	2300      	moveq	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	e03c      	b.n	8002fde <HAL_TIM_PWM_Start+0x9e>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d109      	bne.n	8002f7e <HAL_TIM_PWM_Start+0x3e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	bf14      	ite	ne
 8002f76:	2301      	movne	r3, #1
 8002f78:	2300      	moveq	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	e02f      	b.n	8002fde <HAL_TIM_PWM_Start+0x9e>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d109      	bne.n	8002f98 <HAL_TIM_PWM_Start+0x58>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	bf14      	ite	ne
 8002f90:	2301      	movne	r3, #1
 8002f92:	2300      	moveq	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	e022      	b.n	8002fde <HAL_TIM_PWM_Start+0x9e>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b0c      	cmp	r3, #12
 8002f9c:	d109      	bne.n	8002fb2 <HAL_TIM_PWM_Start+0x72>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	bf14      	ite	ne
 8002faa:	2301      	movne	r3, #1
 8002fac:	2300      	moveq	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	e015      	b.n	8002fde <HAL_TIM_PWM_Start+0x9e>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b10      	cmp	r3, #16
 8002fb6:	d109      	bne.n	8002fcc <HAL_TIM_PWM_Start+0x8c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	bf14      	ite	ne
 8002fc4:	2301      	movne	r3, #1
 8002fc6:	2300      	moveq	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e008      	b.n	8002fde <HAL_TIM_PWM_Start+0x9e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	bf14      	ite	ne
 8002fd8:	2301      	movne	r3, #1
 8002fda:	2300      	moveq	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e088      	b.n	80030f8 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d104      	bne.n	8002ff6 <HAL_TIM_PWM_Start+0xb6>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ff4:	e023      	b.n	800303e <HAL_TIM_PWM_Start+0xfe>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d104      	bne.n	8003006 <HAL_TIM_PWM_Start+0xc6>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003004:	e01b      	b.n	800303e <HAL_TIM_PWM_Start+0xfe>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b08      	cmp	r3, #8
 800300a:	d104      	bne.n	8003016 <HAL_TIM_PWM_Start+0xd6>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003014:	e013      	b.n	800303e <HAL_TIM_PWM_Start+0xfe>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b0c      	cmp	r3, #12
 800301a:	d104      	bne.n	8003026 <HAL_TIM_PWM_Start+0xe6>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003024:	e00b      	b.n	800303e <HAL_TIM_PWM_Start+0xfe>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b10      	cmp	r3, #16
 800302a:	d104      	bne.n	8003036 <HAL_TIM_PWM_Start+0xf6>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003034:	e003      	b.n	800303e <HAL_TIM_PWM_Start+0xfe>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2202      	movs	r2, #2
 800303a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2201      	movs	r2, #1
 8003044:	6839      	ldr	r1, [r7, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fff3 	bl	8004032 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a2b      	ldr	r2, [pc, #172]	; (8003100 <HAL_TIM_PWM_Start+0x1c0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00e      	beq.n	8003074 <HAL_TIM_PWM_Start+0x134>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a2a      	ldr	r2, [pc, #168]	; (8003104 <HAL_TIM_PWM_Start+0x1c4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d009      	beq.n	8003074 <HAL_TIM_PWM_Start+0x134>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a28      	ldr	r2, [pc, #160]	; (8003108 <HAL_TIM_PWM_Start+0x1c8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d004      	beq.n	8003074 <HAL_TIM_PWM_Start+0x134>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a27      	ldr	r2, [pc, #156]	; (800310c <HAL_TIM_PWM_Start+0x1cc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d101      	bne.n	8003078 <HAL_TIM_PWM_Start+0x138>
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <HAL_TIM_PWM_Start+0x13a>
 8003078:	2300      	movs	r3, #0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d007      	beq.n	800308e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800308c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1b      	ldr	r2, [pc, #108]	; (8003100 <HAL_TIM_PWM_Start+0x1c0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d00e      	beq.n	80030b6 <HAL_TIM_PWM_Start+0x176>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a0:	d009      	beq.n	80030b6 <HAL_TIM_PWM_Start+0x176>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1a      	ldr	r2, [pc, #104]	; (8003110 <HAL_TIM_PWM_Start+0x1d0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d004      	beq.n	80030b6 <HAL_TIM_PWM_Start+0x176>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a14      	ldr	r2, [pc, #80]	; (8003104 <HAL_TIM_PWM_Start+0x1c4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d115      	bne.n	80030e2 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	4b15      	ldr	r3, [pc, #84]	; (8003114 <HAL_TIM_PWM_Start+0x1d4>)
 80030be:	4013      	ands	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b06      	cmp	r3, #6
 80030c6:	d015      	beq.n	80030f4 <HAL_TIM_PWM_Start+0x1b4>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ce:	d011      	beq.n	80030f4 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e0:	e008      	b.n	80030f4 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0201 	orr.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	e000      	b.n	80030f6 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40012c00 	.word	0x40012c00
 8003104:	40014000 	.word	0x40014000
 8003108:	40014400 	.word	0x40014400
 800310c:	40014800 	.word	0x40014800
 8003110:	40000400 	.word	0x40000400
 8003114:	00010007 	.word	0x00010007

08003118 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e049      	b.n	80031be <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fd fc70 	bl	8000a24 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3304      	adds	r3, #4
 8003154:	4619      	mov	r1, r3
 8003156:	4610      	mov	r0, r2
 8003158:	f000 fa28 	bl	80035ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e088      	b.n	80032f6 <HAL_TIM_IC_ConfigChannel+0x130>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d11b      	bne.n	800322a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	6819      	ldr	r1, [r3, #0]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f000 fd85 	bl	8003d10 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699a      	ldr	r2, [r3, #24]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 020c 	bic.w	r2, r2, #12
 8003214:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6999      	ldr	r1, [r3, #24]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	619a      	str	r2, [r3, #24]
 8003228:	e060      	b.n	80032ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b04      	cmp	r3, #4
 800322e:	d11c      	bne.n	800326a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	6819      	ldr	r1, [r3, #0]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f000 fdf1 	bl	8003e26 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003252:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6999      	ldr	r1, [r3, #24]
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	021a      	lsls	r2, r3, #8
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	619a      	str	r2, [r3, #24]
 8003268:	e040      	b.n	80032ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b08      	cmp	r3, #8
 800326e:	d11b      	bne.n	80032a8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	6819      	ldr	r1, [r3, #0]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f000 fe3e 	bl	8003f00 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69da      	ldr	r2, [r3, #28]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 020c 	bic.w	r2, r2, #12
 8003292:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69d9      	ldr	r1, [r3, #28]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	61da      	str	r2, [r3, #28]
 80032a6:	e021      	b.n	80032ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b0c      	cmp	r3, #12
 80032ac:	d11c      	bne.n	80032e8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	6819      	ldr	r1, [r3, #0]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f000 fe5b 	bl	8003f78 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69da      	ldr	r2, [r3, #28]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80032d0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69d9      	ldr	r1, [r3, #28]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	021a      	lsls	r2, r3, #8
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	61da      	str	r2, [r3, #28]
 80032e6:	e001      	b.n	80032ec <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800331a:	2302      	movs	r3, #2
 800331c:	e0ff      	b.n	800351e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b14      	cmp	r3, #20
 800332a:	f200 80f0 	bhi.w	800350e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800332e:	a201      	add	r2, pc, #4	; (adr r2, 8003334 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003334:	08003389 	.word	0x08003389
 8003338:	0800350f 	.word	0x0800350f
 800333c:	0800350f 	.word	0x0800350f
 8003340:	0800350f 	.word	0x0800350f
 8003344:	080033c9 	.word	0x080033c9
 8003348:	0800350f 	.word	0x0800350f
 800334c:	0800350f 	.word	0x0800350f
 8003350:	0800350f 	.word	0x0800350f
 8003354:	0800340b 	.word	0x0800340b
 8003358:	0800350f 	.word	0x0800350f
 800335c:	0800350f 	.word	0x0800350f
 8003360:	0800350f 	.word	0x0800350f
 8003364:	0800344b 	.word	0x0800344b
 8003368:	0800350f 	.word	0x0800350f
 800336c:	0800350f 	.word	0x0800350f
 8003370:	0800350f 	.word	0x0800350f
 8003374:	0800348d 	.word	0x0800348d
 8003378:	0800350f 	.word	0x0800350f
 800337c:	0800350f 	.word	0x0800350f
 8003380:	0800350f 	.word	0x0800350f
 8003384:	080034cd 	.word	0x080034cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	4618      	mov	r0, r3
 8003390:	f000 f984 	bl	800369c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699a      	ldr	r2, [r3, #24]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0208 	orr.w	r2, r2, #8
 80033a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0204 	bic.w	r2, r2, #4
 80033b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6999      	ldr	r1, [r3, #24]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	619a      	str	r2, [r3, #24]
      break;
 80033c6:	e0a5      	b.n	8003514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f9ea 	bl	80037a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699a      	ldr	r2, [r3, #24]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6999      	ldr	r1, [r3, #24]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	021a      	lsls	r2, r3, #8
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	619a      	str	r2, [r3, #24]
      break;
 8003408:	e084      	b.n	8003514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68b9      	ldr	r1, [r7, #8]
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fa49 	bl	80038a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69da      	ldr	r2, [r3, #28]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0208 	orr.w	r2, r2, #8
 8003424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0204 	bic.w	r2, r2, #4
 8003434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69d9      	ldr	r1, [r3, #28]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	61da      	str	r2, [r3, #28]
      break;
 8003448:	e064      	b.n	8003514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	4618      	mov	r0, r3
 8003452:	f000 faa7 	bl	80039a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69da      	ldr	r2, [r3, #28]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	69da      	ldr	r2, [r3, #28]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69d9      	ldr	r1, [r3, #28]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	021a      	lsls	r2, r3, #8
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	61da      	str	r2, [r3, #28]
      break;
 800348a:	e043      	b.n	8003514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 faea 	bl	8003a6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0208 	orr.w	r2, r2, #8
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0204 	bic.w	r2, r2, #4
 80034b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034ca:	e023      	b.n	8003514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fb28 	bl	8003b28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	021a      	lsls	r2, r3, #8
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800350c:	e002      	b.n	8003514 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	75fb      	strb	r3, [r7, #23]
      break;
 8003512:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800351c:	7dfb      	ldrb	r3, [r7, #23]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop

08003528 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_TIM_SlaveConfigSynchro+0x18>
 800353c:	2302      	movs	r3, #2
 800353e:	e031      	b.n	80035a4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003550:	6839      	ldr	r1, [r7, #0]
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fb48 	bl	8003be8 <TIM_SlaveTimer_SetConfig>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e018      	b.n	80035a4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003580:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003590:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a32      	ldr	r2, [pc, #200]	; (8003688 <TIM_Base_SetConfig+0xdc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d007      	beq.n	80035d4 <TIM_Base_SetConfig+0x28>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ca:	d003      	beq.n	80035d4 <TIM_Base_SetConfig+0x28>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a2f      	ldr	r2, [pc, #188]	; (800368c <TIM_Base_SetConfig+0xe0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d108      	bne.n	80035e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a27      	ldr	r2, [pc, #156]	; (8003688 <TIM_Base_SetConfig+0xdc>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <TIM_Base_SetConfig+0x6a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f4:	d00f      	beq.n	8003616 <TIM_Base_SetConfig+0x6a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a24      	ldr	r2, [pc, #144]	; (800368c <TIM_Base_SetConfig+0xe0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00b      	beq.n	8003616 <TIM_Base_SetConfig+0x6a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a23      	ldr	r2, [pc, #140]	; (8003690 <TIM_Base_SetConfig+0xe4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d007      	beq.n	8003616 <TIM_Base_SetConfig+0x6a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a22      	ldr	r2, [pc, #136]	; (8003694 <TIM_Base_SetConfig+0xe8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d003      	beq.n	8003616 <TIM_Base_SetConfig+0x6a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a21      	ldr	r2, [pc, #132]	; (8003698 <TIM_Base_SetConfig+0xec>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d108      	bne.n	8003628 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a0e      	ldr	r2, [pc, #56]	; (8003688 <TIM_Base_SetConfig+0xdc>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00b      	beq.n	800366c <TIM_Base_SetConfig+0xc0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a0e      	ldr	r2, [pc, #56]	; (8003690 <TIM_Base_SetConfig+0xe4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d007      	beq.n	800366c <TIM_Base_SetConfig+0xc0>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a0d      	ldr	r2, [pc, #52]	; (8003694 <TIM_Base_SetConfig+0xe8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d003      	beq.n	800366c <TIM_Base_SetConfig+0xc0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a0c      	ldr	r2, [pc, #48]	; (8003698 <TIM_Base_SetConfig+0xec>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d103      	bne.n	8003674 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	615a      	str	r2, [r3, #20]
}
 800367a:	bf00      	nop
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40012c00 	.word	0x40012c00
 800368c:	40000400 	.word	0x40000400
 8003690:	40014000 	.word	0x40014000
 8003694:	40014400 	.word	0x40014400
 8003698:	40014800 	.word	0x40014800

0800369c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	f023 0201 	bic.w	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0303 	bic.w	r3, r3, #3
 80036d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f023 0302 	bic.w	r3, r3, #2
 80036e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a28      	ldr	r2, [pc, #160]	; (8003798 <TIM_OC1_SetConfig+0xfc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00b      	beq.n	8003714 <TIM_OC1_SetConfig+0x78>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a27      	ldr	r2, [pc, #156]	; (800379c <TIM_OC1_SetConfig+0x100>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d007      	beq.n	8003714 <TIM_OC1_SetConfig+0x78>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a26      	ldr	r2, [pc, #152]	; (80037a0 <TIM_OC1_SetConfig+0x104>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d003      	beq.n	8003714 <TIM_OC1_SetConfig+0x78>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a25      	ldr	r2, [pc, #148]	; (80037a4 <TIM_OC1_SetConfig+0x108>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d10c      	bne.n	800372e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f023 0308 	bic.w	r3, r3, #8
 800371a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f023 0304 	bic.w	r3, r3, #4
 800372c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a19      	ldr	r2, [pc, #100]	; (8003798 <TIM_OC1_SetConfig+0xfc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00b      	beq.n	800374e <TIM_OC1_SetConfig+0xb2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a18      	ldr	r2, [pc, #96]	; (800379c <TIM_OC1_SetConfig+0x100>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d007      	beq.n	800374e <TIM_OC1_SetConfig+0xb2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a17      	ldr	r2, [pc, #92]	; (80037a0 <TIM_OC1_SetConfig+0x104>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d003      	beq.n	800374e <TIM_OC1_SetConfig+0xb2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a16      	ldr	r2, [pc, #88]	; (80037a4 <TIM_OC1_SetConfig+0x108>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d111      	bne.n	8003772 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800375c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4313      	orrs	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	621a      	str	r2, [r3, #32]
}
 800378c:	bf00      	nop
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	40012c00 	.word	0x40012c00
 800379c:	40014000 	.word	0x40014000
 80037a0:	40014400 	.word	0x40014400
 80037a4:	40014800 	.word	0x40014800

080037a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	f023 0210 	bic.w	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	021b      	lsls	r3, r3, #8
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f023 0320 	bic.w	r3, r3, #32
 80037f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a24      	ldr	r2, [pc, #144]	; (8003898 <TIM_OC2_SetConfig+0xf0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d10d      	bne.n	8003828 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003826:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a1b      	ldr	r2, [pc, #108]	; (8003898 <TIM_OC2_SetConfig+0xf0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d00b      	beq.n	8003848 <TIM_OC2_SetConfig+0xa0>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a1a      	ldr	r2, [pc, #104]	; (800389c <TIM_OC2_SetConfig+0xf4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d007      	beq.n	8003848 <TIM_OC2_SetConfig+0xa0>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a19      	ldr	r2, [pc, #100]	; (80038a0 <TIM_OC2_SetConfig+0xf8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d003      	beq.n	8003848 <TIM_OC2_SetConfig+0xa0>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a18      	ldr	r2, [pc, #96]	; (80038a4 <TIM_OC2_SetConfig+0xfc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d113      	bne.n	8003870 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800384e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003856:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	621a      	str	r2, [r3, #32]
}
 800388a:	bf00      	nop
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40012c00 	.word	0x40012c00
 800389c:	40014000 	.word	0x40014000
 80038a0:	40014400 	.word	0x40014400
 80038a4:	40014800 	.word	0x40014800

080038a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0303 	bic.w	r3, r3, #3
 80038e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a23      	ldr	r2, [pc, #140]	; (8003994 <TIM_OC3_SetConfig+0xec>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d10d      	bne.n	8003926 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003924:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1a      	ldr	r2, [pc, #104]	; (8003994 <TIM_OC3_SetConfig+0xec>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00b      	beq.n	8003946 <TIM_OC3_SetConfig+0x9e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a19      	ldr	r2, [pc, #100]	; (8003998 <TIM_OC3_SetConfig+0xf0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d007      	beq.n	8003946 <TIM_OC3_SetConfig+0x9e>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a18      	ldr	r2, [pc, #96]	; (800399c <TIM_OC3_SetConfig+0xf4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d003      	beq.n	8003946 <TIM_OC3_SetConfig+0x9e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a17      	ldr	r2, [pc, #92]	; (80039a0 <TIM_OC3_SetConfig+0xf8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d113      	bne.n	800396e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800394c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	621a      	str	r2, [r3, #32]
}
 8003988:	bf00      	nop
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	40012c00 	.word	0x40012c00
 8003998:	40014000 	.word	0x40014000
 800399c:	40014400 	.word	0x40014400
 80039a0:	40014800 	.word	0x40014800

080039a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	021b      	lsls	r3, r3, #8
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	031b      	lsls	r3, r3, #12
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a16      	ldr	r2, [pc, #88]	; (8003a5c <TIM_OC4_SetConfig+0xb8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00b      	beq.n	8003a20 <TIM_OC4_SetConfig+0x7c>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a15      	ldr	r2, [pc, #84]	; (8003a60 <TIM_OC4_SetConfig+0xbc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d007      	beq.n	8003a20 <TIM_OC4_SetConfig+0x7c>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a14      	ldr	r2, [pc, #80]	; (8003a64 <TIM_OC4_SetConfig+0xc0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d003      	beq.n	8003a20 <TIM_OC4_SetConfig+0x7c>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a13      	ldr	r2, [pc, #76]	; (8003a68 <TIM_OC4_SetConfig+0xc4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d109      	bne.n	8003a34 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	019b      	lsls	r3, r3, #6
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	621a      	str	r2, [r3, #32]
}
 8003a4e:	bf00      	nop
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40012c00 	.word	0x40012c00
 8003a60:	40014000 	.word	0x40014000
 8003a64:	40014400 	.word	0x40014400
 8003a68:	40014800 	.word	0x40014800

08003a6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ab0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	041b      	lsls	r3, r3, #16
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a15      	ldr	r2, [pc, #84]	; (8003b18 <TIM_OC5_SetConfig+0xac>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00b      	beq.n	8003ade <TIM_OC5_SetConfig+0x72>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a14      	ldr	r2, [pc, #80]	; (8003b1c <TIM_OC5_SetConfig+0xb0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d007      	beq.n	8003ade <TIM_OC5_SetConfig+0x72>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a13      	ldr	r2, [pc, #76]	; (8003b20 <TIM_OC5_SetConfig+0xb4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d003      	beq.n	8003ade <TIM_OC5_SetConfig+0x72>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <TIM_OC5_SetConfig+0xb8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d109      	bne.n	8003af2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ae4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	021b      	lsls	r3, r3, #8
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	621a      	str	r2, [r3, #32]
}
 8003b0c:	bf00      	nop
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	40012c00 	.word	0x40012c00
 8003b1c:	40014000 	.word	0x40014000
 8003b20:	40014400 	.word	0x40014400
 8003b24:	40014800 	.word	0x40014800

08003b28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	051b      	lsls	r3, r3, #20
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a16      	ldr	r2, [pc, #88]	; (8003bd8 <TIM_OC6_SetConfig+0xb0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00b      	beq.n	8003b9c <TIM_OC6_SetConfig+0x74>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a15      	ldr	r2, [pc, #84]	; (8003bdc <TIM_OC6_SetConfig+0xb4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d007      	beq.n	8003b9c <TIM_OC6_SetConfig+0x74>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <TIM_OC6_SetConfig+0xb8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d003      	beq.n	8003b9c <TIM_OC6_SetConfig+0x74>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <TIM_OC6_SetConfig+0xbc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d109      	bne.n	8003bb0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	029b      	lsls	r3, r3, #10
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	621a      	str	r2, [r3, #32]
}
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40012c00 	.word	0x40012c00
 8003bdc:	40014000 	.word	0x40014000
 8003be0:	40014400 	.word	0x40014400
 8003be4:	40014800 	.word	0x40014800

08003be8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c04:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c16:	f023 0307 	bic.w	r3, r3, #7
 8003c1a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b70      	cmp	r3, #112	; 0x70
 8003c34:	d01a      	beq.n	8003c6c <TIM_SlaveTimer_SetConfig+0x84>
 8003c36:	2b70      	cmp	r3, #112	; 0x70
 8003c38:	d860      	bhi.n	8003cfc <TIM_SlaveTimer_SetConfig+0x114>
 8003c3a:	2b60      	cmp	r3, #96	; 0x60
 8003c3c:	d054      	beq.n	8003ce8 <TIM_SlaveTimer_SetConfig+0x100>
 8003c3e:	2b60      	cmp	r3, #96	; 0x60
 8003c40:	d85c      	bhi.n	8003cfc <TIM_SlaveTimer_SetConfig+0x114>
 8003c42:	2b50      	cmp	r3, #80	; 0x50
 8003c44:	d046      	beq.n	8003cd4 <TIM_SlaveTimer_SetConfig+0xec>
 8003c46:	2b50      	cmp	r3, #80	; 0x50
 8003c48:	d858      	bhi.n	8003cfc <TIM_SlaveTimer_SetConfig+0x114>
 8003c4a:	2b40      	cmp	r3, #64	; 0x40
 8003c4c:	d019      	beq.n	8003c82 <TIM_SlaveTimer_SetConfig+0x9a>
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d854      	bhi.n	8003cfc <TIM_SlaveTimer_SetConfig+0x114>
 8003c52:	2b30      	cmp	r3, #48	; 0x30
 8003c54:	d055      	beq.n	8003d02 <TIM_SlaveTimer_SetConfig+0x11a>
 8003c56:	2b30      	cmp	r3, #48	; 0x30
 8003c58:	d850      	bhi.n	8003cfc <TIM_SlaveTimer_SetConfig+0x114>
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	d051      	beq.n	8003d02 <TIM_SlaveTimer_SetConfig+0x11a>
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d84c      	bhi.n	8003cfc <TIM_SlaveTimer_SetConfig+0x114>
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d04d      	beq.n	8003d02 <TIM_SlaveTimer_SetConfig+0x11a>
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	d04b      	beq.n	8003d02 <TIM_SlaveTimer_SetConfig+0x11a>
 8003c6a:	e047      	b.n	8003cfc <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6818      	ldr	r0, [r3, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	68d9      	ldr	r1, [r3, #12]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	f000 f9b9 	bl	8003ff2 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003c80:	e040      	b.n	8003d04 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b05      	cmp	r3, #5
 8003c88:	d101      	bne.n	8003c8e <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e03b      	b.n	8003d06 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6a1a      	ldr	r2, [r3, #32]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0201 	bic.w	r2, r2, #1
 8003ca4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cb4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	621a      	str	r2, [r3, #32]
      break;
 8003cd2:	e017      	b.n	8003d04 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	6899      	ldr	r1, [r3, #8]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f000 f871 	bl	8003dc8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003ce6:	e00d      	b.n	8003d04 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6818      	ldr	r0, [r3, #0]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	6899      	ldr	r1, [r3, #8]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	f000 f8d3 	bl	8003ea0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003cfa:	e003      	b.n	8003d04 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8003d00:	e000      	b.n	8003d04 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8003d02:	bf00      	nop
  }

  return status;
 8003d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f023 0201 	bic.w	r2, r3, #1
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4a20      	ldr	r2, [pc, #128]	; (8003dbc <TIM_TI1_SetConfig+0xac>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00b      	beq.n	8003d56 <TIM_TI1_SetConfig+0x46>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d44:	d007      	beq.n	8003d56 <TIM_TI1_SetConfig+0x46>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4a1d      	ldr	r2, [pc, #116]	; (8003dc0 <TIM_TI1_SetConfig+0xb0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d003      	beq.n	8003d56 <TIM_TI1_SetConfig+0x46>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4a1c      	ldr	r2, [pc, #112]	; (8003dc4 <TIM_TI1_SetConfig+0xb4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d101      	bne.n	8003d5a <TIM_TI1_SetConfig+0x4a>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <TIM_TI1_SetConfig+0x4c>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f023 0303 	bic.w	r3, r3, #3
 8003d66:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	e003      	b.n	8003d7a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f023 030a 	bic.w	r3, r3, #10
 8003d94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f003 030a 	and.w	r3, r3, #10
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	621a      	str	r2, [r3, #32]
}
 8003dae:	bf00      	nop
 8003db0:	371c      	adds	r7, #28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40012c00 	.word	0x40012c00
 8003dc0:	40000400 	.word	0x40000400
 8003dc4:	40014000 	.word	0x40014000

08003dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	f023 0201 	bic.w	r2, r3, #1
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f023 030a 	bic.w	r3, r3, #10
 8003e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	621a      	str	r2, [r3, #32]
}
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b087      	sub	sp, #28
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f023 0210 	bic.w	r2, r3, #16
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	021b      	lsls	r3, r3, #8
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	031b      	lsls	r3, r3, #12
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e78:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	621a      	str	r2, [r3, #32]
}
 8003e94:	bf00      	nop
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f023 0210 	bic.w	r2, r3, #16
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003eca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	031b      	lsls	r3, r3, #12
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003edc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	621a      	str	r2, [r3, #32]
}
 8003ef4:	bf00      	nop
 8003ef6:	371c      	adds	r7, #28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f023 0303 	bic.w	r3, r3, #3
 8003f2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003f50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	621a      	str	r2, [r3, #32]
}
 8003f6c:	bf00      	nop
 8003f6e:	371c      	adds	r7, #28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	021b      	lsls	r3, r3, #8
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fb6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	031b      	lsls	r3, r3, #12
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003fca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	031b      	lsls	r3, r3, #12
 8003fd0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	621a      	str	r2, [r3, #32]
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b087      	sub	sp, #28
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
 8003ffe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800400c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	021a      	lsls	r2, r3, #8
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	431a      	orrs	r2, r3
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4313      	orrs	r3, r2
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	609a      	str	r2, [r3, #8]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004032:	b480      	push	{r7}
 8004034:	b087      	sub	sp, #28
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f003 031f 	and.w	r3, r3, #31
 8004044:	2201      	movs	r2, #1
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a1a      	ldr	r2, [r3, #32]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	43db      	mvns	r3, r3
 8004054:	401a      	ands	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a1a      	ldr	r2, [r3, #32]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f003 031f 	and.w	r3, r3, #31
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	fa01 f303 	lsl.w	r3, r1, r3
 800406a:	431a      	orrs	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	621a      	str	r2, [r3, #32]
}
 8004070:	bf00      	nop
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d109      	bne.n	80040a0 <HAL_TIMEx_PWMN_Start+0x24>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b01      	cmp	r3, #1
 8004096:	bf14      	ite	ne
 8004098:	2301      	movne	r3, #1
 800409a:	2300      	moveq	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	e022      	b.n	80040e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d109      	bne.n	80040ba <HAL_TIMEx_PWMN_Start+0x3e>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	bf14      	ite	ne
 80040b2:	2301      	movne	r3, #1
 80040b4:	2300      	moveq	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	e015      	b.n	80040e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d109      	bne.n	80040d4 <HAL_TIMEx_PWMN_Start+0x58>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	bf14      	ite	ne
 80040cc:	2301      	movne	r3, #1
 80040ce:	2300      	moveq	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	e008      	b.n	80040e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	bf14      	ite	ne
 80040e0:	2301      	movne	r3, #1
 80040e2:	2300      	moveq	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e05f      	b.n	80041ae <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d104      	bne.n	80040fe <HAL_TIMEx_PWMN_Start+0x82>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040fc:	e013      	b.n	8004126 <HAL_TIMEx_PWMN_Start+0xaa>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b04      	cmp	r3, #4
 8004102:	d104      	bne.n	800410e <HAL_TIMEx_PWMN_Start+0x92>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800410c:	e00b      	b.n	8004126 <HAL_TIMEx_PWMN_Start+0xaa>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b08      	cmp	r3, #8
 8004112:	d104      	bne.n	800411e <HAL_TIMEx_PWMN_Start+0xa2>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800411c:	e003      	b.n	8004126 <HAL_TIMEx_PWMN_Start+0xaa>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2202      	movs	r2, #2
 8004122:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2204      	movs	r2, #4
 800412c:	6839      	ldr	r1, [r7, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f000 f930 	bl	8004394 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004142:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1b      	ldr	r2, [pc, #108]	; (80041b8 <HAL_TIMEx_PWMN_Start+0x13c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00e      	beq.n	800416c <HAL_TIMEx_PWMN_Start+0xf0>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004156:	d009      	beq.n	800416c <HAL_TIMEx_PWMN_Start+0xf0>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a17      	ldr	r2, [pc, #92]	; (80041bc <HAL_TIMEx_PWMN_Start+0x140>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d004      	beq.n	800416c <HAL_TIMEx_PWMN_Start+0xf0>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a16      	ldr	r2, [pc, #88]	; (80041c0 <HAL_TIMEx_PWMN_Start+0x144>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d115      	bne.n	8004198 <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <HAL_TIMEx_PWMN_Start+0x148>)
 8004174:	4013      	ands	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b06      	cmp	r3, #6
 800417c:	d015      	beq.n	80041aa <HAL_TIMEx_PWMN_Start+0x12e>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004184:	d011      	beq.n	80041aa <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0201 	orr.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004196:	e008      	b.n	80041aa <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	e000      	b.n	80041ac <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40012c00 	.word	0x40012c00
 80041bc:	40000400 	.word	0x40000400
 80041c0:	40014000 	.word	0x40014000
 80041c4:	00010007 	.word	0x00010007

080041c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041dc:	2302      	movs	r3, #2
 80041de:	e054      	b.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a24      	ldr	r2, [pc, #144]	; (8004298 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d108      	bne.n	800421c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004210:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004222:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a17      	ldr	r2, [pc, #92]	; (8004298 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d00e      	beq.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004248:	d009      	beq.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a13      	ldr	r2, [pc, #76]	; (800429c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d004      	beq.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a11      	ldr	r2, [pc, #68]	; (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d10c      	bne.n	8004278 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004264:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	4313      	orrs	r3, r2
 800426e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40012c00 	.word	0x40012c00
 800429c:	40000400 	.word	0x40000400
 80042a0:	40014000 	.word	0x40014000

080042a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042bc:	2302      	movs	r3, #2
 80042be:	e060      	b.n	8004382 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	4313      	orrs	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	041b      	lsls	r3, r3, #16
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a14      	ldr	r2, [pc, #80]	; (8004390 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d115      	bne.n	8004370 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	051b      	lsls	r3, r3, #20
 8004350:	4313      	orrs	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40012c00 	.word	0x40012c00

08004394 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f003 031f 	and.w	r3, r3, #31
 80043a6:	2204      	movs	r2, #4
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a1a      	ldr	r2, [r3, #32]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	43db      	mvns	r3, r3
 80043b6:	401a      	ands	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a1a      	ldr	r2, [r3, #32]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	fa01 f303 	lsl.w	r3, r1, r3
 80043cc:	431a      	orrs	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	621a      	str	r2, [r3, #32]
}
 80043d2:	bf00      	nop
 80043d4:	371c      	adds	r7, #28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b082      	sub	sp, #8
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e040      	b.n	8004472 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d106      	bne.n	8004406 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7fc fbc9 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2224      	movs	r2, #36	; 0x24
 800440a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0201 	bic.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f82d 	bl	800447c <UART_SetConfig>
 8004422:	4603      	mov	r3, r0
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e022      	b.n	8004472 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f957 	bl	80046e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004448:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004458:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f042 0201 	orr.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f9de 	bl	800482c <UART_CheckIdleState>
 8004470:	4603      	mov	r3, r0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	4b8a      	ldr	r3, [pc, #552]	; (80046d0 <UART_SetConfig+0x254>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	6979      	ldr	r1, [r7, #20]
 80044b0:	430b      	orrs	r3, r1
 80044b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a78      	ldr	r2, [pc, #480]	; (80046d4 <UART_SetConfig+0x258>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d120      	bne.n	800453a <UART_SetConfig+0xbe>
 80044f8:	4b77      	ldr	r3, [pc, #476]	; (80046d8 <UART_SetConfig+0x25c>)
 80044fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	2b03      	cmp	r3, #3
 8004502:	d817      	bhi.n	8004534 <UART_SetConfig+0xb8>
 8004504:	a201      	add	r2, pc, #4	; (adr r2, 800450c <UART_SetConfig+0x90>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	0800451d 	.word	0x0800451d
 8004510:	08004529 	.word	0x08004529
 8004514:	0800452f 	.word	0x0800452f
 8004518:	08004523 	.word	0x08004523
 800451c:	2300      	movs	r3, #0
 800451e:	77fb      	strb	r3, [r7, #31]
 8004520:	e01d      	b.n	800455e <UART_SetConfig+0xe2>
 8004522:	2302      	movs	r3, #2
 8004524:	77fb      	strb	r3, [r7, #31]
 8004526:	e01a      	b.n	800455e <UART_SetConfig+0xe2>
 8004528:	2304      	movs	r3, #4
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	e017      	b.n	800455e <UART_SetConfig+0xe2>
 800452e:	2308      	movs	r3, #8
 8004530:	77fb      	strb	r3, [r7, #31]
 8004532:	e014      	b.n	800455e <UART_SetConfig+0xe2>
 8004534:	2310      	movs	r3, #16
 8004536:	77fb      	strb	r3, [r7, #31]
 8004538:	e011      	b.n	800455e <UART_SetConfig+0xe2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a67      	ldr	r2, [pc, #412]	; (80046dc <UART_SetConfig+0x260>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d102      	bne.n	800454a <UART_SetConfig+0xce>
 8004544:	2300      	movs	r3, #0
 8004546:	77fb      	strb	r3, [r7, #31]
 8004548:	e009      	b.n	800455e <UART_SetConfig+0xe2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a64      	ldr	r2, [pc, #400]	; (80046e0 <UART_SetConfig+0x264>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d102      	bne.n	800455a <UART_SetConfig+0xde>
 8004554:	2300      	movs	r3, #0
 8004556:	77fb      	strb	r3, [r7, #31]
 8004558:	e001      	b.n	800455e <UART_SetConfig+0xe2>
 800455a:	2310      	movs	r3, #16
 800455c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004566:	d15b      	bne.n	8004620 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004568:	7ffb      	ldrb	r3, [r7, #31]
 800456a:	2b08      	cmp	r3, #8
 800456c:	d827      	bhi.n	80045be <UART_SetConfig+0x142>
 800456e:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <UART_SetConfig+0xf8>)
 8004570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004574:	08004599 	.word	0x08004599
 8004578:	080045a1 	.word	0x080045a1
 800457c:	080045a9 	.word	0x080045a9
 8004580:	080045bf 	.word	0x080045bf
 8004584:	080045af 	.word	0x080045af
 8004588:	080045bf 	.word	0x080045bf
 800458c:	080045bf 	.word	0x080045bf
 8004590:	080045bf 	.word	0x080045bf
 8004594:	080045b7 	.word	0x080045b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004598:	f7fe fb10 	bl	8002bbc <HAL_RCC_GetPCLK1Freq>
 800459c:	61b8      	str	r0, [r7, #24]
        break;
 800459e:	e013      	b.n	80045c8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045a0:	f7fe fb2e 	bl	8002c00 <HAL_RCC_GetPCLK2Freq>
 80045a4:	61b8      	str	r0, [r7, #24]
        break;
 80045a6:	e00f      	b.n	80045c8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045a8:	4b4e      	ldr	r3, [pc, #312]	; (80046e4 <UART_SetConfig+0x268>)
 80045aa:	61bb      	str	r3, [r7, #24]
        break;
 80045ac:	e00c      	b.n	80045c8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ae:	f7fe fa8d 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 80045b2:	61b8      	str	r0, [r7, #24]
        break;
 80045b4:	e008      	b.n	80045c8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ba:	61bb      	str	r3, [r7, #24]
        break;
 80045bc:	e004      	b.n	80045c8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	77bb      	strb	r3, [r7, #30]
        break;
 80045c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d074      	beq.n	80046b8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	005a      	lsls	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	085b      	lsrs	r3, r3, #1
 80045d8:	441a      	add	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b0f      	cmp	r3, #15
 80045ea:	d916      	bls.n	800461a <UART_SetConfig+0x19e>
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f2:	d212      	bcs.n	800461a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f023 030f 	bic.w	r3, r3, #15
 80045fc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	085b      	lsrs	r3, r3, #1
 8004602:	b29b      	uxth	r3, r3
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	b29a      	uxth	r2, r3
 800460a:	89fb      	ldrh	r3, [r7, #14]
 800460c:	4313      	orrs	r3, r2
 800460e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	89fa      	ldrh	r2, [r7, #14]
 8004616:	60da      	str	r2, [r3, #12]
 8004618:	e04e      	b.n	80046b8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	77bb      	strb	r3, [r7, #30]
 800461e:	e04b      	b.n	80046b8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004620:	7ffb      	ldrb	r3, [r7, #31]
 8004622:	2b08      	cmp	r3, #8
 8004624:	d827      	bhi.n	8004676 <UART_SetConfig+0x1fa>
 8004626:	a201      	add	r2, pc, #4	; (adr r2, 800462c <UART_SetConfig+0x1b0>)
 8004628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462c:	08004651 	.word	0x08004651
 8004630:	08004659 	.word	0x08004659
 8004634:	08004661 	.word	0x08004661
 8004638:	08004677 	.word	0x08004677
 800463c:	08004667 	.word	0x08004667
 8004640:	08004677 	.word	0x08004677
 8004644:	08004677 	.word	0x08004677
 8004648:	08004677 	.word	0x08004677
 800464c:	0800466f 	.word	0x0800466f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004650:	f7fe fab4 	bl	8002bbc <HAL_RCC_GetPCLK1Freq>
 8004654:	61b8      	str	r0, [r7, #24]
        break;
 8004656:	e013      	b.n	8004680 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004658:	f7fe fad2 	bl	8002c00 <HAL_RCC_GetPCLK2Freq>
 800465c:	61b8      	str	r0, [r7, #24]
        break;
 800465e:	e00f      	b.n	8004680 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004660:	4b20      	ldr	r3, [pc, #128]	; (80046e4 <UART_SetConfig+0x268>)
 8004662:	61bb      	str	r3, [r7, #24]
        break;
 8004664:	e00c      	b.n	8004680 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004666:	f7fe fa31 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 800466a:	61b8      	str	r0, [r7, #24]
        break;
 800466c:	e008      	b.n	8004680 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800466e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004672:	61bb      	str	r3, [r7, #24]
        break;
 8004674:	e004      	b.n	8004680 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	77bb      	strb	r3, [r7, #30]
        break;
 800467e:	bf00      	nop
    }

    if (pclk != 0U)
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d018      	beq.n	80046b8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	085a      	lsrs	r2, r3, #1
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	441a      	add	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	b29b      	uxth	r3, r3
 800469a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2b0f      	cmp	r3, #15
 80046a0:	d908      	bls.n	80046b4 <UART_SetConfig+0x238>
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a8:	d204      	bcs.n	80046b4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	60da      	str	r2, [r3, #12]
 80046b2:	e001      	b.n	80046b8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80046c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3720      	adds	r7, #32
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	efff69f3 	.word	0xefff69f3
 80046d4:	40013800 	.word	0x40013800
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40004400 	.word	0x40004400
 80046e0:	40004800 	.word	0x40004800
 80046e4:	007a1200 	.word	0x007a1200

080046e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	f003 0320 	and.w	r3, r3, #32
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01a      	beq.n	80047fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047e6:	d10a      	bne.n	80047fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	605a      	str	r2, [r3, #4]
  }
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af02      	add	r7, sp, #8
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800483c:	f7fc faba 	bl	8000db4 <HAL_GetTick>
 8004840:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b08      	cmp	r3, #8
 800484e:	d10e      	bne.n	800486e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004850:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f82d 	bl	80048be <UART_WaitOnFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e023      	b.n	80048b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b04      	cmp	r3, #4
 800487a:	d10e      	bne.n	800489a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800487c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f817 	bl	80048be <UART_WaitOnFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e00d      	b.n	80048b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b09c      	sub	sp, #112	; 0x70
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	4613      	mov	r3, r2
 80048cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ce:	e0a5      	b.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d6:	f000 80a1 	beq.w	8004a1c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048da:	f7fc fa6b 	bl	8000db4 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d302      	bcc.n	80048f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80048ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d13e      	bne.n	800496e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004900:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004904:	667b      	str	r3, [r7, #100]	; 0x64
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800490e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004910:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004912:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004914:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800491c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e6      	bne.n	80048f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3308      	adds	r3, #8
 8004928:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004934:	f023 0301 	bic.w	r3, r3, #1
 8004938:	663b      	str	r3, [r7, #96]	; 0x60
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3308      	adds	r3, #8
 8004940:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004942:	64ba      	str	r2, [r7, #72]	; 0x48
 8004944:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004948:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800494a:	e841 2300 	strex	r3, r2, [r1]
 800494e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1e5      	bne.n	8004922 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2220      	movs	r2, #32
 800495a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e067      	b.n	8004a3e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d04f      	beq.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800498a:	d147      	bne.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004994:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b4:	637b      	str	r3, [r7, #52]	; 0x34
 80049b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e6      	bne.n	8004996 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3308      	adds	r3, #8
 80049ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	e853 3f00 	ldrex	r3, [r3]
 80049d6:	613b      	str	r3, [r7, #16]
   return(result);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f023 0301 	bic.w	r3, r3, #1
 80049de:	66bb      	str	r3, [r7, #104]	; 0x68
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3308      	adds	r3, #8
 80049e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049e8:	623a      	str	r2, [r7, #32]
 80049ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ec:	69f9      	ldr	r1, [r7, #28]
 80049ee:	6a3a      	ldr	r2, [r7, #32]
 80049f0:	e841 2300 	strex	r3, r2, [r1]
 80049f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1e5      	bne.n	80049c8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2220      	movs	r2, #32
 8004a06:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e010      	b.n	8004a3e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69da      	ldr	r2, [r3, #28]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4013      	ands	r3, r2
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	461a      	mov	r2, r3
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	f43f af4a 	beq.w	80048d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3770      	adds	r7, #112	; 0x70
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <__libc_init_array>:
 8004a48:	b570      	push	{r4, r5, r6, lr}
 8004a4a:	4d0d      	ldr	r5, [pc, #52]	; (8004a80 <__libc_init_array+0x38>)
 8004a4c:	4c0d      	ldr	r4, [pc, #52]	; (8004a84 <__libc_init_array+0x3c>)
 8004a4e:	1b64      	subs	r4, r4, r5
 8004a50:	10a4      	asrs	r4, r4, #2
 8004a52:	2600      	movs	r6, #0
 8004a54:	42a6      	cmp	r6, r4
 8004a56:	d109      	bne.n	8004a6c <__libc_init_array+0x24>
 8004a58:	4d0b      	ldr	r5, [pc, #44]	; (8004a88 <__libc_init_array+0x40>)
 8004a5a:	4c0c      	ldr	r4, [pc, #48]	; (8004a8c <__libc_init_array+0x44>)
 8004a5c:	f000 f820 	bl	8004aa0 <_init>
 8004a60:	1b64      	subs	r4, r4, r5
 8004a62:	10a4      	asrs	r4, r4, #2
 8004a64:	2600      	movs	r6, #0
 8004a66:	42a6      	cmp	r6, r4
 8004a68:	d105      	bne.n	8004a76 <__libc_init_array+0x2e>
 8004a6a:	bd70      	pop	{r4, r5, r6, pc}
 8004a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a70:	4798      	blx	r3
 8004a72:	3601      	adds	r6, #1
 8004a74:	e7ee      	b.n	8004a54 <__libc_init_array+0xc>
 8004a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a7a:	4798      	blx	r3
 8004a7c:	3601      	adds	r6, #1
 8004a7e:	e7f2      	b.n	8004a66 <__libc_init_array+0x1e>
 8004a80:	08004af0 	.word	0x08004af0
 8004a84:	08004af0 	.word	0x08004af0
 8004a88:	08004af0 	.word	0x08004af0
 8004a8c:	08004af4 	.word	0x08004af4

08004a90 <memset>:
 8004a90:	4402      	add	r2, r0
 8004a92:	4603      	mov	r3, r0
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d100      	bne.n	8004a9a <memset+0xa>
 8004a98:	4770      	bx	lr
 8004a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a9e:	e7f9      	b.n	8004a94 <memset+0x4>

08004aa0 <_init>:
 8004aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa2:	bf00      	nop
 8004aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa6:	bc08      	pop	{r3}
 8004aa8:	469e      	mov	lr, r3
 8004aaa:	4770      	bx	lr

08004aac <_fini>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	bf00      	nop
 8004ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab2:	bc08      	pop	{r3}
 8004ab4:	469e      	mov	lr, r3
 8004ab6:	4770      	bx	lr
