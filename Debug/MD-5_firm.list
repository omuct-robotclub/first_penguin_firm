
MD-5_firm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008238  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  080083c0  080083c0  000183c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000098  08008558  08008558  00018558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000118  080085f0  080085f0  000185f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008708  08008708  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008708  08008708  00018708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800870c  0800870c  0001870c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0000020c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000284  20000284  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129e9  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028e8  00000000  00000000  00032a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  00035380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e38  00000000  00000000  000362a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eee9  00000000  00000000  000370d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012239  00000000  00000000  00055fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a94cc  00000000  00000000  000681fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001116c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004dc4  00000000  00000000  00111718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080083a8 	.word	0x080083a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	080083a8 	.word	0x080083a8

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <selfrel_offset31>:
 80001dc:	6803      	ldr	r3, [r0, #0]
 80001de:	005a      	lsls	r2, r3, #1
 80001e0:	bf4c      	ite	mi
 80001e2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80001e6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80001ea:	4418      	add	r0, r3
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop

080001f0 <search_EIT_table>:
 80001f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80001f4:	b329      	cbz	r1, 8000242 <search_EIT_table+0x52>
 80001f6:	1e4f      	subs	r7, r1, #1
 80001f8:	4604      	mov	r4, r0
 80001fa:	4615      	mov	r5, r2
 80001fc:	463e      	mov	r6, r7
 80001fe:	f04f 0800 	mov.w	r8, #0
 8000202:	eb08 0106 	add.w	r1, r8, r6
 8000206:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800020a:	1049      	asrs	r1, r1, #1
 800020c:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000210:	4648      	mov	r0, r9
 8000212:	f7ff ffe3 	bl	80001dc <selfrel_offset31>
 8000216:	4603      	mov	r3, r0
 8000218:	00c8      	lsls	r0, r1, #3
 800021a:	3008      	adds	r0, #8
 800021c:	428f      	cmp	r7, r1
 800021e:	4420      	add	r0, r4
 8000220:	d009      	beq.n	8000236 <search_EIT_table+0x46>
 8000222:	42ab      	cmp	r3, r5
 8000224:	d809      	bhi.n	800023a <search_EIT_table+0x4a>
 8000226:	f7ff ffd9 	bl	80001dc <selfrel_offset31>
 800022a:	3801      	subs	r0, #1
 800022c:	42a8      	cmp	r0, r5
 800022e:	d20a      	bcs.n	8000246 <search_EIT_table+0x56>
 8000230:	f101 0801 	add.w	r8, r1, #1
 8000234:	e7e5      	b.n	8000202 <search_EIT_table+0x12>
 8000236:	42ab      	cmp	r3, r5
 8000238:	d905      	bls.n	8000246 <search_EIT_table+0x56>
 800023a:	4588      	cmp	r8, r1
 800023c:	d001      	beq.n	8000242 <search_EIT_table+0x52>
 800023e:	1e4e      	subs	r6, r1, #1
 8000240:	e7df      	b.n	8000202 <search_EIT_table+0x12>
 8000242:	f04f 0900 	mov.w	r9, #0
 8000246:	4648      	mov	r0, r9
 8000248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800024c <__gnu_unwind_get_pr_addr>:
 800024c:	2801      	cmp	r0, #1
 800024e:	d007      	beq.n	8000260 <__gnu_unwind_get_pr_addr+0x14>
 8000250:	2802      	cmp	r0, #2
 8000252:	d007      	beq.n	8000264 <__gnu_unwind_get_pr_addr+0x18>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__gnu_unwind_get_pr_addr+0x1c>)
 8000256:	2800      	cmp	r0, #0
 8000258:	bf0c      	ite	eq
 800025a:	4618      	moveq	r0, r3
 800025c:	2000      	movne	r0, #0
 800025e:	4770      	bx	lr
 8000260:	4802      	ldr	r0, [pc, #8]	; (800026c <__gnu_unwind_get_pr_addr+0x20>)
 8000262:	4770      	bx	lr
 8000264:	4802      	ldr	r0, [pc, #8]	; (8000270 <__gnu_unwind_get_pr_addr+0x24>)
 8000266:	4770      	bx	lr
 8000268:	08000925 	.word	0x08000925
 800026c:	08000929 	.word	0x08000929
 8000270:	0800092d 	.word	0x0800092d

08000274 <get_eit_entry>:
 8000274:	b530      	push	{r4, r5, lr}
 8000276:	4b23      	ldr	r3, [pc, #140]	; (8000304 <get_eit_entry+0x90>)
 8000278:	b083      	sub	sp, #12
 800027a:	4604      	mov	r4, r0
 800027c:	1e8d      	subs	r5, r1, #2
 800027e:	b33b      	cbz	r3, 80002d0 <get_eit_entry+0x5c>
 8000280:	a901      	add	r1, sp, #4
 8000282:	4628      	mov	r0, r5
 8000284:	f3af 8000 	nop.w
 8000288:	b1e8      	cbz	r0, 80002c6 <get_eit_entry+0x52>
 800028a:	9901      	ldr	r1, [sp, #4]
 800028c:	462a      	mov	r2, r5
 800028e:	f7ff ffaf 	bl	80001f0 <search_EIT_table>
 8000292:	4601      	mov	r1, r0
 8000294:	b1b8      	cbz	r0, 80002c6 <get_eit_entry+0x52>
 8000296:	f7ff ffa1 	bl	80001dc <selfrel_offset31>
 800029a:	684b      	ldr	r3, [r1, #4]
 800029c:	64a0      	str	r0, [r4, #72]	; 0x48
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d02c      	beq.n	80002fc <get_eit_entry+0x88>
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	f101 0004 	add.w	r0, r1, #4
 80002a8:	db24      	blt.n	80002f4 <get_eit_entry+0x80>
 80002aa:	f7ff ff97 	bl	80001dc <selfrel_offset31>
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80002b4:	6803      	ldr	r3, [r0, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	db11      	blt.n	80002de <get_eit_entry+0x6a>
 80002ba:	f7ff ff8f 	bl	80001dc <selfrel_offset31>
 80002be:	6120      	str	r0, [r4, #16]
 80002c0:	2000      	movs	r0, #0
 80002c2:	b003      	add	sp, #12
 80002c4:	bd30      	pop	{r4, r5, pc}
 80002c6:	2300      	movs	r3, #0
 80002c8:	2009      	movs	r0, #9
 80002ca:	6123      	str	r3, [r4, #16]
 80002cc:	b003      	add	sp, #12
 80002ce:	bd30      	pop	{r4, r5, pc}
 80002d0:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <get_eit_entry+0x94>)
 80002d2:	490e      	ldr	r1, [pc, #56]	; (800030c <get_eit_entry+0x98>)
 80002d4:	1ac9      	subs	r1, r1, r3
 80002d6:	10c9      	asrs	r1, r1, #3
 80002d8:	4618      	mov	r0, r3
 80002da:	9101      	str	r1, [sp, #4]
 80002dc:	e7d6      	b.n	800028c <get_eit_entry+0x18>
 80002de:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80002e2:	f7ff ffb3 	bl	800024c <__gnu_unwind_get_pr_addr>
 80002e6:	2800      	cmp	r0, #0
 80002e8:	6120      	str	r0, [r4, #16]
 80002ea:	bf14      	ite	ne
 80002ec:	2000      	movne	r0, #0
 80002ee:	2009      	moveq	r0, #9
 80002f0:	b003      	add	sp, #12
 80002f2:	bd30      	pop	{r4, r5, pc}
 80002f4:	2301      	movs	r3, #1
 80002f6:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80002fa:	e7db      	b.n	80002b4 <get_eit_entry+0x40>
 80002fc:	2300      	movs	r3, #0
 80002fe:	6123      	str	r3, [r4, #16]
 8000300:	2005      	movs	r0, #5
 8000302:	e7de      	b.n	80002c2 <get_eit_entry+0x4e>
 8000304:	00000000 	.word	0x00000000
 8000308:	080085f0 	.word	0x080085f0
 800030c:	08008708 	.word	0x08008708

08000310 <restore_non_core_regs>:
 8000310:	6803      	ldr	r3, [r0, #0]
 8000312:	07da      	lsls	r2, r3, #31
 8000314:	b510      	push	{r4, lr}
 8000316:	4604      	mov	r4, r0
 8000318:	d406      	bmi.n	8000328 <restore_non_core_regs+0x18>
 800031a:	079b      	lsls	r3, r3, #30
 800031c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000320:	d509      	bpl.n	8000336 <restore_non_core_regs+0x26>
 8000322:	f000 fc5b 	bl	8000bdc <__gnu_Unwind_Restore_VFP_D>
 8000326:	6823      	ldr	r3, [r4, #0]
 8000328:	0759      	lsls	r1, r3, #29
 800032a:	d509      	bpl.n	8000340 <restore_non_core_regs+0x30>
 800032c:	071a      	lsls	r2, r3, #28
 800032e:	d50e      	bpl.n	800034e <restore_non_core_regs+0x3e>
 8000330:	06db      	lsls	r3, r3, #27
 8000332:	d513      	bpl.n	800035c <restore_non_core_regs+0x4c>
 8000334:	bd10      	pop	{r4, pc}
 8000336:	f000 fc49 	bl	8000bcc <__gnu_Unwind_Restore_VFP>
 800033a:	6823      	ldr	r3, [r4, #0]
 800033c:	0759      	lsls	r1, r3, #29
 800033e:	d4f5      	bmi.n	800032c <restore_non_core_regs+0x1c>
 8000340:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000344:	f000 fc52 	bl	8000bec <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000348:	6823      	ldr	r3, [r4, #0]
 800034a:	071a      	lsls	r2, r3, #28
 800034c:	d4f0      	bmi.n	8000330 <restore_non_core_regs+0x20>
 800034e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000352:	f000 fc53 	bl	8000bfc <__gnu_Unwind_Restore_WMMXD>
 8000356:	6823      	ldr	r3, [r4, #0]
 8000358:	06db      	lsls	r3, r3, #27
 800035a:	d4eb      	bmi.n	8000334 <restore_non_core_regs+0x24>
 800035c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000364:	f000 bc8e 	b.w	8000c84 <__gnu_Unwind_Restore_WMMXC>

08000368 <__gnu_unwind_24bit.constprop.0>:
 8000368:	2009      	movs	r0, #9
 800036a:	4770      	bx	lr

0800036c <_Unwind_decode_typeinfo_ptr.constprop.0>:
 800036c:	4603      	mov	r3, r0
 800036e:	6800      	ldr	r0, [r0, #0]
 8000370:	b100      	cbz	r0, 8000374 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8000372:	4418      	add	r0, r3
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop

08000378 <_Unwind_DebugHook>:
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop

0800037c <unwind_phase2>:
 800037c:	b570      	push	{r4, r5, r6, lr}
 800037e:	4604      	mov	r4, r0
 8000380:	460e      	mov	r6, r1
 8000382:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000384:	4620      	mov	r0, r4
 8000386:	f7ff ff75 	bl	8000274 <get_eit_entry>
 800038a:	4605      	mov	r5, r0
 800038c:	b988      	cbnz	r0, 80003b2 <unwind_phase2+0x36>
 800038e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8000390:	6162      	str	r2, [r4, #20]
 8000392:	6923      	ldr	r3, [r4, #16]
 8000394:	4632      	mov	r2, r6
 8000396:	4621      	mov	r1, r4
 8000398:	2001      	movs	r0, #1
 800039a:	4798      	blx	r3
 800039c:	2808      	cmp	r0, #8
 800039e:	d0f0      	beq.n	8000382 <unwind_phase2+0x6>
 80003a0:	2807      	cmp	r0, #7
 80003a2:	d106      	bne.n	80003b2 <unwind_phase2+0x36>
 80003a4:	4628      	mov	r0, r5
 80003a6:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80003a8:	f7ff ffe6 	bl	8000378 <_Unwind_DebugHook>
 80003ac:	1d30      	adds	r0, r6, #4
 80003ae:	f000 fc01 	bl	8000bb4 <__restore_core_regs>
 80003b2:	f007 ff05 	bl	80081c0 <abort>
 80003b6:	bf00      	nop

080003b8 <unwind_phase2_forced>:
 80003b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003bc:	1d0d      	adds	r5, r1, #4
 80003be:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80003c2:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80003c6:	4607      	mov	r7, r0
 80003c8:	4614      	mov	r4, r2
 80003ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003cc:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80003d0:	f10d 0c0c 	add.w	ip, sp, #12
 80003d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80003e8:	ae02      	add	r6, sp, #8
 80003ea:	f04f 0e00 	mov.w	lr, #0
 80003ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80003f2:	f8c6 e000 	str.w	lr, [r6]
 80003f6:	e020      	b.n	800043a <unwind_phase2_forced+0x82>
 80003f8:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80003fa:	617b      	str	r3, [r7, #20]
 80003fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000400:	4631      	mov	r1, r6
 8000402:	a87a      	add	r0, sp, #488	; 0x1e8
 8000404:	f007 ffc2 	bl	800838c <memcpy>
 8000408:	693b      	ldr	r3, [r7, #16]
 800040a:	aa7a      	add	r2, sp, #488	; 0x1e8
 800040c:	4639      	mov	r1, r7
 800040e:	4650      	mov	r0, sl
 8000410:	4798      	blx	r3
 8000412:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000414:	6473      	str	r3, [r6, #68]	; 0x44
 8000416:	4621      	mov	r1, r4
 8000418:	e9cd 6900 	strd	r6, r9, [sp]
 800041c:	4605      	mov	r5, r0
 800041e:	463b      	mov	r3, r7
 8000420:	463a      	mov	r2, r7
 8000422:	2001      	movs	r0, #1
 8000424:	47c0      	blx	r8
 8000426:	4604      	mov	r4, r0
 8000428:	b9e0      	cbnz	r0, 8000464 <unwind_phase2_forced+0xac>
 800042a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800042e:	a97a      	add	r1, sp, #488	; 0x1e8
 8000430:	4630      	mov	r0, r6
 8000432:	f007 ffab 	bl	800838c <memcpy>
 8000436:	2d08      	cmp	r5, #8
 8000438:	d11a      	bne.n	8000470 <unwind_phase2_forced+0xb8>
 800043a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800043c:	4638      	mov	r0, r7
 800043e:	f7ff ff19 	bl	8000274 <get_eit_entry>
 8000442:	3409      	adds	r4, #9
 8000444:	fa5f fa84 	uxtb.w	sl, r4
 8000448:	4605      	mov	r5, r0
 800044a:	2800      	cmp	r0, #0
 800044c:	d0d4      	beq.n	80003f8 <unwind_phase2_forced+0x40>
 800044e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000450:	6473      	str	r3, [r6, #68]	; 0x44
 8000452:	463a      	mov	r2, r7
 8000454:	e9cd 6900 	strd	r6, r9, [sp]
 8000458:	463b      	mov	r3, r7
 800045a:	f04a 0110 	orr.w	r1, sl, #16
 800045e:	2001      	movs	r0, #1
 8000460:	47c0      	blx	r8
 8000462:	b100      	cbz	r0, 8000466 <unwind_phase2_forced+0xae>
 8000464:	2509      	movs	r5, #9
 8000466:	4628      	mov	r0, r5
 8000468:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800046c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000470:	2d07      	cmp	r5, #7
 8000472:	d1f7      	bne.n	8000464 <unwind_phase2_forced+0xac>
 8000474:	4620      	mov	r0, r4
 8000476:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000478:	f7ff ff7e 	bl	8000378 <_Unwind_DebugHook>
 800047c:	a803      	add	r0, sp, #12
 800047e:	f000 fb99 	bl	8000bb4 <__restore_core_regs>
 8000482:	bf00      	nop

08000484 <_Unwind_GetCFA>:
 8000484:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000486:	4770      	bx	lr

08000488 <__gnu_Unwind_RaiseException>:
 8000488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800048c:	640b      	str	r3, [r1, #64]	; 0x40
 800048e:	f101 0c04 	add.w	ip, r1, #4
 8000492:	460e      	mov	r6, r1
 8000494:	4605      	mov	r5, r0
 8000496:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800049a:	b0f9      	sub	sp, #484	; 0x1e4
 800049c:	ac01      	add	r4, sp, #4
 800049e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80004a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80004aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ac:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80004b0:	f04f 37ff 	mov.w	r7, #4294967295
 80004b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80004b8:	9700      	str	r7, [sp, #0]
 80004ba:	e006      	b.n	80004ca <__gnu_Unwind_RaiseException+0x42>
 80004bc:	692b      	ldr	r3, [r5, #16]
 80004be:	466a      	mov	r2, sp
 80004c0:	4629      	mov	r1, r5
 80004c2:	4798      	blx	r3
 80004c4:	2808      	cmp	r0, #8
 80004c6:	4604      	mov	r4, r0
 80004c8:	d108      	bne.n	80004dc <__gnu_Unwind_RaiseException+0x54>
 80004ca:	9910      	ldr	r1, [sp, #64]	; 0x40
 80004cc:	4628      	mov	r0, r5
 80004ce:	f7ff fed1 	bl	8000274 <get_eit_entry>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	d0f2      	beq.n	80004bc <__gnu_Unwind_RaiseException+0x34>
 80004d6:	2009      	movs	r0, #9
 80004d8:	b079      	add	sp, #484	; 0x1e4
 80004da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004dc:	4668      	mov	r0, sp
 80004de:	f7ff ff17 	bl	8000310 <restore_non_core_regs>
 80004e2:	2c06      	cmp	r4, #6
 80004e4:	d1f7      	bne.n	80004d6 <__gnu_Unwind_RaiseException+0x4e>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4628      	mov	r0, r5
 80004ea:	f7ff ff47 	bl	800037c <unwind_phase2>
 80004ee:	bf00      	nop

080004f0 <__gnu_Unwind_ForcedUnwind>:
 80004f0:	60c1      	str	r1, [r0, #12]
 80004f2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004f4:	6182      	str	r2, [r0, #24]
 80004f6:	6419      	str	r1, [r3, #64]	; 0x40
 80004f8:	2200      	movs	r2, #0
 80004fa:	4619      	mov	r1, r3
 80004fc:	e75c      	b.n	80003b8 <unwind_phase2_forced>
 80004fe:	bf00      	nop

08000500 <__gnu_Unwind_Resume>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	68c6      	ldr	r6, [r0, #12]
 8000504:	6943      	ldr	r3, [r0, #20]
 8000506:	640b      	str	r3, [r1, #64]	; 0x40
 8000508:	b9ae      	cbnz	r6, 8000536 <__gnu_Unwind_Resume+0x36>
 800050a:	6903      	ldr	r3, [r0, #16]
 800050c:	460a      	mov	r2, r1
 800050e:	4604      	mov	r4, r0
 8000510:	460d      	mov	r5, r1
 8000512:	4601      	mov	r1, r0
 8000514:	2002      	movs	r0, #2
 8000516:	4798      	blx	r3
 8000518:	2807      	cmp	r0, #7
 800051a:	d005      	beq.n	8000528 <__gnu_Unwind_Resume+0x28>
 800051c:	2808      	cmp	r0, #8
 800051e:	d10f      	bne.n	8000540 <__gnu_Unwind_Resume+0x40>
 8000520:	4629      	mov	r1, r5
 8000522:	4620      	mov	r0, r4
 8000524:	f7ff ff2a 	bl	800037c <unwind_phase2>
 8000528:	4630      	mov	r0, r6
 800052a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800052c:	f7ff ff24 	bl	8000378 <_Unwind_DebugHook>
 8000530:	1d28      	adds	r0, r5, #4
 8000532:	f000 fb3f 	bl	8000bb4 <__restore_core_regs>
 8000536:	2201      	movs	r2, #1
 8000538:	f7ff ff3e 	bl	80003b8 <unwind_phase2_forced>
 800053c:	f007 fe40 	bl	80081c0 <abort>
 8000540:	f007 fe3e 	bl	80081c0 <abort>

08000544 <__gnu_Unwind_Resume_or_Rethrow>:
 8000544:	68c2      	ldr	r2, [r0, #12]
 8000546:	b11a      	cbz	r2, 8000550 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000548:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800054a:	640a      	str	r2, [r1, #64]	; 0x40
 800054c:	2200      	movs	r2, #0
 800054e:	e733      	b.n	80003b8 <unwind_phase2_forced>
 8000550:	e79a      	b.n	8000488 <__gnu_Unwind_RaiseException>
 8000552:	bf00      	nop

08000554 <_Unwind_Complete>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <_Unwind_DeleteException>:
 8000558:	6883      	ldr	r3, [r0, #8]
 800055a:	4601      	mov	r1, r0
 800055c:	b10b      	cbz	r3, 8000562 <_Unwind_DeleteException+0xa>
 800055e:	2001      	movs	r0, #1
 8000560:	4718      	bx	r3
 8000562:	4770      	bx	lr

08000564 <_Unwind_VRS_Get>:
 8000564:	2901      	cmp	r1, #1
 8000566:	d012      	beq.n	800058e <_Unwind_VRS_Get+0x2a>
 8000568:	d809      	bhi.n	800057e <_Unwind_VRS_Get+0x1a>
 800056a:	b973      	cbnz	r3, 800058a <_Unwind_VRS_Get+0x26>
 800056c:	2a0f      	cmp	r2, #15
 800056e:	d80c      	bhi.n	800058a <_Unwind_VRS_Get+0x26>
 8000570:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000574:	4618      	mov	r0, r3
 8000576:	6853      	ldr	r3, [r2, #4]
 8000578:	9a00      	ldr	r2, [sp, #0]
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4770      	bx	lr
 800057e:	3903      	subs	r1, #3
 8000580:	2901      	cmp	r1, #1
 8000582:	bf94      	ite	ls
 8000584:	2001      	movls	r0, #1
 8000586:	2002      	movhi	r0, #2
 8000588:	4770      	bx	lr
 800058a:	2002      	movs	r0, #2
 800058c:	4770      	bx	lr
 800058e:	4608      	mov	r0, r1
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <_Unwind_GetGR>:
 8000594:	b500      	push	{lr}
 8000596:	b085      	sub	sp, #20
 8000598:	460a      	mov	r2, r1
 800059a:	2300      	movs	r3, #0
 800059c:	a903      	add	r1, sp, #12
 800059e:	9100      	str	r1, [sp, #0]
 80005a0:	4619      	mov	r1, r3
 80005a2:	f7ff ffdf 	bl	8000564 <_Unwind_VRS_Get>
 80005a6:	9803      	ldr	r0, [sp, #12]
 80005a8:	b005      	add	sp, #20
 80005aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80005ae:	bf00      	nop

080005b0 <_Unwind_VRS_Set>:
 80005b0:	2901      	cmp	r1, #1
 80005b2:	d012      	beq.n	80005da <_Unwind_VRS_Set+0x2a>
 80005b4:	d809      	bhi.n	80005ca <_Unwind_VRS_Set+0x1a>
 80005b6:	b973      	cbnz	r3, 80005d6 <_Unwind_VRS_Set+0x26>
 80005b8:	2a0f      	cmp	r2, #15
 80005ba:	d80c      	bhi.n	80005d6 <_Unwind_VRS_Set+0x26>
 80005bc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80005c0:	9a00      	ldr	r2, [sp, #0]
 80005c2:	6812      	ldr	r2, [r2, #0]
 80005c4:	6042      	str	r2, [r0, #4]
 80005c6:	4618      	mov	r0, r3
 80005c8:	4770      	bx	lr
 80005ca:	3903      	subs	r1, #3
 80005cc:	2901      	cmp	r1, #1
 80005ce:	bf94      	ite	ls
 80005d0:	2001      	movls	r0, #1
 80005d2:	2002      	movhi	r0, #2
 80005d4:	4770      	bx	lr
 80005d6:	2002      	movs	r0, #2
 80005d8:	4770      	bx	lr
 80005da:	4608      	mov	r0, r1
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <_Unwind_SetGR>:
 80005e0:	b510      	push	{r4, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	2300      	movs	r3, #0
 80005e6:	ac03      	add	r4, sp, #12
 80005e8:	9203      	str	r2, [sp, #12]
 80005ea:	9400      	str	r4, [sp, #0]
 80005ec:	460a      	mov	r2, r1
 80005ee:	4619      	mov	r1, r3
 80005f0:	f7ff ffde 	bl	80005b0 <_Unwind_VRS_Set>
 80005f4:	b004      	add	sp, #16
 80005f6:	bd10      	pop	{r4, pc}

080005f8 <__gnu_Unwind_Backtrace>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80005fc:	6413      	str	r3, [r2, #64]	; 0x40
 80005fe:	f102 0c04 	add.w	ip, r2, #4
 8000602:	4605      	mov	r5, r0
 8000604:	460c      	mov	r4, r1
 8000606:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800060a:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800060e:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 8000612:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000616:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800061a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800061e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000622:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000626:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800062a:	f04f 36ff 	mov.w	r6, #4294967295
 800062e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000632:	9616      	str	r6, [sp, #88]	; 0x58
 8000634:	e010      	b.n	8000658 <__gnu_Unwind_Backtrace+0x60>
 8000636:	f7ff ffd3 	bl	80005e0 <_Unwind_SetGR>
 800063a:	4621      	mov	r1, r4
 800063c:	a816      	add	r0, sp, #88	; 0x58
 800063e:	47a8      	blx	r5
 8000640:	4603      	mov	r3, r0
 8000642:	aa16      	add	r2, sp, #88	; 0x58
 8000644:	4669      	mov	r1, sp
 8000646:	2008      	movs	r0, #8
 8000648:	b983      	cbnz	r3, 800066c <__gnu_Unwind_Backtrace+0x74>
 800064a:	9b04      	ldr	r3, [sp, #16]
 800064c:	4798      	blx	r3
 800064e:	2805      	cmp	r0, #5
 8000650:	4606      	mov	r6, r0
 8000652:	d00c      	beq.n	800066e <__gnu_Unwind_Backtrace+0x76>
 8000654:	2809      	cmp	r0, #9
 8000656:	d009      	beq.n	800066c <__gnu_Unwind_Backtrace+0x74>
 8000658:	9926      	ldr	r1, [sp, #152]	; 0x98
 800065a:	4668      	mov	r0, sp
 800065c:	f7ff fe0a 	bl	8000274 <get_eit_entry>
 8000660:	4603      	mov	r3, r0
 8000662:	466a      	mov	r2, sp
 8000664:	210c      	movs	r1, #12
 8000666:	a816      	add	r0, sp, #88	; 0x58
 8000668:	2b00      	cmp	r3, #0
 800066a:	d0e4      	beq.n	8000636 <__gnu_Unwind_Backtrace+0x3e>
 800066c:	2609      	movs	r6, #9
 800066e:	a816      	add	r0, sp, #88	; 0x58
 8000670:	f7ff fe4e 	bl	8000310 <restore_non_core_regs>
 8000674:	4630      	mov	r0, r6
 8000676:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800067a:	bd70      	pop	{r4, r5, r6, pc}

0800067c <__gnu_unwind_pr_common>:
 800067c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000680:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000682:	b089      	sub	sp, #36	; 0x24
 8000684:	461e      	mov	r6, r3
 8000686:	f854 3b04 	ldr.w	r3, [r4], #4
 800068a:	9406      	str	r4, [sp, #24]
 800068c:	460d      	mov	r5, r1
 800068e:	4617      	mov	r7, r2
 8000690:	f000 0803 	and.w	r8, r0, #3
 8000694:	2e00      	cmp	r6, #0
 8000696:	d079      	beq.n	800078c <__gnu_unwind_pr_common+0x110>
 8000698:	0c1a      	lsrs	r2, r3, #16
 800069a:	041b      	lsls	r3, r3, #16
 800069c:	9305      	str	r3, [sp, #20]
 800069e:	f88d 201d 	strb.w	r2, [sp, #29]
 80006a2:	2302      	movs	r3, #2
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80006aa:	f88d 301c 	strb.w	r3, [sp, #28]
 80006ae:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80006b0:	f1b8 0f02 	cmp.w	r8, #2
 80006b4:	bf08      	it	eq
 80006b6:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80006b8:	f013 0301 	ands.w	r3, r3, #1
 80006bc:	d00c      	beq.n	80006d8 <__gnu_unwind_pr_common+0x5c>
 80006be:	a905      	add	r1, sp, #20
 80006c0:	4638      	mov	r0, r7
 80006c2:	f000 fb79 	bl	8000db8 <__gnu_unwind_execute>
 80006c6:	b918      	cbnz	r0, 80006d0 <__gnu_unwind_pr_common+0x54>
 80006c8:	2008      	movs	r0, #8
 80006ca:	b009      	add	sp, #36	; 0x24
 80006cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006d0:	2009      	movs	r0, #9
 80006d2:	b009      	add	sp, #36	; 0x24
 80006d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006d8:	f8d4 a000 	ldr.w	sl, [r4]
 80006dc:	f1ba 0f00 	cmp.w	sl, #0
 80006e0:	d0ed      	beq.n	80006be <__gnu_unwind_pr_common+0x42>
 80006e2:	9301      	str	r3, [sp, #4]
 80006e4:	f000 0308 	and.w	r3, r0, #8
 80006e8:	9302      	str	r3, [sp, #8]
 80006ea:	2e02      	cmp	r6, #2
 80006ec:	d04a      	beq.n	8000784 <__gnu_unwind_pr_common+0x108>
 80006ee:	f8b4 a000 	ldrh.w	sl, [r4]
 80006f2:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80006f6:	3404      	adds	r4, #4
 80006f8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80006fa:	f029 0b01 	bic.w	fp, r9, #1
 80006fe:	210f      	movs	r1, #15
 8000700:	4638      	mov	r0, r7
 8000702:	449b      	add	fp, r3
 8000704:	f7ff ff46 	bl	8000594 <_Unwind_GetGR>
 8000708:	4583      	cmp	fp, r0
 800070a:	d839      	bhi.n	8000780 <__gnu_unwind_pr_common+0x104>
 800070c:	f02a 0301 	bic.w	r3, sl, #1
 8000710:	449b      	add	fp, r3
 8000712:	4583      	cmp	fp, r0
 8000714:	bf94      	ite	ls
 8000716:	2000      	movls	r0, #0
 8000718:	2001      	movhi	r0, #1
 800071a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	f00a 0a01 	and.w	sl, sl, #1
 8000726:	ea43 030a 	orr.w	r3, r3, sl
 800072a:	2b01      	cmp	r3, #1
 800072c:	d049      	beq.n	80007c2 <__gnu_unwind_pr_common+0x146>
 800072e:	2b02      	cmp	r3, #2
 8000730:	d032      	beq.n	8000798 <__gnu_unwind_pr_common+0x11c>
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1cc      	bne.n	80006d0 <__gnu_unwind_pr_common+0x54>
 8000736:	f1b8 0f00 	cmp.w	r8, #0
 800073a:	d002      	beq.n	8000742 <__gnu_unwind_pr_common+0xc6>
 800073c:	2800      	cmp	r0, #0
 800073e:	f040 80cd 	bne.w	80008dc <__gnu_unwind_pr_common+0x260>
 8000742:	3404      	adds	r4, #4
 8000744:	f8d4 a000 	ldr.w	sl, [r4]
 8000748:	f1ba 0f00 	cmp.w	sl, #0
 800074c:	d1cd      	bne.n	80006ea <__gnu_unwind_pr_common+0x6e>
 800074e:	a905      	add	r1, sp, #20
 8000750:	4638      	mov	r0, r7
 8000752:	f000 fb31 	bl	8000db8 <__gnu_unwind_execute>
 8000756:	2800      	cmp	r0, #0
 8000758:	d1ba      	bne.n	80006d0 <__gnu_unwind_pr_common+0x54>
 800075a:	9b01      	ldr	r3, [sp, #4]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d0b3      	beq.n	80006c8 <__gnu_unwind_pr_common+0x4c>
 8000760:	210f      	movs	r1, #15
 8000762:	4638      	mov	r0, r7
 8000764:	f7ff ff16 	bl	8000594 <_Unwind_GetGR>
 8000768:	210e      	movs	r1, #14
 800076a:	4602      	mov	r2, r0
 800076c:	4638      	mov	r0, r7
 800076e:	f7ff ff37 	bl	80005e0 <_Unwind_SetGR>
 8000772:	4638      	mov	r0, r7
 8000774:	4a6a      	ldr	r2, [pc, #424]	; (8000920 <__gnu_unwind_pr_common+0x2a4>)
 8000776:	210f      	movs	r1, #15
 8000778:	f7ff ff32 	bl	80005e0 <_Unwind_SetGR>
 800077c:	2007      	movs	r0, #7
 800077e:	e7a8      	b.n	80006d2 <__gnu_unwind_pr_common+0x56>
 8000780:	2000      	movs	r0, #0
 8000782:	e7ca      	b.n	800071a <__gnu_unwind_pr_common+0x9e>
 8000784:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000788:	3408      	adds	r4, #8
 800078a:	e7b5      	b.n	80006f8 <__gnu_unwind_pr_common+0x7c>
 800078c:	021b      	lsls	r3, r3, #8
 800078e:	9305      	str	r3, [sp, #20]
 8000790:	2303      	movs	r3, #3
 8000792:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000796:	e78a      	b.n	80006ae <__gnu_unwind_pr_common+0x32>
 8000798:	6823      	ldr	r3, [r4, #0]
 800079a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800079e:	f1b8 0f00 	cmp.w	r8, #0
 80007a2:	d145      	bne.n	8000830 <__gnu_unwind_pr_common+0x1b4>
 80007a4:	b128      	cbz	r0, 80007b2 <__gnu_unwind_pr_common+0x136>
 80007a6:	9a02      	ldr	r2, [sp, #8]
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	d05c      	beq.n	8000866 <__gnu_unwind_pr_common+0x1ea>
 80007ac:	f1bb 0f00 	cmp.w	fp, #0
 80007b0:	d074      	beq.n	800089c <__gnu_unwind_pr_common+0x220>
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	da00      	bge.n	80007b8 <__gnu_unwind_pr_common+0x13c>
 80007b6:	3404      	adds	r4, #4
 80007b8:	f10b 0b01 	add.w	fp, fp, #1
 80007bc:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 80007c0:	e7c0      	b.n	8000744 <__gnu_unwind_pr_common+0xc8>
 80007c2:	f1b8 0f00 	cmp.w	r8, #0
 80007c6:	d119      	bne.n	80007fc <__gnu_unwind_pr_common+0x180>
 80007c8:	b1b0      	cbz	r0, 80007f8 <__gnu_unwind_pr_common+0x17c>
 80007ca:	6863      	ldr	r3, [r4, #4]
 80007cc:	6822      	ldr	r2, [r4, #0]
 80007ce:	1c99      	adds	r1, r3, #2
 80007d0:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80007d4:	f43f af7c 	beq.w	80006d0 <__gnu_unwind_pr_common+0x54>
 80007d8:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80007dc:	3301      	adds	r3, #1
 80007de:	9104      	str	r1, [sp, #16]
 80007e0:	f000 8090 	beq.w	8000904 <__gnu_unwind_pr_common+0x288>
 80007e4:	1d20      	adds	r0, r4, #4
 80007e6:	f7ff fdc1 	bl	800036c <_Unwind_decode_typeinfo_ptr.constprop.0>
 80007ea:	ab04      	add	r3, sp, #16
 80007ec:	4601      	mov	r1, r0
 80007ee:	4628      	mov	r0, r5
 80007f0:	f007 f81a 	bl	8007828 <__cxa_type_match>
 80007f4:	2800      	cmp	r0, #0
 80007f6:	d15b      	bne.n	80008b0 <__gnu_unwind_pr_common+0x234>
 80007f8:	3408      	adds	r4, #8
 80007fa:	e7a3      	b.n	8000744 <__gnu_unwind_pr_common+0xc8>
 80007fc:	210d      	movs	r1, #13
 80007fe:	4638      	mov	r0, r7
 8000800:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000804:	f7ff fec6 	bl	8000594 <_Unwind_GetGR>
 8000808:	4581      	cmp	r9, r0
 800080a:	d1f5      	bne.n	80007f8 <__gnu_unwind_pr_common+0x17c>
 800080c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800080e:	429c      	cmp	r4, r3
 8000810:	d1f2      	bne.n	80007f8 <__gnu_unwind_pr_common+0x17c>
 8000812:	4620      	mov	r0, r4
 8000814:	f7ff fce2 	bl	80001dc <selfrel_offset31>
 8000818:	210f      	movs	r1, #15
 800081a:	4602      	mov	r2, r0
 800081c:	4638      	mov	r0, r7
 800081e:	f7ff fedf 	bl	80005e0 <_Unwind_SetGR>
 8000822:	4638      	mov	r0, r7
 8000824:	462a      	mov	r2, r5
 8000826:	2100      	movs	r1, #0
 8000828:	f7ff feda 	bl	80005e0 <_Unwind_SetGR>
 800082c:	2007      	movs	r0, #7
 800082e:	e750      	b.n	80006d2 <__gnu_unwind_pr_common+0x56>
 8000830:	210d      	movs	r1, #13
 8000832:	4638      	mov	r0, r7
 8000834:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000838:	f7ff feac 	bl	8000594 <_Unwind_GetGR>
 800083c:	4581      	cmp	r9, r0
 800083e:	d001      	beq.n	8000844 <__gnu_unwind_pr_common+0x1c8>
 8000840:	6823      	ldr	r3, [r4, #0]
 8000842:	e7b6      	b.n	80007b2 <__gnu_unwind_pr_common+0x136>
 8000844:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000846:	429c      	cmp	r4, r3
 8000848:	d1fa      	bne.n	8000840 <__gnu_unwind_pr_common+0x1c4>
 800084a:	2304      	movs	r3, #4
 800084c:	2200      	movs	r2, #0
 800084e:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 8000852:	18e3      	adds	r3, r4, r3
 8000854:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000858:	636b      	str	r3, [r5, #52]	; 0x34
 800085a:	6823      	ldr	r3, [r4, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db59      	blt.n	8000914 <__gnu_unwind_pr_common+0x298>
 8000860:	2301      	movs	r3, #1
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	e7a8      	b.n	80007b8 <__gnu_unwind_pr_common+0x13c>
 8000866:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800086a:	f8cd 800c 	str.w	r8, [sp, #12]
 800086e:	f104 0a04 	add.w	sl, r4, #4
 8000872:	46b0      	mov	r8, r6
 8000874:	4691      	mov	r9, r2
 8000876:	461e      	mov	r6, r3
 8000878:	e00e      	b.n	8000898 <__gnu_unwind_pr_common+0x21c>
 800087a:	4650      	mov	r0, sl
 800087c:	9604      	str	r6, [sp, #16]
 800087e:	f7ff fd75 	bl	800036c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000882:	2200      	movs	r2, #0
 8000884:	4601      	mov	r1, r0
 8000886:	ab04      	add	r3, sp, #16
 8000888:	4628      	mov	r0, r5
 800088a:	f109 0901 	add.w	r9, r9, #1
 800088e:	f10a 0a04 	add.w	sl, sl, #4
 8000892:	f006 ffc9 	bl	8007828 <__cxa_type_match>
 8000896:	b9e0      	cbnz	r0, 80008d2 <__gnu_unwind_pr_common+0x256>
 8000898:	45d9      	cmp	r9, fp
 800089a:	d1ee      	bne.n	800087a <__gnu_unwind_pr_common+0x1fe>
 800089c:	210d      	movs	r1, #13
 800089e:	4638      	mov	r0, r7
 80008a0:	f7ff fe78 	bl	8000594 <_Unwind_GetGR>
 80008a4:	9b04      	ldr	r3, [sp, #16]
 80008a6:	62ac      	str	r4, [r5, #40]	; 0x28
 80008a8:	e9c5 0308 	strd	r0, r3, [r5, #32]
 80008ac:	2006      	movs	r0, #6
 80008ae:	e710      	b.n	80006d2 <__gnu_unwind_pr_common+0x56>
 80008b0:	4681      	mov	r9, r0
 80008b2:	210d      	movs	r1, #13
 80008b4:	4638      	mov	r0, r7
 80008b6:	f7ff fe6d 	bl	8000594 <_Unwind_GetGR>
 80008ba:	f1b9 0f02 	cmp.w	r9, #2
 80008be:	6228      	str	r0, [r5, #32]
 80008c0:	d125      	bne.n	800090e <__gnu_unwind_pr_common+0x292>
 80008c2:	462b      	mov	r3, r5
 80008c4:	9a04      	ldr	r2, [sp, #16]
 80008c6:	f843 2f2c 	str.w	r2, [r3, #44]!
 80008ca:	626b      	str	r3, [r5, #36]	; 0x24
 80008cc:	62ac      	str	r4, [r5, #40]	; 0x28
 80008ce:	2006      	movs	r0, #6
 80008d0:	e6ff      	b.n	80006d2 <__gnu_unwind_pr_common+0x56>
 80008d2:	4646      	mov	r6, r8
 80008d4:	6823      	ldr	r3, [r4, #0]
 80008d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80008da:	e76a      	b.n	80007b2 <__gnu_unwind_pr_common+0x136>
 80008dc:	4620      	mov	r0, r4
 80008de:	f7ff fc7d 	bl	80001dc <selfrel_offset31>
 80008e2:	3404      	adds	r4, #4
 80008e4:	4602      	mov	r2, r0
 80008e6:	63ac      	str	r4, [r5, #56]	; 0x38
 80008e8:	4628      	mov	r0, r5
 80008ea:	4614      	mov	r4, r2
 80008ec:	f006 fffa 	bl	80078e4 <__cxa_begin_cleanup>
 80008f0:	2800      	cmp	r0, #0
 80008f2:	f43f aeed 	beq.w	80006d0 <__gnu_unwind_pr_common+0x54>
 80008f6:	4638      	mov	r0, r7
 80008f8:	4622      	mov	r2, r4
 80008fa:	210f      	movs	r1, #15
 80008fc:	f7ff fe70 	bl	80005e0 <_Unwind_SetGR>
 8000900:	2007      	movs	r0, #7
 8000902:	e6e6      	b.n	80006d2 <__gnu_unwind_pr_common+0x56>
 8000904:	210d      	movs	r1, #13
 8000906:	4638      	mov	r0, r7
 8000908:	f7ff fe44 	bl	8000594 <_Unwind_GetGR>
 800090c:	6228      	str	r0, [r5, #32]
 800090e:	9b04      	ldr	r3, [sp, #16]
 8000910:	626b      	str	r3, [r5, #36]	; 0x24
 8000912:	e7db      	b.n	80008cc <__gnu_unwind_pr_common+0x250>
 8000914:	f10b 0001 	add.w	r0, fp, #1
 8000918:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800091c:	e77a      	b.n	8000814 <__gnu_unwind_pr_common+0x198>
 800091e:	bf00      	nop
 8000920:	0800810d 	.word	0x0800810d

08000924 <__aeabi_unwind_cpp_pr0>:
 8000924:	2300      	movs	r3, #0
 8000926:	e6a9      	b.n	800067c <__gnu_unwind_pr_common>

08000928 <__aeabi_unwind_cpp_pr1>:
 8000928:	2301      	movs	r3, #1
 800092a:	e6a7      	b.n	800067c <__gnu_unwind_pr_common>

0800092c <__aeabi_unwind_cpp_pr2>:
 800092c:	2302      	movs	r3, #2
 800092e:	e6a5      	b.n	800067c <__gnu_unwind_pr_common>

08000930 <_Unwind_VRS_Pop>:
 8000930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000934:	4606      	mov	r6, r0
 8000936:	b0c3      	sub	sp, #268	; 0x10c
 8000938:	4615      	mov	r5, r2
 800093a:	461c      	mov	r4, r3
 800093c:	2904      	cmp	r1, #4
 800093e:	f200 80bf 	bhi.w	8000ac0 <_Unwind_VRS_Pop+0x190>
 8000942:	e8df f001 	tbb	[pc, r1]
 8000946:	579e      	.short	0x579e
 8000948:	2dbd      	.short	0x2dbd
 800094a:	03          	.byte	0x03
 800094b:	00          	.byte	0x00
 800094c:	2c00      	cmp	r4, #0
 800094e:	f040 80b7 	bne.w	8000ac0 <_Unwind_VRS_Pop+0x190>
 8000952:	2a10      	cmp	r2, #16
 8000954:	f200 80b4 	bhi.w	8000ac0 <_Unwind_VRS_Pop+0x190>
 8000958:	6803      	ldr	r3, [r0, #0]
 800095a:	06d8      	lsls	r0, r3, #27
 800095c:	f100 80f9 	bmi.w	8000b52 <_Unwind_VRS_Pop+0x222>
 8000960:	af20      	add	r7, sp, #128	; 0x80
 8000962:	4638      	mov	r0, r7
 8000964:	f000 f998 	bl	8000c98 <__gnu_Unwind_Save_WMMXC>
 8000968:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 800096a:	4639      	mov	r1, r7
 800096c:	2300      	movs	r3, #0
 800096e:	f04f 0c01 	mov.w	ip, #1
 8000972:	fa0c f203 	lsl.w	r2, ip, r3
 8000976:	422a      	tst	r2, r5
 8000978:	4620      	mov	r0, r4
 800097a:	f103 0301 	add.w	r3, r3, #1
 800097e:	d003      	beq.n	8000988 <_Unwind_VRS_Pop+0x58>
 8000980:	f850 2b04 	ldr.w	r2, [r0], #4
 8000984:	600a      	str	r2, [r1, #0]
 8000986:	4604      	mov	r4, r0
 8000988:	2b04      	cmp	r3, #4
 800098a:	f101 0104 	add.w	r1, r1, #4
 800098e:	d1f0      	bne.n	8000972 <_Unwind_VRS_Pop+0x42>
 8000990:	4638      	mov	r0, r7
 8000992:	63b4      	str	r4, [r6, #56]	; 0x38
 8000994:	f000 f976 	bl	8000c84 <__gnu_Unwind_Restore_WMMXC>
 8000998:	2000      	movs	r0, #0
 800099a:	b043      	add	sp, #268	; 0x10c
 800099c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009a0:	2c03      	cmp	r4, #3
 80009a2:	f040 808d 	bne.w	8000ac0 <_Unwind_VRS_Pop+0x190>
 80009a6:	b294      	uxth	r4, r2
 80009a8:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 80009ac:	2b10      	cmp	r3, #16
 80009ae:	ea4f 4512 	mov.w	r5, r2, lsr #16
 80009b2:	f200 8085 	bhi.w	8000ac0 <_Unwind_VRS_Pop+0x190>
 80009b6:	6803      	ldr	r3, [r0, #0]
 80009b8:	071f      	lsls	r7, r3, #28
 80009ba:	f100 80d2 	bmi.w	8000b62 <_Unwind_VRS_Pop+0x232>
 80009be:	af20      	add	r7, sp, #128	; 0x80
 80009c0:	4638      	mov	r0, r7
 80009c2:	f000 f93d 	bl	8000c40 <__gnu_Unwind_Save_WMMXD>
 80009c6:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80009c8:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 80009cc:	b154      	cbz	r4, 80009e4 <_Unwind_VRS_Pop+0xb4>
 80009ce:	460b      	mov	r3, r1
 80009d0:	1ad0      	subs	r0, r2, r3
 80009d2:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80009d6:	00e4      	lsls	r4, r4, #3
 80009d8:	581d      	ldr	r5, [r3, r0]
 80009da:	f843 5b04 	str.w	r5, [r3], #4
 80009de:	428b      	cmp	r3, r1
 80009e0:	d1fa      	bne.n	80009d8 <_Unwind_VRS_Pop+0xa8>
 80009e2:	4422      	add	r2, r4
 80009e4:	4638      	mov	r0, r7
 80009e6:	63b2      	str	r2, [r6, #56]	; 0x38
 80009e8:	f000 f908 	bl	8000bfc <__gnu_Unwind_Restore_WMMXD>
 80009ec:	2000      	movs	r0, #0
 80009ee:	b043      	add	sp, #268	; 0x10c
 80009f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009f4:	2c01      	cmp	r4, #1
 80009f6:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80009fa:	b295      	uxth	r5, r2
 80009fc:	d05c      	beq.n	8000ab8 <_Unwind_VRS_Pop+0x188>
 80009fe:	2c05      	cmp	r4, #5
 8000a00:	d15e      	bne.n	8000ac0 <_Unwind_VRS_Pop+0x190>
 8000a02:	eb08 0905 	add.w	r9, r8, r5
 8000a06:	f1b9 0f20 	cmp.w	r9, #32
 8000a0a:	d859      	bhi.n	8000ac0 <_Unwind_VRS_Pop+0x190>
 8000a0c:	f1b8 0f0f 	cmp.w	r8, #15
 8000a10:	d979      	bls.n	8000b06 <_Unwind_VRS_Pop+0x1d6>
 8000a12:	46a9      	mov	r9, r5
 8000a14:	2d00      	cmp	r5, #0
 8000a16:	f040 808a 	bne.w	8000b2e <_Unwind_VRS_Pop+0x1fe>
 8000a1a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000a1c:	b36d      	cbz	r5, 8000a7a <_Unwind_VRS_Pop+0x14a>
 8000a1e:	af20      	add	r7, sp, #128	; 0x80
 8000a20:	f04f 0900 	mov.w	r9, #0
 8000a24:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000a28:	3f04      	subs	r7, #4
 8000a2a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000a2e:	f853 1b04 	ldr.w	r1, [r3], #4
 8000a32:	f847 1f04 	str.w	r1, [r7, #4]!
 8000a36:	42ab      	cmp	r3, r5
 8000a38:	d1f9      	bne.n	8000a2e <_Unwind_VRS_Pop+0xfe>
 8000a3a:	f1b9 0f00 	cmp.w	r9, #0
 8000a3e:	d00f      	beq.n	8000a60 <_Unwind_VRS_Pop+0x130>
 8000a40:	466f      	mov	r7, sp
 8000a42:	4641      	mov	r1, r8
 8000a44:	2910      	cmp	r1, #16
 8000a46:	bf38      	it	cc
 8000a48:	2110      	movcc	r1, #16
 8000a4a:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000a4e:	3984      	subs	r1, #132	; 0x84
 8000a50:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000a54:	f853 0b04 	ldr.w	r0, [r3], #4
 8000a58:	f841 0f04 	str.w	r0, [r1, #4]!
 8000a5c:	42ab      	cmp	r3, r5
 8000a5e:	d1f9      	bne.n	8000a54 <_Unwind_VRS_Pop+0x124>
 8000a60:	2c01      	cmp	r4, #1
 8000a62:	f000 8086 	beq.w	8000b72 <_Unwind_VRS_Pop+0x242>
 8000a66:	f1b8 0f0f 	cmp.w	r8, #15
 8000a6a:	63b5      	str	r5, [r6, #56]	; 0x38
 8000a6c:	d947      	bls.n	8000afe <_Unwind_VRS_Pop+0x1ce>
 8000a6e:	f1b9 0f00 	cmp.w	r9, #0
 8000a72:	d002      	beq.n	8000a7a <_Unwind_VRS_Pop+0x14a>
 8000a74:	4668      	mov	r0, sp
 8000a76:	f000 f8b9 	bl	8000bec <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	b043      	add	sp, #268	; 0x10c
 8000a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a82:	b9ec      	cbnz	r4, 8000ac0 <_Unwind_VRS_Pop+0x190>
 8000a84:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000a86:	4623      	mov	r3, r4
 8000a88:	fa1f fc82 	uxth.w	ip, r2
 8000a8c:	2401      	movs	r4, #1
 8000a8e:	1d37      	adds	r7, r6, #4
 8000a90:	fa04 f203 	lsl.w	r2, r4, r3
 8000a94:	ea12 0f0c 	tst.w	r2, ip
 8000a98:	4601      	mov	r1, r0
 8000a9a:	d004      	beq.n	8000aa6 <_Unwind_VRS_Pop+0x176>
 8000a9c:	f851 2b04 	ldr.w	r2, [r1], #4
 8000aa0:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8000aa4:	4608      	mov	r0, r1
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	2b10      	cmp	r3, #16
 8000aaa:	d1f1      	bne.n	8000a90 <_Unwind_VRS_Pop+0x160>
 8000aac:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
 8000ab0:	d1e3      	bne.n	8000a7a <_Unwind_VRS_Pop+0x14a>
 8000ab2:	63b0      	str	r0, [r6, #56]	; 0x38
 8000ab4:	4628      	mov	r0, r5
 8000ab6:	e004      	b.n	8000ac2 <_Unwind_VRS_Pop+0x192>
 8000ab8:	eb08 0305 	add.w	r3, r8, r5
 8000abc:	2b10      	cmp	r3, #16
 8000abe:	d903      	bls.n	8000ac8 <_Unwind_VRS_Pop+0x198>
 8000ac0:	2002      	movs	r0, #2
 8000ac2:	b043      	add	sp, #268	; 0x10c
 8000ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ac8:	f1b8 0f0f 	cmp.w	r8, #15
 8000acc:	d8f8      	bhi.n	8000ac0 <_Unwind_VRS_Pop+0x190>
 8000ace:	6833      	ldr	r3, [r6, #0]
 8000ad0:	07da      	lsls	r2, r3, #31
 8000ad2:	d506      	bpl.n	8000ae2 <_Unwind_VRS_Pop+0x1b2>
 8000ad4:	4630      	mov	r0, r6
 8000ad6:	f023 0303 	bic.w	r3, r3, #3
 8000ada:	f840 3b48 	str.w	r3, [r0], #72
 8000ade:	f000 f879 	bl	8000bd4 <__gnu_Unwind_Save_VFP>
 8000ae2:	af20      	add	r7, sp, #128	; 0x80
 8000ae4:	4638      	mov	r0, r7
 8000ae6:	f000 f875 	bl	8000bd4 <__gnu_Unwind_Save_VFP>
 8000aea:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	d197      	bne.n	8000a20 <_Unwind_VRS_Pop+0xf0>
 8000af0:	461d      	mov	r5, r3
 8000af2:	3504      	adds	r5, #4
 8000af4:	63b5      	str	r5, [r6, #56]	; 0x38
 8000af6:	4638      	mov	r0, r7
 8000af8:	f000 f868 	bl	8000bcc <__gnu_Unwind_Restore_VFP>
 8000afc:	e7bd      	b.n	8000a7a <_Unwind_VRS_Pop+0x14a>
 8000afe:	a820      	add	r0, sp, #128	; 0x80
 8000b00:	f000 f86c 	bl	8000bdc <__gnu_Unwind_Restore_VFP_D>
 8000b04:	e7b3      	b.n	8000a6e <_Unwind_VRS_Pop+0x13e>
 8000b06:	f1b9 0f10 	cmp.w	r9, #16
 8000b0a:	d940      	bls.n	8000b8e <_Unwind_VRS_Pop+0x25e>
 8000b0c:	f1a9 0910 	sub.w	r9, r9, #16
 8000b10:	6833      	ldr	r3, [r6, #0]
 8000b12:	07d9      	lsls	r1, r3, #31
 8000b14:	d508      	bpl.n	8000b28 <_Unwind_VRS_Pop+0x1f8>
 8000b16:	f023 0301 	bic.w	r3, r3, #1
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	f840 3b48 	str.w	r3, [r0], #72
 8000b24:	f000 f85e 	bl	8000be4 <__gnu_Unwind_Save_VFP_D>
 8000b28:	f1b9 0f00 	cmp.w	r9, #0
 8000b2c:	d032      	beq.n	8000b94 <_Unwind_VRS_Pop+0x264>
 8000b2e:	6833      	ldr	r3, [r6, #0]
 8000b30:	075a      	lsls	r2, r3, #29
 8000b32:	d420      	bmi.n	8000b76 <_Unwind_VRS_Pop+0x246>
 8000b34:	f1b8 0f0f 	cmp.w	r8, #15
 8000b38:	d925      	bls.n	8000b86 <_Unwind_VRS_Pop+0x256>
 8000b3a:	466f      	mov	r7, sp
 8000b3c:	4638      	mov	r0, r7
 8000b3e:	f1c8 0510 	rsb	r5, r8, #16
 8000b42:	f000 f857 	bl	8000bf4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b4a:	f77f af7a 	ble.w	8000a42 <_Unwind_VRS_Pop+0x112>
 8000b4e:	af20      	add	r7, sp, #128	; 0x80
 8000b50:	e768      	b.n	8000a24 <_Unwind_VRS_Pop+0xf4>
 8000b52:	f023 0310 	bic.w	r3, r3, #16
 8000b56:	6033      	str	r3, [r6, #0]
 8000b58:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000b5c:	f000 f89c 	bl	8000c98 <__gnu_Unwind_Save_WMMXC>
 8000b60:	e6fe      	b.n	8000960 <_Unwind_VRS_Pop+0x30>
 8000b62:	f023 0308 	bic.w	r3, r3, #8
 8000b66:	6003      	str	r3, [r0, #0]
 8000b68:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000b6c:	f000 f868 	bl	8000c40 <__gnu_Unwind_Save_WMMXD>
 8000b70:	e725      	b.n	80009be <_Unwind_VRS_Pop+0x8e>
 8000b72:	af20      	add	r7, sp, #128	; 0x80
 8000b74:	e7bd      	b.n	8000af2 <_Unwind_VRS_Pop+0x1c2>
 8000b76:	4630      	mov	r0, r6
 8000b78:	f023 0304 	bic.w	r3, r3, #4
 8000b7c:	f840 3bd0 	str.w	r3, [r0], #208
 8000b80:	f000 f838 	bl	8000bf4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b84:	e7d6      	b.n	8000b34 <_Unwind_VRS_Pop+0x204>
 8000b86:	a820      	add	r0, sp, #128	; 0x80
 8000b88:	f000 f82c 	bl	8000be4 <__gnu_Unwind_Save_VFP_D>
 8000b8c:	e7d5      	b.n	8000b3a <_Unwind_VRS_Pop+0x20a>
 8000b8e:	f04f 0900 	mov.w	r9, #0
 8000b92:	e7bd      	b.n	8000b10 <_Unwind_VRS_Pop+0x1e0>
 8000b94:	f1b8 0f0f 	cmp.w	r8, #15
 8000b98:	f63f af3f 	bhi.w	8000a1a <_Unwind_VRS_Pop+0xea>
 8000b9c:	af20      	add	r7, sp, #128	; 0x80
 8000b9e:	4638      	mov	r0, r7
 8000ba0:	f000 f820 	bl	8000be4 <__gnu_Unwind_Save_VFP_D>
 8000ba4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f47f af3a 	bne.w	8000a20 <_Unwind_VRS_Pop+0xf0>
 8000bac:	4638      	mov	r0, r7
 8000bae:	f000 f815 	bl	8000bdc <__gnu_Unwind_Restore_VFP_D>
 8000bb2:	e762      	b.n	8000a7a <_Unwind_VRS_Pop+0x14a>

08000bb4 <__restore_core_regs>:
 8000bb4:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000bb8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000bbc:	469c      	mov	ip, r3
 8000bbe:	46a6      	mov	lr, r4
 8000bc0:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000bc4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000bc8:	46e5      	mov	sp, ip
 8000bca:	bd00      	pop	{pc}

08000bcc <__gnu_Unwind_Restore_VFP>:
 8000bcc:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <__gnu_Unwind_Save_VFP>:
 8000bd4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__gnu_Unwind_Restore_VFP_D>:
 8000bdc:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__gnu_Unwind_Save_VFP_D>:
 8000be4:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000bec:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000bf4:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__gnu_Unwind_Restore_WMMXD>:
 8000bfc:	ecf0 0102 	ldfe	f0, [r0], #8
 8000c00:	ecf0 1102 	ldfe	f1, [r0], #8
 8000c04:	ecf0 2102 	ldfe	f2, [r0], #8
 8000c08:	ecf0 3102 	ldfe	f3, [r0], #8
 8000c0c:	ecf0 4102 	ldfe	f4, [r0], #8
 8000c10:	ecf0 5102 	ldfe	f5, [r0], #8
 8000c14:	ecf0 6102 	ldfe	f6, [r0], #8
 8000c18:	ecf0 7102 	ldfe	f7, [r0], #8
 8000c1c:	ecf0 8102 	ldfp	f0, [r0], #8
 8000c20:	ecf0 9102 	ldfp	f1, [r0], #8
 8000c24:	ecf0 a102 	ldfp	f2, [r0], #8
 8000c28:	ecf0 b102 	ldfp	f3, [r0], #8
 8000c2c:	ecf0 c102 	ldfp	f4, [r0], #8
 8000c30:	ecf0 d102 	ldfp	f5, [r0], #8
 8000c34:	ecf0 e102 	ldfp	f6, [r0], #8
 8000c38:	ecf0 f102 	ldfp	f7, [r0], #8
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__gnu_Unwind_Save_WMMXD>:
 8000c40:	ece0 0102 	stfe	f0, [r0], #8
 8000c44:	ece0 1102 	stfe	f1, [r0], #8
 8000c48:	ece0 2102 	stfe	f2, [r0], #8
 8000c4c:	ece0 3102 	stfe	f3, [r0], #8
 8000c50:	ece0 4102 	stfe	f4, [r0], #8
 8000c54:	ece0 5102 	stfe	f5, [r0], #8
 8000c58:	ece0 6102 	stfe	f6, [r0], #8
 8000c5c:	ece0 7102 	stfe	f7, [r0], #8
 8000c60:	ece0 8102 	stfp	f0, [r0], #8
 8000c64:	ece0 9102 	stfp	f1, [r0], #8
 8000c68:	ece0 a102 	stfp	f2, [r0], #8
 8000c6c:	ece0 b102 	stfp	f3, [r0], #8
 8000c70:	ece0 c102 	stfp	f4, [r0], #8
 8000c74:	ece0 d102 	stfp	f5, [r0], #8
 8000c78:	ece0 e102 	stfp	f6, [r0], #8
 8000c7c:	ece0 f102 	stfp	f7, [r0], #8
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop

08000c84 <__gnu_Unwind_Restore_WMMXC>:
 8000c84:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000c88:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000c8c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000c90:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__gnu_Unwind_Save_WMMXC>:
 8000c98:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000c9c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000ca0:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000ca4:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <_Unwind_RaiseException>:
 8000cac:	46ec      	mov	ip, sp
 8000cae:	b500      	push	{lr}
 8000cb0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cb4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cc0:	a901      	add	r1, sp, #4
 8000cc2:	f7ff fbe1 	bl	8000488 <__gnu_Unwind_RaiseException>
 8000cc6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cca:	b012      	add	sp, #72	; 0x48
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <_Unwind_Resume>:
 8000cd0:	46ec      	mov	ip, sp
 8000cd2:	b500      	push	{lr}
 8000cd4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cd8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000ce4:	a901      	add	r1, sp, #4
 8000ce6:	f7ff fc0b 	bl	8000500 <__gnu_Unwind_Resume>
 8000cea:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cee:	b012      	add	sp, #72	; 0x48
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <_Unwind_Resume_or_Rethrow>:
 8000cf4:	46ec      	mov	ip, sp
 8000cf6:	b500      	push	{lr}
 8000cf8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cfc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d08:	a901      	add	r1, sp, #4
 8000d0a:	f7ff fc1b 	bl	8000544 <__gnu_Unwind_Resume_or_Rethrow>
 8000d0e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d12:	b012      	add	sp, #72	; 0x48
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <_Unwind_ForcedUnwind>:
 8000d18:	46ec      	mov	ip, sp
 8000d1a:	b500      	push	{lr}
 8000d1c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d20:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d24:	f04f 0300 	mov.w	r3, #0
 8000d28:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d2c:	ab01      	add	r3, sp, #4
 8000d2e:	f7ff fbdf 	bl	80004f0 <__gnu_Unwind_ForcedUnwind>
 8000d32:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d36:	b012      	add	sp, #72	; 0x48
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <_Unwind_Backtrace>:
 8000d3c:	46ec      	mov	ip, sp
 8000d3e:	b500      	push	{lr}
 8000d40:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d44:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d50:	aa01      	add	r2, sp, #4
 8000d52:	f7ff fc51 	bl	80005f8 <__gnu_Unwind_Backtrace>
 8000d56:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d5a:	b012      	add	sp, #72	; 0x48
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <next_unwind_byte>:
 8000d60:	7a02      	ldrb	r2, [r0, #8]
 8000d62:	4603      	mov	r3, r0
 8000d64:	b97a      	cbnz	r2, 8000d86 <next_unwind_byte+0x26>
 8000d66:	7a42      	ldrb	r2, [r0, #9]
 8000d68:	b1a2      	cbz	r2, 8000d94 <next_unwind_byte+0x34>
 8000d6a:	6841      	ldr	r1, [r0, #4]
 8000d6c:	3a01      	subs	r2, #1
 8000d6e:	b410      	push	{r4}
 8000d70:	7242      	strb	r2, [r0, #9]
 8000d72:	6808      	ldr	r0, [r1, #0]
 8000d74:	2203      	movs	r2, #3
 8000d76:	1d0c      	adds	r4, r1, #4
 8000d78:	721a      	strb	r2, [r3, #8]
 8000d7a:	0202      	lsls	r2, r0, #8
 8000d7c:	605c      	str	r4, [r3, #4]
 8000d7e:	0e00      	lsrs	r0, r0, #24
 8000d80:	bc10      	pop	{r4}
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	4770      	bx	lr
 8000d86:	6800      	ldr	r0, [r0, #0]
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	721a      	strb	r2, [r3, #8]
 8000d8c:	0202      	lsls	r2, r0, #8
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	0e00      	lsrs	r0, r0, #24
 8000d92:	4770      	bx	lr
 8000d94:	20b0      	movs	r0, #176	; 0xb0
 8000d96:	4770      	bx	lr

08000d98 <_Unwind_GetGR.constprop.0>:
 8000d98:	b500      	push	{lr}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	aa03      	add	r2, sp, #12
 8000da0:	9200      	str	r2, [sp, #0]
 8000da2:	4619      	mov	r1, r3
 8000da4:	220c      	movs	r2, #12
 8000da6:	f7ff fbdd 	bl	8000564 <_Unwind_VRS_Get>
 8000daa:	9803      	ldr	r0, [sp, #12]
 8000dac:	b005      	add	sp, #20
 8000dae:	f85d fb04 	ldr.w	pc, [sp], #4
 8000db2:	bf00      	nop

08000db4 <unwind_UCB_from_context>:
 8000db4:	e7f0      	b.n	8000d98 <_Unwind_GetGR.constprop.0>
 8000db6:	bf00      	nop

08000db8 <__gnu_unwind_execute>:
 8000db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dbc:	4605      	mov	r5, r0
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	460e      	mov	r6, r1
 8000dc2:	f04f 0800 	mov.w	r8, #0
 8000dc6:	4630      	mov	r0, r6
 8000dc8:	f7ff ffca 	bl	8000d60 <next_unwind_byte>
 8000dcc:	28b0      	cmp	r0, #176	; 0xb0
 8000dce:	4604      	mov	r4, r0
 8000dd0:	f000 80ba 	beq.w	8000f48 <__gnu_unwind_execute+0x190>
 8000dd4:	0607      	lsls	r7, r0, #24
 8000dd6:	d520      	bpl.n	8000e1a <__gnu_unwind_execute+0x62>
 8000dd8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000ddc:	2b80      	cmp	r3, #128	; 0x80
 8000dde:	d04d      	beq.n	8000e7c <__gnu_unwind_execute+0xc4>
 8000de0:	2b90      	cmp	r3, #144	; 0x90
 8000de2:	d036      	beq.n	8000e52 <__gnu_unwind_execute+0x9a>
 8000de4:	2ba0      	cmp	r3, #160	; 0xa0
 8000de6:	d060      	beq.n	8000eaa <__gnu_unwind_execute+0xf2>
 8000de8:	2bb0      	cmp	r3, #176	; 0xb0
 8000dea:	d074      	beq.n	8000ed6 <__gnu_unwind_execute+0x11e>
 8000dec:	2bc0      	cmp	r3, #192	; 0xc0
 8000dee:	f000 808b 	beq.w	8000f08 <__gnu_unwind_execute+0x150>
 8000df2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000df6:	2bd0      	cmp	r3, #208	; 0xd0
 8000df8:	d10b      	bne.n	8000e12 <__gnu_unwind_execute+0x5a>
 8000dfa:	f000 0207 	and.w	r2, r0, #7
 8000dfe:	3201      	adds	r2, #1
 8000e00:	2305      	movs	r3, #5
 8000e02:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e06:	2101      	movs	r1, #1
 8000e08:	4628      	mov	r0, r5
 8000e0a:	f7ff fd91 	bl	8000930 <_Unwind_VRS_Pop>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	d0d9      	beq.n	8000dc6 <__gnu_unwind_execute+0xe>
 8000e12:	2009      	movs	r0, #9
 8000e14:	b005      	add	sp, #20
 8000e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e1a:	0083      	lsls	r3, r0, #2
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	1d1f      	adds	r7, r3, #4
 8000e20:	f10d 090c 	add.w	r9, sp, #12
 8000e24:	2300      	movs	r3, #0
 8000e26:	4619      	mov	r1, r3
 8000e28:	f8cd 9000 	str.w	r9, [sp]
 8000e2c:	220d      	movs	r2, #13
 8000e2e:	4628      	mov	r0, r5
 8000e30:	f7ff fb98 	bl	8000564 <_Unwind_VRS_Get>
 8000e34:	9b03      	ldr	r3, [sp, #12]
 8000e36:	f8cd 9000 	str.w	r9, [sp]
 8000e3a:	0660      	lsls	r0, r4, #25
 8000e3c:	bf4c      	ite	mi
 8000e3e:	1bdf      	submi	r7, r3, r7
 8000e40:	18ff      	addpl	r7, r7, r3
 8000e42:	2300      	movs	r3, #0
 8000e44:	220d      	movs	r2, #13
 8000e46:	4619      	mov	r1, r3
 8000e48:	4628      	mov	r0, r5
 8000e4a:	9703      	str	r7, [sp, #12]
 8000e4c:	f7ff fbb0 	bl	80005b0 <_Unwind_VRS_Set>
 8000e50:	e7b9      	b.n	8000dc6 <__gnu_unwind_execute+0xe>
 8000e52:	f000 030d 	and.w	r3, r0, #13
 8000e56:	2b0d      	cmp	r3, #13
 8000e58:	d0db      	beq.n	8000e12 <__gnu_unwind_execute+0x5a>
 8000e5a:	af03      	add	r7, sp, #12
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f000 020f 	and.w	r2, r0, #15
 8000e62:	4619      	mov	r1, r3
 8000e64:	9700      	str	r7, [sp, #0]
 8000e66:	4628      	mov	r0, r5
 8000e68:	f7ff fb7c 	bl	8000564 <_Unwind_VRS_Get>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	9700      	str	r7, [sp, #0]
 8000e70:	220d      	movs	r2, #13
 8000e72:	4619      	mov	r1, r3
 8000e74:	4628      	mov	r0, r5
 8000e76:	f7ff fb9b 	bl	80005b0 <_Unwind_VRS_Set>
 8000e7a:	e7a4      	b.n	8000dc6 <__gnu_unwind_execute+0xe>
 8000e7c:	4630      	mov	r0, r6
 8000e7e:	f7ff ff6f 	bl	8000d60 <next_unwind_byte>
 8000e82:	0224      	lsls	r4, r4, #8
 8000e84:	4320      	orrs	r0, r4
 8000e86:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000e8a:	d0c2      	beq.n	8000e12 <__gnu_unwind_execute+0x5a>
 8000e8c:	0104      	lsls	r4, r0, #4
 8000e8e:	2300      	movs	r3, #0
 8000e90:	b2a2      	uxth	r2, r4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4628      	mov	r0, r5
 8000e96:	f7ff fd4b 	bl	8000930 <_Unwind_VRS_Pop>
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d1b9      	bne.n	8000e12 <__gnu_unwind_execute+0x5a>
 8000e9e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000ea2:	bf18      	it	ne
 8000ea4:	f04f 0801 	movne.w	r8, #1
 8000ea8:	e78d      	b.n	8000dc6 <__gnu_unwind_execute+0xe>
 8000eaa:	43c2      	mvns	r2, r0
 8000eac:	f002 0307 	and.w	r3, r2, #7
 8000eb0:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000eb4:	411a      	asrs	r2, r3
 8000eb6:	0701      	lsls	r1, r0, #28
 8000eb8:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	bf48      	it	mi
 8000ec2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4628      	mov	r0, r5
 8000eca:	f7ff fd31 	bl	8000930 <_Unwind_VRS_Pop>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	f43f af79 	beq.w	8000dc6 <__gnu_unwind_execute+0xe>
 8000ed4:	e79d      	b.n	8000e12 <__gnu_unwind_execute+0x5a>
 8000ed6:	28b1      	cmp	r0, #177	; 0xb1
 8000ed8:	d03b      	beq.n	8000f52 <__gnu_unwind_execute+0x19a>
 8000eda:	28b2      	cmp	r0, #178	; 0xb2
 8000edc:	f000 8093 	beq.w	8001006 <__gnu_unwind_execute+0x24e>
 8000ee0:	28b3      	cmp	r0, #179	; 0xb3
 8000ee2:	d041      	beq.n	8000f68 <__gnu_unwind_execute+0x1b0>
 8000ee4:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000ee8:	2bb4      	cmp	r3, #180	; 0xb4
 8000eea:	d092      	beq.n	8000e12 <__gnu_unwind_execute+0x5a>
 8000eec:	f000 0207 	and.w	r2, r0, #7
 8000ef0:	3201      	adds	r2, #1
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4628      	mov	r0, r5
 8000efc:	f7ff fd18 	bl	8000930 <_Unwind_VRS_Pop>
 8000f00:	2800      	cmp	r0, #0
 8000f02:	f43f af60 	beq.w	8000dc6 <__gnu_unwind_execute+0xe>
 8000f06:	e784      	b.n	8000e12 <__gnu_unwind_execute+0x5a>
 8000f08:	28c6      	cmp	r0, #198	; 0xc6
 8000f0a:	d04a      	beq.n	8000fa2 <__gnu_unwind_execute+0x1ea>
 8000f0c:	28c7      	cmp	r0, #199	; 0xc7
 8000f0e:	d054      	beq.n	8000fba <__gnu_unwind_execute+0x202>
 8000f10:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000f14:	2bc0      	cmp	r3, #192	; 0xc0
 8000f16:	d063      	beq.n	8000fe0 <__gnu_unwind_execute+0x228>
 8000f18:	28c8      	cmp	r0, #200	; 0xc8
 8000f1a:	d068      	beq.n	8000fee <__gnu_unwind_execute+0x236>
 8000f1c:	28c9      	cmp	r0, #201	; 0xc9
 8000f1e:	f47f af78 	bne.w	8000e12 <__gnu_unwind_execute+0x5a>
 8000f22:	4630      	mov	r0, r6
 8000f24:	f7ff ff1c 	bl	8000d60 <next_unwind_byte>
 8000f28:	0302      	lsls	r2, r0, #12
 8000f2a:	f000 000f 	and.w	r0, r0, #15
 8000f2e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000f32:	3001      	adds	r0, #1
 8000f34:	4302      	orrs	r2, r0
 8000f36:	2101      	movs	r1, #1
 8000f38:	2305      	movs	r3, #5
 8000f3a:	4628      	mov	r0, r5
 8000f3c:	f7ff fcf8 	bl	8000930 <_Unwind_VRS_Pop>
 8000f40:	2800      	cmp	r0, #0
 8000f42:	f43f af40 	beq.w	8000dc6 <__gnu_unwind_execute+0xe>
 8000f46:	e764      	b.n	8000e12 <__gnu_unwind_execute+0x5a>
 8000f48:	f1b8 0f00 	cmp.w	r8, #0
 8000f4c:	d018      	beq.n	8000f80 <__gnu_unwind_execute+0x1c8>
 8000f4e:	2000      	movs	r0, #0
 8000f50:	e760      	b.n	8000e14 <__gnu_unwind_execute+0x5c>
 8000f52:	4630      	mov	r0, r6
 8000f54:	f7ff ff04 	bl	8000d60 <next_unwind_byte>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	f43f af59 	beq.w	8000e12 <__gnu_unwind_execute+0x5a>
 8000f60:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f64:	d0c8      	beq.n	8000ef8 <__gnu_unwind_execute+0x140>
 8000f66:	e754      	b.n	8000e12 <__gnu_unwind_execute+0x5a>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	f7ff fef9 	bl	8000d60 <next_unwind_byte>
 8000f6e:	0302      	lsls	r2, r0, #12
 8000f70:	f000 030f 	and.w	r3, r0, #15
 8000f74:	3301      	adds	r3, #1
 8000f76:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e7bb      	b.n	8000ef8 <__gnu_unwind_execute+0x140>
 8000f80:	ac03      	add	r4, sp, #12
 8000f82:	4643      	mov	r3, r8
 8000f84:	220e      	movs	r2, #14
 8000f86:	4641      	mov	r1, r8
 8000f88:	9400      	str	r4, [sp, #0]
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	f7ff faea 	bl	8000564 <_Unwind_VRS_Get>
 8000f90:	9400      	str	r4, [sp, #0]
 8000f92:	4643      	mov	r3, r8
 8000f94:	220f      	movs	r2, #15
 8000f96:	4641      	mov	r1, r8
 8000f98:	4628      	mov	r0, r5
 8000f9a:	f7ff fb09 	bl	80005b0 <_Unwind_VRS_Set>
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	e738      	b.n	8000e14 <__gnu_unwind_execute+0x5c>
 8000fa2:	4630      	mov	r0, r6
 8000fa4:	f7ff fedc 	bl	8000d60 <next_unwind_byte>
 8000fa8:	0302      	lsls	r2, r0, #12
 8000faa:	f000 030f 	and.w	r3, r0, #15
 8000fae:	3301      	adds	r3, #1
 8000fb0:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e79e      	b.n	8000ef8 <__gnu_unwind_execute+0x140>
 8000fba:	4630      	mov	r0, r6
 8000fbc:	f7ff fed0 	bl	8000d60 <next_unwind_byte>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	f43f af25 	beq.w	8000e12 <__gnu_unwind_execute+0x5a>
 8000fc8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fcc:	f47f af21 	bne.w	8000e12 <__gnu_unwind_execute+0x5a>
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4628      	mov	r0, r5
 8000fd4:	f7ff fcac 	bl	8000930 <_Unwind_VRS_Pop>
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	f43f aef4 	beq.w	8000dc6 <__gnu_unwind_execute+0xe>
 8000fde:	e718      	b.n	8000e12 <__gnu_unwind_execute+0x5a>
 8000fe0:	f000 020f 	and.w	r2, r0, #15
 8000fe4:	3201      	adds	r2, #1
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000fec:	e784      	b.n	8000ef8 <__gnu_unwind_execute+0x140>
 8000fee:	4630      	mov	r0, r6
 8000ff0:	f7ff feb6 	bl	8000d60 <next_unwind_byte>
 8000ff4:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8000ff8:	f000 030f 	and.w	r3, r0, #15
 8000ffc:	3210      	adds	r2, #16
 8000ffe:	3301      	adds	r3, #1
 8001000:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001004:	e797      	b.n	8000f36 <__gnu_unwind_execute+0x17e>
 8001006:	2300      	movs	r3, #0
 8001008:	f10d 090c 	add.w	r9, sp, #12
 800100c:	220d      	movs	r2, #13
 800100e:	4619      	mov	r1, r3
 8001010:	f8cd 9000 	str.w	r9, [sp]
 8001014:	4628      	mov	r0, r5
 8001016:	f7ff faa5 	bl	8000564 <_Unwind_VRS_Get>
 800101a:	4630      	mov	r0, r6
 800101c:	f7ff fea0 	bl	8000d60 <next_unwind_byte>
 8001020:	0602      	lsls	r2, r0, #24
 8001022:	f04f 0402 	mov.w	r4, #2
 8001026:	d50c      	bpl.n	8001042 <__gnu_unwind_execute+0x28a>
 8001028:	9b03      	ldr	r3, [sp, #12]
 800102a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800102e:	40a0      	lsls	r0, r4
 8001030:	4418      	add	r0, r3
 8001032:	9003      	str	r0, [sp, #12]
 8001034:	4630      	mov	r0, r6
 8001036:	f7ff fe93 	bl	8000d60 <next_unwind_byte>
 800103a:	0603      	lsls	r3, r0, #24
 800103c:	f104 0407 	add.w	r4, r4, #7
 8001040:	d4f2      	bmi.n	8001028 <__gnu_unwind_execute+0x270>
 8001042:	9b03      	ldr	r3, [sp, #12]
 8001044:	f8cd 9000 	str.w	r9, [sp]
 8001048:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800104c:	40a2      	lsls	r2, r4
 800104e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001052:	441a      	add	r2, r3
 8001054:	2300      	movs	r3, #0
 8001056:	9203      	str	r2, [sp, #12]
 8001058:	4619      	mov	r1, r3
 800105a:	220d      	movs	r2, #13
 800105c:	4628      	mov	r0, r5
 800105e:	f7ff faa7 	bl	80005b0 <_Unwind_VRS_Set>
 8001062:	e6b0      	b.n	8000dc6 <__gnu_unwind_execute+0xe>

08001064 <__gnu_unwind_frame>:
 8001064:	b510      	push	{r4, lr}
 8001066:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001068:	6853      	ldr	r3, [r2, #4]
 800106a:	b084      	sub	sp, #16
 800106c:	f04f 0c03 	mov.w	ip, #3
 8001070:	3208      	adds	r2, #8
 8001072:	021c      	lsls	r4, r3, #8
 8001074:	4608      	mov	r0, r1
 8001076:	0e1b      	lsrs	r3, r3, #24
 8001078:	a901      	add	r1, sp, #4
 800107a:	9401      	str	r4, [sp, #4]
 800107c:	9202      	str	r2, [sp, #8]
 800107e:	f88d c00c 	strb.w	ip, [sp, #12]
 8001082:	f88d 300d 	strb.w	r3, [sp, #13]
 8001086:	f7ff fe97 	bl	8000db8 <__gnu_unwind_execute>
 800108a:	b004      	add	sp, #16
 800108c:	bd10      	pop	{r4, pc}
 800108e:	bf00      	nop

08001090 <_Unwind_GetRegionStart>:
 8001090:	b508      	push	{r3, lr}
 8001092:	f7ff fe8f 	bl	8000db4 <unwind_UCB_from_context>
 8001096:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001098:	bd08      	pop	{r3, pc}
 800109a:	bf00      	nop

0800109c <_Unwind_GetLanguageSpecificData>:
 800109c:	b508      	push	{r3, lr}
 800109e:	f7ff fe89 	bl	8000db4 <unwind_UCB_from_context>
 80010a2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80010a4:	79c3      	ldrb	r3, [r0, #7]
 80010a6:	3302      	adds	r3, #2
 80010a8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80010ac:	bd08      	pop	{r3, pc}
 80010ae:	bf00      	nop

080010b0 <_ZN7stm_CAN9CAN_303x84sendEmNS_7ID_typeENS_10Frame_typeEPhm>:

#include "CAN303x8.h"

namespace stm_CAN {

HAL_StatusTypeDef CAN_303x8::send(uint32_t ID, ID_type ide, Frame_type rtr, uint8_t *data, uint32_t data_len) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08c      	sub	sp, #48	; 0x30
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	4611      	mov	r1, r2
 80010bc:	461a      	mov	r2, r3
 80010be:	460b      	mov	r3, r1
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	4613      	mov	r3, r2
 80010c4:	71bb      	strb	r3, [r7, #6]
	if(data_len > 8)
 80010c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d901      	bls.n	80010d0 <_ZN7stm_CAN9CAN_303x84sendEmNS_7ID_typeENS_10Frame_typeEPhm+0x20>
		return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e017      	b.n	8001100 <_ZN7stm_CAN9CAN_303x84sendEmNS_7ID_typeENS_10Frame_typeEPhm+0x50>
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	TxHeader.StdId = ID;
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	61bb      	str	r3, [r7, #24]
	TxHeader.ExtId = ID;
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	61fb      	str	r3, [r7, #28]
	TxHeader.IDE = ide;
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	623b      	str	r3, [r7, #32]
	TxHeader.RTR = rtr;
 80010dc:	79bb      	ldrb	r3, [r7, #6]
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.DLC = data_len;
 80010e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.TransmitGlobalTime = DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	return HAL_CAN_AddTxMessage(hcan, &TxHeader, data, &TxMailbox);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6858      	ldr	r0, [r3, #4]
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	f107 0118 	add.w	r1, r7, #24
 80010f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010f8:	f001 fda6 	bl	8002c48 <HAL_CAN_AddTxMessage>
 80010fc:	4603      	mov	r3, r0
 80010fe:	bf00      	nop
}
 8001100:	4618      	mov	r0, r3
 8001102:	3730      	adds	r7, #48	; 0x30
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE>:

HAL_StatusTypeDef CAN_303x8::subscribe_message(uint32_t ID, ID_type ide, Frame_type rtr, FIFO fifo) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b092      	sub	sp, #72	; 0x48
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	4611      	mov	r1, r2
 8001114:	461a      	mov	r2, r3
 8001116:	460b      	mov	r3, r1
 8001118:	71fb      	strb	r3, [r7, #7]
 800111a:	4613      	mov	r3, r2
 800111c:	71bb      	strb	r3, [r7, #6]
	uint32_t id_for_filter = (ID << ((ide == ID_type::std)?21:3)) | ide | rtr;
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x20>
 8001124:	2315      	movs	r3, #21
 8001126:	e000      	b.n	800112a <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x22>
 8001128:	2303      	movs	r3, #3
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	409a      	lsls	r2, r3
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	431a      	orrs	r2, r3
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	4313      	orrs	r3, r2
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
	int filter_buffer_index = -1;
 8001138:	f04f 33ff 	mov.w	r3, #4294967295
 800113c:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i < 14; i++){
 800113e:	2300      	movs	r3, #0
 8001140:	643b      	str	r3, [r7, #64]	; 0x40
 8001142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001144:	2b0d      	cmp	r3, #13
 8001146:	dc50      	bgt.n	80011ea <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xe2>
		switch(this->filter_buffer[i].list){
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800114c:	323c      	adds	r2, #60	; 0x3c
 800114e:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d021      	beq.n	800119a <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x92>
 8001156:	2b02      	cmp	r3, #2
 8001158:	dc43      	bgt.n	80011e2 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
 800115a:	2b00      	cmp	r3, #0
 800115c:	d002      	beq.n	8001164 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x5c>
 800115e:	2b01      	cmp	r3, #1
 8001160:	d003      	beq.n	800116a <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x62>
 8001162:	e03e      	b.n	80011e2 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
		case filter_buffer_status::list::empty:
			filter_buffer_index = i;
 8001164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001166:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8001168:	e03b      	b.n	80011e2 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
		case filter_buffer_status::list::filled_harf:
			if(this->filter_buffer[i].fifo == fifo){
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800116e:	333c      	adds	r3, #60	; 0x3c
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	785b      	ldrb	r3, [r3, #1]
 8001176:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800117a:	429a      	cmp	r2, r3
 800117c:	d12c      	bne.n	80011d8 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xd0>
				if(this->subscribed_id[i*2] == id_for_filter)
 800117e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001180:	005a      	lsls	r2, r3, #1
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3202      	adds	r2, #2
 8001186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800118c:	429a      	cmp	r2, r3
 800118e:	d101      	bne.n	8001194 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x8c>
					return HAL_OK;
 8001190:	2300      	movs	r3, #0
 8001192:	e09f      	b.n	80012d4 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
				else{
					filter_buffer_index = i;
 8001194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001196:	647b      	str	r3, [r7, #68]	; 0x44
					break;
 8001198:	e023      	b.n	80011e2 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
				}
			}else{
				continue;
			}
		case filter_buffer_status::list::filled:
			if(this->filter_buffer[i].fifo == fifo){
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800119e:	333c      	adds	r3, #60	; 0x3c
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	785b      	ldrb	r3, [r3, #1]
 80011a6:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d116      	bne.n	80011dc <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xd4>
				if(this->subscribed_id[i*2] == id_for_filter || this->subscribed_id[i*2+1] == id_for_filter)
 80011ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011b0:	005a      	lsls	r2, r3, #1
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3202      	adds	r2, #2
 80011b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011bc:	429a      	cmp	r2, r3
 80011be:	d009      	beq.n	80011d4 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xcc>
 80011c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3202      	adds	r2, #2
 80011ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d105      	bne.n	80011e0 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xd8>
					return HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	e07d      	b.n	80012d4 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
				continue;
 80011d8:	bf00      	nop
 80011da:	e002      	b.n	80011e2 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
				else{
					continue;
				}
			}else{
				continue;
 80011dc:	bf00      	nop
 80011de:	e000      	b.n	80011e2 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xda>
					continue;
 80011e0:	bf00      	nop
	for(int i = 0; i < 14; i++){
 80011e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011e4:	3301      	adds	r3, #1
 80011e6:	643b      	str	r3, [r7, #64]	; 0x40
 80011e8:	e7ab      	b.n	8001142 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x3a>
			}
		}
	}
	if(filter_buffer_index == -1)
 80011ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f0:	d101      	bne.n	80011f6 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0xee>
		return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e06e      	b.n	80012d4 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
	uint32_t id_for_filter_first = (this->filter_buffer[filter_buffer_index].list == filter_buffer_status::list::empty)?id_for_filter:this->subscribed_id[filter_buffer_index*2];
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80011fa:	323c      	adds	r2, #60	; 0x3c
 80011fc:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d006      	beq.n	8001212 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x10a>
 8001204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001206:	005a      	lsls	r2, r3, #1
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3202      	adds	r2, #2
 800120c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001210:	e000      	b.n	8001214 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x10c>
 8001212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001214:	63bb      	str	r3, [r7, #56]	; 0x38
	CAN_FilterTypeDef filter;
	filter.FilterIdHigh = id_for_filter_first >> 16;
 8001216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001218:	0c1b      	lsrs	r3, r3, #16
 800121a:	613b      	str	r3, [r7, #16]
	filter.FilterIdLow = id_for_filter_first & 0xffff;
 800121c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800121e:	b29b      	uxth	r3, r3
 8001220:	617b      	str	r3, [r7, #20]
	filter.FilterMaskIdHigh = id_for_filter >> 16; 
 8001222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001224:	0c1b      	lsrs	r3, r3, #16
 8001226:	61bb      	str	r3, [r7, #24]
	filter.FilterMaskIdLow = id_for_filter & 0xffff;
 8001228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800122a:	b29b      	uxth	r3, r3
 800122c:	61fb      	str	r3, [r7, #28]
	filter.FilterScale = Filter_scale::_32;
 800122e:	2301      	movs	r3, #1
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
	filter.FilterMode = Filter_mode::list;
 8001232:	2301      	movs	r3, #1
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
	filter.FilterFIFOAssignment = fifo;
 8001236:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800123a:	623b      	str	r3, [r7, #32]
	filter.FilterActivation = Filter_activation::enable;
 800123c:	2301      	movs	r3, #1
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
	filter.FilterBank = filter_buffer_index;
 8001240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
	if(HAL_CAN_ConfigFilter(this->hcan, &filter) != HAL_OK)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f107 0210 	add.w	r2, r7, #16
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f001 fba3 	bl	800299a <HAL_CAN_ConfigFilter>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	bf14      	ite	ne
 800125a:	2301      	movne	r3, #1
 800125c:	2300      	moveq	r3, #0
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x160>
		return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e035      	b.n	80012d4 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
	this->filter_buffer[filter_buffer_index].fifo = fifo;
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800126c:	333c      	adds	r3, #60	; 0x3c
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8001276:	705a      	strb	r2, [r3, #1]
	if(this->filter_buffer[filter_buffer_index].list == filter_buffer_status::list::empty){
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800127c:	323c      	adds	r2, #60	; 0x3c
 800127e:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10e      	bne.n	80012a4 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x19c>
		this->filter_buffer[filter_buffer_index].list = filter_buffer_status::list::filled_harf;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800128a:	323c      	adds	r2, #60	; 0x3c
 800128c:	2101      	movs	r1, #1
 800128e:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
		this->subscribed_id[filter_buffer_index*2] = id_for_filter;
 8001292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001294:	005a      	lsls	r2, r3, #1
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3202      	adds	r2, #2
 800129a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800129c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return HAL_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e017      	b.n	80012d4 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
	}else if(this->filter_buffer[filter_buffer_index].list == filter_buffer_status::list::filled_harf){
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012a8:	323c      	adds	r2, #60	; 0x3c
 80012aa:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d10f      	bne.n	80012d2 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1ca>
		this->filter_buffer[filter_buffer_index].list = filter_buffer_status::list::filled;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012b6:	323c      	adds	r2, #60	; 0x3c
 80012b8:	2102      	movs	r1, #2
 80012ba:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
		this->subscribed_id[filter_buffer_index*2+1] = id_for_filter;
 80012be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3202      	adds	r2, #2
 80012c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80012ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e000      	b.n	80012d4 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE+0x1cc>
	}else{
		return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
	}
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3748      	adds	r7, #72	; 0x48
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh>:
	}else{
		return HAL_ERROR;
	}
}

read_retval CAN_303x8::read(FIFO fifo, uint8_t *data){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	460b      	mov	r3, r1
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	72fb      	strb	r3, [r7, #11]
	uint32_t fifofilllevel = HAL_CAN_GetRxFifoFillLevel(this->hcan, fifo);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	7afa      	ldrb	r2, [r7, #11]
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f001 fe95 	bl	8003022 <HAL_CAN_GetRxFifoFillLevel>
 80012f8:	62f8      	str	r0, [r7, #44]	; 0x2c
	if(fifofilllevel == 0)
 80012fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh+0x28>
		return read_retval::no_message;
 8001300:	2300      	movs	r3, #0
 8001302:	e017      	b.n	8001334 <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh+0x58>
	CAN_RxHeaderTypeDef RxHeader;
	if(HAL_CAN_GetRxMessage(this->hcan, fifo, &RxHeader, data) != HAL_OK)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6858      	ldr	r0, [r3, #4]
 8001308:	7af9      	ldrb	r1, [r7, #11]
 800130a:	f107 0210 	add.w	r2, r7, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f001 fd75 	bl	8002dfe <HAL_CAN_GetRxMessage>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf14      	ite	ne
 800131a:	2301      	movne	r3, #1
 800131c:	2300      	moveq	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh+0x4c>
		return read_retval::error;
 8001324:	2303      	movs	r3, #3
 8001326:	e005      	b.n	8001334 <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh+0x58>
	if(fifofilllevel == 1){
 8001328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132a:	2b01      	cmp	r3, #1
 800132c:	d101      	bne.n	8001332 <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh+0x56>
		return read_retval::message_received;
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh+0x58>
	}else{
		return read_retval::more_message_received;
 8001332:	2302      	movs	r3, #2
	}
}
 8001334:	4618      	mov	r0, r3
 8001336:	3730      	adds	r7, #48	; 0x30
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef>:
	}else{
		return read_retval::more_message_received;
	}
}

CAN_303x8::CAN_303x8(CAN_HandleTypeDef *hcan) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef+0x2c>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->hcan = hcan;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	605a      	str	r2, [r3, #4]
	HAL_CAN_Start(this->hcan);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4618      	mov	r0, r3
 8001358:	f001 fbe9 	bl	8002b2e <HAL_CAN_Start>
}
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	080083f0 	.word	0x080083f0

0800136c <_ZN7stm_CAN9CAN_303x8D1Ev>:

CAN_303x8::~CAN_303x8() {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	4a06      	ldr	r2, [pc, #24]	; (8001390 <_ZN7stm_CAN9CAN_303x8D1Ev+0x24>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
	HAL_CAN_Stop(this->hcan);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4618      	mov	r0, r3
 8001380:	f001 fc19 	bl	8002bb6 <HAL_CAN_Stop>
}
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	080083f0 	.word	0x080083f0

08001394 <_ZN7stm_CAN9CAN_303x8D0Ev>:
CAN_303x8::~CAN_303x8() {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
}
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ffe5 	bl	800136c <_ZN7stm_CAN9CAN_303x8D1Ev>
 80013a2:	2194      	movs	r1, #148	; 0x94
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f006 fa1a 	bl	80077de <_ZdlPvj>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <_ZZ4mainENKUlPhE_clES_>:
  const uint32_t original_id = 0x0100;
  can.subscribe_message(0x00, stm_CAN::ID_type::std, stm_CAN::Frame_type::data, stm_CAN::FIFO::_0);
  can.subscribe_message(0x01, stm_CAN::ID_type::ext, stm_CAN::Frame_type::data, stm_CAN::FIFO::_0);
  can.subscribe_message(original_id, stm_CAN::ID_type::ext, stm_CAN::Frame_type::data, stm_CAN::FIFO::_0);

  auto process_data = [&](uint8_t* data){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af02      	add	r7, sp, #8
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
    switch (data[0])
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b05      	cmp	r3, #5
 80013c4:	d870      	bhi.n	80014a8 <_ZZ4mainENKUlPhE_clES_+0xf4>
 80013c6:	a201      	add	r2, pc, #4	; (adr r2, 80013cc <_ZZ4mainENKUlPhE_clES_+0x18>)
 80013c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013cc:	080013e5 	.word	0x080013e5
 80013d0:	080013ef 	.word	0x080013ef
 80013d4:	080013f9 	.word	0x080013f9
 80013d8:	08001407 	.word	0x08001407
 80013dc:	0800145b 	.word	0x0800145b
 80013e0:	0800148b 	.word	0x0800148b
      {
      case 0x00:  //stop
        state = state::STATE_STOPPED;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
        break;
 80013ec:	e05d      	b.n	80014aa <_ZZ4mainENKUlPhE_clES_+0xf6>
        state = state::STATE_STOPPED;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
      case 0x01:  //start
        state = state::STATE_RUNNING;
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
        break;
 80013f6:	e058      	b.n	80014aa <_ZZ4mainENKUlPhE_clES_+0xf6>
      case 0x02:  //reset
        HAL_NVIC_SystemReset();
 80013f8:	f001 ff57 	bl	80032aa <HAL_NVIC_SystemReset>
        state = state::STATE_STOPPED;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
        state = state::STATE_STOPPED;
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
        break;
 8001404:	e051      	b.n	80014aa <_ZZ4mainENKUlPhE_clES_+0xf6>
      case 0x03:  //get original id
        {
          uint8_t data_response[4];
          for( uint8_t i = 0; i < 4; i++){
 8001406:	2300      	movs	r3, #0
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	2b03      	cmp	r3, #3
 800140e:	d80e      	bhi.n	800142e <_ZZ4mainENKUlPhE_clES_+0x7a>
            data_response[i] = (original_id >> (i*8)) & 0xFF;
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001418:	40da      	lsrs	r2, r3
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	3310      	adds	r3, #16
 8001420:	443b      	add	r3, r7
 8001422:	f803 2c08 	strb.w	r2, [r3, #-8]
          for( uint8_t i = 0; i < 4; i++){
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	3301      	adds	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	e7ed      	b.n	800140a <_ZZ4mainENKUlPhE_clES_+0x56>
          }
          can.send(
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6858      	ldr	r0, [r3, #4]
          (data[1]) | (data[2] << 8),
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	3301      	adds	r3, #1
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	3302      	adds	r3, #2
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	4313      	orrs	r3, r2
          can.send(
 8001444:	4619      	mov	r1, r3
 8001446:	2304      	movs	r3, #4
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	2300      	movs	r3, #0
 8001452:	2200      	movs	r2, #0
 8001454:	f7ff fe2c 	bl	80010b0 <_ZN7stm_CAN9CAN_303x84sendEmNS_7ID_typeENS_10Frame_typeEPhm>
          stm_CAN::Frame_type::data,
          data_response,
          4
          );
        }
        break;
 8001458:	e027      	b.n	80014aa <_ZZ4mainENKUlPhE_clES_+0xf6>
          can.send(
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6858      	ldr	r0, [r3, #4]
      case 0x04:  //set data id
        can.subscribe_message(
          (data[1]) | (data[2] << 8), 
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	3301      	adds	r3, #1
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	3302      	adds	r3, #2
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	4313      	orrs	r3, r2
        can.subscribe_message(
 8001470:	4619      	mov	r1, r3
 8001472:	2301      	movs	r3, #1
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2300      	movs	r3, #0
 8001478:	2200      	movs	r2, #0
 800147a:	f7ff fe45 	bl	8001108 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE>
          stm_CAN::ID_type::std, 
          stm_CAN::Frame_type::data, 
          stm_CAN::FIFO::_1);
        spnum = data[3];
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	78d2      	ldrb	r2, [r2, #3]
 8001486:	701a      	strb	r2, [r3, #0]
        break;
 8001488:	e00f      	b.n	80014aa <_ZZ4mainENKUlPhE_clES_+0xf6>
      case 0x05:  //set pwm
        output_value = (data[1]) | (data[2] << 8);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b219      	sxth	r1, r3
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	3302      	adds	r3, #2
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	b21a      	sxth	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	b212      	sxth	r2, r2
 80014a4:	801a      	strh	r2, [r3, #0]
        break;
 80014a6:	e000      	b.n	80014aa <_ZZ4mainENKUlPhE_clES_+0xf6>
      
      default:
        break;
 80014a8:	bf00      	nop
      }
    return;
 80014aa:	bf00      	nop
  };
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop

080014b4 <main>:
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0ca      	sub	sp, #296	; 0x128
 80014b8:	af02      	add	r7, sp, #8
  HAL_Init();
 80014ba:	f001 f8e9 	bl	8002690 <HAL_Init>
  SystemClock_Config();
 80014be:	f000 f961 	bl	8001784 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80014c2:	f000 fc39 	bl	8001d38 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80014c6:	f000 fc19 	bl	8001cfc <_ZL11MX_DMA_Initv>
  MX_CAN_Init();
 80014ca:	f000 f9c9 	bl	8001860 <_ZL11MX_CAN_Initv>
  MX_TIM1_Init();
 80014ce:	f000 fa03 	bl	80018d8 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 80014d2:	f000 fab5 	bl	8001a40 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80014d6:	f000 fb4d 	bl	8001b74 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 80014da:	f000 fbdb 	bl	8001c94 <_ZL19MX_USART1_UART_Initv>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014de:	2100      	movs	r1, #0
 80014e0:	489f      	ldr	r0, [pc, #636]	; (8001760 <main+0x2ac>)
 80014e2:	f003 fe9b 	bl	800521c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80014e6:	2100      	movs	r1, #0
 80014e8:	489d      	ldr	r0, [pc, #628]	; (8001760 <main+0x2ac>)
 80014ea:	f005 fbff 	bl	8006cec <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80014ee:	2104      	movs	r1, #4
 80014f0:	489b      	ldr	r0, [pc, #620]	; (8001760 <main+0x2ac>)
 80014f2:	f003 fe93 	bl	800521c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80014f6:	2104      	movs	r1, #4
 80014f8:	4899      	ldr	r0, [pc, #612]	; (8001760 <main+0x2ac>)
 80014fa:	f005 fbf7 	bl	8006cec <HAL_TIMEx_PWMN_Start>
  } state = STATE_STOPPED;
 80014fe:	2301      	movs	r3, #1
 8001500:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
  int16_t output_value = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  uint8_t spnum = 0;  //specify number of recieved data to drive
 800150a:	2300      	movs	r3, #0
 800150c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  stm_CAN::CAN_303x8 can(&hcan);
 8001510:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001514:	4993      	ldr	r1, [pc, #588]	; (8001764 <main+0x2b0>)
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff10 	bl	800133c <_ZN7stm_CAN9CAN_303x8C1EP19__CAN_HandleTypeDef>
  ws2812::ws2812_double pixels(&htim3, TIM_CHANNEL_4, &hdma_tim3_ch4_up, 45, 22);
 800151c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001520:	2316      	movs	r3, #22
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	232d      	movs	r3, #45	; 0x2d
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	4b8f      	ldr	r3, [pc, #572]	; (8001768 <main+0x2b4>)
 800152a:	220c      	movs	r2, #12
 800152c:	498f      	ldr	r1, [pc, #572]	; (800176c <main+0x2b8>)
 800152e:	f001 f862 	bl	80025f6 <_ZN6ws281213ws2812_doubleC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>
  const ws2812::color _orenge = {48, 24, 0};
 8001532:	4a8f      	ldr	r2, [pc, #572]	; (8001770 <main+0x2bc>)
 8001534:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001538:	6812      	ldr	r2, [r2, #0]
 800153a:	4611      	mov	r1, r2
 800153c:	8019      	strh	r1, [r3, #0]
 800153e:	3302      	adds	r3, #2
 8001540:	0c12      	lsrs	r2, r2, #16
 8001542:	701a      	strb	r2, [r3, #0]
  const ws2812::color _blue = {0, 48, 128};
 8001544:	4a8b      	ldr	r2, [pc, #556]	; (8001774 <main+0x2c0>)
 8001546:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	4611      	mov	r1, r2
 800154e:	8019      	strh	r1, [r3, #0]
 8001550:	3302      	adds	r3, #2
 8001552:	0c12      	lsrs	r2, r2, #16
 8001554:	701a      	strb	r2, [r3, #0]
  const ws2812::color _green = {0, 48, 0};
 8001556:	2300      	movs	r3, #0
 8001558:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800155c:	2330      	movs	r3, #48	; 0x30
 800155e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001562:	2300      	movs	r3, #0
 8001564:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  const ws2812::color _purple = {24, 0, 72};
 8001568:	4a83      	ldr	r2, [pc, #524]	; (8001778 <main+0x2c4>)
 800156a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	4611      	mov	r1, r2
 8001572:	8019      	strh	r1, [r3, #0]
 8001574:	3302      	adds	r3, #2
 8001576:	0c12      	lsrs	r2, r2, #16
 8001578:	701a      	strb	r2, [r3, #0]
  const ws2812::color _white = {12, 16, 32};
 800157a:	4a80      	ldr	r2, [pc, #512]	; (800177c <main+0x2c8>)
 800157c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	4611      	mov	r1, r2
 8001584:	8019      	strh	r1, [r3, #0]
 8001586:	3302      	adds	r3, #2
 8001588:	0c12      	lsrs	r2, r2, #16
 800158a:	701a      	strb	r2, [r3, #0]
  const uint32_t original_id = 0x0100;
 800158c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001590:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  can.subscribe_message(0x00, stm_CAN::ID_type::std, stm_CAN::Frame_type::data, stm_CAN::FIFO::_0);
 8001594:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8001598:	2300      	movs	r3, #0
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2300      	movs	r3, #0
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	f7ff fdb1 	bl	8001108 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE>
  can.subscribe_message(0x01, stm_CAN::ID_type::ext, stm_CAN::Frame_type::data, stm_CAN::FIFO::_0);
 80015a6:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80015aa:	2300      	movs	r3, #0
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2300      	movs	r3, #0
 80015b0:	2204      	movs	r2, #4
 80015b2:	2101      	movs	r1, #1
 80015b4:	f7ff fda8 	bl	8001108 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE>
  can.subscribe_message(original_id, stm_CAN::ID_type::ext, stm_CAN::Frame_type::data, stm_CAN::FIFO::_0);
 80015b8:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80015bc:	2300      	movs	r3, #0
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2300      	movs	r3, #0
 80015c2:	2204      	movs	r2, #4
 80015c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c8:	f7ff fd9e 	bl	8001108 <_ZN7stm_CAN9CAN_303x817subscribe_messageEmNS_7ID_typeENS_10Frame_typeENS_4FIFOE>
  };
 80015cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80015d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015d4:	f207 121b 	addw	r2, r7, #283	; 0x11b
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80015de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015e2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80015ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015f0:	f207 1217 	addw	r2, r7, #279	; 0x117
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80015fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015fe:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001602:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    uint8_t data_command[8];
    if(CAN_read(&can, data_command, stm_CAN::FIFO::_0)){
 8001604:	f107 010c 	add.w	r1, r7, #12
 8001608:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800160c:	2200      	movs	r2, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f000 fbdc 	bl	8001dcc <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	bf14      	ite	ne
 800161a:	2301      	movne	r3, #1
 800161c:	2300      	moveq	r3, #0
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d007      	beq.n	8001634 <main+0x180>
      process_data(data_command);
 8001624:	f107 020c 	add.w	r2, r7, #12
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4611      	mov	r1, r2
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fec0 	bl	80013b4 <_ZZ4mainENKUlPhE_clES_>
    }
    uint8_t data_drive[8];
    if(CAN_read(&can, data_drive, stm_CAN::FIFO::_1)){
 8001634:	1d39      	adds	r1, r7, #4
 8001636:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800163a:	2201      	movs	r2, #1
 800163c:	4618      	mov	r0, r3
 800163e:	f000 fbc5 	bl	8001dcc <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	bf14      	ite	ne
 8001648:	2301      	movne	r3, #1
 800164a:	2300      	moveq	r3, #0
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d023      	beq.n	800169a <main+0x1e6>
      output_value = (data_drive[spnum*2] << (spnum*2*8)) | (data_drive[spnum*2 + 1] << (spnum*2*8 + 8));
 8001652:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800165c:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8001660:	5cd3      	ldrb	r3, [r2, r3]
 8001662:	461a      	mov	r2, r3
 8001664:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	b21a      	sxth	r2, r3
 8001670:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	3301      	adds	r3, #1
 8001678:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800167c:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8001680:	5ccb      	ldrb	r3, [r1, r3]
 8001682:	4619      	mov	r1, r3
 8001684:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	3308      	adds	r3, #8
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	b21b      	sxth	r3, r3
 8001692:	4313      	orrs	r3, r2
 8001694:	b21b      	sxth	r3, r3
 8001696:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
    }

    switch (state)
 800169a:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d022      	beq.n	80016e8 <main+0x234>
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d150      	bne.n	8001748 <main+0x294>
    {
    case state::STATE_STOPPED:
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80016a6:	2201      	movs	r2, #1
 80016a8:	2120      	movs	r1, #32
 80016aa:	4835      	ldr	r0, [pc, #212]	; (8001780 <main+0x2cc>)
 80016ac:	f002 f954 	bl	8003958 <HAL_GPIO_WritePin>
      write_PWM(&htim1, TIM_CHANNEL_1, TIM_CHANNEL_2, 0);
 80016b0:	2300      	movs	r3, #0
 80016b2:	2204      	movs	r2, #4
 80016b4:	2100      	movs	r1, #0
 80016b6:	482a      	ldr	r0, [pc, #168]	; (8001760 <main+0x2ac>)
 80016b8:	f000 fbf3 	bl	8001ea2 <_Z9write_PWMP17TIM_HandleTypeDefmms>
      pixels.colors[0] = _purple;
 80016bc:	f107 0377 	add.w	r3, r7, #119	; 0x77
 80016c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016c4:	8811      	ldrh	r1, [r2, #0]
 80016c6:	7892      	ldrb	r2, [r2, #2]
 80016c8:	8019      	strh	r1, [r3, #0]
 80016ca:	709a      	strb	r2, [r3, #2]
      pixels.colors[1] = _purple;
 80016cc:	f107 037a 	add.w	r3, r7, #122	; 0x7a
 80016d0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016d4:	8811      	ldrh	r1, [r2, #0]
 80016d6:	7892      	ldrb	r2, [r2, #2]
 80016d8:	8019      	strh	r1, [r3, #0]
 80016da:	709a      	strb	r2, [r3, #2]
      pixels.rend();
 80016dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 ff65 	bl	80025b0 <_ZN6ws281213ws2812_double4rendEv>
      break;
 80016e6:	e02f      	b.n	8001748 <main+0x294>
    case state::STATE_RUNNING:
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2120      	movs	r1, #32
 80016ec:	4824      	ldr	r0, [pc, #144]	; (8001780 <main+0x2cc>)
 80016ee:	f002 f933 	bl	8003958 <HAL_GPIO_WritePin>
      write_PWM(&htim1, TIM_CHANNEL_1, TIM_CHANNEL_2, output_value);
 80016f2:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80016f6:	2204      	movs	r2, #4
 80016f8:	2100      	movs	r1, #0
 80016fa:	4819      	ldr	r0, [pc, #100]	; (8001760 <main+0x2ac>)
 80016fc:	f000 fbd1 	bl	8001ea2 <_Z9write_PWMP17TIM_HandleTypeDefmms>
      pixels.colors[0] = (output_value > 0)? _blue : (output_value == 0)? _white : _orenge;
 8001700:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8001704:	2b00      	cmp	r3, #0
 8001706:	dd02      	ble.n	800170e <main+0x25a>
 8001708:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800170c:	e008      	b.n	8001720 <main+0x26c>
 800170e:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <main+0x268>
 8001716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171a:	e001      	b.n	8001720 <main+0x26c>
 800171c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001720:	f107 0277 	add.w	r2, r7, #119	; 0x77
 8001724:	8819      	ldrh	r1, [r3, #0]
 8001726:	789b      	ldrb	r3, [r3, #2]
 8001728:	8011      	strh	r1, [r2, #0]
 800172a:	7093      	strb	r3, [r2, #2]
      pixels.colors[1] = _white;
 800172c:	f107 037a 	add.w	r3, r7, #122	; 0x7a
 8001730:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001734:	8811      	ldrh	r1, [r2, #0]
 8001736:	7892      	ldrb	r2, [r2, #2]
 8001738:	8019      	strh	r1, [r3, #0]
 800173a:	709a      	strb	r2, [r3, #2]
      pixels.rend();
 800173c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001740:	4618      	mov	r0, r3
 8001742:	f000 ff35 	bl	80025b0 <_ZN6ws281213ws2812_double4rendEv>
      break;
 8001746:	bf00      	nop
    }
    HAL_Delay(1);
 8001748:	2001      	movs	r0, #1
 800174a:	f001 f807 	bl	800275c <HAL_Delay>
#endif
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  }
 800174e:	e759      	b.n	8001604 <main+0x150>
  stm_CAN::CAN_303x8 can(&hcan);
 8001750:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fe09 	bl	800136c <_ZN7stm_CAN9CAN_303x8D1Ev>
 800175a:	f006 f842 	bl	80077e2 <__cxa_end_cleanup>
 800175e:	bf00      	nop
 8001760:	200000bc 	.word	0x200000bc
 8001764:	20000094 	.word	0x20000094
 8001768:	200001a0 	.word	0x200001a0
 800176c:	20000154 	.word	0x20000154
 8001770:	080083c0 	.word	0x080083c0
 8001774:	080083c4 	.word	0x080083c4
 8001778:	080083c8 	.word	0x080083c8
 800177c:	080083cc 	.word	0x080083cc
 8001780:	48000400 	.word	0x48000400

08001784 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b096      	sub	sp, #88	; 0x58
 8001788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800178e:	2228      	movs	r2, #40	; 0x28
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f006 fd4e 	bl	8008234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]
 80017b6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017b8:	2301      	movs	r3, #1
 80017ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80017c2:	2301      	movs	r3, #1
 80017c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c6:	2301      	movs	r3, #1
 80017c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ca:	2302      	movs	r3, #2
 80017cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80017d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 f8d2 	bl	8003988 <HAL_RCC_OscConfig>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	bf14      	ite	ne
 80017ea:	2301      	movne	r3, #1
 80017ec:	2300      	moveq	r3, #0
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 80017f4:	f000 fc30 	bl	8002058 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f8:	230f      	movs	r3, #15
 80017fa:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fc:	2302      	movs	r3, #2
 80017fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001808:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180a:	2300      	movs	r3, #0
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	2102      	movs	r1, #2
 8001814:	4618      	mov	r0, r3
 8001816:	f003 f8f5 	bl	8004a04 <HAL_RCC_ClockConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	bf14      	ite	ne
 8001820:	2301      	movne	r3, #1
 8001822:	2300      	moveq	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 800182a:	f000 fc15 	bl	8002058 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 800182e:	f241 0301 	movw	r3, #4097	; 0x1001
 8001832:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001838:	2300      	movs	r3, #0
 800183a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	4618      	mov	r0, r3
 8001840:	f003 fb18 	bl	8004e74 <HAL_RCCEx_PeriphCLKConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	bf14      	ite	ne
 800184a:	2301      	movne	r3, #1
 800184c:	2300      	moveq	r3, #0
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001854:	f000 fc00 	bl	8002058 <Error_Handler>
  }
}
 8001858:	bf00      	nop
 800185a:	3758      	adds	r7, #88	; 0x58
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <_ZL11MX_CAN_Initv+0x70>)
 8001866:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <_ZL11MX_CAN_Initv+0x74>)
 8001868:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800186a:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <_ZL11MX_CAN_Initv+0x70>)
 800186c:	2202      	movs	r2, #2
 800186e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <_ZL11MX_CAN_Initv+0x70>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <_ZL11MX_CAN_Initv+0x70>)
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <_ZL11MX_CAN_Initv+0x70>)
 800187e:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8001882:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <_ZL11MX_CAN_Initv+0x70>)
 8001886:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800188a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <_ZL11MX_CAN_Initv+0x70>)
 800188e:	2200      	movs	r2, #0
 8001890:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001892:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <_ZL11MX_CAN_Initv+0x70>)
 8001894:	2200      	movs	r2, #0
 8001896:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <_ZL11MX_CAN_Initv+0x70>)
 800189a:	2200      	movs	r2, #0
 800189c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <_ZL11MX_CAN_Initv+0x70>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <_ZL11MX_CAN_Initv+0x70>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <_ZL11MX_CAN_Initv+0x70>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80018b0:	4807      	ldr	r0, [pc, #28]	; (80018d0 <_ZL11MX_CAN_Initv+0x70>)
 80018b2:	f000 ff77 	bl	80027a4 <HAL_CAN_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf14      	ite	ne
 80018bc:	2301      	movne	r3, #1
 80018be:	2300      	moveq	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <_ZL11MX_CAN_Initv+0x6a>
  {
    Error_Handler();
 80018c6:	f000 fbc7 	bl	8002058 <Error_Handler>
    Error_Handler();
  }
#endif
  /* USER CODE END CAN_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000094 	.word	0x20000094
 80018d4:	40006400 	.word	0x40006400

080018d8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b096      	sub	sp, #88	; 0x58
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]
 80018fa:	615a      	str	r2, [r3, #20]
 80018fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	222c      	movs	r2, #44	; 0x2c
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f006 fc95 	bl	8008234 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800190a:	4b4b      	ldr	r3, [pc, #300]	; (8001a38 <_ZL12MX_TIM1_Initv+0x160>)
 800190c:	4a4b      	ldr	r2, [pc, #300]	; (8001a3c <_ZL12MX_TIM1_Initv+0x164>)
 800190e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001910:	4b49      	ldr	r3, [pc, #292]	; (8001a38 <_ZL12MX_TIM1_Initv+0x160>)
 8001912:	2200      	movs	r2, #0
 8001914:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001916:	4b48      	ldr	r3, [pc, #288]	; (8001a38 <_ZL12MX_TIM1_Initv+0x160>)
 8001918:	2220      	movs	r2, #32
 800191a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 800191c:	4b46      	ldr	r3, [pc, #280]	; (8001a38 <_ZL12MX_TIM1_Initv+0x160>)
 800191e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001922:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001924:	4b44      	ldr	r3, [pc, #272]	; (8001a38 <_ZL12MX_TIM1_Initv+0x160>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800192a:	4b43      	ldr	r3, [pc, #268]	; (8001a38 <_ZL12MX_TIM1_Initv+0x160>)
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001930:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <_ZL12MX_TIM1_Initv+0x160>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001936:	4840      	ldr	r0, [pc, #256]	; (8001a38 <_ZL12MX_TIM1_Initv+0x160>)
 8001938:	f003 fc19 	bl	800516e <HAL_TIM_PWM_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	bf14      	ite	ne
 8001942:	2301      	movne	r3, #1
 8001944:	2300      	moveq	r3, #0
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 800194c:	f000 fb84 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001950:	2300      	movs	r3, #0
 8001952:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800195c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001960:	4619      	mov	r1, r3
 8001962:	4835      	ldr	r0, [pc, #212]	; (8001a38 <_ZL12MX_TIM1_Initv+0x160>)
 8001964:	f005 fa68 	bl	8006e38 <HAL_TIMEx_MasterConfigSynchronization>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	bf14      	ite	ne
 800196e:	2301      	movne	r3, #1
 8001970:	2300      	moveq	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <_ZL12MX_TIM1_Initv+0xa4>
  {
    Error_Handler();
 8001978:	f000 fb6e 	bl	8002058 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800197c:	2360      	movs	r3, #96	; 0x60
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001984:	2300      	movs	r3, #0
 8001986:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001988:	2300      	movs	r3, #0
 800198a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001998:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800199c:	2200      	movs	r2, #0
 800199e:	4619      	mov	r1, r3
 80019a0:	4825      	ldr	r0, [pc, #148]	; (8001a38 <_ZL12MX_TIM1_Initv+0x160>)
 80019a2:	f004 f911 	bl	8005bc8 <HAL_TIM_PWM_ConfigChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bf14      	ite	ne
 80019ac:	2301      	movne	r3, #1
 80019ae:	2300      	moveq	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <_ZL12MX_TIM1_Initv+0xe2>
  {
    Error_Handler();
 80019b6:	f000 fb4f 	bl	8002058 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019be:	2204      	movs	r2, #4
 80019c0:	4619      	mov	r1, r3
 80019c2:	481d      	ldr	r0, [pc, #116]	; (8001a38 <_ZL12MX_TIM1_Initv+0x160>)
 80019c4:	f004 f900 	bl	8005bc8 <HAL_TIM_PWM_ConfigChannel>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	bf14      	ite	ne
 80019ce:	2301      	movne	r3, #1
 80019d0:	2300      	moveq	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <_ZL12MX_TIM1_Initv+0x104>
  {
    Error_Handler();
 80019d8:	f000 fb3e 	bl	8002058 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 16;
 80019e8:	2310      	movs	r3, #16
 80019ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4809      	ldr	r0, [pc, #36]	; (8001a38 <_ZL12MX_TIM1_Initv+0x160>)
 8001a12:	f005 fa7f 	bl	8006f14 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bf14      	ite	ne
 8001a1c:	2301      	movne	r3, #1
 8001a1e:	2300      	moveq	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <_ZL12MX_TIM1_Initv+0x152>
  {
    Error_Handler();
 8001a26:	f000 fb17 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a2a:	4803      	ldr	r0, [pc, #12]	; (8001a38 <_ZL12MX_TIM1_Initv+0x160>)
 8001a2c:	f000 fc32 	bl	8002294 <HAL_TIM_MspPostInit>

}
 8001a30:	bf00      	nop
 8001a32:	3758      	adds	r7, #88	; 0x58
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	200000bc 	.word	0x200000bc
 8001a3c:	40012c00 	.word	0x40012c00

08001a40 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	; 0x30
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a46:	f107 031c 	add.w	r3, r7, #28
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
 8001a54:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a64:	463b      	mov	r3, r7
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a6e:	4b40      	ldr	r3, [pc, #256]	; (8001b70 <_ZL12MX_TIM2_Initv+0x130>)
 8001a70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a76:	4b3e      	ldr	r3, [pc, #248]	; (8001b70 <_ZL12MX_TIM2_Initv+0x130>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <_ZL12MX_TIM2_Initv+0x130>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a82:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <_ZL12MX_TIM2_Initv+0x130>)
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295
 8001a88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8a:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <_ZL12MX_TIM2_Initv+0x130>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a90:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <_ZL12MX_TIM2_Initv+0x130>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001a96:	4836      	ldr	r0, [pc, #216]	; (8001b70 <_ZL12MX_TIM2_Initv+0x130>)
 8001a98:	f003 ffa2 	bl	80059e0 <HAL_TIM_IC_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf14      	ite	ne
 8001aa2:	2301      	movne	r3, #1
 8001aa4:	2300      	moveq	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <_ZL12MX_TIM2_Initv+0x70>
  {
    Error_Handler();
 8001aac:	f000 fad4 	bl	8002058 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001ab4:	2350      	movs	r3, #80	; 0x50
 8001ab6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001ac4:	f107 031c 	add.w	r3, r7, #28
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4829      	ldr	r0, [pc, #164]	; (8001b70 <_ZL12MX_TIM2_Initv+0x130>)
 8001acc:	f004 fa59 	bl	8005f82 <HAL_TIM_SlaveConfigSynchro>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	bf14      	ite	ne
 8001ad6:	2301      	movne	r3, #1
 8001ad8:	2300      	moveq	r3, #0
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <_ZL12MX_TIM2_Initv+0xa4>
  {
    Error_Handler();
 8001ae0:	f000 faba 	bl	8002058 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	2200      	movs	r2, #0
 8001afa:	4619      	mov	r1, r3
 8001afc:	481c      	ldr	r0, [pc, #112]	; (8001b70 <_ZL12MX_TIM2_Initv+0x130>)
 8001afe:	f003 ffc6 	bl	8005a8e <HAL_TIM_IC_ConfigChannel>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf14      	ite	ne
 8001b08:	2301      	movne	r3, #1
 8001b0a:	2300      	moveq	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <_ZL12MX_TIM2_Initv+0xd6>
  {
    Error_Handler();
 8001b12:	f000 faa1 	bl	8002058 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b16:	2302      	movs	r3, #2
 8001b18:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b1e:	f107 030c 	add.w	r3, r7, #12
 8001b22:	2204      	movs	r2, #4
 8001b24:	4619      	mov	r1, r3
 8001b26:	4812      	ldr	r0, [pc, #72]	; (8001b70 <_ZL12MX_TIM2_Initv+0x130>)
 8001b28:	f003 ffb1 	bl	8005a8e <HAL_TIM_IC_ConfigChannel>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	bf14      	ite	ne
 8001b32:	2301      	movne	r3, #1
 8001b34:	2300      	moveq	r3, #0
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <_ZL12MX_TIM2_Initv+0x100>
  {
    Error_Handler();
 8001b3c:	f000 fa8c 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b40:	2300      	movs	r3, #0
 8001b42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b48:	463b      	mov	r3, r7
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4808      	ldr	r0, [pc, #32]	; (8001b70 <_ZL12MX_TIM2_Initv+0x130>)
 8001b4e:	f005 f973 	bl	8006e38 <HAL_TIMEx_MasterConfigSynchronization>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf14      	ite	ne
 8001b58:	2301      	movne	r3, #1
 8001b5a:	2300      	moveq	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <_ZL12MX_TIM2_Initv+0x126>
  {
    Error_Handler();
 8001b62:	f000 fa79 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b66:	bf00      	nop
 8001b68:	3730      	adds	r7, #48	; 0x30
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000108 	.word	0x20000108

08001b74 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08e      	sub	sp, #56	; 0x38
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	f107 031c 	add.w	r3, r7, #28
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b94:	463b      	mov	r3, r7
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
 8001ba0:	611a      	str	r2, [r3, #16]
 8001ba2:	615a      	str	r2, [r3, #20]
 8001ba4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ba6:	4b39      	ldr	r3, [pc, #228]	; (8001c8c <_ZL12MX_TIM3_Initv+0x118>)
 8001ba8:	4a39      	ldr	r2, [pc, #228]	; (8001c90 <_ZL12MX_TIM3_Initv+0x11c>)
 8001baa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bac:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <_ZL12MX_TIM3_Initv+0x118>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb2:	4b36      	ldr	r3, [pc, #216]	; (8001c8c <_ZL12MX_TIM3_Initv+0x118>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 8001bb8:	4b34      	ldr	r3, [pc, #208]	; (8001c8c <_ZL12MX_TIM3_Initv+0x118>)
 8001bba:	2259      	movs	r2, #89	; 0x59
 8001bbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <_ZL12MX_TIM3_Initv+0x118>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc4:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <_ZL12MX_TIM3_Initv+0x118>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bca:	4830      	ldr	r0, [pc, #192]	; (8001c8c <_ZL12MX_TIM3_Initv+0x118>)
 8001bcc:	f003 fa78 	bl	80050c0 <HAL_TIM_Base_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	bf14      	ite	ne
 8001bd6:	2301      	movne	r3, #1
 8001bd8:	2300      	moveq	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8001be0:	f000 fa3a 	bl	8002058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4826      	ldr	r0, [pc, #152]	; (8001c8c <_ZL12MX_TIM3_Initv+0x118>)
 8001bf2:	f004 f8fd 	bl	8005df0 <HAL_TIM_ConfigClockSource>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf14      	ite	ne
 8001bfc:	2301      	movne	r3, #1
 8001bfe:	2300      	moveq	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8001c06:	f000 fa27 	bl	8002058 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c0a:	4820      	ldr	r0, [pc, #128]	; (8001c8c <_ZL12MX_TIM3_Initv+0x118>)
 8001c0c:	f003 faaf 	bl	800516e <HAL_TIM_PWM_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	bf14      	ite	ne
 8001c16:	2301      	movne	r3, #1
 8001c18:	2300      	moveq	r3, #0
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8001c20:	f000 fa1a 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c2c:	f107 031c 	add.w	r3, r7, #28
 8001c30:	4619      	mov	r1, r3
 8001c32:	4816      	ldr	r0, [pc, #88]	; (8001c8c <_ZL12MX_TIM3_Initv+0x118>)
 8001c34:	f005 f900 	bl	8006e38 <HAL_TIMEx_MasterConfigSynchronization>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	bf14      	ite	ne
 8001c3e:	2301      	movne	r3, #1
 8001c40:	2300      	moveq	r3, #0
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8001c48:	f000 fa06 	bl	8002058 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c4c:	2360      	movs	r3, #96	; 0x60
 8001c4e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001c58:	2304      	movs	r3, #4
 8001c5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c5c:	463b      	mov	r3, r7
 8001c5e:	220c      	movs	r2, #12
 8001c60:	4619      	mov	r1, r3
 8001c62:	480a      	ldr	r0, [pc, #40]	; (8001c8c <_ZL12MX_TIM3_Initv+0x118>)
 8001c64:	f003 ffb0 	bl	8005bc8 <HAL_TIM_PWM_ConfigChannel>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	bf14      	ite	ne
 8001c6e:	2301      	movne	r3, #1
 8001c70:	2300      	moveq	r3, #0
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8001c78:	f000 f9ee 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c7c:	4803      	ldr	r0, [pc, #12]	; (8001c8c <_ZL12MX_TIM3_Initv+0x118>)
 8001c7e:	f000 fb09 	bl	8002294 <HAL_TIM_MspPostInit>

}
 8001c82:	bf00      	nop
 8001c84:	3738      	adds	r7, #56	; 0x38
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000154 	.word	0x20000154
 8001c90:	40000400 	.word	0x40000400

08001c94 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c98:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001c9a:	4a17      	ldr	r2, [pc, #92]	; (8001cf8 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001c9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ca4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001cba:	220c      	movs	r2, #12
 8001cbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cd6:	4807      	ldr	r0, [pc, #28]	; (8001cf4 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001cd8:	f005 f9b9 	bl	800704e <HAL_UART_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	bf14      	ite	ne
 8001ce2:	2301      	movne	r3, #1
 8001ce4:	2300      	moveq	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8001cec:	f000 f9b4 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200001e4 	.word	0x200001e4
 8001cf8:	40013800 	.word	0x40013800

08001cfc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d02:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <_ZL11MX_DMA_Initv+0x38>)
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <_ZL11MX_DMA_Initv+0x38>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6153      	str	r3, [r2, #20]
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <_ZL11MX_DMA_Initv+0x38>)
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	200d      	movs	r0, #13
 8001d20:	f001 fa99 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001d24:	200d      	movs	r0, #13
 8001d26:	f001 fab2 	bl	800328e <HAL_NVIC_EnableIRQ>

}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000

08001d38 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3e:	f107 030c 	add.w	r3, r7, #12
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	60da      	str	r2, [r3, #12]
 8001d4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <_ZL12MX_GPIO_Initv+0x8c>)
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	4a1c      	ldr	r2, [pc, #112]	; (8001dc4 <_ZL12MX_GPIO_Initv+0x8c>)
 8001d54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d58:	6153      	str	r3, [r2, #20]
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <_ZL12MX_GPIO_Initv+0x8c>)
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d66:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <_ZL12MX_GPIO_Initv+0x8c>)
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <_ZL12MX_GPIO_Initv+0x8c>)
 8001d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d70:	6153      	str	r3, [r2, #20]
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <_ZL12MX_GPIO_Initv+0x8c>)
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <_ZL12MX_GPIO_Initv+0x8c>)
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	4a10      	ldr	r2, [pc, #64]	; (8001dc4 <_ZL12MX_GPIO_Initv+0x8c>)
 8001d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d88:	6153      	str	r3, [r2, #20]
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <_ZL12MX_GPIO_Initv+0x8c>)
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISABLE_GPIO_Port, DISABLE_Pin, GPIO_PIN_RESET);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2120      	movs	r1, #32
 8001d9a:	480b      	ldr	r0, [pc, #44]	; (8001dc8 <_ZL12MX_GPIO_Initv+0x90>)
 8001d9c:	f001 fddc 	bl	8003958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISABLE_Pin */
  GPIO_InitStruct.Pin = DISABLE_Pin;
 8001da0:	2320      	movs	r3, #32
 8001da2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISABLE_GPIO_Port, &GPIO_InitStruct);
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	4619      	mov	r1, r3
 8001db6:	4804      	ldr	r0, [pc, #16]	; (8001dc8 <_ZL12MX_GPIO_Initv+0x90>)
 8001db8:	f001 fc5c 	bl	8003674 <HAL_GPIO_Init>

}
 8001dbc:	bf00      	nop
 8001dbe:	3720      	adds	r7, #32
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	48000400 	.word	0x48000400

08001dcc <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE>:

/* USER CODE BEGIN 4 */
int CAN_read(stm_CAN::CAN_303x8* can, uint8_t* data, stm_CAN::FIFO fifo){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	; 0x28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	71fb      	strb	r3, [r7, #7]
  uint8_t received[] = "received ";
 8001dda:	4a25      	ldr	r2, [pc, #148]	; (8001e70 <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0xa4>)
 8001ddc:	f107 031c 	add.w	r3, r7, #28
 8001de0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001de2:	c303      	stmia	r3!, {r0, r1}
 8001de4:	801a      	strh	r2, [r3, #0]
  uint8_t cr_lf[] = "\r\n";
 8001de6:	4a23      	ldr	r2, [pc, #140]	; (8001e74 <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0xa8>)
 8001de8:	f107 0318 	add.w	r3, r7, #24
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	4611      	mov	r1, r2
 8001df0:	8019      	strh	r1, [r3, #0]
 8001df2:	3302      	adds	r3, #2
 8001df4:	0c12      	lsrs	r2, r2, #16
 8001df6:	701a      	strb	r2, [r3, #0]
  uint8_t err[] = "error\r\n";
 8001df8:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0xac>)
 8001dfa:	f107 0310 	add.w	r3, r7, #16
 8001dfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e02:	e883 0003 	stmia.w	r3, {r0, r1}
	switch (can->read(fifo, data)){
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f7ff fa65 	bl	80012dc <_ZN7stm_CAN9CAN_303x84readENS_4FIFOEPh>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d01e      	beq.n	8001e56 <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0x8a>
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	dc25      	bgt.n	8001e68 <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0x9c>
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d021      	beq.n	8001e64 <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0x98>
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	db21      	blt.n	8001e68 <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0x9c>
 8001e24:	3b01      	subs	r3, #1
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d81e      	bhi.n	8001e68 <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0x9c>
	      case stm_CAN::read_retval::message_received:
	      case stm_CAN::read_retval::more_message_received:
	        HAL_UART_Transmit(&huart1, received, 9, 1);
 8001e2a:	f107 011c 	add.w	r1, r7, #28
 8001e2e:	2301      	movs	r3, #1
 8001e30:	2209      	movs	r2, #9
 8001e32:	4812      	ldr	r0, [pc, #72]	; (8001e7c <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0xb0>)
 8001e34:	f005 f959 	bl	80070ea <HAL_UART_Transmit>
	        HAL_UART_Transmit(&huart1, data, 8, 1);
 8001e38:	2301      	movs	r3, #1
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	480f      	ldr	r0, [pc, #60]	; (8001e7c <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0xb0>)
 8001e40:	f005 f953 	bl	80070ea <HAL_UART_Transmit>
	        HAL_UART_Transmit(&huart1, cr_lf, 2, 1);
 8001e44:	f107 0118 	add.w	r1, r7, #24
 8001e48:	2301      	movs	r3, #1
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	480b      	ldr	r0, [pc, #44]	; (8001e7c <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0xb0>)
 8001e4e:	f005 f94c 	bl	80070ea <HAL_UART_Transmit>
	        return 1;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e008      	b.n	8001e68 <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0x9c>
	      case stm_CAN::read_retval::error:
	    	  HAL_UART_Transmit(&huart1, err, 7,1);
 8001e56:	f107 0110 	add.w	r1, r7, #16
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	4807      	ldr	r0, [pc, #28]	; (8001e7c <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0xb0>)
 8001e60:	f005 f943 	bl	80070ea <HAL_UART_Transmit>
	      case stm_CAN::read_retval::no_message:
	        return 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e7ff      	b.n	8001e68 <_Z8CAN_readPN7stm_CAN9CAN_303x8EPhNS_4FIFOE+0x9c>
	}
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3728      	adds	r7, #40	; 0x28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	080083d0 	.word	0x080083d0
 8001e74:	080083dc 	.word	0x080083dc
 8001e78:	080083e0 	.word	0x080083e0
 8001e7c:	200001e4 	.word	0x200001e4

08001e80 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>:

void write_PWM(TIM_HandleTypeDef* htim, uint32_t channel1, uint32_t channel2, int16_t val){
  auto clamp_unsigned = [](int16_t v){return (v > 0)? v : 0;};
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
 8001e8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001e94:	b21b      	sxth	r3, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <_Z9write_PWMP17TIM_HandleTypeDefmms>:
void write_PWM(TIM_HandleTypeDef* htim, uint32_t channel1, uint32_t channel2, int16_t val){
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COMPARE(htim, channel1, clamp_unsigned(val) >> 3);
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10d      	bne.n	8001ed2 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x30>
 8001eb6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ffdd 	bl	8001e80 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	10da      	asrs	r2, r3, #3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	635a      	str	r2, [r3, #52]	; 0x34
 8001ed0:	e050      	b.n	8001f74 <_Z9write_PWMP17TIM_HandleTypeDefmms+0xd2>
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d10d      	bne.n	8001ef4 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x52>
 8001ed8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ffcc 	bl	8001e80 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	10da      	asrs	r2, r3, #3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	639a      	str	r2, [r3, #56]	; 0x38
 8001ef2:	e03f      	b.n	8001f74 <_Z9write_PWMP17TIM_HandleTypeDefmms+0xd2>
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d10d      	bne.n	8001f16 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x74>
 8001efa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ffbb 	bl	8001e80 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	10da      	asrs	r2, r3, #3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f14:	e02e      	b.n	8001f74 <_Z9write_PWMP17TIM_HandleTypeDefmms+0xd2>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b0c      	cmp	r3, #12
 8001f1a:	d10d      	bne.n	8001f38 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x96>
 8001f1c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4611      	mov	r1, r2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ffaa 	bl	8001e80 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	10da      	asrs	r2, r3, #3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
 8001f36:	e01d      	b.n	8001f74 <_Z9write_PWMP17TIM_HandleTypeDefmms+0xd2>
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b10      	cmp	r3, #16
 8001f3c:	d10d      	bne.n	8001f5a <_Z9write_PWMP17TIM_HandleTypeDefmms+0xb8>
 8001f3e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff99 	bl	8001e80 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	10da      	asrs	r2, r3, #3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	659a      	str	r2, [r3, #88]	; 0x58
 8001f58:	e00c      	b.n	8001f74 <_Z9write_PWMP17TIM_HandleTypeDefmms+0xd2>
 8001f5a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff8b 	bl	8001e80 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	10da      	asrs	r2, r3, #3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_TIM_SET_COMPARE(htim, channel2, clamp_unsigned(-val) >> 3);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10f      	bne.n	8001f9a <_Z9write_PWMP17TIM_HandleTypeDefmms+0xf8>
 8001f7a:	887b      	ldrh	r3, [r7, #2]
 8001f7c:	425b      	negs	r3, r3
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	b21a      	sxth	r2, r3
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff79 	bl	8001e80 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	10da      	asrs	r2, r3, #3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	635a      	str	r2, [r3, #52]	; 0x34
  return;
 8001f98:	e05b      	b.n	8002052 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x1b0>
  __HAL_TIM_SET_COMPARE(htim, channel2, clamp_unsigned(-val) >> 3);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d10f      	bne.n	8001fc0 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x11e>
 8001fa0:	887b      	ldrh	r3, [r7, #2]
 8001fa2:	425b      	negs	r3, r3
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	b21a      	sxth	r2, r3
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff66 	bl	8001e80 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	10da      	asrs	r2, r3, #3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	639a      	str	r2, [r3, #56]	; 0x38
  return;
 8001fbe:	e048      	b.n	8002052 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x1b0>
  __HAL_TIM_SET_COMPARE(htim, channel2, clamp_unsigned(-val) >> 3);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d10f      	bne.n	8001fe6 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x144>
 8001fc6:	887b      	ldrh	r3, [r7, #2]
 8001fc8:	425b      	negs	r3, r3
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	b21a      	sxth	r2, r3
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff53 	bl	8001e80 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	10da      	asrs	r2, r3, #3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	63da      	str	r2, [r3, #60]	; 0x3c
  return;
 8001fe4:	e035      	b.n	8002052 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x1b0>
  __HAL_TIM_SET_COMPARE(htim, channel2, clamp_unsigned(-val) >> 3);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b0c      	cmp	r3, #12
 8001fea:	d10f      	bne.n	800200c <_Z9write_PWMP17TIM_HandleTypeDefmms+0x16a>
 8001fec:	887b      	ldrh	r3, [r7, #2]
 8001fee:	425b      	negs	r3, r3
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	b21a      	sxth	r2, r3
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff ff40 	bl	8001e80 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 8002000:	4603      	mov	r3, r0
 8002002:	10da      	asrs	r2, r3, #3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	641a      	str	r2, [r3, #64]	; 0x40
  return;
 800200a:	e022      	b.n	8002052 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x1b0>
  __HAL_TIM_SET_COMPARE(htim, channel2, clamp_unsigned(-val) >> 3);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b10      	cmp	r3, #16
 8002010:	d10f      	bne.n	8002032 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x190>
 8002012:	887b      	ldrh	r3, [r7, #2]
 8002014:	425b      	negs	r3, r3
 8002016:	b29b      	uxth	r3, r3
 8002018:	b21a      	sxth	r2, r3
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff2d 	bl	8001e80 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 8002026:	4603      	mov	r3, r0
 8002028:	10da      	asrs	r2, r3, #3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	659a      	str	r2, [r3, #88]	; 0x58
  return;
 8002030:	e00f      	b.n	8002052 <_Z9write_PWMP17TIM_HandleTypeDefmms+0x1b0>
  __HAL_TIM_SET_COMPARE(htim, channel2, clamp_unsigned(-val) >> 3);
 8002032:	887b      	ldrh	r3, [r7, #2]
 8002034:	425b      	negs	r3, r3
 8002036:	b29b      	uxth	r3, r3
 8002038:	b21a      	sxth	r2, r3
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff1d 	bl	8001e80 <_ZZ9write_PWMP17TIM_HandleTypeDefmmsENKUlsE_clEs>
 8002046:	4603      	mov	r3, r0
 8002048:	10da      	asrs	r2, r3, #3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	65da      	str	r2, [r3, #92]	; 0x5c
  return;
 8002050:	bf00      	nop
}
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800205c:	b672      	cpsid	i
}
 800205e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002060:	e7fe      	b.n	8002060 <Error_Handler+0x8>
	...

08002064 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206a:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <HAL_MspInit+0x44>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <HAL_MspInit+0x44>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6193      	str	r3, [r2, #24]
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <HAL_MspInit+0x44>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_MspInit+0x44>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <HAL_MspInit+0x44>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208c:	61d3      	str	r3, [r2, #28]
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_MspInit+0x44>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000

080020ac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a18      	ldr	r2, [pc, #96]	; (800212c <HAL_CAN_MspInit+0x80>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d129      	bne.n	8002122 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80020ce:	4b18      	ldr	r3, [pc, #96]	; (8002130 <HAL_CAN_MspInit+0x84>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	4a17      	ldr	r2, [pc, #92]	; (8002130 <HAL_CAN_MspInit+0x84>)
 80020d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020d8:	61d3      	str	r3, [r2, #28]
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <HAL_CAN_MspInit+0x84>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_CAN_MspInit+0x84>)
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	4a11      	ldr	r2, [pc, #68]	; (8002130 <HAL_CAN_MspInit+0x84>)
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f0:	6153      	str	r3, [r2, #20]
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_CAN_MspInit+0x84>)
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800210c:	2303      	movs	r3, #3
 800210e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8002110:	2309      	movs	r3, #9
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	4619      	mov	r1, r3
 800211a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800211e:	f001 faa9 	bl	8003674 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8002122:	bf00      	nop
 8002124:	3728      	adds	r7, #40	; 0x28
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40006400 	.word	0x40006400
 8002130:	40021000 	.word	0x40021000

08002134 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0a      	ldr	r2, [pc, #40]	; (800216c <HAL_TIM_PWM_MspInit+0x38>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d10b      	bne.n	800215e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <HAL_TIM_PWM_MspInit+0x3c>)
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	4a09      	ldr	r2, [pc, #36]	; (8002170 <HAL_TIM_PWM_MspInit+0x3c>)
 800214c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002150:	6193      	str	r3, [r2, #24]
 8002152:	4b07      	ldr	r3, [pc, #28]	; (8002170 <HAL_TIM_PWM_MspInit+0x3c>)
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40012c00 	.word	0x40012c00
 8002170:	40021000 	.word	0x40021000

08002174 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	; 0x28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002194:	d128      	bne.n	80021e8 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002196:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <HAL_TIM_IC_MspInit+0x7c>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	4a15      	ldr	r2, [pc, #84]	; (80021f0 <HAL_TIM_IC_MspInit+0x7c>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	61d3      	str	r3, [r2, #28]
 80021a2:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <HAL_TIM_IC_MspInit+0x7c>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <HAL_TIM_IC_MspInit+0x7c>)
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	4a0f      	ldr	r2, [pc, #60]	; (80021f0 <HAL_TIM_IC_MspInit+0x7c>)
 80021b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b8:	6153      	str	r3, [r2, #20]
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <HAL_TIM_IC_MspInit+0x7c>)
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021c6:	2320      	movs	r3, #32
 80021c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021d6:	2301      	movs	r3, #1
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021da:	f107 0314 	add.w	r3, r7, #20
 80021de:	4619      	mov	r1, r3
 80021e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e4:	f001 fa46 	bl	8003674 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021e8:	bf00      	nop
 80021ea:	3728      	adds	r7, #40	; 0x28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000

080021f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a20      	ldr	r2, [pc, #128]	; (8002284 <HAL_TIM_Base_MspInit+0x90>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d139      	bne.n	800227a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002206:	4b20      	ldr	r3, [pc, #128]	; (8002288 <HAL_TIM_Base_MspInit+0x94>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	4a1f      	ldr	r2, [pc, #124]	; (8002288 <HAL_TIM_Base_MspInit+0x94>)
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	61d3      	str	r3, [r2, #28]
 8002212:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <HAL_TIM_Base_MspInit+0x94>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 800221e:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_TIM_Base_MspInit+0x98>)
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <HAL_TIM_Base_MspInit+0x9c>)
 8002222:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002224:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_TIM_Base_MspInit+0x98>)
 8002226:	2210      	movs	r2, #16
 8002228:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800222a:	4b18      	ldr	r3, [pc, #96]	; (800228c <HAL_TIM_Base_MspInit+0x98>)
 800222c:	2200      	movs	r2, #0
 800222e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002230:	4b16      	ldr	r3, [pc, #88]	; (800228c <HAL_TIM_Base_MspInit+0x98>)
 8002232:	2280      	movs	r2, #128	; 0x80
 8002234:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <HAL_TIM_Base_MspInit+0x98>)
 8002238:	f44f 7280 	mov.w	r2, #256	; 0x100
 800223c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800223e:	4b13      	ldr	r3, [pc, #76]	; (800228c <HAL_TIM_Base_MspInit+0x98>)
 8002240:	2200      	movs	r2, #0
 8002242:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <HAL_TIM_Base_MspInit+0x98>)
 8002246:	2200      	movs	r2, #0
 8002248:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <HAL_TIM_Base_MspInit+0x98>)
 800224c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002250:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8002252:	480e      	ldr	r0, [pc, #56]	; (800228c <HAL_TIM_Base_MspInit+0x98>)
 8002254:	f001 f839 	bl	80032ca <HAL_DMA_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800225e:	f7ff fefb 	bl	8002058 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a09      	ldr	r2, [pc, #36]	; (800228c <HAL_TIM_Base_MspInit+0x98>)
 8002266:	631a      	str	r2, [r3, #48]	; 0x30
 8002268:	4a08      	ldr	r2, [pc, #32]	; (800228c <HAL_TIM_Base_MspInit+0x98>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a06      	ldr	r2, [pc, #24]	; (800228c <HAL_TIM_Base_MspInit+0x98>)
 8002272:	621a      	str	r2, [r3, #32]
 8002274:	4a05      	ldr	r2, [pc, #20]	; (800228c <HAL_TIM_Base_MspInit+0x98>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40000400 	.word	0x40000400
 8002288:	40021000 	.word	0x40021000
 800228c:	200001a0 	.word	0x200001a0
 8002290:	40020030 	.word	0x40020030

08002294 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a31      	ldr	r2, [pc, #196]	; (8002378 <HAL_TIM_MspPostInit+0xe4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d13a      	bne.n	800232c <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b6:	4b31      	ldr	r3, [pc, #196]	; (800237c <HAL_TIM_MspPostInit+0xe8>)
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	4a30      	ldr	r2, [pc, #192]	; (800237c <HAL_TIM_MspPostInit+0xe8>)
 80022bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c0:	6153      	str	r3, [r2, #20]
 80022c2:	4b2e      	ldr	r3, [pc, #184]	; (800237c <HAL_TIM_MspPostInit+0xe8>)
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ce:	4b2b      	ldr	r3, [pc, #172]	; (800237c <HAL_TIM_MspPostInit+0xe8>)
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	4a2a      	ldr	r2, [pc, #168]	; (800237c <HAL_TIM_MspPostInit+0xe8>)
 80022d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d8:	6153      	str	r3, [r2, #20]
 80022da:	4b28      	ldr	r3, [pc, #160]	; (800237c <HAL_TIM_MspPostInit+0xe8>)
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80022e6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80022ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80022f8:	2306      	movs	r3, #6
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002306:	f001 f9b5 	bl	8003674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800230a:	2301      	movs	r3, #1
 800230c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800231a:	2306      	movs	r3, #6
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231e:	f107 0314 	add.w	r3, r7, #20
 8002322:	4619      	mov	r1, r3
 8002324:	4816      	ldr	r0, [pc, #88]	; (8002380 <HAL_TIM_MspPostInit+0xec>)
 8002326:	f001 f9a5 	bl	8003674 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800232a:	e020      	b.n	800236e <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM3)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a14      	ldr	r2, [pc, #80]	; (8002384 <HAL_TIM_MspPostInit+0xf0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d11b      	bne.n	800236e <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002336:	4b11      	ldr	r3, [pc, #68]	; (800237c <HAL_TIM_MspPostInit+0xe8>)
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	4a10      	ldr	r2, [pc, #64]	; (800237c <HAL_TIM_MspPostInit+0xe8>)
 800233c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002340:	6153      	str	r3, [r2, #20]
 8002342:	4b0e      	ldr	r3, [pc, #56]	; (800237c <HAL_TIM_MspPostInit+0xe8>)
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800234e:	2302      	movs	r3, #2
 8002350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002352:	2302      	movs	r3, #2
 8002354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	2300      	movs	r3, #0
 800235c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800235e:	2302      	movs	r3, #2
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	4619      	mov	r1, r3
 8002368:	4805      	ldr	r0, [pc, #20]	; (8002380 <HAL_TIM_MspPostInit+0xec>)
 800236a:	f001 f983 	bl	8003674 <HAL_GPIO_Init>
}
 800236e:	bf00      	nop
 8002370:	3728      	adds	r7, #40	; 0x28
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40012c00 	.word	0x40012c00
 800237c:	40021000 	.word	0x40021000
 8002380:	48000400 	.word	0x48000400
 8002384:	40000400 	.word	0x40000400

08002388 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	; 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a17      	ldr	r2, [pc, #92]	; (8002404 <HAL_UART_MspInit+0x7c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d127      	bne.n	80023fa <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023aa:	4b17      	ldr	r3, [pc, #92]	; (8002408 <HAL_UART_MspInit+0x80>)
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	4a16      	ldr	r2, [pc, #88]	; (8002408 <HAL_UART_MspInit+0x80>)
 80023b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b4:	6193      	str	r3, [r2, #24]
 80023b6:	4b14      	ldr	r3, [pc, #80]	; (8002408 <HAL_UART_MspInit+0x80>)
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <HAL_UART_MspInit+0x80>)
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	4a10      	ldr	r2, [pc, #64]	; (8002408 <HAL_UART_MspInit+0x80>)
 80023c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023cc:	6153      	str	r3, [r2, #20]
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <HAL_UART_MspInit+0x80>)
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023da:	23c0      	movs	r3, #192	; 0xc0
 80023dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023de:	2302      	movs	r3, #2
 80023e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023e6:	2303      	movs	r3, #3
 80023e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023ea:	2307      	movs	r3, #7
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	4619      	mov	r1, r3
 80023f4:	4805      	ldr	r0, [pc, #20]	; (800240c <HAL_UART_MspInit+0x84>)
 80023f6:	f001 f93d 	bl	8003674 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023fa:	bf00      	nop
 80023fc:	3728      	adds	r7, #40	; 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40013800 	.word	0x40013800
 8002408:	40021000 	.word	0x40021000
 800240c:	48000400 	.word	0x48000400

08002410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002414:	e7fe      	b.n	8002414 <NMI_Handler+0x4>

08002416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800241a:	e7fe      	b.n	800241a <HardFault_Handler+0x4>

0800241c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002420:	e7fe      	b.n	8002420 <MemManage_Handler+0x4>

08002422 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002426:	e7fe      	b.n	8002426 <BusFault_Handler+0x4>

08002428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800242c:	e7fe      	b.n	800242c <UsageFault_Handler+0x4>

0800242e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800245c:	f000 f95e 	bl	800271c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}

08002464 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8002468:	4802      	ldr	r0, [pc, #8]	; (8002474 <DMA1_Channel3_IRQHandler+0x10>)
 800246a:	f001 f812 	bl	8003492 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200001a0 	.word	0x200001a0

08002478 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
	return 1;
 800247c:	2301      	movs	r3, #1
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <_kill>:

int _kill(int pid, int sig)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002492:	f005 fe9d 	bl	80081d0 <__errno>
 8002496:	4603      	mov	r3, r0
 8002498:	2216      	movs	r2, #22
 800249a:	601a      	str	r2, [r3, #0]
	return -1;
 800249c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <_exit>:

void _exit (int status)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024b0:	f04f 31ff 	mov.w	r1, #4294967295
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ffe7 	bl	8002488 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024ba:	e7fe      	b.n	80024ba <_exit+0x12>

080024bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <SystemInit+0x20>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c6:	4a05      	ldr	r2, [pc, #20]	; (80024dc <SystemInit+0x20>)
 80024c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <_ZN6ws281213ws2812_double19update_write_bufferEv>:

#include "ws2812double.h"

namespace ws2812 {

void ws2812_double::update_write_buffer(){
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < pixel_num; i++){
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d854      	bhi.n	800259c <_ZN6ws281213ws2812_double19update_write_bufferEv+0xbc>
		for(uint8_t j = 0; j < color_num; j++){
 80024f2:	2300      	movs	r3, #0
 80024f4:	73bb      	strb	r3, [r7, #14]
 80024f6:	7bbb      	ldrb	r3, [r7, #14]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d84b      	bhi.n	8002594 <_ZN6ws281213ws2812_double19update_write_bufferEv+0xb4>
			uint8_t color = 	(j == 0) ? ws2812_double::colors[i].green
 80024fc:	7bbb      	ldrb	r3, [r7, #14]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d108      	bne.n	8002514 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x34>
 8002502:	7bfa      	ldrb	r2, [r7, #15]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	440b      	add	r3, r1
 800250e:	3340      	adds	r3, #64	; 0x40
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	e018      	b.n	8002546 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x66>
 8002514:	7bbb      	ldrb	r3, [r7, #14]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d108      	bne.n	800252c <_ZN6ws281213ws2812_double19update_write_bufferEv+0x4c>
							: 	(j == 1) ? ws2812_double::colors[i].red
 800251a:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? ws2812_double::colors[i].green
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	4413      	add	r3, r2
 8002524:	440b      	add	r3, r1
 8002526:	333f      	adds	r3, #63	; 0x3f
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	e00c      	b.n	8002546 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x66>
 800252c:	7bbb      	ldrb	r3, [r7, #14]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d108      	bne.n	8002544 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x64>
							: 	(j == 2) ? ws2812_double::colors[i].blue : 0;
 8002532:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? ws2812_double::colors[i].green
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	4413      	add	r3, r2
 800253c:	440b      	add	r3, r1
 800253e:	3341      	adds	r3, #65	; 0x41
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	e000      	b.n	8002546 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x66>
 8002544:	2300      	movs	r3, #0
 8002546:	733b      	strb	r3, [r7, #12]
			for(uint8_t k = 0; k < byte; k++){
 8002548:	2300      	movs	r3, #0
 800254a:	737b      	strb	r3, [r7, #13]
 800254c:	7b7b      	ldrb	r3, [r7, #13]
 800254e:	2b07      	cmp	r3, #7
 8002550:	d81c      	bhi.n	800258c <_ZN6ws281213ws2812_double19update_write_bufferEv+0xac>
				ws2812_double::write_buffer[(i * color_num + j) * byte + k] = ((color & (0x80 >> k)) > 0) ? ws2812_double::high : ws2812_double::low;
 8002552:	7b3a      	ldrb	r2, [r7, #12]
 8002554:	7b7b      	ldrb	r3, [r7, #13]
 8002556:	2180      	movs	r1, #128	; 0x80
 8002558:	fa41 f303 	asr.w	r3, r1, r3
 800255c:	4013      	ands	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	dd02      	ble.n	8002568 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x88>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	7b1a      	ldrb	r2, [r3, #12]
 8002566:	e001      	b.n	800256c <_ZN6ws281213ws2812_double19update_write_bufferEv+0x8c>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7b5a      	ldrb	r2, [r3, #13]
 800256c:	7bf9      	ldrb	r1, [r7, #15]
 800256e:	460b      	mov	r3, r1
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4419      	add	r1, r3
 8002574:	7bbb      	ldrb	r3, [r7, #14]
 8002576:	440b      	add	r3, r1
 8002578:	00d9      	lsls	r1, r3, #3
 800257a:	7b7b      	ldrb	r3, [r7, #13]
 800257c:	440b      	add	r3, r1
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	440b      	add	r3, r1
 8002582:	739a      	strb	r2, [r3, #14]
			for(uint8_t k = 0; k < byte; k++){
 8002584:	7b7b      	ldrb	r3, [r7, #13]
 8002586:	3301      	adds	r3, #1
 8002588:	737b      	strb	r3, [r7, #13]
 800258a:	e7df      	b.n	800254c <_ZN6ws281213ws2812_double19update_write_bufferEv+0x6c>
		for(uint8_t j = 0; j < color_num; j++){
 800258c:	7bbb      	ldrb	r3, [r7, #14]
 800258e:	3301      	adds	r3, #1
 8002590:	73bb      	strb	r3, [r7, #14]
 8002592:	e7b0      	b.n	80024f6 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x16>
	for(uint8_t i = 0; i < pixel_num; i++){
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	3301      	adds	r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]
 800259a:	e7a7      	b.n	80024ec <_ZN6ws281213ws2812_double19update_write_bufferEv+0xc>
			}
		}
	}
	ws2812_double::write_buffer[data_len] = 0;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 80025a4:	bf00      	nop
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_ZN6ws281213ws2812_double4rendEv>:

void ws2812_double::rend(){
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
	update_write_buffer();
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff ff91 	bl	80024e0 <_ZN6ws281213ws2812_double19update_write_bufferEv>
	if(ws2812_double::hdma->State != HAL_DMA_STATE_READY) {
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d007      	beq.n	80025da <_ZN6ws281213ws2812_double4rendEv+0x2a>
    	HAL_TIM_PWM_Stop_DMA(ws2812_double::htim, ws2812_double::Channel);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4619      	mov	r1, r3
 80025d4:	4610      	mov	r0, r2
 80025d6:	f003 f913 	bl	8005800 <HAL_TIM_PWM_Stop_DMA>
  	}
	HAL_TIM_PWM_Start_DMA(ws2812_double::htim, ws2812_double::Channel, (uint32_t*)ws2812_double::write_buffer, data_len + reset_bit);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f103 020e 	add.w	r2, r3, #14
 80025e8:	2331      	movs	r3, #49	; 0x31
 80025ea:	f002 ff03 	bl	80053f4 <HAL_TIM_PWM_Start_DMA>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <_ZN6ws281213ws2812_doubleC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>:

ws2812_double::ws2812_double(TIM_HandleTypeDef *htim, uint32_t Channel, DMA_HandleTypeDef *hdma, uint8_t high_level_pulse_len, uint8_t low_level_pulse_len) {
 80025f6:	b480      	push	{r7}
 80025f8:	b085      	sub	sp, #20
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	603b      	str	r3, [r7, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	333f      	adds	r3, #63	; 0x3f
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	809a      	strh	r2, [r3, #4]
	// TODO Auto-generated constructor stub
	ws2812_double::htim = htim;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	601a      	str	r2, [r3, #0]
	ws2812_double::Channel = Channel;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	605a      	str	r2, [r3, #4]
	ws2812_double::hdma = hdma;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	609a      	str	r2, [r3, #8]
	ws2812_double::high = high_level_pulse_len;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	7e3a      	ldrb	r2, [r7, #24]
 8002624:	731a      	strb	r2, [r3, #12]
	ws2812_double::low = low_level_pulse_len;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	7f3a      	ldrb	r2, [r7, #28]
 800262a:	735a      	strb	r2, [r3, #13]
}
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4618      	mov	r0, r3
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800263c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002674 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002640:	480d      	ldr	r0, [pc, #52]	; (8002678 <LoopForever+0x6>)
  ldr r1, =_edata
 8002642:	490e      	ldr	r1, [pc, #56]	; (800267c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002644:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <LoopForever+0xe>)
  movs r3, #0
 8002646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002648:	e002      	b.n	8002650 <LoopCopyDataInit>

0800264a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800264c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264e:	3304      	adds	r3, #4

08002650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002654:	d3f9      	bcc.n	800264a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002656:	4a0b      	ldr	r2, [pc, #44]	; (8002684 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002658:	4c0b      	ldr	r4, [pc, #44]	; (8002688 <LoopForever+0x16>)
  movs r3, #0
 800265a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800265c:	e001      	b.n	8002662 <LoopFillZerobss>

0800265e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002660:	3204      	adds	r2, #4

08002662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002664:	d3fb      	bcc.n	800265e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002666:	f7ff ff29 	bl	80024bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800266a:	f005 fdb7 	bl	80081dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800266e:	f7fe ff21 	bl	80014b4 <main>

08002672 <LoopForever>:

LoopForever:
    b LoopForever
 8002672:	e7fe      	b.n	8002672 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002674:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800267c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002680:	08008710 	.word	0x08008710
  ldr r2, =_sbss
 8002684:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002688:	20000284 	.word	0x20000284

0800268c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800268c:	e7fe      	b.n	800268c <ADC1_2_IRQHandler>
	...

08002690 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002694:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <HAL_Init+0x28>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a07      	ldr	r2, [pc, #28]	; (80026b8 <HAL_Init+0x28>)
 800269a:	f043 0310 	orr.w	r3, r3, #16
 800269e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a0:	2003      	movs	r0, #3
 80026a2:	f000 fdcd 	bl	8003240 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026a6:	200f      	movs	r0, #15
 80026a8:	f000 f808 	bl	80026bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026ac:	f7ff fcda 	bl	8002064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40022000 	.word	0x40022000

080026bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <HAL_InitTick+0x54>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_InitTick+0x58>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fde9 	bl	80032b2 <HAL_SYSTICK_Config>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00e      	b.n	8002708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b0f      	cmp	r3, #15
 80026ee:	d80a      	bhi.n	8002706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f0:	2200      	movs	r2, #0
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f000 fdad 	bl	8003256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026fc:	4a06      	ldr	r2, [pc, #24]	; (8002718 <HAL_InitTick+0x5c>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000000 	.word	0x20000000
 8002714:	20000008 	.word	0x20000008
 8002718:	20000004 	.word	0x20000004

0800271c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_IncTick+0x20>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_IncTick+0x24>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4413      	add	r3, r2
 800272c:	4a04      	ldr	r2, [pc, #16]	; (8002740 <HAL_IncTick+0x24>)
 800272e:	6013      	str	r3, [r2, #0]
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000008 	.word	0x20000008
 8002740:	20000268 	.word	0x20000268

08002744 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return uwTick;  
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <HAL_GetTick+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20000268 	.word	0x20000268

0800275c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002764:	f7ff ffee 	bl	8002744 <HAL_GetTick>
 8002768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d005      	beq.n	8002782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <HAL_Delay+0x44>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4413      	add	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002782:	bf00      	nop
 8002784:	f7ff ffde 	bl	8002744 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	429a      	cmp	r2, r3
 8002792:	d8f7      	bhi.n	8002784 <HAL_Delay+0x28>
  {
  }
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000008 	.word	0x20000008

080027a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0ed      	b.n	8002992 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff fc72 	bl	80020ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027d8:	f7ff ffb4 	bl	8002744 <HAL_GetTick>
 80027dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80027de:	e012      	b.n	8002806 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027e0:	f7ff ffb0 	bl	8002744 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b0a      	cmp	r3, #10
 80027ec:	d90b      	bls.n	8002806 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2205      	movs	r2, #5
 80027fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e0c5      	b.n	8002992 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0e5      	beq.n	80027e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0202 	bic.w	r2, r2, #2
 8002822:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002824:	f7ff ff8e 	bl	8002744 <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800282a:	e012      	b.n	8002852 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800282c:	f7ff ff8a 	bl	8002744 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b0a      	cmp	r3, #10
 8002838:	d90b      	bls.n	8002852 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2205      	movs	r2, #5
 800284a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e09f      	b.n	8002992 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1e5      	bne.n	800282c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	7e1b      	ldrb	r3, [r3, #24]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d108      	bne.n	800287a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	e007      	b.n	800288a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002888:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7e5b      	ldrb	r3, [r3, #25]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d108      	bne.n	80028a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	e007      	b.n	80028b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7e9b      	ldrb	r3, [r3, #26]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d108      	bne.n	80028ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0220 	orr.w	r2, r2, #32
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e007      	b.n	80028de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0220 	bic.w	r2, r2, #32
 80028dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	7edb      	ldrb	r3, [r3, #27]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d108      	bne.n	80028f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0210 	bic.w	r2, r2, #16
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	e007      	b.n	8002908 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0210 	orr.w	r2, r2, #16
 8002906:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	7f1b      	ldrb	r3, [r3, #28]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d108      	bne.n	8002922 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0208 	orr.w	r2, r2, #8
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e007      	b.n	8002932 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0208 	bic.w	r2, r2, #8
 8002930:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	7f5b      	ldrb	r3, [r3, #29]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d108      	bne.n	800294c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0204 	orr.w	r2, r2, #4
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e007      	b.n	800295c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0204 	bic.w	r2, r2, #4
 800295a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	ea42 0103 	orr.w	r1, r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	1e5a      	subs	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800299a:	b480      	push	{r7}
 800299c:	b087      	sub	sp, #28
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029b0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80029b2:	7cfb      	ldrb	r3, [r7, #19]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d003      	beq.n	80029c0 <HAL_CAN_ConfigFilter+0x26>
 80029b8:	7cfb      	ldrb	r3, [r7, #19]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	f040 80aa 	bne.w	8002b14 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029c6:	f043 0201 	orr.w	r2, r3, #1
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f003 031f 	and.w	r3, r3, #31
 80029d8:	2201      	movs	r2, #1
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	401a      	ands	r2, r3
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d123      	bne.n	8002a42 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	401a      	ands	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002a1c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3248      	adds	r2, #72	; 0x48
 8002a22:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a36:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a38:	6979      	ldr	r1, [r7, #20]
 8002a3a:	3348      	adds	r3, #72	; 0x48
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	440b      	add	r3, r1
 8002a40:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d122      	bne.n	8002a90 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002a6a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	3248      	adds	r2, #72	; 0x48
 8002a70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002a84:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002a86:	6979      	ldr	r1, [r7, #20]
 8002a88:	3348      	adds	r3, #72	; 0x48
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d109      	bne.n	8002aac <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002aaa:	e007      	b.n	8002abc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d109      	bne.n	8002ad8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	401a      	ands	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002ad6:	e007      	b.n	8002ae8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d107      	bne.n	8002b00 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b06:	f023 0201 	bic.w	r2, r3, #1
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	e006      	b.n	8002b22 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
  }
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d12e      	bne.n	8002ba0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2202      	movs	r2, #2
 8002b46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0201 	bic.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b5a:	f7ff fdf3 	bl	8002744 <HAL_GetTick>
 8002b5e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b60:	e012      	b.n	8002b88 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b62:	f7ff fdef 	bl	8002744 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b0a      	cmp	r3, #10
 8002b6e:	d90b      	bls.n	8002b88 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2205      	movs	r2, #5
 8002b80:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e012      	b.n	8002bae <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1e5      	bne.n	8002b62 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e006      	b.n	8002bae <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
  }
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d133      	bne.n	8002c32 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 0201 	orr.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bda:	f7ff fdb3 	bl	8002744 <HAL_GetTick>
 8002bde:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002be0:	e012      	b.n	8002c08 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002be2:	f7ff fdaf 	bl	8002744 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b0a      	cmp	r3, #10
 8002bee:	d90b      	bls.n	8002c08 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2205      	movs	r2, #5
 8002c00:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e01b      	b.n	8002c40 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0e5      	beq.n	8002be2 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0202 	bic.w	r2, r2, #2
 8002c24:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e006      	b.n	8002c40 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
  }
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b089      	sub	sp, #36	; 0x24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c5c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c66:	7ffb      	ldrb	r3, [r7, #31]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d003      	beq.n	8002c74 <HAL_CAN_AddTxMessage+0x2c>
 8002c6c:	7ffb      	ldrb	r3, [r7, #31]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	f040 80b8 	bne.w	8002de4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10a      	bne.n	8002c94 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d105      	bne.n	8002c94 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80a0 	beq.w	8002dd4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	0e1b      	lsrs	r3, r3, #24
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d907      	bls.n	8002cb4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e09e      	b.n	8002df2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10d      	bne.n	8002ce2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002cd0:	68f9      	ldr	r1, [r7, #12]
 8002cd2:	6809      	ldr	r1, [r1, #0]
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	3318      	adds	r3, #24
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	440b      	add	r3, r1
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e00f      	b.n	8002d02 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002cec:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002cf2:	68f9      	ldr	r1, [r7, #12]
 8002cf4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002cf6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	3318      	adds	r3, #24
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	440b      	add	r3, r1
 8002d00:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6819      	ldr	r1, [r3, #0]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	3318      	adds	r3, #24
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	440b      	add	r3, r1
 8002d12:	3304      	adds	r3, #4
 8002d14:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	7d1b      	ldrb	r3, [r3, #20]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d111      	bne.n	8002d42 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	3318      	adds	r3, #24
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	4413      	add	r3, r2
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	6811      	ldr	r1, [r2, #0]
 8002d32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	3318      	adds	r3, #24
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	440b      	add	r3, r1
 8002d3e:	3304      	adds	r3, #4
 8002d40:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3307      	adds	r3, #7
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	061a      	lsls	r2, r3, #24
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3306      	adds	r3, #6
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	041b      	lsls	r3, r3, #16
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3305      	adds	r3, #5
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	021b      	lsls	r3, r3, #8
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	3204      	adds	r2, #4
 8002d62:	7812      	ldrb	r2, [r2, #0]
 8002d64:	4610      	mov	r0, r2
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	6811      	ldr	r1, [r2, #0]
 8002d6a:	ea43 0200 	orr.w	r2, r3, r0
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	440b      	add	r3, r1
 8002d74:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002d78:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3303      	adds	r3, #3
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	061a      	lsls	r2, r3, #24
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3302      	adds	r3, #2
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	021b      	lsls	r3, r3, #8
 8002d94:	4313      	orrs	r3, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	7812      	ldrb	r2, [r2, #0]
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	6811      	ldr	r1, [r2, #0]
 8002da0:	ea43 0200 	orr.w	r2, r3, r0
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	440b      	add	r3, r1
 8002daa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002dae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	3318      	adds	r3, #24
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	4413      	add	r3, r2
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	6811      	ldr	r1, [r2, #0]
 8002dc2:	f043 0201 	orr.w	r2, r3, #1
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	3318      	adds	r3, #24
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	440b      	add	r3, r1
 8002dce:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e00e      	b.n	8002df2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e006      	b.n	8002df2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
  }
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3724      	adds	r7, #36	; 0x24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b087      	sub	sp, #28
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e12:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e14:	7dfb      	ldrb	r3, [r7, #23]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d003      	beq.n	8002e22 <HAL_CAN_GetRxMessage+0x24>
 8002e1a:	7dfb      	ldrb	r3, [r7, #23]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	f040 80f3 	bne.w	8003008 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10e      	bne.n	8002e46 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d116      	bne.n	8002e64 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e0e7      	b.n	8003016 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d107      	bne.n	8002e64 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0d8      	b.n	8003016 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	331b      	adds	r3, #27
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	4413      	add	r3, r2
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0204 	and.w	r2, r3, #4
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10c      	bne.n	8002e9c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	331b      	adds	r3, #27
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	4413      	add	r3, r2
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0d5b      	lsrs	r3, r3, #21
 8002e92:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	e00b      	b.n	8002eb4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	331b      	adds	r3, #27
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	4413      	add	r3, r2
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	08db      	lsrs	r3, r3, #3
 8002eac:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	331b      	adds	r3, #27
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	4413      	add	r3, r2
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0202 	and.w	r2, r3, #2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	331b      	adds	r3, #27
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 020f 	and.w	r2, r3, #15
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	331b      	adds	r3, #27
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	4413      	add	r3, r2
 8002eee:	3304      	adds	r3, #4
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	331b      	adds	r3, #27
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	4413      	add	r3, r2
 8002f06:	3304      	adds	r3, #4
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	0c1b      	lsrs	r3, r3, #16
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	0a1a      	lsrs	r2, r3, #8
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	0c1a      	lsrs	r2, r3, #16
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	3302      	adds	r3, #2
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	0e1a      	lsrs	r2, r3, #24
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	3303      	adds	r3, #3
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	0a1a      	lsrs	r2, r3, #8
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	3305      	adds	r3, #5
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	0c1a      	lsrs	r2, r3, #16
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	3306      	adds	r3, #6
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	0e1a      	lsrs	r2, r3, #24
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	3307      	adds	r3, #7
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d108      	bne.n	8002ff4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0220 	orr.w	r2, r2, #32
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	e007      	b.n	8003004 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0220 	orr.w	r2, r2, #32
 8003002:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	e006      	b.n	8003016 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
  }
}
 8003016:	4618      	mov	r0, r3
 8003018:	371c      	adds	r7, #28
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003022:	b480      	push	{r7}
 8003024:	b085      	sub	sp, #20
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003036:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003038:	7afb      	ldrb	r3, [r7, #11]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d002      	beq.n	8003044 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800303e:	7afb      	ldrb	r3, [r7, #11]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d10f      	bne.n	8003064 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	e005      	b.n	8003064 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003064:	68fb      	ldr	r3, [r7, #12]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003090:	4013      	ands	r3, r2
 8003092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800309c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030a6:	4a04      	ldr	r2, [pc, #16]	; (80030b8 <__NVIC_SetPriorityGrouping+0x44>)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	60d3      	str	r3, [r2, #12]
}
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <__NVIC_GetPriorityGrouping+0x18>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	0a1b      	lsrs	r3, r3, #8
 80030c6:	f003 0307 	and.w	r3, r3, #7
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	db0b      	blt.n	8003102 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	f003 021f 	and.w	r2, r3, #31
 80030f0:	4907      	ldr	r1, [pc, #28]	; (8003110 <__NVIC_EnableIRQ+0x38>)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	2001      	movs	r0, #1
 80030fa:	fa00 f202 	lsl.w	r2, r0, r2
 80030fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	e000e100 	.word	0xe000e100

08003114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	6039      	str	r1, [r7, #0]
 800311e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003124:	2b00      	cmp	r3, #0
 8003126:	db0a      	blt.n	800313e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	b2da      	uxtb	r2, r3
 800312c:	490c      	ldr	r1, [pc, #48]	; (8003160 <__NVIC_SetPriority+0x4c>)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	0112      	lsls	r2, r2, #4
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	440b      	add	r3, r1
 8003138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800313c:	e00a      	b.n	8003154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4908      	ldr	r1, [pc, #32]	; (8003164 <__NVIC_SetPriority+0x50>)
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	3b04      	subs	r3, #4
 800314c:	0112      	lsls	r2, r2, #4
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	440b      	add	r3, r1
 8003152:	761a      	strb	r2, [r3, #24]
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000e100 	.word	0xe000e100
 8003164:	e000ed00 	.word	0xe000ed00

08003168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	; 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f1c3 0307 	rsb	r3, r3, #7
 8003182:	2b04      	cmp	r3, #4
 8003184:	bf28      	it	cs
 8003186:	2304      	movcs	r3, #4
 8003188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3304      	adds	r3, #4
 800318e:	2b06      	cmp	r3, #6
 8003190:	d902      	bls.n	8003198 <NVIC_EncodePriority+0x30>
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3b03      	subs	r3, #3
 8003196:	e000      	b.n	800319a <NVIC_EncodePriority+0x32>
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800319c:	f04f 32ff 	mov.w	r2, #4294967295
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43da      	mvns	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	401a      	ands	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b0:	f04f 31ff 	mov.w	r1, #4294967295
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ba:	43d9      	mvns	r1, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c0:	4313      	orrs	r3, r2
         );
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3724      	adds	r7, #36	; 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80031d4:	f3bf 8f4f 	dsb	sy
}
 80031d8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <__NVIC_SystemReset+0x24>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80031e2:	4904      	ldr	r1, [pc, #16]	; (80031f4 <__NVIC_SystemReset+0x24>)
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <__NVIC_SystemReset+0x28>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80031ea:	f3bf 8f4f 	dsb	sy
}
 80031ee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80031f0:	bf00      	nop
 80031f2:	e7fd      	b.n	80031f0 <__NVIC_SystemReset+0x20>
 80031f4:	e000ed00 	.word	0xe000ed00
 80031f8:	05fa0004 	.word	0x05fa0004

080031fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3b01      	subs	r3, #1
 8003208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800320c:	d301      	bcc.n	8003212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800320e:	2301      	movs	r3, #1
 8003210:	e00f      	b.n	8003232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <SysTick_Config+0x40>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3b01      	subs	r3, #1
 8003218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800321a:	210f      	movs	r1, #15
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
 8003220:	f7ff ff78 	bl	8003114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <SysTick_Config+0x40>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800322a:	4b04      	ldr	r3, [pc, #16]	; (800323c <SysTick_Config+0x40>)
 800322c:	2207      	movs	r2, #7
 800322e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	e000e010 	.word	0xe000e010

08003240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff ff13 	bl	8003074 <__NVIC_SetPriorityGrouping>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003268:	f7ff ff28 	bl	80030bc <__NVIC_GetPriorityGrouping>
 800326c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	6978      	ldr	r0, [r7, #20]
 8003274:	f7ff ff78 	bl	8003168 <NVIC_EncodePriority>
 8003278:	4602      	mov	r2, r0
 800327a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff47 	bl	8003114 <__NVIC_SetPriority>
}
 8003286:	bf00      	nop
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ff1b 	bl	80030d8 <__NVIC_EnableIRQ>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80032ae:	f7ff ff8f 	bl	80031d0 <__NVIC_SystemReset>

080032b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff ff9e 	bl	80031fc <SysTick_Config>
 80032c0:	4603      	mov	r3, r0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e037      	b.n	8003350 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80032f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80032fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800331c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f97e 	bl	8003634 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}  
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_DMA_Start_IT+0x20>
 8003374:	2302      	movs	r3, #2
 8003376:	e04a      	b.n	800340e <HAL_DMA_Start_IT+0xb6>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003386:	2b01      	cmp	r3, #1
 8003388:	d13a      	bne.n	8003400 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2202      	movs	r2, #2
 800338e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f912 	bl	80035d8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 020e 	orr.w	r2, r2, #14
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	e00f      	b.n	80033ee <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 020a 	orr.w	r2, r2, #10
 80033dc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0204 	bic.w	r2, r2, #4
 80033ec:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0201 	orr.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	e005      	b.n	800340c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003408:	2302      	movs	r3, #2
 800340a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800340c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003428:	2b02      	cmp	r3, #2
 800342a:	d005      	beq.n	8003438 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2204      	movs	r2, #4
 8003430:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	73fb      	strb	r3, [r7, #15]
 8003436:	e027      	b.n	8003488 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 020e 	bic.w	r2, r2, #14
 8003446:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0201 	bic.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003460:	2101      	movs	r1, #1
 8003462:	fa01 f202 	lsl.w	r2, r1, r2
 8003466:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	4798      	blx	r3
    } 
  }
  return status;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	2204      	movs	r2, #4
 80034b0:	409a      	lsls	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4013      	ands	r3, r2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d024      	beq.n	8003504 <HAL_DMA_IRQHandler+0x72>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01f      	beq.n	8003504 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d107      	bne.n	80034e2 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0204 	bic.w	r2, r2, #4
 80034e0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ea:	2104      	movs	r1, #4
 80034ec:	fa01 f202 	lsl.w	r2, r1, r2
 80034f0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d06a      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003502:	e065      	b.n	80035d0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	2202      	movs	r2, #2
 800350a:	409a      	lsls	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d02c      	beq.n	800356e <HAL_DMA_IRQHandler+0xdc>
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d027      	beq.n	800356e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 020a 	bic.w	r2, r2, #10
 800353a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354c:	2102      	movs	r1, #2
 800354e:	fa01 f202 	lsl.w	r2, r1, r2
 8003552:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	2b00      	cmp	r3, #0
 8003562:	d035      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800356c:	e030      	b.n	80035d0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	2208      	movs	r2, #8
 8003574:	409a      	lsls	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4013      	ands	r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d028      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x13e>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d023      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 020e 	bic.w	r2, r2, #14
 8003596:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a0:	2101      	movs	r1, #1
 80035a2:	fa01 f202 	lsl.w	r2, r1, r2
 80035a6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d004      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
    }
  }
}  
 80035ce:	e7ff      	b.n	80035d0 <HAL_DMA_IRQHandler+0x13e>
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ee:	2101      	movs	r1, #1
 80035f0:	fa01 f202 	lsl.w	r2, r1, r2
 80035f4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b10      	cmp	r3, #16
 8003604:	d108      	bne.n	8003618 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003616:	e007      	b.n	8003628 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	60da      	str	r2, [r3, #12]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	4b09      	ldr	r3, [pc, #36]	; (8003668 <DMA_CalcBaseAndBitshift+0x34>)
 8003644:	4413      	add	r3, r2
 8003646:	4a09      	ldr	r2, [pc, #36]	; (800366c <DMA_CalcBaseAndBitshift+0x38>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	009a      	lsls	r2, r3, #2
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a06      	ldr	r2, [pc, #24]	; (8003670 <DMA_CalcBaseAndBitshift+0x3c>)
 8003658:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	bffdfff8 	.word	0xbffdfff8
 800366c:	cccccccd 	.word	0xcccccccd
 8003670:	40020000 	.word	0x40020000

08003674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003682:	e14e      	b.n	8003922 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	2101      	movs	r1, #1
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	fa01 f303 	lsl.w	r3, r1, r3
 8003690:	4013      	ands	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 8140 	beq.w	800391c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d005      	beq.n	80036b4 <HAL_GPIO_Init+0x40>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d130      	bne.n	8003716 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	2203      	movs	r2, #3
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4013      	ands	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036ea:	2201      	movs	r2, #1
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	f003 0201 	and.w	r2, r3, #1
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b03      	cmp	r3, #3
 8003720:	d017      	beq.n	8003752 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	2203      	movs	r2, #3
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4013      	ands	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d123      	bne.n	80037a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	08da      	lsrs	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3208      	adds	r2, #8
 8003766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800376a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	220f      	movs	r2, #15
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43db      	mvns	r3, r3
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4013      	ands	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	08da      	lsrs	r2, r3, #3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3208      	adds	r2, #8
 80037a0:	6939      	ldr	r1, [r7, #16]
 80037a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	2203      	movs	r2, #3
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	43db      	mvns	r3, r3
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4013      	ands	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 0203 	and.w	r2, r3, #3
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 809a 	beq.w	800391c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e8:	4b55      	ldr	r3, [pc, #340]	; (8003940 <HAL_GPIO_Init+0x2cc>)
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	4a54      	ldr	r2, [pc, #336]	; (8003940 <HAL_GPIO_Init+0x2cc>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6193      	str	r3, [r2, #24]
 80037f4:	4b52      	ldr	r3, [pc, #328]	; (8003940 <HAL_GPIO_Init+0x2cc>)
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003800:	4a50      	ldr	r2, [pc, #320]	; (8003944 <HAL_GPIO_Init+0x2d0>)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	089b      	lsrs	r3, r3, #2
 8003806:	3302      	adds	r3, #2
 8003808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	220f      	movs	r2, #15
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4013      	ands	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800382a:	d013      	beq.n	8003854 <HAL_GPIO_Init+0x1e0>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a46      	ldr	r2, [pc, #280]	; (8003948 <HAL_GPIO_Init+0x2d4>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00d      	beq.n	8003850 <HAL_GPIO_Init+0x1dc>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a45      	ldr	r2, [pc, #276]	; (800394c <HAL_GPIO_Init+0x2d8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d007      	beq.n	800384c <HAL_GPIO_Init+0x1d8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a44      	ldr	r2, [pc, #272]	; (8003950 <HAL_GPIO_Init+0x2dc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d101      	bne.n	8003848 <HAL_GPIO_Init+0x1d4>
 8003844:	2303      	movs	r3, #3
 8003846:	e006      	b.n	8003856 <HAL_GPIO_Init+0x1e2>
 8003848:	2305      	movs	r3, #5
 800384a:	e004      	b.n	8003856 <HAL_GPIO_Init+0x1e2>
 800384c:	2302      	movs	r3, #2
 800384e:	e002      	b.n	8003856 <HAL_GPIO_Init+0x1e2>
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <HAL_GPIO_Init+0x1e2>
 8003854:	2300      	movs	r3, #0
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	f002 0203 	and.w	r2, r2, #3
 800385c:	0092      	lsls	r2, r2, #2
 800385e:	4093      	lsls	r3, r2
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003866:	4937      	ldr	r1, [pc, #220]	; (8003944 <HAL_GPIO_Init+0x2d0>)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	089b      	lsrs	r3, r3, #2
 800386c:	3302      	adds	r3, #2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003874:	4b37      	ldr	r3, [pc, #220]	; (8003954 <HAL_GPIO_Init+0x2e0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	43db      	mvns	r3, r3
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4013      	ands	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003898:	4a2e      	ldr	r2, [pc, #184]	; (8003954 <HAL_GPIO_Init+0x2e0>)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800389e:	4b2d      	ldr	r3, [pc, #180]	; (8003954 <HAL_GPIO_Init+0x2e0>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4013      	ands	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80038c2:	4a24      	ldr	r2, [pc, #144]	; (8003954 <HAL_GPIO_Init+0x2e0>)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038c8:	4b22      	ldr	r3, [pc, #136]	; (8003954 <HAL_GPIO_Init+0x2e0>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4013      	ands	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80038ec:	4a19      	ldr	r2, [pc, #100]	; (8003954 <HAL_GPIO_Init+0x2e0>)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038f2:	4b18      	ldr	r3, [pc, #96]	; (8003954 <HAL_GPIO_Init+0x2e0>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4013      	ands	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003916:	4a0f      	ldr	r2, [pc, #60]	; (8003954 <HAL_GPIO_Init+0x2e0>)
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	3301      	adds	r3, #1
 8003920:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	f47f aea9 	bne.w	8003684 <HAL_GPIO_Init+0x10>
  }
}
 8003932:	bf00      	nop
 8003934:	bf00      	nop
 8003936:	371c      	adds	r7, #28
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	40021000 	.word	0x40021000
 8003944:	40010000 	.word	0x40010000
 8003948:	48000400 	.word	0x48000400
 800394c:	48000800 	.word	0x48000800
 8003950:	48000c00 	.word	0x48000c00
 8003954:	40010400 	.word	0x40010400

08003958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	807b      	strh	r3, [r7, #2]
 8003964:	4613      	mov	r3, r2
 8003966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003968:	787b      	ldrb	r3, [r7, #1]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800396e:	887a      	ldrh	r2, [r7, #2]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003974:	e002      	b.n	800397c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003976:	887a      	ldrh	r2, [r7, #2]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800398e:	af00      	add	r7, sp, #0
 8003990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003994:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003998:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800399a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d102      	bne.n	80039ae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f001 b823 	b.w	80049f4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 817d 	beq.w	8003cbe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80039c4:	4bbc      	ldr	r3, [pc, #752]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 030c 	and.w	r3, r3, #12
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d00c      	beq.n	80039ea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039d0:	4bb9      	ldr	r3, [pc, #740]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d15c      	bne.n	8003a96 <HAL_RCC_OscConfig+0x10e>
 80039dc:	4bb6      	ldr	r3, [pc, #728]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e8:	d155      	bne.n	8003a96 <HAL_RCC_OscConfig+0x10e>
 80039ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039ee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	095b      	lsrs	r3, r3, #5
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d102      	bne.n	8003a1c <HAL_RCC_OscConfig+0x94>
 8003a16:	4ba8      	ldr	r3, [pc, #672]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	e015      	b.n	8003a48 <HAL_RCC_OscConfig+0xc0>
 8003a1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a20:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a24:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003a28:	fa93 f3a3 	rbit	r3, r3
 8003a2c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003a30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a34:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003a38:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003a3c:	fa93 f3a3 	rbit	r3, r3
 8003a40:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003a44:	4b9c      	ldr	r3, [pc, #624]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a4c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003a50:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003a54:	fa92 f2a2 	rbit	r2, r2
 8003a58:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003a5c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003a60:	fab2 f282 	clz	r2, r2
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	f042 0220 	orr.w	r2, r2, #32
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	f002 021f 	and.w	r2, r2, #31
 8003a70:	2101      	movs	r1, #1
 8003a72:	fa01 f202 	lsl.w	r2, r1, r2
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 811f 	beq.w	8003cbc <HAL_RCC_OscConfig+0x334>
 8003a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f040 8116 	bne.w	8003cbc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f000 bfaf 	b.w	80049f4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa6:	d106      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x12e>
 8003aa8:	4b83      	ldr	r3, [pc, #524]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a82      	ldr	r2, [pc, #520]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	e036      	b.n	8003b24 <HAL_RCC_OscConfig+0x19c>
 8003ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x158>
 8003ac6:	4b7c      	ldr	r3, [pc, #496]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a7b      	ldr	r2, [pc, #492]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	4b79      	ldr	r3, [pc, #484]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a78      	ldr	r2, [pc, #480]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003ad8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e021      	b.n	8003b24 <HAL_RCC_OscConfig+0x19c>
 8003ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003af0:	d10c      	bne.n	8003b0c <HAL_RCC_OscConfig+0x184>
 8003af2:	4b71      	ldr	r3, [pc, #452]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a70      	ldr	r2, [pc, #448]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	4b6e      	ldr	r3, [pc, #440]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a6d      	ldr	r2, [pc, #436]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e00b      	b.n	8003b24 <HAL_RCC_OscConfig+0x19c>
 8003b0c:	4b6a      	ldr	r3, [pc, #424]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a69      	ldr	r2, [pc, #420]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4b67      	ldr	r3, [pc, #412]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a66      	ldr	r2, [pc, #408]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b22:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b24:	4b64      	ldr	r3, [pc, #400]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	f023 020f 	bic.w	r2, r3, #15
 8003b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	495f      	ldr	r1, [pc, #380]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d059      	beq.n	8003c02 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4e:	f7fe fdf9 	bl	8002744 <HAL_GetTick>
 8003b52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fe fdf4 	bl	8002744 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b64      	cmp	r3, #100	; 0x64
 8003b66:	d902      	bls.n	8003b6e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	f000 bf43 	b.w	80049f4 <HAL_RCC_OscConfig+0x106c>
 8003b6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b72:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b76:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003b82:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b86:	fab3 f383 	clz	r3, r3
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d102      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x218>
 8003b9a:	4b47      	ldr	r3, [pc, #284]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	e015      	b.n	8003bcc <HAL_RCC_OscConfig+0x244>
 8003ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ba4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003bac:	fa93 f3a3 	rbit	r3, r3
 8003bb0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bb8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003bbc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003bc8:	4b3b      	ldr	r3, [pc, #236]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bd0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003bd4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003bd8:	fa92 f2a2 	rbit	r2, r2
 8003bdc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003be0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003be4:	fab2 f282 	clz	r2, r2
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	f042 0220 	orr.w	r2, r2, #32
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	f002 021f 	and.w	r2, r2, #31
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0ab      	beq.n	8003b58 <HAL_RCC_OscConfig+0x1d0>
 8003c00:	e05d      	b.n	8003cbe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c02:	f7fe fd9f 	bl	8002744 <HAL_GetTick>
 8003c06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c0c:	f7fe fd9a 	bl	8002744 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b64      	cmp	r3, #100	; 0x64
 8003c1a:	d902      	bls.n	8003c22 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	f000 bee9 	b.w	80049f4 <HAL_RCC_OscConfig+0x106c>
 8003c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c26:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003c2e:	fa93 f3a3 	rbit	r3, r3
 8003c32:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003c36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3a:	fab3 f383 	clz	r3, r3
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d102      	bne.n	8003c54 <HAL_RCC_OscConfig+0x2cc>
 8003c4e:	4b1a      	ldr	r3, [pc, #104]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	e015      	b.n	8003c80 <HAL_RCC_OscConfig+0x2f8>
 8003c54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c58:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c6c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003c70:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003c74:	fa93 f3a3 	rbit	r3, r3
 8003c78:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003c7c:	4b0e      	ldr	r3, [pc, #56]	; (8003cb8 <HAL_RCC_OscConfig+0x330>)
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c84:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003c88:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003c8c:	fa92 f2a2 	rbit	r2, r2
 8003c90:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003c94:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003c98:	fab2 f282 	clz	r2, r2
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	f042 0220 	orr.w	r2, r2, #32
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	f002 021f 	and.w	r2, r2, #31
 8003ca8:	2101      	movs	r1, #1
 8003caa:	fa01 f202 	lsl.w	r2, r1, r2
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1ab      	bne.n	8003c0c <HAL_RCC_OscConfig+0x284>
 8003cb4:	e003      	b.n	8003cbe <HAL_RCC_OscConfig+0x336>
 8003cb6:	bf00      	nop
 8003cb8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 817d 	beq.w	8003fce <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003cd4:	4ba6      	ldr	r3, [pc, #664]	; (8003f70 <HAL_RCC_OscConfig+0x5e8>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 030c 	and.w	r3, r3, #12
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00b      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ce0:	4ba3      	ldr	r3, [pc, #652]	; (8003f70 <HAL_RCC_OscConfig+0x5e8>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 030c 	and.w	r3, r3, #12
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d172      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x44a>
 8003cec:	4ba0      	ldr	r3, [pc, #640]	; (8003f70 <HAL_RCC_OscConfig+0x5e8>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d16c      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x44a>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003d02:	fa93 f3a3 	rbit	r3, r3
 8003d06:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003d0a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d0e:	fab3 f383 	clz	r3, r3
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d102      	bne.n	8003d28 <HAL_RCC_OscConfig+0x3a0>
 8003d22:	4b93      	ldr	r3, [pc, #588]	; (8003f70 <HAL_RCC_OscConfig+0x5e8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	e013      	b.n	8003d50 <HAL_RCC_OscConfig+0x3c8>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003d32:	fa93 f3a3 	rbit	r3, r3
 8003d36:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003d40:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d44:	fa93 f3a3 	rbit	r3, r3
 8003d48:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003d4c:	4b88      	ldr	r3, [pc, #544]	; (8003f70 <HAL_RCC_OscConfig+0x5e8>)
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	2202      	movs	r2, #2
 8003d52:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003d56:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003d5a:	fa92 f2a2 	rbit	r2, r2
 8003d5e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003d62:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003d66:	fab2 f282 	clz	r2, r2
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	f042 0220 	orr.w	r2, r2, #32
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	f002 021f 	and.w	r2, r2, #31
 8003d76:	2101      	movs	r1, #1
 8003d78:	fa01 f202 	lsl.w	r2, r1, r2
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <HAL_RCC_OscConfig+0x410>
 8003d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d002      	beq.n	8003d98 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	f000 be2e 	b.w	80049f4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d98:	4b75      	ldr	r3, [pc, #468]	; (8003f70 <HAL_RCC_OscConfig+0x5e8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	21f8      	movs	r1, #248	; 0xf8
 8003dae:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003db6:	fa91 f1a1 	rbit	r1, r1
 8003dba:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003dbe:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003dc2:	fab1 f181 	clz	r1, r1
 8003dc6:	b2c9      	uxtb	r1, r1
 8003dc8:	408b      	lsls	r3, r1
 8003dca:	4969      	ldr	r1, [pc, #420]	; (8003f70 <HAL_RCC_OscConfig+0x5e8>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dd0:	e0fd      	b.n	8003fce <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 8088 	beq.w	8003ef4 <HAL_RCC_OscConfig+0x56c>
 8003de4:	2301      	movs	r3, #1
 8003de6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003dee:	fa93 f3a3 	rbit	r3, r3
 8003df2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003df6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dfa:	fab3 f383 	clz	r3, r3
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e10:	f7fe fc98 	bl	8002744 <HAL_GetTick>
 8003e14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e1a:	f7fe fc93 	bl	8002744 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d902      	bls.n	8003e30 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	f000 bde2 	b.w	80049f4 <HAL_RCC_OscConfig+0x106c>
 8003e30:	2302      	movs	r3, #2
 8003e32:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003e3a:	fa93 f3a3 	rbit	r3, r3
 8003e3e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003e42:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e46:	fab3 f383 	clz	r3, r3
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d102      	bne.n	8003e60 <HAL_RCC_OscConfig+0x4d8>
 8003e5a:	4b45      	ldr	r3, [pc, #276]	; (8003f70 <HAL_RCC_OscConfig+0x5e8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	e013      	b.n	8003e88 <HAL_RCC_OscConfig+0x500>
 8003e60:	2302      	movs	r3, #2
 8003e62:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e66:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003e6a:	fa93 f3a3 	rbit	r3, r3
 8003e6e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003e72:	2302      	movs	r3, #2
 8003e74:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003e78:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003e7c:	fa93 f3a3 	rbit	r3, r3
 8003e80:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003e84:	4b3a      	ldr	r3, [pc, #232]	; (8003f70 <HAL_RCC_OscConfig+0x5e8>)
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	2202      	movs	r2, #2
 8003e8a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003e8e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003e92:	fa92 f2a2 	rbit	r2, r2
 8003e96:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003e9a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003e9e:	fab2 f282 	clz	r2, r2
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	f042 0220 	orr.w	r2, r2, #32
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	f002 021f 	and.w	r2, r2, #31
 8003eae:	2101      	movs	r1, #1
 8003eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0af      	beq.n	8003e1a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eba:	4b2d      	ldr	r3, [pc, #180]	; (8003f70 <HAL_RCC_OscConfig+0x5e8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	21f8      	movs	r1, #248	; 0xf8
 8003ed0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003ed8:	fa91 f1a1 	rbit	r1, r1
 8003edc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003ee0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003ee4:	fab1 f181 	clz	r1, r1
 8003ee8:	b2c9      	uxtb	r1, r1
 8003eea:	408b      	lsls	r3, r1
 8003eec:	4920      	ldr	r1, [pc, #128]	; (8003f70 <HAL_RCC_OscConfig+0x5e8>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]
 8003ef2:	e06c      	b.n	8003fce <HAL_RCC_OscConfig+0x646>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003efe:	fa93 f3a3 	rbit	r3, r3
 8003f02:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003f06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f20:	f7fe fc10 	bl	8002744 <HAL_GetTick>
 8003f24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f28:	e00a      	b.n	8003f40 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f2a:	f7fe fc0b 	bl	8002744 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d902      	bls.n	8003f40 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	f000 bd5a 	b.w	80049f4 <HAL_RCC_OscConfig+0x106c>
 8003f40:	2302      	movs	r3, #2
 8003f42:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003f4a:	fa93 f3a3 	rbit	r3, r3
 8003f4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f56:	fab3 f383 	clz	r3, r3
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	f043 0301 	orr.w	r3, r3, #1
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d104      	bne.n	8003f74 <HAL_RCC_OscConfig+0x5ec>
 8003f6a:	4b01      	ldr	r3, [pc, #4]	; (8003f70 <HAL_RCC_OscConfig+0x5e8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	e015      	b.n	8003f9c <HAL_RCC_OscConfig+0x614>
 8003f70:	40021000 	.word	0x40021000
 8003f74:	2302      	movs	r3, #2
 8003f76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f7e:	fa93 f3a3 	rbit	r3, r3
 8003f82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003f86:	2302      	movs	r3, #2
 8003f88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003f8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003f90:	fa93 f3a3 	rbit	r3, r3
 8003f94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003f98:	4bc8      	ldr	r3, [pc, #800]	; (80042bc <HAL_RCC_OscConfig+0x934>)
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003fa2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003fa6:	fa92 f2a2 	rbit	r2, r2
 8003faa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003fae:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003fb2:	fab2 f282 	clz	r2, r2
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	f042 0220 	orr.w	r2, r2, #32
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	f002 021f 	and.w	r2, r2, #31
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1ad      	bne.n	8003f2a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 8110 	beq.w	8004204 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d079      	beq.n	80040e8 <HAL_RCC_OscConfig+0x760>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003ffe:	fa93 f3a3 	rbit	r3, r3
 8004002:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800400a:	fab3 f383 	clz	r3, r3
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	4bab      	ldr	r3, [pc, #684]	; (80042c0 <HAL_RCC_OscConfig+0x938>)
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	461a      	mov	r2, r3
 800401a:	2301      	movs	r3, #1
 800401c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800401e:	f7fe fb91 	bl	8002744 <HAL_GetTick>
 8004022:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004026:	e00a      	b.n	800403e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004028:	f7fe fb8c 	bl	8002744 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d902      	bls.n	800403e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	f000 bcdb 	b.w	80049f4 <HAL_RCC_OscConfig+0x106c>
 800403e:	2302      	movs	r3, #2
 8004040:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004044:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004048:	fa93 f3a3 	rbit	r3, r3
 800404c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004054:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004058:	2202      	movs	r2, #2
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004060:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	fa93 f2a3 	rbit	r2, r3
 800406a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800407c:	2202      	movs	r2, #2
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	fa93 f2a3 	rbit	r2, r3
 800408e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004092:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004096:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004098:	4b88      	ldr	r3, [pc, #544]	; (80042bc <HAL_RCC_OscConfig+0x934>)
 800409a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800409c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80040a4:	2102      	movs	r1, #2
 80040a6:	6019      	str	r1, [r3, #0]
 80040a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	fa93 f1a3 	rbit	r1, r3
 80040b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80040be:	6019      	str	r1, [r3, #0]
  return result;
 80040c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	fab3 f383 	clz	r3, r3
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f003 031f 	and.w	r3, r3, #31
 80040da:	2101      	movs	r1, #1
 80040dc:	fa01 f303 	lsl.w	r3, r1, r3
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0a0      	beq.n	8004028 <HAL_RCC_OscConfig+0x6a0>
 80040e6:	e08d      	b.n	8004204 <HAL_RCC_OscConfig+0x87c>
 80040e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80040f0:	2201      	movs	r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	fa93 f2a3 	rbit	r2, r3
 8004102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004106:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800410a:	601a      	str	r2, [r3, #0]
  return result;
 800410c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004110:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004114:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004116:	fab3 f383 	clz	r3, r3
 800411a:	b2db      	uxtb	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	4b68      	ldr	r3, [pc, #416]	; (80042c0 <HAL_RCC_OscConfig+0x938>)
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	461a      	mov	r2, r3
 8004126:	2300      	movs	r3, #0
 8004128:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412a:	f7fe fb0b 	bl	8002744 <HAL_GetTick>
 800412e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004132:	e00a      	b.n	800414a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004134:	f7fe fb06 	bl	8002744 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d902      	bls.n	800414a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	f000 bc55 	b.w	80049f4 <HAL_RCC_OscConfig+0x106c>
 800414a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800414e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004152:	2202      	movs	r2, #2
 8004154:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800415a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	fa93 f2a3 	rbit	r2, r3
 8004164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004168:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004172:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004176:	2202      	movs	r2, #2
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800417e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	fa93 f2a3 	rbit	r2, r3
 8004188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800418c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800419a:	2202      	movs	r2, #2
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	fa93 f2a3 	rbit	r2, r3
 80041ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80041b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b6:	4b41      	ldr	r3, [pc, #260]	; (80042bc <HAL_RCC_OscConfig+0x934>)
 80041b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80041c2:	2102      	movs	r1, #2
 80041c4:	6019      	str	r1, [r3, #0]
 80041c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	fa93 f1a3 	rbit	r1, r3
 80041d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80041dc:	6019      	str	r1, [r3, #0]
  return result;
 80041de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	fab3 f383 	clz	r3, r3
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	2101      	movs	r1, #1
 80041fa:	fa01 f303 	lsl.w	r3, r1, r3
 80041fe:	4013      	ands	r3, r2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d197      	bne.n	8004134 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004208:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 81a1 	beq.w	800455c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800421a:	2300      	movs	r3, #0
 800421c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004220:	4b26      	ldr	r3, [pc, #152]	; (80042bc <HAL_RCC_OscConfig+0x934>)
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d116      	bne.n	800425a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422c:	4b23      	ldr	r3, [pc, #140]	; (80042bc <HAL_RCC_OscConfig+0x934>)
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	4a22      	ldr	r2, [pc, #136]	; (80042bc <HAL_RCC_OscConfig+0x934>)
 8004232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004236:	61d3      	str	r3, [r2, #28]
 8004238:	4b20      	ldr	r3, [pc, #128]	; (80042bc <HAL_RCC_OscConfig+0x934>)
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004244:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800424e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004252:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004254:	2301      	movs	r3, #1
 8004256:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425a:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <HAL_RCC_OscConfig+0x93c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d11a      	bne.n	800429c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004266:	4b17      	ldr	r3, [pc, #92]	; (80042c4 <HAL_RCC_OscConfig+0x93c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a16      	ldr	r2, [pc, #88]	; (80042c4 <HAL_RCC_OscConfig+0x93c>)
 800426c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004270:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004272:	f7fe fa67 	bl	8002744 <HAL_GetTick>
 8004276:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427a:	e009      	b.n	8004290 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800427c:	f7fe fa62 	bl	8002744 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b64      	cmp	r3, #100	; 0x64
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e3b1      	b.n	80049f4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004290:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <HAL_RCC_OscConfig+0x93c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0ef      	beq.n	800427c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800429c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d10d      	bne.n	80042c8 <HAL_RCC_OscConfig+0x940>
 80042ac:	4b03      	ldr	r3, [pc, #12]	; (80042bc <HAL_RCC_OscConfig+0x934>)
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	4a02      	ldr	r2, [pc, #8]	; (80042bc <HAL_RCC_OscConfig+0x934>)
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	6213      	str	r3, [r2, #32]
 80042b8:	e03c      	b.n	8004334 <HAL_RCC_OscConfig+0x9ac>
 80042ba:	bf00      	nop
 80042bc:	40021000 	.word	0x40021000
 80042c0:	10908120 	.word	0x10908120
 80042c4:	40007000 	.word	0x40007000
 80042c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10c      	bne.n	80042f2 <HAL_RCC_OscConfig+0x96a>
 80042d8:	4bc1      	ldr	r3, [pc, #772]	; (80045e0 <HAL_RCC_OscConfig+0xc58>)
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	4ac0      	ldr	r2, [pc, #768]	; (80045e0 <HAL_RCC_OscConfig+0xc58>)
 80042de:	f023 0301 	bic.w	r3, r3, #1
 80042e2:	6213      	str	r3, [r2, #32]
 80042e4:	4bbe      	ldr	r3, [pc, #760]	; (80045e0 <HAL_RCC_OscConfig+0xc58>)
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	4abd      	ldr	r2, [pc, #756]	; (80045e0 <HAL_RCC_OscConfig+0xc58>)
 80042ea:	f023 0304 	bic.w	r3, r3, #4
 80042ee:	6213      	str	r3, [r2, #32]
 80042f0:	e020      	b.n	8004334 <HAL_RCC_OscConfig+0x9ac>
 80042f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	2b05      	cmp	r3, #5
 8004300:	d10c      	bne.n	800431c <HAL_RCC_OscConfig+0x994>
 8004302:	4bb7      	ldr	r3, [pc, #732]	; (80045e0 <HAL_RCC_OscConfig+0xc58>)
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	4ab6      	ldr	r2, [pc, #728]	; (80045e0 <HAL_RCC_OscConfig+0xc58>)
 8004308:	f043 0304 	orr.w	r3, r3, #4
 800430c:	6213      	str	r3, [r2, #32]
 800430e:	4bb4      	ldr	r3, [pc, #720]	; (80045e0 <HAL_RCC_OscConfig+0xc58>)
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	4ab3      	ldr	r2, [pc, #716]	; (80045e0 <HAL_RCC_OscConfig+0xc58>)
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	6213      	str	r3, [r2, #32]
 800431a:	e00b      	b.n	8004334 <HAL_RCC_OscConfig+0x9ac>
 800431c:	4bb0      	ldr	r3, [pc, #704]	; (80045e0 <HAL_RCC_OscConfig+0xc58>)
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	4aaf      	ldr	r2, [pc, #700]	; (80045e0 <HAL_RCC_OscConfig+0xc58>)
 8004322:	f023 0301 	bic.w	r3, r3, #1
 8004326:	6213      	str	r3, [r2, #32]
 8004328:	4bad      	ldr	r3, [pc, #692]	; (80045e0 <HAL_RCC_OscConfig+0xc58>)
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	4aac      	ldr	r2, [pc, #688]	; (80045e0 <HAL_RCC_OscConfig+0xc58>)
 800432e:	f023 0304 	bic.w	r3, r3, #4
 8004332:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004338:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 8081 	beq.w	8004448 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004346:	f7fe f9fd 	bl	8002744 <HAL_GetTick>
 800434a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800434e:	e00b      	b.n	8004368 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004350:	f7fe f9f8 	bl	8002744 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004360:	4293      	cmp	r3, r2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e345      	b.n	80049f4 <HAL_RCC_OscConfig+0x106c>
 8004368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004370:	2202      	movs	r2, #2
 8004372:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004378:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	fa93 f2a3 	rbit	r2, r3
 8004382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004386:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004390:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004394:	2202      	movs	r2, #2
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800439c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	fa93 f2a3 	rbit	r2, r3
 80043a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80043ae:	601a      	str	r2, [r3, #0]
  return result;
 80043b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80043b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ba:	fab3 f383 	clz	r3, r3
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	095b      	lsrs	r3, r3, #5
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f043 0302 	orr.w	r3, r3, #2
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d102      	bne.n	80043d4 <HAL_RCC_OscConfig+0xa4c>
 80043ce:	4b84      	ldr	r3, [pc, #528]	; (80045e0 <HAL_RCC_OscConfig+0xc58>)
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	e013      	b.n	80043fc <HAL_RCC_OscConfig+0xa74>
 80043d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80043dc:	2202      	movs	r2, #2
 80043de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	fa93 f2a3 	rbit	r2, r3
 80043ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	4b79      	ldr	r3, [pc, #484]	; (80045e0 <HAL_RCC_OscConfig+0xc58>)
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004400:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004404:	2102      	movs	r1, #2
 8004406:	6011      	str	r1, [r2, #0]
 8004408:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800440c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004410:	6812      	ldr	r2, [r2, #0]
 8004412:	fa92 f1a2 	rbit	r1, r2
 8004416:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800441a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800441e:	6011      	str	r1, [r2, #0]
  return result;
 8004420:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004424:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004428:	6812      	ldr	r2, [r2, #0]
 800442a:	fab2 f282 	clz	r2, r2
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	f002 021f 	and.w	r2, r2, #31
 800443a:	2101      	movs	r1, #1
 800443c:	fa01 f202 	lsl.w	r2, r1, r2
 8004440:	4013      	ands	r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d084      	beq.n	8004350 <HAL_RCC_OscConfig+0x9c8>
 8004446:	e07f      	b.n	8004548 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004448:	f7fe f97c 	bl	8002744 <HAL_GetTick>
 800444c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004450:	e00b      	b.n	800446a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004452:	f7fe f977 	bl	8002744 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e2c4      	b.n	80049f4 <HAL_RCC_OscConfig+0x106c>
 800446a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800446e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004472:	2202      	movs	r2, #2
 8004474:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800447a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	fa93 f2a3 	rbit	r2, r3
 8004484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004488:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004492:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004496:	2202      	movs	r2, #2
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	fa93 f2a3 	rbit	r2, r3
 80044a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80044b0:	601a      	str	r2, [r3, #0]
  return result;
 80044b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80044ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044bc:	fab3 f383 	clz	r3, r3
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f043 0302 	orr.w	r3, r3, #2
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d102      	bne.n	80044d6 <HAL_RCC_OscConfig+0xb4e>
 80044d0:	4b43      	ldr	r3, [pc, #268]	; (80045e0 <HAL_RCC_OscConfig+0xc58>)
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	e013      	b.n	80044fe <HAL_RCC_OscConfig+0xb76>
 80044d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80044de:	2202      	movs	r2, #2
 80044e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	fa93 f2a3 	rbit	r2, r3
 80044f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044f4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	4b39      	ldr	r3, [pc, #228]	; (80045e0 <HAL_RCC_OscConfig+0xc58>)
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004502:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004506:	2102      	movs	r1, #2
 8004508:	6011      	str	r1, [r2, #0]
 800450a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800450e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	fa92 f1a2 	rbit	r1, r2
 8004518:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800451c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004520:	6011      	str	r1, [r2, #0]
  return result;
 8004522:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004526:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800452a:	6812      	ldr	r2, [r2, #0]
 800452c:	fab2 f282 	clz	r2, r2
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	f002 021f 	and.w	r2, r2, #31
 800453c:	2101      	movs	r1, #1
 800453e:	fa01 f202 	lsl.w	r2, r1, r2
 8004542:	4013      	ands	r3, r2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d184      	bne.n	8004452 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004548:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800454c:	2b01      	cmp	r3, #1
 800454e:	d105      	bne.n	800455c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004550:	4b23      	ldr	r3, [pc, #140]	; (80045e0 <HAL_RCC_OscConfig+0xc58>)
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	4a22      	ldr	r2, [pc, #136]	; (80045e0 <HAL_RCC_OscConfig+0xc58>)
 8004556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800455a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800455c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004560:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8242 	beq.w	80049f2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800456e:	4b1c      	ldr	r3, [pc, #112]	; (80045e0 <HAL_RCC_OscConfig+0xc58>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f003 030c 	and.w	r3, r3, #12
 8004576:	2b08      	cmp	r3, #8
 8004578:	f000 8213 	beq.w	80049a2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800457c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004580:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	2b02      	cmp	r3, #2
 800458a:	f040 8162 	bne.w	8004852 <HAL_RCC_OscConfig+0xeca>
 800458e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004592:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004596:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800459a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	fa93 f2a3 	rbit	r2, r3
 80045aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80045b2:	601a      	str	r2, [r3, #0]
  return result;
 80045b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045b8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80045bc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045be:	fab3 f383 	clz	r3, r3
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80045c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	461a      	mov	r2, r3
 80045d0:	2300      	movs	r3, #0
 80045d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d4:	f7fe f8b6 	bl	8002744 <HAL_GetTick>
 80045d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045dc:	e00c      	b.n	80045f8 <HAL_RCC_OscConfig+0xc70>
 80045de:	bf00      	nop
 80045e0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e4:	f7fe f8ae 	bl	8002744 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e1fd      	b.n	80049f4 <HAL_RCC_OscConfig+0x106c>
 80045f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045fc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004600:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800460a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	fa93 f2a3 	rbit	r2, r3
 8004614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004618:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800461c:	601a      	str	r2, [r3, #0]
  return result;
 800461e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004622:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004626:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004628:	fab3 f383 	clz	r3, r3
 800462c:	b2db      	uxtb	r3, r3
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	b2db      	uxtb	r3, r3
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	d102      	bne.n	8004642 <HAL_RCC_OscConfig+0xcba>
 800463c:	4bb0      	ldr	r3, [pc, #704]	; (8004900 <HAL_RCC_OscConfig+0xf78>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	e027      	b.n	8004692 <HAL_RCC_OscConfig+0xd0a>
 8004642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004646:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800464a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800464e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004654:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	fa93 f2a3 	rbit	r2, r3
 800465e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004662:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800466c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004670:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	fa93 f2a3 	rbit	r2, r3
 8004684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004688:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	4b9c      	ldr	r3, [pc, #624]	; (8004900 <HAL_RCC_OscConfig+0xf78>)
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004696:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800469a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800469e:	6011      	str	r1, [r2, #0]
 80046a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046a4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	fa92 f1a2 	rbit	r1, r2
 80046ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046b2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80046b6:	6011      	str	r1, [r2, #0]
  return result;
 80046b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046bc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80046c0:	6812      	ldr	r2, [r2, #0]
 80046c2:	fab2 f282 	clz	r2, r2
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	f042 0220 	orr.w	r2, r2, #32
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	f002 021f 	and.w	r2, r2, #31
 80046d2:	2101      	movs	r1, #1
 80046d4:	fa01 f202 	lsl.w	r2, r1, r2
 80046d8:	4013      	ands	r3, r2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d182      	bne.n	80045e4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046de:	4b88      	ldr	r3, [pc, #544]	; (8004900 <HAL_RCC_OscConfig+0xf78>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80046f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	430b      	orrs	r3, r1
 8004700:	497f      	ldr	r1, [pc, #508]	; (8004900 <HAL_RCC_OscConfig+0xf78>)
 8004702:	4313      	orrs	r3, r2
 8004704:	604b      	str	r3, [r1, #4]
 8004706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800470a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800470e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004712:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004718:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	fa93 f2a3 	rbit	r2, r3
 8004722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004726:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800472a:	601a      	str	r2, [r3, #0]
  return result;
 800472c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004730:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004734:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004736:	fab3 f383 	clz	r3, r3
 800473a:	b2db      	uxtb	r3, r3
 800473c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004740:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	461a      	mov	r2, r3
 8004748:	2301      	movs	r3, #1
 800474a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fd fffa 	bl	8002744 <HAL_GetTick>
 8004750:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004754:	e009      	b.n	800476a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004756:	f7fd fff5 	bl	8002744 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e144      	b.n	80049f4 <HAL_RCC_OscConfig+0x106c>
 800476a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800476e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004772:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004776:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800477c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	fa93 f2a3 	rbit	r2, r3
 8004786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800478a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800478e:	601a      	str	r2, [r3, #0]
  return result;
 8004790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004794:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004798:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800479a:	fab3 f383 	clz	r3, r3
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d102      	bne.n	80047b4 <HAL_RCC_OscConfig+0xe2c>
 80047ae:	4b54      	ldr	r3, [pc, #336]	; (8004900 <HAL_RCC_OscConfig+0xf78>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	e027      	b.n	8004804 <HAL_RCC_OscConfig+0xe7c>
 80047b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80047bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	fa93 f2a3 	rbit	r2, r3
 80047d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047de:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80047e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	fa93 f2a3 	rbit	r2, r3
 80047f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047fa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	4b3f      	ldr	r3, [pc, #252]	; (8004900 <HAL_RCC_OscConfig+0xf78>)
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004808:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800480c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004810:	6011      	str	r1, [r2, #0]
 8004812:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004816:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	fa92 f1a2 	rbit	r1, r2
 8004820:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004824:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004828:	6011      	str	r1, [r2, #0]
  return result;
 800482a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800482e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004832:	6812      	ldr	r2, [r2, #0]
 8004834:	fab2 f282 	clz	r2, r2
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	f042 0220 	orr.w	r2, r2, #32
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	f002 021f 	and.w	r2, r2, #31
 8004844:	2101      	movs	r1, #1
 8004846:	fa01 f202 	lsl.w	r2, r1, r2
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d082      	beq.n	8004756 <HAL_RCC_OscConfig+0xdce>
 8004850:	e0cf      	b.n	80049f2 <HAL_RCC_OscConfig+0x106a>
 8004852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004856:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800485a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800485e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004864:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	fa93 f2a3 	rbit	r2, r3
 800486e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004872:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004876:	601a      	str	r2, [r3, #0]
  return result;
 8004878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800487c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004880:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004882:	fab3 f383 	clz	r3, r3
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800488c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	461a      	mov	r2, r3
 8004894:	2300      	movs	r3, #0
 8004896:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004898:	f7fd ff54 	bl	8002744 <HAL_GetTick>
 800489c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048a0:	e009      	b.n	80048b6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a2:	f7fd ff4f 	bl	8002744 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e09e      	b.n	80049f4 <HAL_RCC_OscConfig+0x106c>
 80048b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ba:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80048be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	fa93 f2a3 	rbit	r2, r3
 80048d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80048da:	601a      	str	r2, [r3, #0]
  return result;
 80048dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80048e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e6:	fab3 f383 	clz	r3, r3
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d104      	bne.n	8004904 <HAL_RCC_OscConfig+0xf7c>
 80048fa:	4b01      	ldr	r3, [pc, #4]	; (8004900 <HAL_RCC_OscConfig+0xf78>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	e029      	b.n	8004954 <HAL_RCC_OscConfig+0xfcc>
 8004900:	40021000 	.word	0x40021000
 8004904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004908:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800490c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004916:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	fa93 f2a3 	rbit	r2, r3
 8004920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004924:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800492e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004932:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	fa93 f2a3 	rbit	r2, r3
 8004946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800494a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	4b2b      	ldr	r3, [pc, #172]	; (8004a00 <HAL_RCC_OscConfig+0x1078>)
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004958:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800495c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004960:	6011      	str	r1, [r2, #0]
 8004962:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004966:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	fa92 f1a2 	rbit	r1, r2
 8004970:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004974:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004978:	6011      	str	r1, [r2, #0]
  return result;
 800497a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800497e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004982:	6812      	ldr	r2, [r2, #0]
 8004984:	fab2 f282 	clz	r2, r2
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	f042 0220 	orr.w	r2, r2, #32
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	f002 021f 	and.w	r2, r2, #31
 8004994:	2101      	movs	r1, #1
 8004996:	fa01 f202 	lsl.w	r2, r1, r2
 800499a:	4013      	ands	r3, r2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d180      	bne.n	80048a2 <HAL_RCC_OscConfig+0xf1a>
 80049a0:	e027      	b.n	80049f2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e01e      	b.n	80049f4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049b6:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <HAL_RCC_OscConfig+0x1078>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80049be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80049c2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80049c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d10b      	bne.n	80049ee <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80049d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80049da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80049de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d001      	beq.n	80049f2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40021000 	.word	0x40021000

08004a04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b09e      	sub	sp, #120	; 0x78
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e162      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a1c:	4b90      	ldr	r3, [pc, #576]	; (8004c60 <HAL_RCC_ClockConfig+0x25c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d910      	bls.n	8004a4c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2a:	4b8d      	ldr	r3, [pc, #564]	; (8004c60 <HAL_RCC_ClockConfig+0x25c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f023 0207 	bic.w	r2, r3, #7
 8004a32:	498b      	ldr	r1, [pc, #556]	; (8004c60 <HAL_RCC_ClockConfig+0x25c>)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3a:	4b89      	ldr	r3, [pc, #548]	; (8004c60 <HAL_RCC_ClockConfig+0x25c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d001      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e14a      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d008      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a58:	4b82      	ldr	r3, [pc, #520]	; (8004c64 <HAL_RCC_ClockConfig+0x260>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	497f      	ldr	r1, [pc, #508]	; (8004c64 <HAL_RCC_ClockConfig+0x260>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 80dc 	beq.w	8004c30 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d13c      	bne.n	8004afa <HAL_RCC_ClockConfig+0xf6>
 8004a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a84:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a88:	fa93 f3a3 	rbit	r3, r3
 8004a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a90:	fab3 f383 	clz	r3, r3
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d102      	bne.n	8004aaa <HAL_RCC_ClockConfig+0xa6>
 8004aa4:	4b6f      	ldr	r3, [pc, #444]	; (8004c64 <HAL_RCC_ClockConfig+0x260>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	e00f      	b.n	8004aca <HAL_RCC_ClockConfig+0xc6>
 8004aaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004aae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ab2:	fa93 f3a3 	rbit	r3, r3
 8004ab6:	667b      	str	r3, [r7, #100]	; 0x64
 8004ab8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004abc:	663b      	str	r3, [r7, #96]	; 0x60
 8004abe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ac0:	fa93 f3a3 	rbit	r3, r3
 8004ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ac6:	4b67      	ldr	r3, [pc, #412]	; (8004c64 <HAL_RCC_ClockConfig+0x260>)
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ace:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ad0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ad2:	fa92 f2a2 	rbit	r2, r2
 8004ad6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004ad8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ada:	fab2 f282 	clz	r2, r2
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	f042 0220 	orr.w	r2, r2, #32
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	f002 021f 	and.w	r2, r2, #31
 8004aea:	2101      	movs	r1, #1
 8004aec:	fa01 f202 	lsl.w	r2, r1, r2
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d17b      	bne.n	8004bee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e0f3      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d13c      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x178>
 8004b02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b0a:	fa93 f3a3 	rbit	r3, r3
 8004b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b12:	fab3 f383 	clz	r3, r3
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d102      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x128>
 8004b26:	4b4f      	ldr	r3, [pc, #316]	; (8004c64 <HAL_RCC_ClockConfig+0x260>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	e00f      	b.n	8004b4c <HAL_RCC_ClockConfig+0x148>
 8004b2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b34:	fa93 f3a3 	rbit	r3, r3
 8004b38:	647b      	str	r3, [r7, #68]	; 0x44
 8004b3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b3e:	643b      	str	r3, [r7, #64]	; 0x40
 8004b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b42:	fa93 f3a3 	rbit	r3, r3
 8004b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b48:	4b46      	ldr	r3, [pc, #280]	; (8004c64 <HAL_RCC_ClockConfig+0x260>)
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b50:	63ba      	str	r2, [r7, #56]	; 0x38
 8004b52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b54:	fa92 f2a2 	rbit	r2, r2
 8004b58:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004b5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b5c:	fab2 f282 	clz	r2, r2
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	f042 0220 	orr.w	r2, r2, #32
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	f002 021f 	and.w	r2, r2, #31
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b72:	4013      	ands	r3, r2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d13a      	bne.n	8004bee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0b2      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x2de>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b82:	fa93 f3a3 	rbit	r3, r3
 8004b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b8a:	fab3 f383 	clz	r3, r3
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	095b      	lsrs	r3, r3, #5
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	f043 0301 	orr.w	r3, r3, #1
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d102      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x1a0>
 8004b9e:	4b31      	ldr	r3, [pc, #196]	; (8004c64 <HAL_RCC_ClockConfig+0x260>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	e00d      	b.n	8004bc0 <HAL_RCC_ClockConfig+0x1bc>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004baa:	fa93 f3a3 	rbit	r3, r3
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	623b      	str	r3, [r7, #32]
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	fa93 f3a3 	rbit	r3, r3
 8004bba:	61fb      	str	r3, [r7, #28]
 8004bbc:	4b29      	ldr	r3, [pc, #164]	; (8004c64 <HAL_RCC_ClockConfig+0x260>)
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	61ba      	str	r2, [r7, #24]
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	fa92 f2a2 	rbit	r2, r2
 8004bca:	617a      	str	r2, [r7, #20]
  return result;
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	fab2 f282 	clz	r2, r2
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	f042 0220 	orr.w	r2, r2, #32
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	f002 021f 	and.w	r2, r2, #31
 8004bde:	2101      	movs	r1, #1
 8004be0:	fa01 f202 	lsl.w	r2, r1, r2
 8004be4:	4013      	ands	r3, r2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e079      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bee:	4b1d      	ldr	r3, [pc, #116]	; (8004c64 <HAL_RCC_ClockConfig+0x260>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f023 0203 	bic.w	r2, r3, #3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	491a      	ldr	r1, [pc, #104]	; (8004c64 <HAL_RCC_ClockConfig+0x260>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c00:	f7fd fda0 	bl	8002744 <HAL_GetTick>
 8004c04:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c06:	e00a      	b.n	8004c1e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c08:	f7fd fd9c 	bl	8002744 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e061      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1e:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <HAL_RCC_ClockConfig+0x260>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f003 020c 	and.w	r2, r3, #12
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d1eb      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <HAL_RCC_ClockConfig+0x25c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d214      	bcs.n	8004c68 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3e:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <HAL_RCC_ClockConfig+0x25c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f023 0207 	bic.w	r2, r3, #7
 8004c46:	4906      	ldr	r1, [pc, #24]	; (8004c60 <HAL_RCC_ClockConfig+0x25c>)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4e:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <HAL_RCC_ClockConfig+0x25c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d005      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e040      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x2de>
 8004c60:	40022000 	.word	0x40022000
 8004c64:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d008      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c74:	4b1d      	ldr	r3, [pc, #116]	; (8004cec <HAL_RCC_ClockConfig+0x2e8>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	491a      	ldr	r1, [pc, #104]	; (8004cec <HAL_RCC_ClockConfig+0x2e8>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d009      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c92:	4b16      	ldr	r3, [pc, #88]	; (8004cec <HAL_RCC_ClockConfig+0x2e8>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	4912      	ldr	r1, [pc, #72]	; (8004cec <HAL_RCC_ClockConfig+0x2e8>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ca6:	f000 f829 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 8004caa:	4601      	mov	r1, r0
 8004cac:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <HAL_RCC_ClockConfig+0x2e8>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cb4:	22f0      	movs	r2, #240	; 0xf0
 8004cb6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	fa92 f2a2 	rbit	r2, r2
 8004cbe:	60fa      	str	r2, [r7, #12]
  return result;
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	fab2 f282 	clz	r2, r2
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	40d3      	lsrs	r3, r2
 8004cca:	4a09      	ldr	r2, [pc, #36]	; (8004cf0 <HAL_RCC_ClockConfig+0x2ec>)
 8004ccc:	5cd3      	ldrb	r3, [r2, r3]
 8004cce:	fa21 f303 	lsr.w	r3, r1, r3
 8004cd2:	4a08      	ldr	r2, [pc, #32]	; (8004cf4 <HAL_RCC_ClockConfig+0x2f0>)
 8004cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004cd6:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <HAL_RCC_ClockConfig+0x2f4>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fd fcee 	bl	80026bc <HAL_InitTick>
  
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3778      	adds	r7, #120	; 0x78
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	080083f8 	.word	0x080083f8
 8004cf4:	20000000 	.word	0x20000000
 8004cf8:	20000004 	.word	0x20000004

08004cfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b08b      	sub	sp, #44	; 0x2c
 8004d00:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]
 8004d06:	2300      	movs	r3, #0
 8004d08:	61bb      	str	r3, [r7, #24]
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d0e:	2300      	movs	r3, #0
 8004d10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004d16:	4b29      	ldr	r3, [pc, #164]	; (8004dbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	f003 030c 	and.w	r3, r3, #12
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d002      	beq.n	8004d2c <HAL_RCC_GetSysClockFreq+0x30>
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d003      	beq.n	8004d32 <HAL_RCC_GetSysClockFreq+0x36>
 8004d2a:	e03c      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d2c:	4b24      	ldr	r3, [pc, #144]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d2e:	623b      	str	r3, [r7, #32]
      break;
 8004d30:	e03c      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004d38:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004d3c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	fa92 f2a2 	rbit	r2, r2
 8004d44:	607a      	str	r2, [r7, #4]
  return result;
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	fab2 f282 	clz	r2, r2
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	40d3      	lsrs	r3, r2
 8004d50:	4a1c      	ldr	r2, [pc, #112]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d52:	5cd3      	ldrb	r3, [r2, r3]
 8004d54:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004d56:	4b19      	ldr	r3, [pc, #100]	; (8004dbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	220f      	movs	r2, #15
 8004d60:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	fa92 f2a2 	rbit	r2, r2
 8004d68:	60fa      	str	r2, [r7, #12]
  return result;
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	fab2 f282 	clz	r2, r2
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	40d3      	lsrs	r3, r2
 8004d74:	4a14      	ldr	r2, [pc, #80]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d76:	5cd3      	ldrb	r3, [r2, r3]
 8004d78:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d008      	beq.n	8004d96 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d84:	4a0e      	ldr	r2, [pc, #56]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	fb02 f303 	mul.w	r3, r2, r3
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
 8004d94:	e004      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	4a0c      	ldr	r2, [pc, #48]	; (8004dcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d9a:	fb02 f303 	mul.w	r3, r2, r3
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	623b      	str	r3, [r7, #32]
      break;
 8004da4:	e002      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004da6:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004da8:	623b      	str	r3, [r7, #32]
      break;
 8004daa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dac:	6a3b      	ldr	r3, [r7, #32]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	372c      	adds	r7, #44	; 0x2c
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	00f42400 	.word	0x00f42400
 8004dc4:	08008410 	.word	0x08008410
 8004dc8:	08008420 	.word	0x08008420
 8004dcc:	003d0900 	.word	0x003d0900
 8004dd0:	007a1200 	.word	0x007a1200

08004dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dd8:	4b03      	ldr	r3, [pc, #12]	; (8004de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dda:	681b      	ldr	r3, [r3, #0]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	20000000 	.word	0x20000000

08004dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004df2:	f7ff ffef 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004df6:	4601      	mov	r1, r0
 8004df8:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e00:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004e04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	fa92 f2a2 	rbit	r2, r2
 8004e0c:	603a      	str	r2, [r7, #0]
  return result;
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	fab2 f282 	clz	r2, r2
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	40d3      	lsrs	r3, r2
 8004e18:	4a04      	ldr	r2, [pc, #16]	; (8004e2c <HAL_RCC_GetPCLK1Freq+0x40>)
 8004e1a:	5cd3      	ldrb	r3, [r2, r3]
 8004e1c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	08008408 	.word	0x08008408

08004e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004e36:	f7ff ffcd 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004e3a:	4601      	mov	r1, r0
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004e44:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004e48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	fa92 f2a2 	rbit	r2, r2
 8004e50:	603a      	str	r2, [r7, #0]
  return result;
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	fab2 f282 	clz	r2, r2
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	40d3      	lsrs	r3, r2
 8004e5c:	4a04      	ldr	r2, [pc, #16]	; (8004e70 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004e5e:	5cd3      	ldrb	r3, [r2, r3]
 8004e60:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004e64:	4618      	mov	r0, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	08008408 	.word	0x08008408

08004e74 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b092      	sub	sp, #72	; 0x48
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004e84:	2300      	movs	r3, #0
 8004e86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 80cd 	beq.w	8005032 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e98:	4b86      	ldr	r3, [pc, #536]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10e      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea4:	4b83      	ldr	r3, [pc, #524]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	4a82      	ldr	r2, [pc, #520]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eae:	61d3      	str	r3, [r2, #28]
 8004eb0:	4b80      	ldr	r3, [pc, #512]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb8:	60bb      	str	r3, [r7, #8]
 8004eba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec2:	4b7d      	ldr	r3, [pc, #500]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d118      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ece:	4b7a      	ldr	r3, [pc, #488]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a79      	ldr	r2, [pc, #484]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eda:	f7fd fc33 	bl	8002744 <HAL_GetTick>
 8004ede:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee2:	f7fd fc2f 	bl	8002744 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b64      	cmp	r3, #100	; 0x64
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e0db      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef4:	4b70      	ldr	r3, [pc, #448]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0f0      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f00:	4b6c      	ldr	r3, [pc, #432]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f08:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d07d      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d076      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f1e:	4b65      	ldr	r3, [pc, #404]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f2c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	fa93 f3a3 	rbit	r3, r3
 8004f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f38:	fab3 f383 	clz	r3, r3
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	4b5e      	ldr	r3, [pc, #376]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f42:	4413      	add	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	461a      	mov	r2, r3
 8004f48:	2301      	movs	r3, #1
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	fa93 f3a3 	rbit	r3, r3
 8004f58:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f5c:	fab3 f383 	clz	r3, r3
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	4b55      	ldr	r3, [pc, #340]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f70:	4a50      	ldr	r2, [pc, #320]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f74:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d045      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f80:	f7fd fbe0 	bl	8002744 <HAL_GetTick>
 8004f84:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f86:	e00a      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f88:	f7fd fbdc 	bl	8002744 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e086      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa4:	fa93 f3a3 	rbit	r3, r3
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8004faa:	2302      	movs	r3, #2
 8004fac:	623b      	str	r3, [r7, #32]
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	fa93 f3a3 	rbit	r3, r3
 8004fb4:	61fb      	str	r3, [r7, #28]
  return result;
 8004fb6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb8:	fab3 f383 	clz	r3, r3
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	f043 0302 	orr.w	r3, r3, #2
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d102      	bne.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004fcc:	4b39      	ldr	r3, [pc, #228]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	e007      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	fa93 f3a3 	rbit	r3, r3
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	4b35      	ldr	r3, [pc, #212]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	613a      	str	r2, [r7, #16]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	fa92 f2a2 	rbit	r2, r2
 8004fec:	60fa      	str	r2, [r7, #12]
  return result;
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	fab2 f282 	clz	r2, r2
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	f002 021f 	and.w	r2, r2, #31
 8005000:	2101      	movs	r1, #1
 8005002:	fa01 f202 	lsl.w	r2, r1, r2
 8005006:	4013      	ands	r3, r2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0bd      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800500c:	4b29      	ldr	r3, [pc, #164]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	4926      	ldr	r1, [pc, #152]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800501a:	4313      	orrs	r3, r2
 800501c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800501e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005022:	2b01      	cmp	r3, #1
 8005024:	d105      	bne.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005026:	4b23      	ldr	r3, [pc, #140]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	4a22      	ldr	r2, [pc, #136]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800502c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005030:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d008      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800503e:	4b1d      	ldr	r3, [pc, #116]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	f023 0203 	bic.w	r2, r3, #3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	491a      	ldr	r1, [pc, #104]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800504c:	4313      	orrs	r3, r2
 800504e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b00      	cmp	r3, #0
 800505a:	d008      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800505c:	4b15      	ldr	r3, [pc, #84]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005060:	f023 0210 	bic.w	r2, r3, #16
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	4912      	ldr	r1, [pc, #72]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800506a:	4313      	orrs	r3, r2
 800506c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005076:	2b00      	cmp	r3, #0
 8005078:	d008      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800507a:	4b0e      	ldr	r3, [pc, #56]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	490b      	ldr	r1, [pc, #44]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005088:	4313      	orrs	r3, r2
 800508a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d008      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005098:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	4903      	ldr	r1, [pc, #12]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3748      	adds	r7, #72	; 0x48
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40021000 	.word	0x40021000
 80050b8:	40007000 	.word	0x40007000
 80050bc:	10908100 	.word	0x10908100

080050c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e049      	b.n	8005166 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d106      	bne.n	80050ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7fd f884 	bl	80021f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3304      	adds	r3, #4
 80050fc:	4619      	mov	r1, r3
 80050fe:	4610      	mov	r0, r2
 8005100:	f001 f870 	bl	80061e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b082      	sub	sp, #8
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e049      	b.n	8005214 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d106      	bne.n	800519a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7fc ffcd 	bl	8002134 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2202      	movs	r2, #2
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3304      	adds	r3, #4
 80051aa:	4619      	mov	r1, r3
 80051ac:	4610      	mov	r0, r2
 80051ae:	f001 f819 	bl	80061e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d109      	bne.n	8005240 <HAL_TIM_PWM_Start+0x24>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b01      	cmp	r3, #1
 8005236:	bf14      	ite	ne
 8005238:	2301      	movne	r3, #1
 800523a:	2300      	moveq	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	e03c      	b.n	80052ba <HAL_TIM_PWM_Start+0x9e>
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2b04      	cmp	r3, #4
 8005244:	d109      	bne.n	800525a <HAL_TIM_PWM_Start+0x3e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b01      	cmp	r3, #1
 8005250:	bf14      	ite	ne
 8005252:	2301      	movne	r3, #1
 8005254:	2300      	moveq	r3, #0
 8005256:	b2db      	uxtb	r3, r3
 8005258:	e02f      	b.n	80052ba <HAL_TIM_PWM_Start+0x9e>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b08      	cmp	r3, #8
 800525e:	d109      	bne.n	8005274 <HAL_TIM_PWM_Start+0x58>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	bf14      	ite	ne
 800526c:	2301      	movne	r3, #1
 800526e:	2300      	moveq	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	e022      	b.n	80052ba <HAL_TIM_PWM_Start+0x9e>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2b0c      	cmp	r3, #12
 8005278:	d109      	bne.n	800528e <HAL_TIM_PWM_Start+0x72>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b01      	cmp	r3, #1
 8005284:	bf14      	ite	ne
 8005286:	2301      	movne	r3, #1
 8005288:	2300      	moveq	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	e015      	b.n	80052ba <HAL_TIM_PWM_Start+0x9e>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b10      	cmp	r3, #16
 8005292:	d109      	bne.n	80052a8 <HAL_TIM_PWM_Start+0x8c>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b01      	cmp	r3, #1
 800529e:	bf14      	ite	ne
 80052a0:	2301      	movne	r3, #1
 80052a2:	2300      	moveq	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	e008      	b.n	80052ba <HAL_TIM_PWM_Start+0x9e>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	bf14      	ite	ne
 80052b4:	2301      	movne	r3, #1
 80052b6:	2300      	moveq	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e088      	b.n	80053d4 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d104      	bne.n	80052d2 <HAL_TIM_PWM_Start+0xb6>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052d0:	e023      	b.n	800531a <HAL_TIM_PWM_Start+0xfe>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d104      	bne.n	80052e2 <HAL_TIM_PWM_Start+0xc6>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e0:	e01b      	b.n	800531a <HAL_TIM_PWM_Start+0xfe>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d104      	bne.n	80052f2 <HAL_TIM_PWM_Start+0xd6>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052f0:	e013      	b.n	800531a <HAL_TIM_PWM_Start+0xfe>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b0c      	cmp	r3, #12
 80052f6:	d104      	bne.n	8005302 <HAL_TIM_PWM_Start+0xe6>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005300:	e00b      	b.n	800531a <HAL_TIM_PWM_Start+0xfe>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b10      	cmp	r3, #16
 8005306:	d104      	bne.n	8005312 <HAL_TIM_PWM_Start+0xf6>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005310:	e003      	b.n	800531a <HAL_TIM_PWM_Start+0xfe>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2202      	movs	r2, #2
 8005316:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2201      	movs	r2, #1
 8005320:	6839      	ldr	r1, [r7, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f001 fcbc 	bl	8006ca0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a2b      	ldr	r2, [pc, #172]	; (80053dc <HAL_TIM_PWM_Start+0x1c0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00e      	beq.n	8005350 <HAL_TIM_PWM_Start+0x134>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a2a      	ldr	r2, [pc, #168]	; (80053e0 <HAL_TIM_PWM_Start+0x1c4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d009      	beq.n	8005350 <HAL_TIM_PWM_Start+0x134>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a28      	ldr	r2, [pc, #160]	; (80053e4 <HAL_TIM_PWM_Start+0x1c8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d004      	beq.n	8005350 <HAL_TIM_PWM_Start+0x134>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a27      	ldr	r2, [pc, #156]	; (80053e8 <HAL_TIM_PWM_Start+0x1cc>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d101      	bne.n	8005354 <HAL_TIM_PWM_Start+0x138>
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <HAL_TIM_PWM_Start+0x13a>
 8005354:	2300      	movs	r3, #0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d007      	beq.n	800536a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005368:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a1b      	ldr	r2, [pc, #108]	; (80053dc <HAL_TIM_PWM_Start+0x1c0>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d00e      	beq.n	8005392 <HAL_TIM_PWM_Start+0x176>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537c:	d009      	beq.n	8005392 <HAL_TIM_PWM_Start+0x176>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a1a      	ldr	r2, [pc, #104]	; (80053ec <HAL_TIM_PWM_Start+0x1d0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d004      	beq.n	8005392 <HAL_TIM_PWM_Start+0x176>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a14      	ldr	r2, [pc, #80]	; (80053e0 <HAL_TIM_PWM_Start+0x1c4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d115      	bne.n	80053be <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	4b15      	ldr	r3, [pc, #84]	; (80053f0 <HAL_TIM_PWM_Start+0x1d4>)
 800539a:	4013      	ands	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b06      	cmp	r3, #6
 80053a2:	d015      	beq.n	80053d0 <HAL_TIM_PWM_Start+0x1b4>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053aa:	d011      	beq.n	80053d0 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0201 	orr.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053bc:	e008      	b.n	80053d0 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0201 	orr.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	e000      	b.n	80053d2 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40012c00 	.word	0x40012c00
 80053e0:	40014000 	.word	0x40014000
 80053e4:	40014400 	.word	0x40014400
 80053e8:	40014800 	.word	0x40014800
 80053ec:	40000400 	.word	0x40000400
 80053f0:	00010007 	.word	0x00010007

080053f4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d109      	bne.n	8005420 <HAL_TIM_PWM_Start_DMA+0x2c>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	e03c      	b.n	800549a <HAL_TIM_PWM_Start_DMA+0xa6>
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b04      	cmp	r3, #4
 8005424:	d109      	bne.n	800543a <HAL_TIM_PWM_Start_DMA+0x46>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	bf0c      	ite	eq
 8005432:	2301      	moveq	r3, #1
 8005434:	2300      	movne	r3, #0
 8005436:	b2db      	uxtb	r3, r3
 8005438:	e02f      	b.n	800549a <HAL_TIM_PWM_Start_DMA+0xa6>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b08      	cmp	r3, #8
 800543e:	d109      	bne.n	8005454 <HAL_TIM_PWM_Start_DMA+0x60>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	bf0c      	ite	eq
 800544c:	2301      	moveq	r3, #1
 800544e:	2300      	movne	r3, #0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	e022      	b.n	800549a <HAL_TIM_PWM_Start_DMA+0xa6>
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b0c      	cmp	r3, #12
 8005458:	d109      	bne.n	800546e <HAL_TIM_PWM_Start_DMA+0x7a>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	bf0c      	ite	eq
 8005466:	2301      	moveq	r3, #1
 8005468:	2300      	movne	r3, #0
 800546a:	b2db      	uxtb	r3, r3
 800546c:	e015      	b.n	800549a <HAL_TIM_PWM_Start_DMA+0xa6>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b10      	cmp	r3, #16
 8005472:	d109      	bne.n	8005488 <HAL_TIM_PWM_Start_DMA+0x94>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	bf0c      	ite	eq
 8005480:	2301      	moveq	r3, #1
 8005482:	2300      	movne	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	e008      	b.n	800549a <HAL_TIM_PWM_Start_DMA+0xa6>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	bf0c      	ite	eq
 8005494:	2301      	moveq	r3, #1
 8005496:	2300      	movne	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800549e:	2302      	movs	r3, #2
 80054a0:	e197      	b.n	80057d2 <HAL_TIM_PWM_Start_DMA+0x3de>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d109      	bne.n	80054bc <HAL_TIM_PWM_Start_DMA+0xc8>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	bf0c      	ite	eq
 80054b4:	2301      	moveq	r3, #1
 80054b6:	2300      	movne	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	e03c      	b.n	8005536 <HAL_TIM_PWM_Start_DMA+0x142>
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d109      	bne.n	80054d6 <HAL_TIM_PWM_Start_DMA+0xe2>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	bf0c      	ite	eq
 80054ce:	2301      	moveq	r3, #1
 80054d0:	2300      	movne	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	e02f      	b.n	8005536 <HAL_TIM_PWM_Start_DMA+0x142>
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d109      	bne.n	80054f0 <HAL_TIM_PWM_Start_DMA+0xfc>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	bf0c      	ite	eq
 80054e8:	2301      	moveq	r3, #1
 80054ea:	2300      	movne	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	e022      	b.n	8005536 <HAL_TIM_PWM_Start_DMA+0x142>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b0c      	cmp	r3, #12
 80054f4:	d109      	bne.n	800550a <HAL_TIM_PWM_Start_DMA+0x116>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b01      	cmp	r3, #1
 8005500:	bf0c      	ite	eq
 8005502:	2301      	moveq	r3, #1
 8005504:	2300      	movne	r3, #0
 8005506:	b2db      	uxtb	r3, r3
 8005508:	e015      	b.n	8005536 <HAL_TIM_PWM_Start_DMA+0x142>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b10      	cmp	r3, #16
 800550e:	d109      	bne.n	8005524 <HAL_TIM_PWM_Start_DMA+0x130>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	bf0c      	ite	eq
 800551c:	2301      	moveq	r3, #1
 800551e:	2300      	movne	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	e008      	b.n	8005536 <HAL_TIM_PWM_Start_DMA+0x142>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b01      	cmp	r3, #1
 800552e:	bf0c      	ite	eq
 8005530:	2301      	moveq	r3, #1
 8005532:	2300      	movne	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d034      	beq.n	80055a4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d104      	bne.n	800554a <HAL_TIM_PWM_Start_DMA+0x156>
 8005540:	887b      	ldrh	r3, [r7, #2]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e143      	b.n	80057d2 <HAL_TIM_PWM_Start_DMA+0x3de>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d104      	bne.n	800555a <HAL_TIM_PWM_Start_DMA+0x166>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005558:	e026      	b.n	80055a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	2b04      	cmp	r3, #4
 800555e:	d104      	bne.n	800556a <HAL_TIM_PWM_Start_DMA+0x176>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005568:	e01e      	b.n	80055a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b08      	cmp	r3, #8
 800556e:	d104      	bne.n	800557a <HAL_TIM_PWM_Start_DMA+0x186>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005578:	e016      	b.n	80055a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b0c      	cmp	r3, #12
 800557e:	d104      	bne.n	800558a <HAL_TIM_PWM_Start_DMA+0x196>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005588:	e00e      	b.n	80055a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2b10      	cmp	r3, #16
 800558e:	d104      	bne.n	800559a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005598:	e006      	b.n	80055a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2202      	movs	r2, #2
 800559e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055a2:	e001      	b.n	80055a8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e114      	b.n	80057d2 <HAL_TIM_PWM_Start_DMA+0x3de>
  }

  switch (Channel)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b0c      	cmp	r3, #12
 80055ac:	f200 80ae 	bhi.w	800570c <HAL_TIM_PWM_Start_DMA+0x318>
 80055b0:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80055b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b6:	bf00      	nop
 80055b8:	080055ed 	.word	0x080055ed
 80055bc:	0800570d 	.word	0x0800570d
 80055c0:	0800570d 	.word	0x0800570d
 80055c4:	0800570d 	.word	0x0800570d
 80055c8:	08005635 	.word	0x08005635
 80055cc:	0800570d 	.word	0x0800570d
 80055d0:	0800570d 	.word	0x0800570d
 80055d4:	0800570d 	.word	0x0800570d
 80055d8:	0800567d 	.word	0x0800567d
 80055dc:	0800570d 	.word	0x0800570d
 80055e0:	0800570d 	.word	0x0800570d
 80055e4:	0800570d 	.word	0x0800570d
 80055e8:	080056c5 	.word	0x080056c5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	4a7a      	ldr	r2, [pc, #488]	; (80057dc <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80055f2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	4a79      	ldr	r2, [pc, #484]	; (80057e0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80055fa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	4a78      	ldr	r2, [pc, #480]	; (80057e4 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8005602:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005608:	6879      	ldr	r1, [r7, #4]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3334      	adds	r3, #52	; 0x34
 8005610:	461a      	mov	r2, r3
 8005612:	887b      	ldrh	r3, [r7, #2]
 8005614:	f7fd fea0 	bl	8003358 <HAL_DMA_Start_IT>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e0d7      	b.n	80057d2 <HAL_TIM_PWM_Start_DMA+0x3de>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68da      	ldr	r2, [r3, #12]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005630:	60da      	str	r2, [r3, #12]
      break;
 8005632:	e06e      	b.n	8005712 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005638:	4a68      	ldr	r2, [pc, #416]	; (80057dc <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800563a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005640:	4a67      	ldr	r2, [pc, #412]	; (80057e0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8005642:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005648:	4a66      	ldr	r2, [pc, #408]	; (80057e4 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800564a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3338      	adds	r3, #56	; 0x38
 8005658:	461a      	mov	r2, r3
 800565a:	887b      	ldrh	r3, [r7, #2]
 800565c:	f7fd fe7c 	bl	8003358 <HAL_DMA_Start_IT>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e0b3      	b.n	80057d2 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005678:	60da      	str	r2, [r3, #12]
      break;
 800567a:	e04a      	b.n	8005712 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	4a56      	ldr	r2, [pc, #344]	; (80057dc <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8005682:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005688:	4a55      	ldr	r2, [pc, #340]	; (80057e0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800568a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	4a54      	ldr	r2, [pc, #336]	; (80057e4 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8005692:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	333c      	adds	r3, #60	; 0x3c
 80056a0:	461a      	mov	r2, r3
 80056a2:	887b      	ldrh	r3, [r7, #2]
 80056a4:	f7fd fe58 	bl	8003358 <HAL_DMA_Start_IT>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e08f      	b.n	80057d2 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056c0:	60da      	str	r2, [r3, #12]
      break;
 80056c2:	e026      	b.n	8005712 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c8:	4a44      	ldr	r2, [pc, #272]	; (80057dc <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80056ca:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d0:	4a43      	ldr	r2, [pc, #268]	; (80057e0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80056d2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	4a42      	ldr	r2, [pc, #264]	; (80057e4 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80056da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80056e0:	6879      	ldr	r1, [r7, #4]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3340      	adds	r3, #64	; 0x40
 80056e8:	461a      	mov	r2, r3
 80056ea:	887b      	ldrh	r3, [r7, #2]
 80056ec:	f7fd fe34 	bl	8003358 <HAL_DMA_Start_IT>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e06b      	b.n	80057d2 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68da      	ldr	r2, [r3, #12]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005708:	60da      	str	r2, [r3, #12]
      break;
 800570a:	e002      	b.n	8005712 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	75fb      	strb	r3, [r7, #23]
      break;
 8005710:	bf00      	nop
  }

  if (status == HAL_OK)
 8005712:	7dfb      	ldrb	r3, [r7, #23]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d15b      	bne.n	80057d0 <HAL_TIM_PWM_Start_DMA+0x3dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2201      	movs	r2, #1
 800571e:	68b9      	ldr	r1, [r7, #8]
 8005720:	4618      	mov	r0, r3
 8005722:	f001 fabd 	bl	8006ca0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a2f      	ldr	r2, [pc, #188]	; (80057e8 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d00e      	beq.n	800574e <HAL_TIM_PWM_Start_DMA+0x35a>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a2d      	ldr	r2, [pc, #180]	; (80057ec <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d009      	beq.n	800574e <HAL_TIM_PWM_Start_DMA+0x35a>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a2c      	ldr	r2, [pc, #176]	; (80057f0 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d004      	beq.n	800574e <HAL_TIM_PWM_Start_DMA+0x35a>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a2a      	ldr	r2, [pc, #168]	; (80057f4 <HAL_TIM_PWM_Start_DMA+0x400>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d101      	bne.n	8005752 <HAL_TIM_PWM_Start_DMA+0x35e>
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <HAL_TIM_PWM_Start_DMA+0x360>
 8005752:	2300      	movs	r3, #0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d007      	beq.n	8005768 <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005766:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1e      	ldr	r2, [pc, #120]	; (80057e8 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00e      	beq.n	8005790 <HAL_TIM_PWM_Start_DMA+0x39c>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577a:	d009      	beq.n	8005790 <HAL_TIM_PWM_Start_DMA+0x39c>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a1d      	ldr	r2, [pc, #116]	; (80057f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d004      	beq.n	8005790 <HAL_TIM_PWM_Start_DMA+0x39c>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a18      	ldr	r2, [pc, #96]	; (80057ec <HAL_TIM_PWM_Start_DMA+0x3f8>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d115      	bne.n	80057bc <HAL_TIM_PWM_Start_DMA+0x3c8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	4b19      	ldr	r3, [pc, #100]	; (80057fc <HAL_TIM_PWM_Start_DMA+0x408>)
 8005798:	4013      	ands	r3, r2
 800579a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	2b06      	cmp	r3, #6
 80057a0:	d015      	beq.n	80057ce <HAL_TIM_PWM_Start_DMA+0x3da>
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a8:	d011      	beq.n	80057ce <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        __HAL_TIM_ENABLE(htim);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f042 0201 	orr.w	r2, r2, #1
 80057b8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ba:	e008      	b.n	80057ce <HAL_TIM_PWM_Start_DMA+0x3da>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	e000      	b.n	80057d0 <HAL_TIM_PWM_Start_DMA+0x3dc>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ce:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80057d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	080060d5 	.word	0x080060d5
 80057e0:	0800617d 	.word	0x0800617d
 80057e4:	08006043 	.word	0x08006043
 80057e8:	40012c00 	.word	0x40012c00
 80057ec:	40014000 	.word	0x40014000
 80057f0:	40014400 	.word	0x40014400
 80057f4:	40014800 	.word	0x40014800
 80057f8:	40000400 	.word	0x40000400
 80057fc:	00010007 	.word	0x00010007

08005800 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b0c      	cmp	r3, #12
 8005812:	d855      	bhi.n	80058c0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005814:	a201      	add	r2, pc, #4	; (adr r2, 800581c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581a:	bf00      	nop
 800581c:	08005851 	.word	0x08005851
 8005820:	080058c1 	.word	0x080058c1
 8005824:	080058c1 	.word	0x080058c1
 8005828:	080058c1 	.word	0x080058c1
 800582c:	0800586d 	.word	0x0800586d
 8005830:	080058c1 	.word	0x080058c1
 8005834:	080058c1 	.word	0x080058c1
 8005838:	080058c1 	.word	0x080058c1
 800583c:	08005889 	.word	0x08005889
 8005840:	080058c1 	.word	0x080058c1
 8005844:	080058c1 	.word	0x080058c1
 8005848:	080058c1 	.word	0x080058c1
 800584c:	080058a5 	.word	0x080058a5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800585e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	4618      	mov	r0, r3
 8005866:	f7fd fdd6 	bl	8003416 <HAL_DMA_Abort_IT>
      break;
 800586a:	e02c      	b.n	80058c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800587a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005880:	4618      	mov	r0, r3
 8005882:	f7fd fdc8 	bl	8003416 <HAL_DMA_Abort_IT>
      break;
 8005886:	e01e      	b.n	80058c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68da      	ldr	r2, [r3, #12]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005896:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	4618      	mov	r0, r3
 800589e:	f7fd fdba 	bl	8003416 <HAL_DMA_Abort_IT>
      break;
 80058a2:	e010      	b.n	80058c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7fd fdac 	bl	8003416 <HAL_DMA_Abort_IT>
      break;
 80058be:	e002      	b.n	80058c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	73fb      	strb	r3, [r7, #15]
      break;
 80058c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d17b      	bne.n	80059c4 <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2200      	movs	r2, #0
 80058d2:	6839      	ldr	r1, [r7, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f001 f9e3 	bl	8006ca0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a3c      	ldr	r2, [pc, #240]	; (80059d0 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d00e      	beq.n	8005902 <HAL_TIM_PWM_Stop_DMA+0x102>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a3a      	ldr	r2, [pc, #232]	; (80059d4 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d009      	beq.n	8005902 <HAL_TIM_PWM_Stop_DMA+0x102>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a39      	ldr	r2, [pc, #228]	; (80059d8 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d004      	beq.n	8005902 <HAL_TIM_PWM_Stop_DMA+0x102>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a37      	ldr	r2, [pc, #220]	; (80059dc <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d101      	bne.n	8005906 <HAL_TIM_PWM_Stop_DMA+0x106>
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <HAL_TIM_PWM_Stop_DMA+0x108>
 8005906:	2300      	movs	r3, #0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d017      	beq.n	800593c <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6a1a      	ldr	r2, [r3, #32]
 8005912:	f241 1311 	movw	r3, #4369	; 0x1111
 8005916:	4013      	ands	r3, r2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10f      	bne.n	800593c <HAL_TIM_PWM_Stop_DMA+0x13c>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6a1a      	ldr	r2, [r3, #32]
 8005922:	f240 4344 	movw	r3, #1092	; 0x444
 8005926:	4013      	ands	r3, r2
 8005928:	2b00      	cmp	r3, #0
 800592a:	d107      	bne.n	800593c <HAL_TIM_PWM_Stop_DMA+0x13c>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800593a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6a1a      	ldr	r2, [r3, #32]
 8005942:	f241 1311 	movw	r3, #4369	; 0x1111
 8005946:	4013      	ands	r3, r2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10f      	bne.n	800596c <HAL_TIM_PWM_Stop_DMA+0x16c>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6a1a      	ldr	r2, [r3, #32]
 8005952:	f240 4344 	movw	r3, #1092	; 0x444
 8005956:	4013      	ands	r3, r2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d107      	bne.n	800596c <HAL_TIM_PWM_Stop_DMA+0x16c>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0201 	bic.w	r2, r2, #1
 800596a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d104      	bne.n	800597c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800597a:	e023      	b.n	80059c4 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b04      	cmp	r3, #4
 8005980:	d104      	bne.n	800598c <HAL_TIM_PWM_Stop_DMA+0x18c>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800598a:	e01b      	b.n	80059c4 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2b08      	cmp	r3, #8
 8005990:	d104      	bne.n	800599c <HAL_TIM_PWM_Stop_DMA+0x19c>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800599a:	e013      	b.n	80059c4 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b0c      	cmp	r3, #12
 80059a0:	d104      	bne.n	80059ac <HAL_TIM_PWM_Stop_DMA+0x1ac>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059aa:	e00b      	b.n	80059c4 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b10      	cmp	r3, #16
 80059b0:	d104      	bne.n	80059bc <HAL_TIM_PWM_Stop_DMA+0x1bc>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059ba:	e003      	b.n	80059c4 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	40012c00 	.word	0x40012c00
 80059d4:	40014000 	.word	0x40014000
 80059d8:	40014400 	.word	0x40014400
 80059dc:	40014800 	.word	0x40014800

080059e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e049      	b.n	8005a86 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fc fbb4 	bl	8002174 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4610      	mov	r0, r2
 8005a20:	f000 fbe0 	bl	80061e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b086      	sub	sp, #24
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_TIM_IC_ConfigChannel+0x1e>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e088      	b.n	8005bbe <HAL_TIM_IC_ConfigChannel+0x130>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d11b      	bne.n	8005af2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6818      	ldr	r0, [r3, #0]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	6819      	ldr	r1, [r3, #0]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f000 ff3d 	bl	8006948 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	699a      	ldr	r2, [r3, #24]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 020c 	bic.w	r2, r2, #12
 8005adc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6999      	ldr	r1, [r3, #24]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	619a      	str	r2, [r3, #24]
 8005af0:	e060      	b.n	8005bb4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	d11c      	bne.n	8005b32 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	6819      	ldr	r1, [r3, #0]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f000 ffa9 	bl	8006a5e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b1a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6999      	ldr	r1, [r3, #24]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	021a      	lsls	r2, r3, #8
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	619a      	str	r2, [r3, #24]
 8005b30:	e040      	b.n	8005bb4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d11b      	bne.n	8005b70 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6818      	ldr	r0, [r3, #0]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	6819      	ldr	r1, [r3, #0]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f000 fff6 	bl	8006b38 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	69da      	ldr	r2, [r3, #28]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 020c 	bic.w	r2, r2, #12
 8005b5a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	69d9      	ldr	r1, [r3, #28]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	61da      	str	r2, [r3, #28]
 8005b6e:	e021      	b.n	8005bb4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b0c      	cmp	r3, #12
 8005b74:	d11c      	bne.n	8005bb0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6819      	ldr	r1, [r3, #0]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f001 f813 	bl	8006bb0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69da      	ldr	r2, [r3, #28]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005b98:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69d9      	ldr	r1, [r3, #28]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	021a      	lsls	r2, r3, #8
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	61da      	str	r2, [r3, #28]
 8005bae:	e001      	b.n	8005bb4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
	...

08005bc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d101      	bne.n	8005be6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005be2:	2302      	movs	r3, #2
 8005be4:	e0ff      	b.n	8005de6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b14      	cmp	r3, #20
 8005bf2:	f200 80f0 	bhi.w	8005dd6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005bf6:	a201      	add	r2, pc, #4	; (adr r2, 8005bfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfc:	08005c51 	.word	0x08005c51
 8005c00:	08005dd7 	.word	0x08005dd7
 8005c04:	08005dd7 	.word	0x08005dd7
 8005c08:	08005dd7 	.word	0x08005dd7
 8005c0c:	08005c91 	.word	0x08005c91
 8005c10:	08005dd7 	.word	0x08005dd7
 8005c14:	08005dd7 	.word	0x08005dd7
 8005c18:	08005dd7 	.word	0x08005dd7
 8005c1c:	08005cd3 	.word	0x08005cd3
 8005c20:	08005dd7 	.word	0x08005dd7
 8005c24:	08005dd7 	.word	0x08005dd7
 8005c28:	08005dd7 	.word	0x08005dd7
 8005c2c:	08005d13 	.word	0x08005d13
 8005c30:	08005dd7 	.word	0x08005dd7
 8005c34:	08005dd7 	.word	0x08005dd7
 8005c38:	08005dd7 	.word	0x08005dd7
 8005c3c:	08005d55 	.word	0x08005d55
 8005c40:	08005dd7 	.word	0x08005dd7
 8005c44:	08005dd7 	.word	0x08005dd7
 8005c48:	08005dd7 	.word	0x08005dd7
 8005c4c:	08005d95 	.word	0x08005d95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fb3c 	bl	80062d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0208 	orr.w	r2, r2, #8
 8005c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0204 	bic.w	r2, r2, #4
 8005c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6999      	ldr	r1, [r3, #24]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	691a      	ldr	r2, [r3, #16]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	619a      	str	r2, [r3, #24]
      break;
 8005c8e:	e0a5      	b.n	8005ddc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68b9      	ldr	r1, [r7, #8]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 fba2 	bl	80063e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699a      	ldr	r2, [r3, #24]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6999      	ldr	r1, [r3, #24]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	021a      	lsls	r2, r3, #8
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	619a      	str	r2, [r3, #24]
      break;
 8005cd0:	e084      	b.n	8005ddc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fc01 	bl	80064e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69da      	ldr	r2, [r3, #28]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0208 	orr.w	r2, r2, #8
 8005cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69da      	ldr	r2, [r3, #28]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0204 	bic.w	r2, r2, #4
 8005cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69d9      	ldr	r1, [r3, #28]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	61da      	str	r2, [r3, #28]
      break;
 8005d10:	e064      	b.n	8005ddc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fc5f 	bl	80065dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69da      	ldr	r2, [r3, #28]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	69da      	ldr	r2, [r3, #28]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69d9      	ldr	r1, [r3, #28]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	021a      	lsls	r2, r3, #8
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	61da      	str	r2, [r3, #28]
      break;
 8005d52:	e043      	b.n	8005ddc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68b9      	ldr	r1, [r7, #8]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fca2 	bl	80066a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0208 	orr.w	r2, r2, #8
 8005d6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0204 	bic.w	r2, r2, #4
 8005d7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	691a      	ldr	r2, [r3, #16]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d92:	e023      	b.n	8005ddc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68b9      	ldr	r1, [r7, #8]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fce0 	bl	8006760 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	021a      	lsls	r2, r3, #8
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005dd4:	e002      	b.n	8005ddc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	75fb      	strb	r3, [r7, #23]
      break;
 8005dda:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop

08005df0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_TIM_ConfigClockSource+0x1c>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e0b6      	b.n	8005f7a <HAL_TIM_ConfigClockSource+0x18a>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e48:	d03e      	beq.n	8005ec8 <HAL_TIM_ConfigClockSource+0xd8>
 8005e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e4e:	f200 8087 	bhi.w	8005f60 <HAL_TIM_ConfigClockSource+0x170>
 8005e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e56:	f000 8086 	beq.w	8005f66 <HAL_TIM_ConfigClockSource+0x176>
 8005e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e5e:	d87f      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x170>
 8005e60:	2b70      	cmp	r3, #112	; 0x70
 8005e62:	d01a      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0xaa>
 8005e64:	2b70      	cmp	r3, #112	; 0x70
 8005e66:	d87b      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x170>
 8005e68:	2b60      	cmp	r3, #96	; 0x60
 8005e6a:	d050      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0x11e>
 8005e6c:	2b60      	cmp	r3, #96	; 0x60
 8005e6e:	d877      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x170>
 8005e70:	2b50      	cmp	r3, #80	; 0x50
 8005e72:	d03c      	beq.n	8005eee <HAL_TIM_ConfigClockSource+0xfe>
 8005e74:	2b50      	cmp	r3, #80	; 0x50
 8005e76:	d873      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x170>
 8005e78:	2b40      	cmp	r3, #64	; 0x40
 8005e7a:	d058      	beq.n	8005f2e <HAL_TIM_ConfigClockSource+0x13e>
 8005e7c:	2b40      	cmp	r3, #64	; 0x40
 8005e7e:	d86f      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x170>
 8005e80:	2b30      	cmp	r3, #48	; 0x30
 8005e82:	d064      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x15e>
 8005e84:	2b30      	cmp	r3, #48	; 0x30
 8005e86:	d86b      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x170>
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	d060      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x15e>
 8005e8c:	2b20      	cmp	r3, #32
 8005e8e:	d867      	bhi.n	8005f60 <HAL_TIM_ConfigClockSource+0x170>
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d05c      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x15e>
 8005e94:	2b10      	cmp	r3, #16
 8005e96:	d05a      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x15e>
 8005e98:	e062      	b.n	8005f60 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6818      	ldr	r0, [r3, #0]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	6899      	ldr	r1, [r3, #8]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f000 fed9 	bl	8006c60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ebc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	609a      	str	r2, [r3, #8]
      break;
 8005ec6:	e04f      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6818      	ldr	r0, [r3, #0]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	6899      	ldr	r1, [r3, #8]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f000 fec2 	bl	8006c60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005eea:	609a      	str	r2, [r3, #8]
      break;
 8005eec:	e03c      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	6859      	ldr	r1, [r3, #4]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	461a      	mov	r2, r3
 8005efc:	f000 fd80 	bl	8006a00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2150      	movs	r1, #80	; 0x50
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 fe8f 	bl	8006c2a <TIM_ITRx_SetConfig>
      break;
 8005f0c:	e02c      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6818      	ldr	r0, [r3, #0]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6859      	ldr	r1, [r3, #4]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f000 fddc 	bl	8006ad8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2160      	movs	r1, #96	; 0x60
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fe7f 	bl	8006c2a <TIM_ITRx_SetConfig>
      break;
 8005f2c:	e01c      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6818      	ldr	r0, [r3, #0]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	6859      	ldr	r1, [r3, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f000 fd60 	bl	8006a00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2140      	movs	r1, #64	; 0x40
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 fe6f 	bl	8006c2a <TIM_ITRx_SetConfig>
      break;
 8005f4c:	e00c      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4619      	mov	r1, r3
 8005f58:	4610      	mov	r0, r2
 8005f5a:	f000 fe66 	bl	8006c2a <TIM_ITRx_SetConfig>
      break;
 8005f5e:	e003      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	73fb      	strb	r3, [r7, #15]
      break;
 8005f64:	e000      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d101      	bne.n	8005f9a <HAL_TIM_SlaveConfigSynchro+0x18>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e031      	b.n	8005ffe <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005faa:	6839      	ldr	r1, [r7, #0]
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fc37 	bl	8006820 <TIM_SlaveTimer_SetConfig>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d009      	beq.n	8005fcc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e018      	b.n	8005ffe <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fda:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005fea:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	429a      	cmp	r2, r3
 8006058:	d107      	bne.n	800606a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2201      	movs	r2, #1
 800605e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006068:	e02a      	b.n	80060c0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	429a      	cmp	r2, r3
 8006072:	d107      	bne.n	8006084 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2202      	movs	r2, #2
 8006078:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006082:	e01d      	b.n	80060c0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	429a      	cmp	r2, r3
 800608c:	d107      	bne.n	800609e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2204      	movs	r2, #4
 8006092:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800609c:	e010      	b.n	80060c0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d107      	bne.n	80060b8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2208      	movs	r2, #8
 80060ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060b6:	e003      	b.n	80060c0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f7ff ffb4 	bl	800602e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	771a      	strb	r2, [r3, #28]
}
 80060cc:	bf00      	nop
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d10b      	bne.n	8006104 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d136      	bne.n	8006168 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006102:	e031      	b.n	8006168 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	429a      	cmp	r2, r3
 800610c:	d10b      	bne.n	8006126 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2202      	movs	r2, #2
 8006112:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d125      	bne.n	8006168 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006124:	e020      	b.n	8006168 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	429a      	cmp	r2, r3
 800612e:	d10b      	bne.n	8006148 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2204      	movs	r2, #4
 8006134:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d114      	bne.n	8006168 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006146:	e00f      	b.n	8006168 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	429a      	cmp	r2, r3
 8006150:	d10a      	bne.n	8006168 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2208      	movs	r2, #8
 8006156:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d103      	bne.n	8006168 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff ff4c 	bl	8006006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	771a      	strb	r2, [r3, #28]
}
 8006174:	bf00      	nop
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	429a      	cmp	r2, r3
 8006192:	d103      	bne.n	800619c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	771a      	strb	r2, [r3, #28]
 800619a:	e019      	b.n	80061d0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d103      	bne.n	80061ae <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2202      	movs	r2, #2
 80061aa:	771a      	strb	r2, [r3, #28]
 80061ac:	e010      	b.n	80061d0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d103      	bne.n	80061c0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2204      	movs	r2, #4
 80061bc:	771a      	strb	r2, [r3, #28]
 80061be:	e007      	b.n	80061d0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d102      	bne.n	80061d0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2208      	movs	r2, #8
 80061ce:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f7ff ff22 	bl	800601a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	771a      	strb	r2, [r3, #28]
}
 80061dc:	bf00      	nop
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a32      	ldr	r2, [pc, #200]	; (80062c0 <TIM_Base_SetConfig+0xdc>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d007      	beq.n	800620c <TIM_Base_SetConfig+0x28>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006202:	d003      	beq.n	800620c <TIM_Base_SetConfig+0x28>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a2f      	ldr	r2, [pc, #188]	; (80062c4 <TIM_Base_SetConfig+0xe0>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d108      	bne.n	800621e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a27      	ldr	r2, [pc, #156]	; (80062c0 <TIM_Base_SetConfig+0xdc>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d013      	beq.n	800624e <TIM_Base_SetConfig+0x6a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800622c:	d00f      	beq.n	800624e <TIM_Base_SetConfig+0x6a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a24      	ldr	r2, [pc, #144]	; (80062c4 <TIM_Base_SetConfig+0xe0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d00b      	beq.n	800624e <TIM_Base_SetConfig+0x6a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a23      	ldr	r2, [pc, #140]	; (80062c8 <TIM_Base_SetConfig+0xe4>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d007      	beq.n	800624e <TIM_Base_SetConfig+0x6a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a22      	ldr	r2, [pc, #136]	; (80062cc <TIM_Base_SetConfig+0xe8>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d003      	beq.n	800624e <TIM_Base_SetConfig+0x6a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a21      	ldr	r2, [pc, #132]	; (80062d0 <TIM_Base_SetConfig+0xec>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d108      	bne.n	8006260 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4313      	orrs	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a0e      	ldr	r2, [pc, #56]	; (80062c0 <TIM_Base_SetConfig+0xdc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00b      	beq.n	80062a4 <TIM_Base_SetConfig+0xc0>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a0e      	ldr	r2, [pc, #56]	; (80062c8 <TIM_Base_SetConfig+0xe4>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d007      	beq.n	80062a4 <TIM_Base_SetConfig+0xc0>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a0d      	ldr	r2, [pc, #52]	; (80062cc <TIM_Base_SetConfig+0xe8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d003      	beq.n	80062a4 <TIM_Base_SetConfig+0xc0>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a0c      	ldr	r2, [pc, #48]	; (80062d0 <TIM_Base_SetConfig+0xec>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d103      	bne.n	80062ac <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	691a      	ldr	r2, [r3, #16]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	615a      	str	r2, [r3, #20]
}
 80062b2:	bf00      	nop
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	40012c00 	.word	0x40012c00
 80062c4:	40000400 	.word	0x40000400
 80062c8:	40014000 	.word	0x40014000
 80062cc:	40014400 	.word	0x40014400
 80062d0:	40014800 	.word	0x40014800

080062d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	f023 0201 	bic.w	r2, r3, #1
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0303 	bic.w	r3, r3, #3
 800630e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f023 0302 	bic.w	r3, r3, #2
 8006320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	4313      	orrs	r3, r2
 800632a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a28      	ldr	r2, [pc, #160]	; (80063d0 <TIM_OC1_SetConfig+0xfc>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d00b      	beq.n	800634c <TIM_OC1_SetConfig+0x78>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a27      	ldr	r2, [pc, #156]	; (80063d4 <TIM_OC1_SetConfig+0x100>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d007      	beq.n	800634c <TIM_OC1_SetConfig+0x78>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a26      	ldr	r2, [pc, #152]	; (80063d8 <TIM_OC1_SetConfig+0x104>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d003      	beq.n	800634c <TIM_OC1_SetConfig+0x78>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a25      	ldr	r2, [pc, #148]	; (80063dc <TIM_OC1_SetConfig+0x108>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d10c      	bne.n	8006366 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f023 0308 	bic.w	r3, r3, #8
 8006352:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	4313      	orrs	r3, r2
 800635c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f023 0304 	bic.w	r3, r3, #4
 8006364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a19      	ldr	r2, [pc, #100]	; (80063d0 <TIM_OC1_SetConfig+0xfc>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d00b      	beq.n	8006386 <TIM_OC1_SetConfig+0xb2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a18      	ldr	r2, [pc, #96]	; (80063d4 <TIM_OC1_SetConfig+0x100>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d007      	beq.n	8006386 <TIM_OC1_SetConfig+0xb2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a17      	ldr	r2, [pc, #92]	; (80063d8 <TIM_OC1_SetConfig+0x104>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d003      	beq.n	8006386 <TIM_OC1_SetConfig+0xb2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a16      	ldr	r2, [pc, #88]	; (80063dc <TIM_OC1_SetConfig+0x108>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d111      	bne.n	80063aa <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800638c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	4313      	orrs	r3, r2
 800639e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	621a      	str	r2, [r3, #32]
}
 80063c4:	bf00      	nop
 80063c6:	371c      	adds	r7, #28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	40012c00 	.word	0x40012c00
 80063d4:	40014000 	.word	0x40014000
 80063d8:	40014400 	.word	0x40014400
 80063dc:	40014800 	.word	0x40014800

080063e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	f023 0210 	bic.w	r2, r3, #16
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800640e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800641a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	021b      	lsls	r3, r3, #8
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4313      	orrs	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f023 0320 	bic.w	r3, r3, #32
 800642e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	4313      	orrs	r3, r2
 800643a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a24      	ldr	r2, [pc, #144]	; (80064d0 <TIM_OC2_SetConfig+0xf0>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d10d      	bne.n	8006460 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800644a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	011b      	lsls	r3, r3, #4
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800645e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a1b      	ldr	r2, [pc, #108]	; (80064d0 <TIM_OC2_SetConfig+0xf0>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00b      	beq.n	8006480 <TIM_OC2_SetConfig+0xa0>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a1a      	ldr	r2, [pc, #104]	; (80064d4 <TIM_OC2_SetConfig+0xf4>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d007      	beq.n	8006480 <TIM_OC2_SetConfig+0xa0>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a19      	ldr	r2, [pc, #100]	; (80064d8 <TIM_OC2_SetConfig+0xf8>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_OC2_SetConfig+0xa0>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a18      	ldr	r2, [pc, #96]	; (80064dc <TIM_OC2_SetConfig+0xfc>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d113      	bne.n	80064a8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006486:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800648e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	4313      	orrs	r3, r2
 800649a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	621a      	str	r2, [r3, #32]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	40012c00 	.word	0x40012c00
 80064d4:	40014000 	.word	0x40014000
 80064d8:	40014400 	.word	0x40014400
 80064dc:	40014800 	.word	0x40014800

080064e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800650e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0303 	bic.w	r3, r3, #3
 800651a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800652c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	021b      	lsls	r3, r3, #8
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	4313      	orrs	r3, r2
 8006538:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a23      	ldr	r2, [pc, #140]	; (80065cc <TIM_OC3_SetConfig+0xec>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d10d      	bne.n	800655e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	021b      	lsls	r3, r3, #8
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	4313      	orrs	r3, r2
 8006554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800655c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a1a      	ldr	r2, [pc, #104]	; (80065cc <TIM_OC3_SetConfig+0xec>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00b      	beq.n	800657e <TIM_OC3_SetConfig+0x9e>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a19      	ldr	r2, [pc, #100]	; (80065d0 <TIM_OC3_SetConfig+0xf0>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d007      	beq.n	800657e <TIM_OC3_SetConfig+0x9e>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a18      	ldr	r2, [pc, #96]	; (80065d4 <TIM_OC3_SetConfig+0xf4>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d003      	beq.n	800657e <TIM_OC3_SetConfig+0x9e>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a17      	ldr	r2, [pc, #92]	; (80065d8 <TIM_OC3_SetConfig+0xf8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d113      	bne.n	80065a6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800658c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	4313      	orrs	r3, r2
 8006598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	621a      	str	r2, [r3, #32]
}
 80065c0:	bf00      	nop
 80065c2:	371c      	adds	r7, #28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	40014000 	.word	0x40014000
 80065d4:	40014400 	.word	0x40014400
 80065d8:	40014800 	.word	0x40014800

080065dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800660a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800660e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	021b      	lsls	r3, r3, #8
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800662a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	031b      	lsls	r3, r3, #12
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	4313      	orrs	r3, r2
 8006636:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a16      	ldr	r2, [pc, #88]	; (8006694 <TIM_OC4_SetConfig+0xb8>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d00b      	beq.n	8006658 <TIM_OC4_SetConfig+0x7c>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a15      	ldr	r2, [pc, #84]	; (8006698 <TIM_OC4_SetConfig+0xbc>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d007      	beq.n	8006658 <TIM_OC4_SetConfig+0x7c>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a14      	ldr	r2, [pc, #80]	; (800669c <TIM_OC4_SetConfig+0xc0>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d003      	beq.n	8006658 <TIM_OC4_SetConfig+0x7c>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a13      	ldr	r2, [pc, #76]	; (80066a0 <TIM_OC4_SetConfig+0xc4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d109      	bne.n	800666c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800665e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	019b      	lsls	r3, r3, #6
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	4313      	orrs	r3, r2
 800666a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	621a      	str	r2, [r3, #32]
}
 8006686:	bf00      	nop
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	40012c00 	.word	0x40012c00
 8006698:	40014000 	.word	0x40014000
 800669c:	40014400 	.word	0x40014400
 80066a0:	40014800 	.word	0x40014800

080066a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80066e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	041b      	lsls	r3, r3, #16
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a15      	ldr	r2, [pc, #84]	; (8006750 <TIM_OC5_SetConfig+0xac>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d00b      	beq.n	8006716 <TIM_OC5_SetConfig+0x72>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a14      	ldr	r2, [pc, #80]	; (8006754 <TIM_OC5_SetConfig+0xb0>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d007      	beq.n	8006716 <TIM_OC5_SetConfig+0x72>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a13      	ldr	r2, [pc, #76]	; (8006758 <TIM_OC5_SetConfig+0xb4>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d003      	beq.n	8006716 <TIM_OC5_SetConfig+0x72>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a12      	ldr	r2, [pc, #72]	; (800675c <TIM_OC5_SetConfig+0xb8>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d109      	bne.n	800672a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800671c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	021b      	lsls	r3, r3, #8
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	4313      	orrs	r3, r2
 8006728:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	621a      	str	r2, [r3, #32]
}
 8006744:	bf00      	nop
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	40012c00 	.word	0x40012c00
 8006754:	40014000 	.word	0x40014000
 8006758:	40014400 	.word	0x40014400
 800675c:	40014800 	.word	0x40014800

08006760 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800678e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	021b      	lsls	r3, r3, #8
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	4313      	orrs	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	051b      	lsls	r3, r3, #20
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a16      	ldr	r2, [pc, #88]	; (8006810 <TIM_OC6_SetConfig+0xb0>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d00b      	beq.n	80067d4 <TIM_OC6_SetConfig+0x74>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a15      	ldr	r2, [pc, #84]	; (8006814 <TIM_OC6_SetConfig+0xb4>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d007      	beq.n	80067d4 <TIM_OC6_SetConfig+0x74>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a14      	ldr	r2, [pc, #80]	; (8006818 <TIM_OC6_SetConfig+0xb8>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d003      	beq.n	80067d4 <TIM_OC6_SetConfig+0x74>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a13      	ldr	r2, [pc, #76]	; (800681c <TIM_OC6_SetConfig+0xbc>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d109      	bne.n	80067e8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	029b      	lsls	r3, r3, #10
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	621a      	str	r2, [r3, #32]
}
 8006802:	bf00      	nop
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	40012c00 	.word	0x40012c00
 8006814:	40014000 	.word	0x40014000
 8006818:	40014400 	.word	0x40014400
 800681c:	40014800 	.word	0x40014800

08006820 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800682a:	2300      	movs	r3, #0
 800682c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	4313      	orrs	r3, r2
 8006846:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800684e:	f023 0307 	bic.w	r3, r3, #7
 8006852:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	4313      	orrs	r3, r2
 800685c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	2b70      	cmp	r3, #112	; 0x70
 800686c:	d01a      	beq.n	80068a4 <TIM_SlaveTimer_SetConfig+0x84>
 800686e:	2b70      	cmp	r3, #112	; 0x70
 8006870:	d860      	bhi.n	8006934 <TIM_SlaveTimer_SetConfig+0x114>
 8006872:	2b60      	cmp	r3, #96	; 0x60
 8006874:	d054      	beq.n	8006920 <TIM_SlaveTimer_SetConfig+0x100>
 8006876:	2b60      	cmp	r3, #96	; 0x60
 8006878:	d85c      	bhi.n	8006934 <TIM_SlaveTimer_SetConfig+0x114>
 800687a:	2b50      	cmp	r3, #80	; 0x50
 800687c:	d046      	beq.n	800690c <TIM_SlaveTimer_SetConfig+0xec>
 800687e:	2b50      	cmp	r3, #80	; 0x50
 8006880:	d858      	bhi.n	8006934 <TIM_SlaveTimer_SetConfig+0x114>
 8006882:	2b40      	cmp	r3, #64	; 0x40
 8006884:	d019      	beq.n	80068ba <TIM_SlaveTimer_SetConfig+0x9a>
 8006886:	2b40      	cmp	r3, #64	; 0x40
 8006888:	d854      	bhi.n	8006934 <TIM_SlaveTimer_SetConfig+0x114>
 800688a:	2b30      	cmp	r3, #48	; 0x30
 800688c:	d055      	beq.n	800693a <TIM_SlaveTimer_SetConfig+0x11a>
 800688e:	2b30      	cmp	r3, #48	; 0x30
 8006890:	d850      	bhi.n	8006934 <TIM_SlaveTimer_SetConfig+0x114>
 8006892:	2b20      	cmp	r3, #32
 8006894:	d051      	beq.n	800693a <TIM_SlaveTimer_SetConfig+0x11a>
 8006896:	2b20      	cmp	r3, #32
 8006898:	d84c      	bhi.n	8006934 <TIM_SlaveTimer_SetConfig+0x114>
 800689a:	2b00      	cmp	r3, #0
 800689c:	d04d      	beq.n	800693a <TIM_SlaveTimer_SetConfig+0x11a>
 800689e:	2b10      	cmp	r3, #16
 80068a0:	d04b      	beq.n	800693a <TIM_SlaveTimer_SetConfig+0x11a>
 80068a2:	e047      	b.n	8006934 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6818      	ldr	r0, [r3, #0]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	68d9      	ldr	r1, [r3, #12]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	f000 f9d4 	bl	8006c60 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80068b8:	e040      	b.n	800693c <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b05      	cmp	r3, #5
 80068c0:	d101      	bne.n	80068c6 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e03b      	b.n	800693e <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6a1a      	ldr	r2, [r3, #32]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 0201 	bic.w	r2, r2, #1
 80068dc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068ec:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	621a      	str	r2, [r3, #32]
      break;
 800690a:	e017      	b.n	800693c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6818      	ldr	r0, [r3, #0]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	6899      	ldr	r1, [r3, #8]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	461a      	mov	r2, r3
 800691a:	f000 f871 	bl	8006a00 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800691e:	e00d      	b.n	800693c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6818      	ldr	r0, [r3, #0]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	6899      	ldr	r1, [r3, #8]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	461a      	mov	r2, r3
 800692e:	f000 f8d3 	bl	8006ad8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006932:	e003      	b.n	800693c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	75fb      	strb	r3, [r7, #23]
      break;
 8006938:	e000      	b.n	800693c <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800693a:	bf00      	nop
  }

  return status;
 800693c:	7dfb      	ldrb	r3, [r7, #23]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3718      	adds	r7, #24
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	f023 0201 	bic.w	r2, r3, #1
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4a20      	ldr	r2, [pc, #128]	; (80069f4 <TIM_TI1_SetConfig+0xac>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d00b      	beq.n	800698e <TIM_TI1_SetConfig+0x46>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800697c:	d007      	beq.n	800698e <TIM_TI1_SetConfig+0x46>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4a1d      	ldr	r2, [pc, #116]	; (80069f8 <TIM_TI1_SetConfig+0xb0>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d003      	beq.n	800698e <TIM_TI1_SetConfig+0x46>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	4a1c      	ldr	r2, [pc, #112]	; (80069fc <TIM_TI1_SetConfig+0xb4>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d101      	bne.n	8006992 <TIM_TI1_SetConfig+0x4a>
 800698e:	2301      	movs	r3, #1
 8006990:	e000      	b.n	8006994 <TIM_TI1_SetConfig+0x4c>
 8006992:	2300      	movs	r3, #0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d008      	beq.n	80069aa <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f023 0303 	bic.w	r3, r3, #3
 800699e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	e003      	b.n	80069b2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f043 0301 	orr.w	r3, r3, #1
 80069b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f023 030a 	bic.w	r3, r3, #10
 80069cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	f003 030a 	and.w	r3, r3, #10
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	621a      	str	r2, [r3, #32]
}
 80069e6:	bf00      	nop
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	40012c00 	.word	0x40012c00
 80069f8:	40000400 	.word	0x40000400
 80069fc:	40014000 	.word	0x40014000

08006a00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	f023 0201 	bic.w	r2, r3, #1
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	011b      	lsls	r3, r3, #4
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f023 030a 	bic.w	r3, r3, #10
 8006a3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	621a      	str	r2, [r3, #32]
}
 8006a52:	bf00      	nop
 8006a54:	371c      	adds	r7, #28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b087      	sub	sp, #28
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	60b9      	str	r1, [r7, #8]
 8006a68:	607a      	str	r2, [r7, #4]
 8006a6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	f023 0210 	bic.w	r2, r3, #16
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	021b      	lsls	r3, r3, #8
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	031b      	lsls	r3, r3, #12
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ab0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	011b      	lsls	r3, r3, #4
 8006ab6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	621a      	str	r2, [r3, #32]
}
 8006acc:	bf00      	nop
 8006ace:	371c      	adds	r7, #28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	f023 0210 	bic.w	r2, r3, #16
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	031b      	lsls	r3, r3, #12
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	011b      	lsls	r3, r3, #4
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	621a      	str	r2, [r3, #32]
}
 8006b2c:	bf00      	nop
 8006b2e:	371c      	adds	r7, #28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
 8006b44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f023 0303 	bic.w	r3, r3, #3
 8006b64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	011b      	lsls	r3, r3, #4
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006b88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	021b      	lsls	r3, r3, #8
 8006b8e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	621a      	str	r2, [r3, #32]
}
 8006ba4:	bf00      	nop
 8006ba6:	371c      	adds	r7, #28
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
 8006bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bdc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	021b      	lsls	r3, r3, #8
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	031b      	lsls	r3, r3, #12
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006c02:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	031b      	lsls	r3, r3, #12
 8006c08:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	621a      	str	r2, [r3, #32]
}
 8006c1e:	bf00      	nop
 8006c20:	371c      	adds	r7, #28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b085      	sub	sp, #20
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	f043 0307 	orr.w	r3, r3, #7
 8006c4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	609a      	str	r2, [r3, #8]
}
 8006c54:	bf00      	nop
 8006c56:	3714      	adds	r7, #20
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
 8006c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	021a      	lsls	r2, r3, #8
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	431a      	orrs	r2, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	609a      	str	r2, [r3, #8]
}
 8006c94:	bf00      	nop
 8006c96:	371c      	adds	r7, #28
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f003 031f 	and.w	r3, r3, #31
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6a1a      	ldr	r2, [r3, #32]
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	43db      	mvns	r3, r3
 8006cc2:	401a      	ands	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6a1a      	ldr	r2, [r3, #32]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f003 031f 	and.w	r3, r3, #31
 8006cd2:	6879      	ldr	r1, [r7, #4]
 8006cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd8:	431a      	orrs	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	621a      	str	r2, [r3, #32]
}
 8006cde:	bf00      	nop
 8006ce0:	371c      	adds	r7, #28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
	...

08006cec <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d109      	bne.n	8006d10 <HAL_TIMEx_PWMN_Start+0x24>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	bf14      	ite	ne
 8006d08:	2301      	movne	r3, #1
 8006d0a:	2300      	moveq	r3, #0
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	e022      	b.n	8006d56 <HAL_TIMEx_PWMN_Start+0x6a>
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	d109      	bne.n	8006d2a <HAL_TIMEx_PWMN_Start+0x3e>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	bf14      	ite	ne
 8006d22:	2301      	movne	r3, #1
 8006d24:	2300      	moveq	r3, #0
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	e015      	b.n	8006d56 <HAL_TIMEx_PWMN_Start+0x6a>
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b08      	cmp	r3, #8
 8006d2e:	d109      	bne.n	8006d44 <HAL_TIMEx_PWMN_Start+0x58>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	bf14      	ite	ne
 8006d3c:	2301      	movne	r3, #1
 8006d3e:	2300      	moveq	r3, #0
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	e008      	b.n	8006d56 <HAL_TIMEx_PWMN_Start+0x6a>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	bf14      	ite	ne
 8006d50:	2301      	movne	r3, #1
 8006d52:	2300      	moveq	r3, #0
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e05f      	b.n	8006e1e <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d104      	bne.n	8006d6e <HAL_TIMEx_PWMN_Start+0x82>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d6c:	e013      	b.n	8006d96 <HAL_TIMEx_PWMN_Start+0xaa>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b04      	cmp	r3, #4
 8006d72:	d104      	bne.n	8006d7e <HAL_TIMEx_PWMN_Start+0x92>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d7c:	e00b      	b.n	8006d96 <HAL_TIMEx_PWMN_Start+0xaa>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d104      	bne.n	8006d8e <HAL_TIMEx_PWMN_Start+0xa2>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d8c:	e003      	b.n	8006d96 <HAL_TIMEx_PWMN_Start+0xaa>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2202      	movs	r2, #2
 8006d92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2204      	movs	r2, #4
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 f930 	bl	8007004 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006db2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a1b      	ldr	r2, [pc, #108]	; (8006e28 <HAL_TIMEx_PWMN_Start+0x13c>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d00e      	beq.n	8006ddc <HAL_TIMEx_PWMN_Start+0xf0>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc6:	d009      	beq.n	8006ddc <HAL_TIMEx_PWMN_Start+0xf0>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a17      	ldr	r2, [pc, #92]	; (8006e2c <HAL_TIMEx_PWMN_Start+0x140>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d004      	beq.n	8006ddc <HAL_TIMEx_PWMN_Start+0xf0>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a16      	ldr	r2, [pc, #88]	; (8006e30 <HAL_TIMEx_PWMN_Start+0x144>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d115      	bne.n	8006e08 <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	4b14      	ldr	r3, [pc, #80]	; (8006e34 <HAL_TIMEx_PWMN_Start+0x148>)
 8006de4:	4013      	ands	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2b06      	cmp	r3, #6
 8006dec:	d015      	beq.n	8006e1a <HAL_TIMEx_PWMN_Start+0x12e>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df4:	d011      	beq.n	8006e1a <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f042 0201 	orr.w	r2, r2, #1
 8006e04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e06:	e008      	b.n	8006e1a <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0201 	orr.w	r2, r2, #1
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	e000      	b.n	8006e1c <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40012c00 	.word	0x40012c00
 8006e2c:	40000400 	.word	0x40000400
 8006e30:	40014000 	.word	0x40014000
 8006e34:	00010007 	.word	0x00010007

08006e38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d101      	bne.n	8006e50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	e054      	b.n	8006efa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a24      	ldr	r2, [pc, #144]	; (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d108      	bne.n	8006e8c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a17      	ldr	r2, [pc, #92]	; (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d00e      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb8:	d009      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a13      	ldr	r2, [pc, #76]	; (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d004      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a11      	ldr	r2, [pc, #68]	; (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d10c      	bne.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	40012c00 	.word	0x40012c00
 8006f0c:	40000400 	.word	0x40000400
 8006f10:	40014000 	.word	0x40014000

08006f14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d101      	bne.n	8006f30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	e060      	b.n	8006ff2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f96:	4313      	orrs	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	041b      	lsls	r3, r3, #16
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a14      	ldr	r2, [pc, #80]	; (8007000 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d115      	bne.n	8006fe0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	051b      	lsls	r3, r3, #20
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	69db      	ldr	r3, [r3, #28]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40012c00 	.word	0x40012c00

08007004 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f003 031f 	and.w	r3, r3, #31
 8007016:	2204      	movs	r2, #4
 8007018:	fa02 f303 	lsl.w	r3, r2, r3
 800701c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6a1a      	ldr	r2, [r3, #32]
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	43db      	mvns	r3, r3
 8007026:	401a      	ands	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6a1a      	ldr	r2, [r3, #32]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f003 031f 	and.w	r3, r3, #31
 8007036:	6879      	ldr	r1, [r7, #4]
 8007038:	fa01 f303 	lsl.w	r3, r1, r3
 800703c:	431a      	orrs	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	621a      	str	r2, [r3, #32]
}
 8007042:	bf00      	nop
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e040      	b.n	80070e2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007064:	2b00      	cmp	r3, #0
 8007066:	d106      	bne.n	8007076 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7fb f989 	bl	8002388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2224      	movs	r2, #36	; 0x24
 800707a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0201 	bic.w	r2, r2, #1
 800708a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f8c1 	bl	8007214 <UART_SetConfig>
 8007092:	4603      	mov	r3, r0
 8007094:	2b01      	cmp	r3, #1
 8007096:	d101      	bne.n	800709c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e022      	b.n	80070e2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f9eb 	bl	8007480 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f042 0201 	orr.w	r2, r2, #1
 80070d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fa72 	bl	80075c4 <UART_CheckIdleState>
 80070e0:	4603      	mov	r3, r0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b08a      	sub	sp, #40	; 0x28
 80070ee:	af02      	add	r7, sp, #8
 80070f0:	60f8      	str	r0, [r7, #12]
 80070f2:	60b9      	str	r1, [r7, #8]
 80070f4:	603b      	str	r3, [r7, #0]
 80070f6:	4613      	mov	r3, r2
 80070f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070fe:	2b20      	cmp	r3, #32
 8007100:	f040 8082 	bne.w	8007208 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d002      	beq.n	8007110 <HAL_UART_Transmit+0x26>
 800710a:	88fb      	ldrh	r3, [r7, #6]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e07a      	b.n	800720a <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800711a:	2b01      	cmp	r3, #1
 800711c:	d101      	bne.n	8007122 <HAL_UART_Transmit+0x38>
 800711e:	2302      	movs	r3, #2
 8007120:	e073      	b.n	800720a <HAL_UART_Transmit+0x120>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2221      	movs	r2, #33	; 0x21
 8007136:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007138:	f7fb fb04 	bl	8002744 <HAL_GetTick>
 800713c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	88fa      	ldrh	r2, [r7, #6]
 8007142:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	88fa      	ldrh	r2, [r7, #6]
 800714a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007156:	d108      	bne.n	800716a <HAL_UART_Transmit+0x80>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d104      	bne.n	800716a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007160:	2300      	movs	r3, #0
 8007162:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	61bb      	str	r3, [r7, #24]
 8007168:	e003      	b.n	8007172 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800716e:	2300      	movs	r3, #0
 8007170:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800717a:	e02d      	b.n	80071d8 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2200      	movs	r2, #0
 8007184:	2180      	movs	r1, #128	; 0x80
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 fa65 	bl	8007656 <UART_WaitOnFlagUntilTimeout>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e039      	b.n	800720a <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10b      	bne.n	80071b4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	881a      	ldrh	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071a8:	b292      	uxth	r2, r2
 80071aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	3302      	adds	r3, #2
 80071b0:	61bb      	str	r3, [r7, #24]
 80071b2:	e008      	b.n	80071c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	781a      	ldrb	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	b292      	uxth	r2, r2
 80071be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	3301      	adds	r3, #1
 80071c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	3b01      	subs	r3, #1
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071de:	b29b      	uxth	r3, r3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1cb      	bne.n	800717c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	2200      	movs	r2, #0
 80071ec:	2140      	movs	r1, #64	; 0x40
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f000 fa31 	bl	8007656 <UART_WaitOnFlagUntilTimeout>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e005      	b.n	800720a <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2220      	movs	r2, #32
 8007202:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	e000      	b.n	800720a <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007208:	2302      	movs	r3, #2
  }
}
 800720a:	4618      	mov	r0, r3
 800720c:	3720      	adds	r7, #32
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	431a      	orrs	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	4b8a      	ldr	r3, [pc, #552]	; (8007468 <UART_SetConfig+0x254>)
 8007240:	4013      	ands	r3, r2
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	6812      	ldr	r2, [r2, #0]
 8007246:	6979      	ldr	r1, [r7, #20]
 8007248:	430b      	orrs	r3, r1
 800724a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	4313      	orrs	r3, r2
 8007270:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	430a      	orrs	r2, r1
 8007284:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a78      	ldr	r2, [pc, #480]	; (800746c <UART_SetConfig+0x258>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d120      	bne.n	80072d2 <UART_SetConfig+0xbe>
 8007290:	4b77      	ldr	r3, [pc, #476]	; (8007470 <UART_SetConfig+0x25c>)
 8007292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007294:	f003 0303 	and.w	r3, r3, #3
 8007298:	2b03      	cmp	r3, #3
 800729a:	d817      	bhi.n	80072cc <UART_SetConfig+0xb8>
 800729c:	a201      	add	r2, pc, #4	; (adr r2, 80072a4 <UART_SetConfig+0x90>)
 800729e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a2:	bf00      	nop
 80072a4:	080072b5 	.word	0x080072b5
 80072a8:	080072c1 	.word	0x080072c1
 80072ac:	080072c7 	.word	0x080072c7
 80072b0:	080072bb 	.word	0x080072bb
 80072b4:	2300      	movs	r3, #0
 80072b6:	77fb      	strb	r3, [r7, #31]
 80072b8:	e01d      	b.n	80072f6 <UART_SetConfig+0xe2>
 80072ba:	2302      	movs	r3, #2
 80072bc:	77fb      	strb	r3, [r7, #31]
 80072be:	e01a      	b.n	80072f6 <UART_SetConfig+0xe2>
 80072c0:	2304      	movs	r3, #4
 80072c2:	77fb      	strb	r3, [r7, #31]
 80072c4:	e017      	b.n	80072f6 <UART_SetConfig+0xe2>
 80072c6:	2308      	movs	r3, #8
 80072c8:	77fb      	strb	r3, [r7, #31]
 80072ca:	e014      	b.n	80072f6 <UART_SetConfig+0xe2>
 80072cc:	2310      	movs	r3, #16
 80072ce:	77fb      	strb	r3, [r7, #31]
 80072d0:	e011      	b.n	80072f6 <UART_SetConfig+0xe2>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a67      	ldr	r2, [pc, #412]	; (8007474 <UART_SetConfig+0x260>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d102      	bne.n	80072e2 <UART_SetConfig+0xce>
 80072dc:	2300      	movs	r3, #0
 80072de:	77fb      	strb	r3, [r7, #31]
 80072e0:	e009      	b.n	80072f6 <UART_SetConfig+0xe2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a64      	ldr	r2, [pc, #400]	; (8007478 <UART_SetConfig+0x264>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d102      	bne.n	80072f2 <UART_SetConfig+0xde>
 80072ec:	2300      	movs	r3, #0
 80072ee:	77fb      	strb	r3, [r7, #31]
 80072f0:	e001      	b.n	80072f6 <UART_SetConfig+0xe2>
 80072f2:	2310      	movs	r3, #16
 80072f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072fe:	d15b      	bne.n	80073b8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8007300:	7ffb      	ldrb	r3, [r7, #31]
 8007302:	2b08      	cmp	r3, #8
 8007304:	d827      	bhi.n	8007356 <UART_SetConfig+0x142>
 8007306:	a201      	add	r2, pc, #4	; (adr r2, 800730c <UART_SetConfig+0xf8>)
 8007308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730c:	08007331 	.word	0x08007331
 8007310:	08007339 	.word	0x08007339
 8007314:	08007341 	.word	0x08007341
 8007318:	08007357 	.word	0x08007357
 800731c:	08007347 	.word	0x08007347
 8007320:	08007357 	.word	0x08007357
 8007324:	08007357 	.word	0x08007357
 8007328:	08007357 	.word	0x08007357
 800732c:	0800734f 	.word	0x0800734f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007330:	f7fd fd5c 	bl	8004dec <HAL_RCC_GetPCLK1Freq>
 8007334:	61b8      	str	r0, [r7, #24]
        break;
 8007336:	e013      	b.n	8007360 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007338:	f7fd fd7a 	bl	8004e30 <HAL_RCC_GetPCLK2Freq>
 800733c:	61b8      	str	r0, [r7, #24]
        break;
 800733e:	e00f      	b.n	8007360 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007340:	4b4e      	ldr	r3, [pc, #312]	; (800747c <UART_SetConfig+0x268>)
 8007342:	61bb      	str	r3, [r7, #24]
        break;
 8007344:	e00c      	b.n	8007360 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007346:	f7fd fcd9 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 800734a:	61b8      	str	r0, [r7, #24]
        break;
 800734c:	e008      	b.n	8007360 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800734e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007352:	61bb      	str	r3, [r7, #24]
        break;
 8007354:	e004      	b.n	8007360 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	77bb      	strb	r3, [r7, #30]
        break;
 800735e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d074      	beq.n	8007450 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	005a      	lsls	r2, r3, #1
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	085b      	lsrs	r3, r3, #1
 8007370:	441a      	add	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	fbb2 f3f3 	udiv	r3, r2, r3
 800737a:	b29b      	uxth	r3, r3
 800737c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	2b0f      	cmp	r3, #15
 8007382:	d916      	bls.n	80073b2 <UART_SetConfig+0x19e>
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800738a:	d212      	bcs.n	80073b2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	b29b      	uxth	r3, r3
 8007390:	f023 030f 	bic.w	r3, r3, #15
 8007394:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	085b      	lsrs	r3, r3, #1
 800739a:	b29b      	uxth	r3, r3
 800739c:	f003 0307 	and.w	r3, r3, #7
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	89fb      	ldrh	r3, [r7, #14]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	89fa      	ldrh	r2, [r7, #14]
 80073ae:	60da      	str	r2, [r3, #12]
 80073b0:	e04e      	b.n	8007450 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	77bb      	strb	r3, [r7, #30]
 80073b6:	e04b      	b.n	8007450 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073b8:	7ffb      	ldrb	r3, [r7, #31]
 80073ba:	2b08      	cmp	r3, #8
 80073bc:	d827      	bhi.n	800740e <UART_SetConfig+0x1fa>
 80073be:	a201      	add	r2, pc, #4	; (adr r2, 80073c4 <UART_SetConfig+0x1b0>)
 80073c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c4:	080073e9 	.word	0x080073e9
 80073c8:	080073f1 	.word	0x080073f1
 80073cc:	080073f9 	.word	0x080073f9
 80073d0:	0800740f 	.word	0x0800740f
 80073d4:	080073ff 	.word	0x080073ff
 80073d8:	0800740f 	.word	0x0800740f
 80073dc:	0800740f 	.word	0x0800740f
 80073e0:	0800740f 	.word	0x0800740f
 80073e4:	08007407 	.word	0x08007407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073e8:	f7fd fd00 	bl	8004dec <HAL_RCC_GetPCLK1Freq>
 80073ec:	61b8      	str	r0, [r7, #24]
        break;
 80073ee:	e013      	b.n	8007418 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073f0:	f7fd fd1e 	bl	8004e30 <HAL_RCC_GetPCLK2Freq>
 80073f4:	61b8      	str	r0, [r7, #24]
        break;
 80073f6:	e00f      	b.n	8007418 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073f8:	4b20      	ldr	r3, [pc, #128]	; (800747c <UART_SetConfig+0x268>)
 80073fa:	61bb      	str	r3, [r7, #24]
        break;
 80073fc:	e00c      	b.n	8007418 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073fe:	f7fd fc7d 	bl	8004cfc <HAL_RCC_GetSysClockFreq>
 8007402:	61b8      	str	r0, [r7, #24]
        break;
 8007404:	e008      	b.n	8007418 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800740a:	61bb      	str	r3, [r7, #24]
        break;
 800740c:	e004      	b.n	8007418 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	77bb      	strb	r3, [r7, #30]
        break;
 8007416:	bf00      	nop
    }

    if (pclk != 0U)
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d018      	beq.n	8007450 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	085a      	lsrs	r2, r3, #1
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	441a      	add	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007430:	b29b      	uxth	r3, r3
 8007432:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	2b0f      	cmp	r3, #15
 8007438:	d908      	bls.n	800744c <UART_SetConfig+0x238>
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007440:	d204      	bcs.n	800744c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	60da      	str	r2, [r3, #12]
 800744a:	e001      	b.n	8007450 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800745c:	7fbb      	ldrb	r3, [r7, #30]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3720      	adds	r7, #32
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	efff69f3 	.word	0xefff69f3
 800746c:	40013800 	.word	0x40013800
 8007470:	40021000 	.word	0x40021000
 8007474:	40004400 	.word	0x40004400
 8007478:	40004800 	.word	0x40004800
 800747c:	007a1200 	.word	0x007a1200

08007480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00a      	beq.n	80074aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ae:	f003 0302 	and.w	r3, r3, #2
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00a      	beq.n	80074ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	f003 0308 	and.w	r3, r3, #8
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	f003 0310 	and.w	r3, r3, #16
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	f003 0320 	and.w	r3, r3, #32
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755c:	2b00      	cmp	r3, #0
 800755e:	d01a      	beq.n	8007596 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800757e:	d10a      	bne.n	8007596 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	605a      	str	r2, [r3, #4]
  }
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af02      	add	r7, sp, #8
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075d4:	f7fb f8b6 	bl	8002744 <HAL_GetTick>
 80075d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0308 	and.w	r3, r3, #8
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d10e      	bne.n	8007606 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f82d 	bl	8007656 <UART_WaitOnFlagUntilTimeout>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e023      	b.n	800764e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	2b04      	cmp	r3, #4
 8007612:	d10e      	bne.n	8007632 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007614:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f817 	bl	8007656 <UART_WaitOnFlagUntilTimeout>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d001      	beq.n	8007632 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e00d      	b.n	800764e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2220      	movs	r2, #32
 8007636:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2220      	movs	r2, #32
 800763c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b09c      	sub	sp, #112	; 0x70
 800765a:	af00      	add	r7, sp, #0
 800765c:	60f8      	str	r0, [r7, #12]
 800765e:	60b9      	str	r1, [r7, #8]
 8007660:	603b      	str	r3, [r7, #0]
 8007662:	4613      	mov	r3, r2
 8007664:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007666:	e0a5      	b.n	80077b4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007668:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800766a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766e:	f000 80a1 	beq.w	80077b4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007672:	f7fb f867 	bl	8002744 <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800767e:	429a      	cmp	r2, r3
 8007680:	d302      	bcc.n	8007688 <UART_WaitOnFlagUntilTimeout+0x32>
 8007682:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007684:	2b00      	cmp	r3, #0
 8007686:	d13e      	bne.n	8007706 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007690:	e853 3f00 	ldrex	r3, [r3]
 8007694:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007698:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800769c:	667b      	str	r3, [r7, #100]	; 0x64
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	461a      	mov	r2, r3
 80076a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076a8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80076b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e6      	bne.n	8007688 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3308      	adds	r3, #8
 80076c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c4:	e853 3f00 	ldrex	r3, [r3]
 80076c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076cc:	f023 0301 	bic.w	r3, r3, #1
 80076d0:	663b      	str	r3, [r7, #96]	; 0x60
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3308      	adds	r3, #8
 80076d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80076da:	64ba      	str	r2, [r7, #72]	; 0x48
 80076dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076e2:	e841 2300 	strex	r3, r2, [r1]
 80076e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1e5      	bne.n	80076ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2220      	movs	r2, #32
 80076f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2220      	movs	r2, #32
 80076f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e067      	b.n	80077d6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0304 	and.w	r3, r3, #4
 8007710:	2b00      	cmp	r3, #0
 8007712:	d04f      	beq.n	80077b4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	69db      	ldr	r3, [r3, #28]
 800771a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800771e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007722:	d147      	bne.n	80077b4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800772c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007742:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800774c:	637b      	str	r3, [r7, #52]	; 0x34
 800774e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800775a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e6      	bne.n	800772e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3308      	adds	r3, #8
 8007766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	613b      	str	r3, [r7, #16]
   return(result);
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f023 0301 	bic.w	r3, r3, #1
 8007776:	66bb      	str	r3, [r7, #104]	; 0x68
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3308      	adds	r3, #8
 800777e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007780:	623a      	str	r2, [r7, #32]
 8007782:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	69f9      	ldr	r1, [r7, #28]
 8007786:	6a3a      	ldr	r2, [r7, #32]
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	61bb      	str	r3, [r7, #24]
   return(result);
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e5      	bne.n	8007760 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2220      	movs	r2, #32
 8007798:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2220      	movs	r2, #32
 800779e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2220      	movs	r2, #32
 80077a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e010      	b.n	80077d6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	69da      	ldr	r2, [r3, #28]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	4013      	ands	r3, r2
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	bf0c      	ite	eq
 80077c4:	2301      	moveq	r3, #1
 80077c6:	2300      	movne	r3, #0
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	461a      	mov	r2, r3
 80077cc:	79fb      	ldrb	r3, [r7, #7]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	f43f af4a 	beq.w	8007668 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3770      	adds	r7, #112	; 0x70
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <_ZdlPvj>:
 80077de:	f000 bc67 	b.w	80080b0 <_ZdlPv>

080077e2 <__cxa_end_cleanup>:
 80077e2:	b41e      	push	{r1, r2, r3, r4}
 80077e4:	f000 f89b 	bl	800791e <__gnu_end_cleanup>
 80077e8:	bc1e      	pop	{r1, r2, r3, r4}
 80077ea:	f7f9 fa71 	bl	8000cd0 <_Unwind_Resume>

080077ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80077ee:	7803      	ldrb	r3, [r0, #0]
 80077f0:	2b47      	cmp	r3, #71	; 0x47
 80077f2:	d117      	bne.n	8007824 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80077f4:	7843      	ldrb	r3, [r0, #1]
 80077f6:	2b4e      	cmp	r3, #78	; 0x4e
 80077f8:	d114      	bne.n	8007824 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80077fa:	7883      	ldrb	r3, [r0, #2]
 80077fc:	2b55      	cmp	r3, #85	; 0x55
 80077fe:	d111      	bne.n	8007824 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007800:	78c3      	ldrb	r3, [r0, #3]
 8007802:	2b43      	cmp	r3, #67	; 0x43
 8007804:	d10e      	bne.n	8007824 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007806:	7903      	ldrb	r3, [r0, #4]
 8007808:	2b43      	cmp	r3, #67	; 0x43
 800780a:	d10b      	bne.n	8007824 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800780c:	7943      	ldrb	r3, [r0, #5]
 800780e:	2b2b      	cmp	r3, #43	; 0x2b
 8007810:	d108      	bne.n	8007824 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007812:	7983      	ldrb	r3, [r0, #6]
 8007814:	2b2b      	cmp	r3, #43	; 0x2b
 8007816:	d105      	bne.n	8007824 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8007818:	79c0      	ldrb	r0, [r0, #7]
 800781a:	2801      	cmp	r0, #1
 800781c:	bf8c      	ite	hi
 800781e:	2000      	movhi	r0, #0
 8007820:	2001      	movls	r0, #1
 8007822:	4770      	bx	lr
 8007824:	2000      	movs	r0, #0
 8007826:	4770      	bx	lr

08007828 <__cxa_type_match>:
 8007828:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800782c:	461d      	mov	r5, r3
 800782e:	7803      	ldrb	r3, [r0, #0]
 8007830:	2b47      	cmp	r3, #71	; 0x47
 8007832:	460e      	mov	r6, r1
 8007834:	4602      	mov	r2, r0
 8007836:	79c1      	ldrb	r1, [r0, #7]
 8007838:	d113      	bne.n	8007862 <__cxa_type_match+0x3a>
 800783a:	7843      	ldrb	r3, [r0, #1]
 800783c:	2b4e      	cmp	r3, #78	; 0x4e
 800783e:	d110      	bne.n	8007862 <__cxa_type_match+0x3a>
 8007840:	7883      	ldrb	r3, [r0, #2]
 8007842:	2b55      	cmp	r3, #85	; 0x55
 8007844:	d10d      	bne.n	8007862 <__cxa_type_match+0x3a>
 8007846:	78c3      	ldrb	r3, [r0, #3]
 8007848:	2b43      	cmp	r3, #67	; 0x43
 800784a:	d10a      	bne.n	8007862 <__cxa_type_match+0x3a>
 800784c:	7903      	ldrb	r3, [r0, #4]
 800784e:	2b46      	cmp	r3, #70	; 0x46
 8007850:	d107      	bne.n	8007862 <__cxa_type_match+0x3a>
 8007852:	7943      	ldrb	r3, [r0, #5]
 8007854:	2b4f      	cmp	r3, #79	; 0x4f
 8007856:	d104      	bne.n	8007862 <__cxa_type_match+0x3a>
 8007858:	7983      	ldrb	r3, [r0, #6]
 800785a:	2b52      	cmp	r3, #82	; 0x52
 800785c:	d101      	bne.n	8007862 <__cxa_type_match+0x3a>
 800785e:	2900      	cmp	r1, #0
 8007860:	d031      	beq.n	80078c6 <__cxa_type_match+0x9e>
 8007862:	4610      	mov	r0, r2
 8007864:	f7ff ffc3 	bl	80077ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8007868:	f080 0001 	eor.w	r0, r0, #1
 800786c:	b2c4      	uxtb	r4, r0
 800786e:	2300      	movs	r3, #0
 8007870:	2000      	movs	r0, #0
 8007872:	9001      	str	r0, [sp, #4]
 8007874:	bb53      	cbnz	r3, 80078cc <__cxa_type_match+0xa4>
 8007876:	bb5c      	cbnz	r4, 80078d0 <__cxa_type_match+0xa8>
 8007878:	2901      	cmp	r1, #1
 800787a:	bf0a      	itet	eq
 800787c:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8007880:	f1a2 0320 	subne.w	r3, r2, #32
 8007884:	3b78      	subeq	r3, #120	; 0x78
 8007886:	2901      	cmp	r1, #1
 8007888:	bf08      	it	eq
 800788a:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 800788e:	681c      	ldr	r4, [r3, #0]
 8007890:	bf18      	it	ne
 8007892:	3258      	addne	r2, #88	; 0x58
 8007894:	9201      	str	r2, [sp, #4]
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	4620      	mov	r0, r4
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	4798      	blx	r3
 800789e:	b1c8      	cbz	r0, 80078d4 <__cxa_type_match+0xac>
 80078a0:	9b01      	ldr	r3, [sp, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	9301      	str	r3, [sp, #4]
 80078a6:	2702      	movs	r7, #2
 80078a8:	6833      	ldr	r3, [r6, #0]
 80078aa:	aa01      	add	r2, sp, #4
 80078ac:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80078b0:	4621      	mov	r1, r4
 80078b2:	2301      	movs	r3, #1
 80078b4:	4630      	mov	r0, r6
 80078b6:	47c0      	blx	r8
 80078b8:	b170      	cbz	r0, 80078d8 <__cxa_type_match+0xb0>
 80078ba:	9b01      	ldr	r3, [sp, #4]
 80078bc:	602b      	str	r3, [r5, #0]
 80078be:	4638      	mov	r0, r7
 80078c0:	b002      	add	sp, #8
 80078c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c6:	2301      	movs	r3, #1
 80078c8:	460c      	mov	r4, r1
 80078ca:	e7d1      	b.n	8007870 <__cxa_type_match+0x48>
 80078cc:	4c03      	ldr	r4, [pc, #12]	; (80078dc <__cxa_type_match+0xb4>)
 80078ce:	e7e2      	b.n	8007896 <__cxa_type_match+0x6e>
 80078d0:	4c03      	ldr	r4, [pc, #12]	; (80078e0 <__cxa_type_match+0xb8>)
 80078d2:	e7e0      	b.n	8007896 <__cxa_type_match+0x6e>
 80078d4:	2701      	movs	r7, #1
 80078d6:	e7e7      	b.n	80078a8 <__cxa_type_match+0x80>
 80078d8:	4607      	mov	r7, r0
 80078da:	e7f0      	b.n	80078be <__cxa_type_match+0x96>
 80078dc:	08008430 	.word	0x08008430
 80078e0:	08008438 	.word	0x08008438

080078e4 <__cxa_begin_cleanup>:
 80078e4:	b510      	push	{r4, lr}
 80078e6:	4604      	mov	r4, r0
 80078e8:	f000 f832 	bl	8007950 <__cxa_get_globals>
 80078ec:	4602      	mov	r2, r0
 80078ee:	4620      	mov	r0, r4
 80078f0:	f1a4 0120 	sub.w	r1, r4, #32
 80078f4:	f7ff ff7b 	bl	80077ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80078f8:	b160      	cbz	r0, 8007914 <__cxa_begin_cleanup+0x30>
 80078fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80078fe:	3301      	adds	r3, #1
 8007900:	2b01      	cmp	r3, #1
 8007902:	f844 3c04 	str.w	r3, [r4, #-4]
 8007906:	d103      	bne.n	8007910 <__cxa_begin_cleanup+0x2c>
 8007908:	6893      	ldr	r3, [r2, #8]
 800790a:	f844 3c08 	str.w	r3, [r4, #-8]
 800790e:	6091      	str	r1, [r2, #8]
 8007910:	2001      	movs	r0, #1
 8007912:	bd10      	pop	{r4, pc}
 8007914:	6893      	ldr	r3, [r2, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d0f9      	beq.n	800790e <__cxa_begin_cleanup+0x2a>
 800791a:	f000 faa5 	bl	8007e68 <_ZSt9terminatev>

0800791e <__gnu_end_cleanup>:
 800791e:	b510      	push	{r4, lr}
 8007920:	f000 f816 	bl	8007950 <__cxa_get_globals>
 8007924:	6882      	ldr	r2, [r0, #8]
 8007926:	4601      	mov	r1, r0
 8007928:	b90a      	cbnz	r2, 800792e <__gnu_end_cleanup+0x10>
 800792a:	f000 fa9d 	bl	8007e68 <_ZSt9terminatev>
 800792e:	f102 0420 	add.w	r4, r2, #32
 8007932:	4620      	mov	r0, r4
 8007934:	f7ff ff5b 	bl	80077ee <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8007938:	b140      	cbz	r0, 800794c <__gnu_end_cleanup+0x2e>
 800793a:	69d3      	ldr	r3, [r2, #28]
 800793c:	3b01      	subs	r3, #1
 800793e:	61d3      	str	r3, [r2, #28]
 8007940:	b913      	cbnz	r3, 8007948 <__gnu_end_cleanup+0x2a>
 8007942:	6990      	ldr	r0, [r2, #24]
 8007944:	6088      	str	r0, [r1, #8]
 8007946:	6193      	str	r3, [r2, #24]
 8007948:	4620      	mov	r0, r4
 800794a:	bd10      	pop	{r4, pc}
 800794c:	6088      	str	r0, [r1, #8]
 800794e:	e7fb      	b.n	8007948 <__gnu_end_cleanup+0x2a>

08007950 <__cxa_get_globals>:
 8007950:	4800      	ldr	r0, [pc, #0]	; (8007954 <__cxa_get_globals+0x4>)
 8007952:	4770      	bx	lr
 8007954:	2000026c 	.word	0x2000026c

08007958 <_ZL12read_uleb128PKhPm>:
 8007958:	b530      	push	{r4, r5, lr}
 800795a:	2300      	movs	r3, #0
 800795c:	461a      	mov	r2, r3
 800795e:	f810 5b01 	ldrb.w	r5, [r0], #1
 8007962:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 8007966:	4094      	lsls	r4, r2
 8007968:	4323      	orrs	r3, r4
 800796a:	062c      	lsls	r4, r5, #24
 800796c:	f102 0207 	add.w	r2, r2, #7
 8007970:	d4f5      	bmi.n	800795e <_ZL12read_uleb128PKhPm+0x6>
 8007972:	600b      	str	r3, [r1, #0]
 8007974:	bd30      	pop	{r4, r5, pc}

08007976 <_ZL12read_sleb128PKhPl>:
 8007976:	b530      	push	{r4, r5, lr}
 8007978:	2300      	movs	r3, #0
 800797a:	461a      	mov	r2, r3
 800797c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8007980:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8007984:	4095      	lsls	r5, r2
 8007986:	432b      	orrs	r3, r5
 8007988:	0625      	lsls	r5, r4, #24
 800798a:	f102 0207 	add.w	r2, r2, #7
 800798e:	d4f5      	bmi.n	800797c <_ZL12read_sleb128PKhPl+0x6>
 8007990:	2a1f      	cmp	r2, #31
 8007992:	d806      	bhi.n	80079a2 <_ZL12read_sleb128PKhPl+0x2c>
 8007994:	0664      	lsls	r4, r4, #25
 8007996:	bf42      	ittt	mi
 8007998:	f04f 34ff 	movmi.w	r4, #4294967295
 800799c:	fa04 f202 	lslmi.w	r2, r4, r2
 80079a0:	4313      	orrmi	r3, r2
 80079a2:	600b      	str	r3, [r1, #0]
 80079a4:	bd30      	pop	{r4, r5, pc}

080079a6 <_ZL28read_encoded_value_with_basehjPKhPj>:
 80079a6:	2850      	cmp	r0, #80	; 0x50
 80079a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80079ac:	4606      	mov	r6, r0
 80079ae:	4688      	mov	r8, r1
 80079b0:	4615      	mov	r5, r2
 80079b2:	461f      	mov	r7, r3
 80079b4:	d108      	bne.n	80079c8 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 80079b6:	3203      	adds	r2, #3
 80079b8:	f022 0003 	bic.w	r0, r2, #3
 80079bc:	f850 4b04 	ldr.w	r4, [r0], #4
 80079c0:	603c      	str	r4, [r7, #0]
 80079c2:	b002      	add	sp, #8
 80079c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c8:	f000 030f 	and.w	r3, r0, #15
 80079cc:	2b0c      	cmp	r3, #12
 80079ce:	d82e      	bhi.n	8007a2e <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 80079d0:	e8df f003 	tbb	[pc, r3]
 80079d4:	251d0725 	.word	0x251d0725
 80079d8:	2d2d2d29 	.word	0x2d2d2d29
 80079dc:	2521182d 	.word	0x2521182d
 80079e0:	29          	.byte	0x29
 80079e1:	00          	.byte	0x00
 80079e2:	a901      	add	r1, sp, #4
 80079e4:	4628      	mov	r0, r5
 80079e6:	f7ff ffb7 	bl	8007958 <_ZL12read_uleb128PKhPm>
 80079ea:	9c01      	ldr	r4, [sp, #4]
 80079ec:	2c00      	cmp	r4, #0
 80079ee:	d0e7      	beq.n	80079c0 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 80079f0:	f006 0370 	and.w	r3, r6, #112	; 0x70
 80079f4:	2b10      	cmp	r3, #16
 80079f6:	bf08      	it	eq
 80079f8:	46a8      	moveq	r8, r5
 80079fa:	4444      	add	r4, r8
 80079fc:	0633      	lsls	r3, r6, #24
 80079fe:	bf48      	it	mi
 8007a00:	6824      	ldrmi	r4, [r4, #0]
 8007a02:	e7dd      	b.n	80079c0 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8007a04:	a901      	add	r1, sp, #4
 8007a06:	4628      	mov	r0, r5
 8007a08:	f7ff ffb5 	bl	8007976 <_ZL12read_sleb128PKhPl>
 8007a0c:	e7ed      	b.n	80079ea <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f830 4b02 	ldrh.w	r4, [r0], #2
 8007a14:	e7ea      	b.n	80079ec <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8007a16:	4628      	mov	r0, r5
 8007a18:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8007a1c:	e7e6      	b.n	80079ec <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f850 4b04 	ldr.w	r4, [r0], #4
 8007a24:	e7e2      	b.n	80079ec <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8007a26:	4628      	mov	r0, r5
 8007a28:	f850 4b08 	ldr.w	r4, [r0], #8
 8007a2c:	e7de      	b.n	80079ec <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8007a2e:	f000 fbc7 	bl	80081c0 <abort>

08007a32 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8007a32:	b508      	push	{r3, lr}
 8007a34:	4603      	mov	r3, r0
 8007a36:	2bff      	cmp	r3, #255	; 0xff
 8007a38:	4608      	mov	r0, r1
 8007a3a:	d010      	beq.n	8007a5e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8007a3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007a40:	2a30      	cmp	r2, #48	; 0x30
 8007a42:	d012      	beq.n	8007a6a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 8007a44:	d807      	bhi.n	8007a56 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 8007a46:	2a20      	cmp	r2, #32
 8007a48:	d00b      	beq.n	8007a62 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 8007a4a:	d802      	bhi.n	8007a52 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8007a4c:	f013 0f60 	tst.w	r3, #96	; 0x60
 8007a50:	d005      	beq.n	8007a5e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8007a52:	f000 fbb5 	bl	80081c0 <abort>
 8007a56:	2a40      	cmp	r2, #64	; 0x40
 8007a58:	d00b      	beq.n	8007a72 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 8007a5a:	2a50      	cmp	r2, #80	; 0x50
 8007a5c:	d1f9      	bne.n	8007a52 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8007a5e:	2000      	movs	r0, #0
 8007a60:	bd08      	pop	{r3, pc}
 8007a62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007a66:	f000 bc8e 	b.w	8008386 <_Unwind_GetTextRelBase>
 8007a6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007a6e:	f000 bc87 	b.w	8008380 <_Unwind_GetDataRelBase>
 8007a72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007a76:	f7f9 bb0b 	b.w	8001090 <_Unwind_GetRegionStart>

08007a7a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8007a7a:	b513      	push	{r0, r1, r4, lr}
 8007a7c:	460c      	mov	r4, r1
 8007a7e:	4601      	mov	r1, r0
 8007a80:	4620      	mov	r0, r4
 8007a82:	e9cd 3200 	strd	r3, r2, [sp]
 8007a86:	f7ff ffd4 	bl	8007a32 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8007a8a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007a8e:	4601      	mov	r1, r0
 8007a90:	4620      	mov	r0, r4
 8007a92:	b002      	add	sp, #8
 8007a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a98:	f7ff bf85 	b.w	80079a6 <_ZL28read_encoded_value_with_basehjPKhPj>

08007a9c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8007a9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	4615      	mov	r5, r2
 8007aa2:	4606      	mov	r6, r0
 8007aa4:	b328      	cbz	r0, 8007af2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 8007aa6:	f7f9 faf3 	bl	8001090 <_Unwind_GetRegionStart>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	4620      	mov	r0, r4
 8007aae:	602b      	str	r3, [r5, #0]
 8007ab0:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007ab4:	29ff      	cmp	r1, #255	; 0xff
 8007ab6:	d01e      	beq.n	8007af6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	1d2b      	adds	r3, r5, #4
 8007abc:	4630      	mov	r0, r6
 8007abe:	f7ff ffdc 	bl	8007a7a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8007ac2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007ac6:	752b      	strb	r3, [r5, #20]
 8007ac8:	2bff      	cmp	r3, #255	; 0xff
 8007aca:	d016      	beq.n	8007afa <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 8007acc:	2310      	movs	r3, #16
 8007ace:	752b      	strb	r3, [r5, #20]
 8007ad0:	a901      	add	r1, sp, #4
 8007ad2:	f7ff ff41 	bl	8007958 <_ZL12read_uleb128PKhPm>
 8007ad6:	9b01      	ldr	r3, [sp, #4]
 8007ad8:	4403      	add	r3, r0
 8007ada:	60eb      	str	r3, [r5, #12]
 8007adc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007ae0:	756b      	strb	r3, [r5, #21]
 8007ae2:	a901      	add	r1, sp, #4
 8007ae4:	f7ff ff38 	bl	8007958 <_ZL12read_uleb128PKhPm>
 8007ae8:	9b01      	ldr	r3, [sp, #4]
 8007aea:	4403      	add	r3, r0
 8007aec:	612b      	str	r3, [r5, #16]
 8007aee:	b002      	add	sp, #8
 8007af0:	bd70      	pop	{r4, r5, r6, pc}
 8007af2:	4603      	mov	r3, r0
 8007af4:	e7da      	b.n	8007aac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 8007af6:	606b      	str	r3, [r5, #4]
 8007af8:	e7e3      	b.n	8007ac2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 8007afa:	2300      	movs	r3, #0
 8007afc:	e7ed      	b.n	8007ada <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

08007afe <_Unwind_GetGR>:
 8007afe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b00:	ab03      	add	r3, sp, #12
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	2300      	movs	r3, #0
 8007b06:	460a      	mov	r2, r1
 8007b08:	4619      	mov	r1, r3
 8007b0a:	f7f8 fd2b 	bl	8000564 <_Unwind_VRS_Get>
 8007b0e:	9803      	ldr	r0, [sp, #12]
 8007b10:	b005      	add	sp, #20
 8007b12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007b18 <__gxx_personality_v0>:
 8007b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b1c:	b091      	sub	sp, #68	; 0x44
 8007b1e:	2300      	movs	r3, #0
 8007b20:	9305      	str	r3, [sp, #20]
 8007b22:	f000 0303 	and.w	r3, r0, #3
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	4606      	mov	r6, r0
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	4617      	mov	r7, r2
 8007b2e:	d00e      	beq.n	8007b4e <__gxx_personality_v0+0x36>
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d003      	beq.n	8007b3c <__gxx_personality_v0+0x24>
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d13b      	bne.n	8007bb0 <__gxx_personality_v0+0x98>
 8007b38:	0701      	lsls	r1, r0, #28
 8007b3a:	d53b      	bpl.n	8007bb4 <__gxx_personality_v0+0x9c>
 8007b3c:	4639      	mov	r1, r7
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f7f9 fa90 	bl	8001064 <__gnu_unwind_frame>
 8007b44:	b390      	cbz	r0, 8007bac <__gxx_personality_v0+0x94>
 8007b46:	2009      	movs	r0, #9
 8007b48:	b011      	add	sp, #68	; 0x44
 8007b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b4e:	0702      	lsls	r2, r0, #28
 8007b50:	d406      	bmi.n	8007b60 <__gxx_personality_v0+0x48>
 8007b52:	6a0d      	ldr	r5, [r1, #32]
 8007b54:	4638      	mov	r0, r7
 8007b56:	210d      	movs	r1, #13
 8007b58:	f7ff ffd1 	bl	8007afe <_Unwind_GetGR>
 8007b5c:	4285      	cmp	r5, r0
 8007b5e:	d02b      	beq.n	8007bb8 <__gxx_personality_v0+0xa0>
 8007b60:	2002      	movs	r0, #2
 8007b62:	2300      	movs	r3, #0
 8007b64:	f006 0608 	and.w	r6, r6, #8
 8007b68:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8007b6c:	4306      	orrs	r6, r0
 8007b6e:	f8cd a000 	str.w	sl, [sp]
 8007b72:	220c      	movs	r2, #12
 8007b74:	4619      	mov	r1, r3
 8007b76:	4638      	mov	r0, r7
 8007b78:	940a      	str	r4, [sp, #40]	; 0x28
 8007b7a:	f7f8 fd19 	bl	80005b0 <_Unwind_VRS_Set>
 8007b7e:	2e06      	cmp	r6, #6
 8007b80:	d11c      	bne.n	8007bbc <__gxx_personality_v0+0xa4>
 8007b82:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8007b86:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 8007b8a:	f1b8 0f00 	cmp.w	r8, #0
 8007b8e:	bf0c      	ite	eq
 8007b90:	f04f 0b01 	moveq.w	fp, #1
 8007b94:	f04f 0b03 	movne.w	fp, #3
 8007b98:	f016 0608 	ands.w	r6, r6, #8
 8007b9c:	f000 8107 	beq.w	8007dae <__gxx_personality_v0+0x296>
 8007ba0:	f1bb 0f01 	cmp.w	fp, #1
 8007ba4:	f040 80ff 	bne.w	8007da6 <__gxx_personality_v0+0x28e>
 8007ba8:	f000 f95e 	bl	8007e68 <_ZSt9terminatev>
 8007bac:	2008      	movs	r0, #8
 8007bae:	e7cb      	b.n	8007b48 <__gxx_personality_v0+0x30>
 8007bb0:	f000 fb06 	bl	80081c0 <abort>
 8007bb4:	2001      	movs	r0, #1
 8007bb6:	e7d4      	b.n	8007b62 <__gxx_personality_v0+0x4a>
 8007bb8:	2006      	movs	r0, #6
 8007bba:	e7d2      	b.n	8007b62 <__gxx_personality_v0+0x4a>
 8007bbc:	4638      	mov	r0, r7
 8007bbe:	f7f9 fa6d 	bl	800109c <_Unwind_GetLanguageSpecificData>
 8007bc2:	4681      	mov	r9, r0
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d0b9      	beq.n	8007b3c <__gxx_personality_v0+0x24>
 8007bc8:	4652      	mov	r2, sl
 8007bca:	4601      	mov	r1, r0
 8007bcc:	4638      	mov	r0, r7
 8007bce:	f7ff ff65 	bl	8007a9c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	4605      	mov	r5, r0
 8007bd6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8007bda:	f7ff ff2a 	bl	8007a32 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8007bde:	210f      	movs	r1, #15
 8007be0:	900c      	str	r0, [sp, #48]	; 0x30
 8007be2:	4638      	mov	r0, r7
 8007be4:	f7ff ff8b 	bl	8007afe <_Unwind_GetGR>
 8007be8:	f020 0801 	bic.w	r8, r0, #1
 8007bec:	f108 38ff 	add.w	r8, r8, #4294967295
 8007bf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bf2:	42ab      	cmp	r3, r5
 8007bf4:	f240 80bf 	bls.w	8007d76 <__gxx_personality_v0+0x25e>
 8007bf8:	462a      	mov	r2, r5
 8007bfa:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8007bfe:	ab06      	add	r3, sp, #24
 8007c00:	2000      	movs	r0, #0
 8007c02:	f7ff ff3a 	bl	8007a7a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8007c06:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	ab07      	add	r3, sp, #28
 8007c0e:	2000      	movs	r0, #0
 8007c10:	f7ff ff33 	bl	8007a7a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8007c14:	ab08      	add	r3, sp, #32
 8007c16:	4602      	mov	r2, r0
 8007c18:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	f7ff ff2c 	bl	8007a7a <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8007c22:	a909      	add	r1, sp, #36	; 0x24
 8007c24:	f7ff fe98 	bl	8007958 <_ZL12read_uleb128PKhPm>
 8007c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c2a:	9a06      	ldr	r2, [sp, #24]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	4543      	cmp	r3, r8
 8007c30:	4605      	mov	r5, r0
 8007c32:	d901      	bls.n	8007c38 <__gxx_personality_v0+0x120>
 8007c34:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007c36:	e7db      	b.n	8007bf0 <__gxx_personality_v0+0xd8>
 8007c38:	9a07      	ldr	r2, [sp, #28]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	4543      	cmp	r3, r8
 8007c3e:	d9d7      	bls.n	8007bf0 <__gxx_personality_v0+0xd8>
 8007c40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c44:	f1b8 0f00 	cmp.w	r8, #0
 8007c48:	d001      	beq.n	8007c4e <__gxx_personality_v0+0x136>
 8007c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c4c:	4498      	add	r8, r3
 8007c4e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007c50:	b115      	cbz	r5, 8007c58 <__gxx_personality_v0+0x140>
 8007c52:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007c54:	3d01      	subs	r5, #1
 8007c56:	4405      	add	r5, r0
 8007c58:	f1b8 0f00 	cmp.w	r8, #0
 8007c5c:	f43f af6e 	beq.w	8007b3c <__gxx_personality_v0+0x24>
 8007c60:	2d00      	cmp	r5, #0
 8007c62:	f000 80f2 	beq.w	8007e4a <__gxx_personality_v0+0x332>
 8007c66:	f016 0308 	ands.w	r3, r6, #8
 8007c6a:	9302      	str	r3, [sp, #8]
 8007c6c:	d034      	beq.n	8007cd8 <__gxx_personality_v0+0x1c0>
 8007c6e:	2347      	movs	r3, #71	; 0x47
 8007c70:	7023      	strb	r3, [r4, #0]
 8007c72:	234e      	movs	r3, #78	; 0x4e
 8007c74:	7063      	strb	r3, [r4, #1]
 8007c76:	2355      	movs	r3, #85	; 0x55
 8007c78:	70a3      	strb	r3, [r4, #2]
 8007c7a:	2343      	movs	r3, #67	; 0x43
 8007c7c:	70e3      	strb	r3, [r4, #3]
 8007c7e:	2346      	movs	r3, #70	; 0x46
 8007c80:	7123      	strb	r3, [r4, #4]
 8007c82:	234f      	movs	r3, #79	; 0x4f
 8007c84:	7163      	strb	r3, [r4, #5]
 8007c86:	2352      	movs	r3, #82	; 0x52
 8007c88:	71a3      	strb	r3, [r4, #6]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	71e3      	strb	r3, [r4, #7]
 8007c8e:	f04f 0b00 	mov.w	fp, #0
 8007c92:	a907      	add	r1, sp, #28
 8007c94:	4628      	mov	r0, r5
 8007c96:	f7ff fe6e 	bl	8007976 <_ZL12read_sleb128PKhPl>
 8007c9a:	a908      	add	r1, sp, #32
 8007c9c:	9003      	str	r0, [sp, #12]
 8007c9e:	f7ff fe6a 	bl	8007976 <_ZL12read_sleb128PKhPl>
 8007ca2:	9907      	ldr	r1, [sp, #28]
 8007ca4:	2900      	cmp	r1, #0
 8007ca6:	d063      	beq.n	8007d70 <__gxx_personality_v0+0x258>
 8007ca8:	dd3a      	ble.n	8007d20 <__gxx_personality_v0+0x208>
 8007caa:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8007cae:	28ff      	cmp	r0, #255	; 0xff
 8007cb0:	d032      	beq.n	8007d18 <__gxx_personality_v0+0x200>
 8007cb2:	f000 0307 	and.w	r3, r0, #7
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	f63f af7a 	bhi.w	8007bb0 <__gxx_personality_v0+0x98>
 8007cbc:	a201      	add	r2, pc, #4	; (adr r2, 8007cc4 <__gxx_personality_v0+0x1ac>)
 8007cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc2:	bf00      	nop
 8007cc4:	08007d1d 	.word	0x08007d1d
 8007cc8:	08007bb1 	.word	0x08007bb1
 8007ccc:	08007ceb 	.word	0x08007ceb
 8007cd0:	08007d1d 	.word	0x08007d1d
 8007cd4:	08007d15 	.word	0x08007d15
 8007cd8:	79e3      	ldrb	r3, [r4, #7]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	bf0c      	ite	eq
 8007cde:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8007ce2:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8007ce6:	9305      	str	r3, [sp, #20]
 8007ce8:	e7d1      	b.n	8007c8e <__gxx_personality_v0+0x176>
 8007cea:	2502      	movs	r5, #2
 8007cec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cee:	ab09      	add	r3, sp, #36	; 0x24
 8007cf0:	fb05 2211 	mls	r2, r5, r1, r2
 8007cf4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007cf6:	f7ff fe56 	bl	80079a6 <_ZL28read_encoded_value_with_basehjPKhPj>
 8007cfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cfc:	b131      	cbz	r1, 8007d0c <__gxx_personality_v0+0x1f4>
 8007cfe:	b35c      	cbz	r4, 8007d58 <__gxx_personality_v0+0x240>
 8007d00:	ab05      	add	r3, sp, #20
 8007d02:	2200      	movs	r2, #0
 8007d04:	4620      	mov	r0, r4
 8007d06:	f7ff fd8f 	bl	8007828 <__cxa_type_match>
 8007d0a:	b328      	cbz	r0, 8007d58 <__gxx_personality_v0+0x240>
 8007d0c:	9d07      	ldr	r5, [sp, #28]
 8007d0e:	f04f 0b03 	mov.w	fp, #3
 8007d12:	e034      	b.n	8007d7e <__gxx_personality_v0+0x266>
 8007d14:	2508      	movs	r5, #8
 8007d16:	e7e9      	b.n	8007cec <__gxx_personality_v0+0x1d4>
 8007d18:	2500      	movs	r5, #0
 8007d1a:	e7e7      	b.n	8007cec <__gxx_personality_v0+0x1d4>
 8007d1c:	2504      	movs	r5, #4
 8007d1e:	e7e5      	b.n	8007cec <__gxx_personality_v0+0x1d4>
 8007d20:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 8007d24:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 8007d28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d2a:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 8007d2e:	313f      	adds	r1, #63	; 0x3f
 8007d30:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8007d34:	b1bc      	cbz	r4, 8007d66 <__gxx_personality_v0+0x24e>
 8007d36:	9a02      	ldr	r2, [sp, #8]
 8007d38:	b9aa      	cbnz	r2, 8007d66 <__gxx_personality_v0+0x24e>
 8007d3a:	9b05      	ldr	r3, [sp, #20]
 8007d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d3e:	3d04      	subs	r5, #4
 8007d40:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8007d44:	2900      	cmp	r1, #0
 8007d46:	d0e1      	beq.n	8007d0c <__gxx_personality_v0+0x1f4>
 8007d48:	ab09      	add	r3, sp, #36	; 0x24
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	4429      	add	r1, r5
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f7ff fd6a 	bl	8007828 <__cxa_type_match>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	d0f3      	beq.n	8007d40 <__gxx_personality_v0+0x228>
 8007d58:	9d08      	ldr	r5, [sp, #32]
 8007d5a:	2d00      	cmp	r5, #0
 8007d5c:	d071      	beq.n	8007e42 <__gxx_personality_v0+0x32a>
 8007d5e:	9b03      	ldr	r3, [sp, #12]
 8007d60:	442b      	add	r3, r5
 8007d62:	461d      	mov	r5, r3
 8007d64:	e795      	b.n	8007c92 <__gxx_personality_v0+0x17a>
 8007d66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1f4      	bne.n	8007d58 <__gxx_personality_v0+0x240>
 8007d6e:	e7cd      	b.n	8007d0c <__gxx_personality_v0+0x1f4>
 8007d70:	f04f 0b01 	mov.w	fp, #1
 8007d74:	e7f0      	b.n	8007d58 <__gxx_personality_v0+0x240>
 8007d76:	2500      	movs	r5, #0
 8007d78:	46a8      	mov	r8, r5
 8007d7a:	f04f 0b01 	mov.w	fp, #1
 8007d7e:	07f3      	lsls	r3, r6, #31
 8007d80:	f57f af0a 	bpl.w	8007b98 <__gxx_personality_v0+0x80>
 8007d84:	f1bb 0f02 	cmp.w	fp, #2
 8007d88:	f43f aed8 	beq.w	8007b3c <__gxx_personality_v0+0x24>
 8007d8c:	210d      	movs	r1, #13
 8007d8e:	4638      	mov	r0, r7
 8007d90:	9e05      	ldr	r6, [sp, #20]
 8007d92:	f7ff feb4 	bl	8007afe <_Unwind_GetGR>
 8007d96:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 8007d9a:	e9c4 0608 	strd	r0, r6, [r4, #32]
 8007d9e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8007da2:	2006      	movs	r0, #6
 8007da4:	e6d0      	b.n	8007b48 <__gxx_personality_v0+0x30>
 8007da6:	2d00      	cmp	r5, #0
 8007da8:	da22      	bge.n	8007df0 <__gxx_personality_v0+0x2d8>
 8007daa:	f000 f86f 	bl	8007e8c <_ZSt10unexpectedv>
 8007dae:	f1bb 0f01 	cmp.w	fp, #1
 8007db2:	d102      	bne.n	8007dba <__gxx_personality_v0+0x2a2>
 8007db4:	4620      	mov	r0, r4
 8007db6:	f000 f99a 	bl	80080ee <__cxa_call_terminate>
 8007dba:	2d00      	cmp	r5, #0
 8007dbc:	da18      	bge.n	8007df0 <__gxx_personality_v0+0x2d8>
 8007dbe:	4652      	mov	r2, sl
 8007dc0:	4649      	mov	r1, r9
 8007dc2:	4638      	mov	r0, r7
 8007dc4:	f7ff fe6a 	bl	8007a9c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8007dc8:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8007dcc:	4639      	mov	r1, r7
 8007dce:	f7ff fe30 	bl	8007a32 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8007dd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dd4:	900c      	str	r0, [sp, #48]	; 0x30
 8007dd6:	43eb      	mvns	r3, r5
 8007dd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ddc:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 8007de0:	b10a      	cbz	r2, 8007de6 <__gxx_personality_v0+0x2ce>
 8007de2:	3601      	adds	r6, #1
 8007de4:	e7fa      	b.n	8007ddc <__gxx_personality_v0+0x2c4>
 8007de6:	2204      	movs	r2, #4
 8007de8:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 8007dec:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8007df0:	2300      	movs	r3, #0
 8007df2:	ae09      	add	r6, sp, #36	; 0x24
 8007df4:	461a      	mov	r2, r3
 8007df6:	4619      	mov	r1, r3
 8007df8:	9600      	str	r6, [sp, #0]
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	9409      	str	r4, [sp, #36]	; 0x24
 8007dfe:	f7f8 fbd7 	bl	80005b0 <_Unwind_VRS_Set>
 8007e02:	2300      	movs	r3, #0
 8007e04:	4619      	mov	r1, r3
 8007e06:	2201      	movs	r2, #1
 8007e08:	9600      	str	r6, [sp, #0]
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	9509      	str	r5, [sp, #36]	; 0x24
 8007e0e:	f7f8 fbcf 	bl	80005b0 <_Unwind_VRS_Set>
 8007e12:	210f      	movs	r1, #15
 8007e14:	4638      	mov	r0, r7
 8007e16:	f7ff fe72 	bl	8007afe <_Unwind_GetGR>
 8007e1a:	f000 0001 	and.w	r0, r0, #1
 8007e1e:	ea40 0008 	orr.w	r0, r0, r8
 8007e22:	2300      	movs	r3, #0
 8007e24:	9009      	str	r0, [sp, #36]	; 0x24
 8007e26:	9600      	str	r6, [sp, #0]
 8007e28:	220f      	movs	r2, #15
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	4638      	mov	r0, r7
 8007e2e:	f7f8 fbbf 	bl	80005b0 <_Unwind_VRS_Set>
 8007e32:	f1bb 0f02 	cmp.w	fp, #2
 8007e36:	d102      	bne.n	8007e3e <__gxx_personality_v0+0x326>
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f7ff fd53 	bl	80078e4 <__cxa_begin_cleanup>
 8007e3e:	2007      	movs	r0, #7
 8007e40:	e682      	b.n	8007b48 <__gxx_personality_v0+0x30>
 8007e42:	f1bb 0f00 	cmp.w	fp, #0
 8007e46:	f43f ae79 	beq.w	8007b3c <__gxx_personality_v0+0x24>
 8007e4a:	f04f 0b02 	mov.w	fp, #2
 8007e4e:	e796      	b.n	8007d7e <__gxx_personality_v0+0x266>

08007e50 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007e50:	b508      	push	{r3, lr}
 8007e52:	4780      	blx	r0
 8007e54:	f000 f9b4 	bl	80081c0 <abort>

08007e58 <_ZSt13get_terminatev>:
 8007e58:	4b02      	ldr	r3, [pc, #8]	; (8007e64 <_ZSt13get_terminatev+0xc>)
 8007e5a:	6818      	ldr	r0, [r3, #0]
 8007e5c:	f3bf 8f5b 	dmb	ish
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	20000010 	.word	0x20000010

08007e68 <_ZSt9terminatev>:
 8007e68:	b508      	push	{r3, lr}
 8007e6a:	f7ff fff5 	bl	8007e58 <_ZSt13get_terminatev>
 8007e6e:	f7ff ffef 	bl	8007e50 <_ZN10__cxxabiv111__terminateEPFvvE>

08007e72 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8007e72:	b508      	push	{r3, lr}
 8007e74:	4780      	blx	r0
 8007e76:	f7ff fff7 	bl	8007e68 <_ZSt9terminatev>
	...

08007e7c <_ZSt14get_unexpectedv>:
 8007e7c:	4b02      	ldr	r3, [pc, #8]	; (8007e88 <_ZSt14get_unexpectedv+0xc>)
 8007e7e:	6818      	ldr	r0, [r3, #0]
 8007e80:	f3bf 8f5b 	dmb	ish
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	2000000c 	.word	0x2000000c

08007e8c <_ZSt10unexpectedv>:
 8007e8c:	b508      	push	{r3, lr}
 8007e8e:	f7ff fff5 	bl	8007e7c <_ZSt14get_unexpectedv>
 8007e92:	f7ff ffee 	bl	8007e72 <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

08007e98 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8007e98:	b510      	push	{r4, lr}
 8007e9a:	4b03      	ldr	r3, [pc, #12]	; (8007ea8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8007e9c:	6003      	str	r3, [r0, #0]
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	f000 f8b2 	bl	8008008 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	bd10      	pop	{r4, pc}
 8007ea8:	080084c0 	.word	0x080084c0

08007eac <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8007eac:	b510      	push	{r4, lr}
 8007eae:	4604      	mov	r4, r0
 8007eb0:	f7ff fff2 	bl	8007e98 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	210c      	movs	r1, #12
 8007eb8:	f7ff fc91 	bl	80077de <_ZdlPvj>
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	bd10      	pop	{r4, pc}

08007ec0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8007ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ec2:	9f08      	ldr	r7, [sp, #32]
 8007ec4:	4297      	cmp	r7, r2
 8007ec6:	4605      	mov	r5, r0
 8007ec8:	460e      	mov	r6, r1
 8007eca:	4614      	mov	r4, r2
 8007ecc:	d00a      	beq.n	8007ee4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8007ece:	68a8      	ldr	r0, [r5, #8]
 8007ed0:	6802      	ldr	r2, [r0, #0]
 8007ed2:	9708      	str	r7, [sp, #32]
 8007ed4:	6a15      	ldr	r5, [r2, #32]
 8007ed6:	4631      	mov	r1, r6
 8007ed8:	4622      	mov	r2, r4
 8007eda:	46ac      	mov	ip, r5
 8007edc:	b003      	add	sp, #12
 8007ede:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007ee2:	4760      	bx	ip
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	9301      	str	r3, [sp, #4]
 8007ee8:	f000 f858 	bl	8007f9c <_ZNKSt9type_infoeqERKS_>
 8007eec:	9b01      	ldr	r3, [sp, #4]
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d0ed      	beq.n	8007ece <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8007ef2:	2006      	movs	r0, #6
 8007ef4:	b003      	add	sp, #12
 8007ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ef8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8007ef8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007efc:	460d      	mov	r5, r1
 8007efe:	4619      	mov	r1, r3
 8007f00:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8007f04:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8007f08:	4681      	mov	r9, r0
 8007f0a:	4617      	mov	r7, r2
 8007f0c:	4698      	mov	r8, r3
 8007f0e:	f000 f845 	bl	8007f9c <_ZNKSt9type_infoeqERKS_>
 8007f12:	b190      	cbz	r0, 8007f3a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8007f14:	2d00      	cmp	r5, #0
 8007f16:	6034      	str	r4, [r6, #0]
 8007f18:	7137      	strb	r7, [r6, #4]
 8007f1a:	db09      	blt.n	8007f30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8007f1c:	1961      	adds	r1, r4, r5
 8007f1e:	458a      	cmp	sl, r1
 8007f20:	bf0c      	ite	eq
 8007f22:	2106      	moveq	r1, #6
 8007f24:	2101      	movne	r1, #1
 8007f26:	71b1      	strb	r1, [r6, #6]
 8007f28:	2000      	movs	r0, #0
 8007f2a:	b001      	add	sp, #4
 8007f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f30:	3502      	adds	r5, #2
 8007f32:	d1f9      	bne.n	8007f28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8007f34:	2301      	movs	r3, #1
 8007f36:	71b3      	strb	r3, [r6, #6]
 8007f38:	e7f6      	b.n	8007f28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8007f3a:	4554      	cmp	r4, sl
 8007f3c:	d106      	bne.n	8007f4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8007f3e:	4659      	mov	r1, fp
 8007f40:	4648      	mov	r0, r9
 8007f42:	f000 f82b 	bl	8007f9c <_ZNKSt9type_infoeqERKS_>
 8007f46:	b108      	cbz	r0, 8007f4c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8007f48:	7177      	strb	r7, [r6, #5]
 8007f4a:	e7ed      	b.n	8007f28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8007f4c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8007f50:	6803      	ldr	r3, [r0, #0]
 8007f52:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8007f56:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8007f5a:	69dc      	ldr	r4, [r3, #28]
 8007f5c:	463a      	mov	r2, r7
 8007f5e:	4643      	mov	r3, r8
 8007f60:	4629      	mov	r1, r5
 8007f62:	46a4      	mov	ip, r4
 8007f64:	b001      	add	sp, #4
 8007f66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6a:	4760      	bx	ip

08007f6c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8007f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f70:	4607      	mov	r7, r0
 8007f72:	460c      	mov	r4, r1
 8007f74:	4615      	mov	r5, r2
 8007f76:	461e      	mov	r6, r3
 8007f78:	f000 f879 	bl	800806e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8007f7c:	b948      	cbnz	r0, 8007f92 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8007f7e:	68b8      	ldr	r0, [r7, #8]
 8007f80:	6803      	ldr	r3, [r0, #0]
 8007f82:	699f      	ldr	r7, [r3, #24]
 8007f84:	462a      	mov	r2, r5
 8007f86:	4633      	mov	r3, r6
 8007f88:	4621      	mov	r1, r4
 8007f8a:	46bc      	mov	ip, r7
 8007f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f90:	4760      	bx	ip
 8007f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007f96 <_ZNSt9type_infoD1Ev>:
 8007f96:	4770      	bx	lr

08007f98 <_ZNKSt9type_info14__is_pointer_pEv>:
 8007f98:	2000      	movs	r0, #0
 8007f9a:	4770      	bx	lr

08007f9c <_ZNKSt9type_infoeqERKS_>:
 8007f9c:	4281      	cmp	r1, r0
 8007f9e:	b508      	push	{r3, lr}
 8007fa0:	d00e      	beq.n	8007fc0 <_ZNKSt9type_infoeqERKS_+0x24>
 8007fa2:	6840      	ldr	r0, [r0, #4]
 8007fa4:	7803      	ldrb	r3, [r0, #0]
 8007fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8007fa8:	d00c      	beq.n	8007fc4 <_ZNKSt9type_infoeqERKS_+0x28>
 8007faa:	6849      	ldr	r1, [r1, #4]
 8007fac:	780b      	ldrb	r3, [r1, #0]
 8007fae:	2b2a      	cmp	r3, #42	; 0x2a
 8007fb0:	bf08      	it	eq
 8007fb2:	3101      	addeq	r1, #1
 8007fb4:	f7f8 f908 	bl	80001c8 <strcmp>
 8007fb8:	fab0 f080 	clz	r0, r0
 8007fbc:	0940      	lsrs	r0, r0, #5
 8007fbe:	bd08      	pop	{r3, pc}
 8007fc0:	2001      	movs	r0, #1
 8007fc2:	e7fc      	b.n	8007fbe <_ZNKSt9type_infoeqERKS_+0x22>
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	e7fa      	b.n	8007fbe <_ZNKSt9type_infoeqERKS_+0x22>

08007fc8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8007fc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007fca:	2400      	movs	r4, #0
 8007fcc:	2310      	movs	r3, #16
 8007fce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007fd2:	6803      	ldr	r3, [r0, #0]
 8007fd4:	4615      	mov	r5, r2
 8007fd6:	699e      	ldr	r6, [r3, #24]
 8007fd8:	6812      	ldr	r2, [r2, #0]
 8007fda:	466b      	mov	r3, sp
 8007fdc:	e9cd 4400 	strd	r4, r4, [sp]
 8007fe0:	47b0      	blx	r6
 8007fe2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007fe6:	f003 0306 	and.w	r3, r3, #6
 8007fea:	2b06      	cmp	r3, #6
 8007fec:	bf03      	ittte	eq
 8007fee:	9b00      	ldreq	r3, [sp, #0]
 8007ff0:	602b      	streq	r3, [r5, #0]
 8007ff2:	2001      	moveq	r0, #1
 8007ff4:	4620      	movne	r0, r4
 8007ff6:	b004      	add	sp, #16
 8007ff8:	bd70      	pop	{r4, r5, r6, pc}

08007ffa <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8007ffa:	9800      	ldr	r0, [sp, #0]
 8007ffc:	4290      	cmp	r0, r2
 8007ffe:	bf14      	ite	ne
 8008000:	2001      	movne	r0, #1
 8008002:	2006      	moveq	r0, #6
 8008004:	4770      	bx	lr
	...

08008008 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8008008:	b510      	push	{r4, lr}
 800800a:	4b03      	ldr	r3, [pc, #12]	; (8008018 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800800c:	6003      	str	r3, [r0, #0]
 800800e:	4604      	mov	r4, r0
 8008010:	f7ff ffc1 	bl	8007f96 <_ZNSt9type_infoD1Ev>
 8008014:	4620      	mov	r0, r4
 8008016:	bd10      	pop	{r4, pc}
 8008018:	08008534 	.word	0x08008534

0800801c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800801c:	b510      	push	{r4, lr}
 800801e:	4604      	mov	r4, r0
 8008020:	f7ff fff2 	bl	8008008 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8008024:	4620      	mov	r0, r4
 8008026:	2108      	movs	r1, #8
 8008028:	f7ff fbd9 	bl	80077de <_ZdlPvj>
 800802c:	4620      	mov	r0, r4
 800802e:	bd10      	pop	{r4, pc}

08008030 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8008030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008034:	461f      	mov	r7, r3
 8008036:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800803a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800803e:	4598      	cmp	r8, r3
 8008040:	4606      	mov	r6, r0
 8008042:	4615      	mov	r5, r2
 8008044:	d107      	bne.n	8008056 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8008046:	9907      	ldr	r1, [sp, #28]
 8008048:	f7ff ffa8 	bl	8007f9c <_ZNKSt9type_infoeqERKS_>
 800804c:	b118      	cbz	r0, 8008056 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800804e:	7165      	strb	r5, [r4, #5]
 8008050:	2000      	movs	r0, #0
 8008052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008056:	4639      	mov	r1, r7
 8008058:	4630      	mov	r0, r6
 800805a:	f7ff ff9f 	bl	8007f9c <_ZNKSt9type_infoeqERKS_>
 800805e:	2800      	cmp	r0, #0
 8008060:	d0f6      	beq.n	8008050 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8008062:	2301      	movs	r3, #1
 8008064:	f8c4 8000 	str.w	r8, [r4]
 8008068:	7125      	strb	r5, [r4, #4]
 800806a:	71a3      	strb	r3, [r4, #6]
 800806c:	e7f0      	b.n	8008050 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0800806e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800806e:	b538      	push	{r3, r4, r5, lr}
 8008070:	4615      	mov	r5, r2
 8008072:	461c      	mov	r4, r3
 8008074:	f7ff ff92 	bl	8007f9c <_ZNKSt9type_infoeqERKS_>
 8008078:	b120      	cbz	r0, 8008084 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800807a:	2308      	movs	r3, #8
 800807c:	60e3      	str	r3, [r4, #12]
 800807e:	2306      	movs	r3, #6
 8008080:	6025      	str	r5, [r4, #0]
 8008082:	7123      	strb	r3, [r4, #4]
 8008084:	bd38      	pop	{r3, r4, r5, pc}

08008086 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8008086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008088:	4605      	mov	r5, r0
 800808a:	460c      	mov	r4, r1
 800808c:	9201      	str	r2, [sp, #4]
 800808e:	461e      	mov	r6, r3
 8008090:	f7ff ff84 	bl	8007f9c <_ZNKSt9type_infoeqERKS_>
 8008094:	b950      	cbnz	r0, 80080ac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8008096:	2e03      	cmp	r6, #3
 8008098:	d808      	bhi.n	80080ac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	9a01      	ldr	r2, [sp, #4]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	4629      	mov	r1, r5
 80080a2:	4620      	mov	r0, r4
 80080a4:	b002      	add	sp, #8
 80080a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80080aa:	4718      	bx	r3
 80080ac:	b002      	add	sp, #8
 80080ae:	bd70      	pop	{r4, r5, r6, pc}

080080b0 <_ZdlPv>:
 80080b0:	f000 b8b8 	b.w	8008224 <free>

080080b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80080b4:	7803      	ldrb	r3, [r0, #0]
 80080b6:	2b47      	cmp	r3, #71	; 0x47
 80080b8:	d117      	bne.n	80080ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80080ba:	7843      	ldrb	r3, [r0, #1]
 80080bc:	2b4e      	cmp	r3, #78	; 0x4e
 80080be:	d114      	bne.n	80080ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80080c0:	7883      	ldrb	r3, [r0, #2]
 80080c2:	2b55      	cmp	r3, #85	; 0x55
 80080c4:	d111      	bne.n	80080ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80080c6:	78c3      	ldrb	r3, [r0, #3]
 80080c8:	2b43      	cmp	r3, #67	; 0x43
 80080ca:	d10e      	bne.n	80080ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80080cc:	7903      	ldrb	r3, [r0, #4]
 80080ce:	2b43      	cmp	r3, #67	; 0x43
 80080d0:	d10b      	bne.n	80080ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80080d2:	7943      	ldrb	r3, [r0, #5]
 80080d4:	2b2b      	cmp	r3, #43	; 0x2b
 80080d6:	d108      	bne.n	80080ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80080d8:	7983      	ldrb	r3, [r0, #6]
 80080da:	2b2b      	cmp	r3, #43	; 0x2b
 80080dc:	d105      	bne.n	80080ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80080de:	79c0      	ldrb	r0, [r0, #7]
 80080e0:	2801      	cmp	r0, #1
 80080e2:	bf8c      	ite	hi
 80080e4:	2000      	movhi	r0, #0
 80080e6:	2001      	movls	r0, #1
 80080e8:	4770      	bx	lr
 80080ea:	2000      	movs	r0, #0
 80080ec:	4770      	bx	lr

080080ee <__cxa_call_terminate>:
 80080ee:	b510      	push	{r4, lr}
 80080f0:	4604      	mov	r4, r0
 80080f2:	b148      	cbz	r0, 8008108 <__cxa_call_terminate+0x1a>
 80080f4:	f000 f83b 	bl	800816e <__cxa_begin_catch>
 80080f8:	4620      	mov	r0, r4
 80080fa:	f7ff ffdb 	bl	80080b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80080fe:	b118      	cbz	r0, 8008108 <__cxa_call_terminate+0x1a>
 8008100:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8008104:	f7ff fea4 	bl	8007e50 <_ZN10__cxxabiv111__terminateEPFvvE>
 8008108:	f7ff feae 	bl	8007e68 <_ZSt9terminatev>

0800810c <__cxa_call_unexpected>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	4602      	mov	r2, r0
 8008110:	f7ff ffd0 	bl	80080b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8008114:	4604      	mov	r4, r0
 8008116:	b140      	cbz	r0, 800812a <__cxa_call_unexpected+0x1e>
 8008118:	f852 4c18 	ldr.w	r4, [r2, #-24]
 800811c:	2500      	movs	r5, #0
 800811e:	4610      	mov	r0, r2
 8008120:	f000 f825 	bl	800816e <__cxa_begin_catch>
 8008124:	b11d      	cbz	r5, 800812e <__cxa_call_unexpected+0x22>
 8008126:	f7ff feb1 	bl	8007e8c <_ZSt10unexpectedv>
 800812a:	2501      	movs	r5, #1
 800812c:	e7f7      	b.n	800811e <__cxa_call_unexpected+0x12>
 800812e:	4620      	mov	r0, r4
 8008130:	f7ff fe9f 	bl	8007e72 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08008134 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8008134:	7803      	ldrb	r3, [r0, #0]
 8008136:	2b47      	cmp	r3, #71	; 0x47
 8008138:	d117      	bne.n	800816a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800813a:	7843      	ldrb	r3, [r0, #1]
 800813c:	2b4e      	cmp	r3, #78	; 0x4e
 800813e:	d114      	bne.n	800816a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8008140:	7883      	ldrb	r3, [r0, #2]
 8008142:	2b55      	cmp	r3, #85	; 0x55
 8008144:	d111      	bne.n	800816a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8008146:	78c3      	ldrb	r3, [r0, #3]
 8008148:	2b43      	cmp	r3, #67	; 0x43
 800814a:	d10e      	bne.n	800816a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800814c:	7903      	ldrb	r3, [r0, #4]
 800814e:	2b43      	cmp	r3, #67	; 0x43
 8008150:	d10b      	bne.n	800816a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8008152:	7943      	ldrb	r3, [r0, #5]
 8008154:	2b2b      	cmp	r3, #43	; 0x2b
 8008156:	d108      	bne.n	800816a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8008158:	7983      	ldrb	r3, [r0, #6]
 800815a:	2b2b      	cmp	r3, #43	; 0x2b
 800815c:	d105      	bne.n	800816a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800815e:	79c0      	ldrb	r0, [r0, #7]
 8008160:	2801      	cmp	r0, #1
 8008162:	bf8c      	ite	hi
 8008164:	2000      	movhi	r0, #0
 8008166:	2001      	movls	r0, #1
 8008168:	4770      	bx	lr
 800816a:	2000      	movs	r0, #0
 800816c:	4770      	bx	lr

0800816e <__cxa_begin_catch>:
 800816e:	b538      	push	{r3, r4, r5, lr}
 8008170:	4604      	mov	r4, r0
 8008172:	f7ff fbed 	bl	8007950 <__cxa_get_globals>
 8008176:	6805      	ldr	r5, [r0, #0]
 8008178:	4602      	mov	r2, r0
 800817a:	4620      	mov	r0, r4
 800817c:	f1a4 0120 	sub.w	r1, r4, #32
 8008180:	f7ff ffd8 	bl	8008134 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8008184:	b928      	cbnz	r0, 8008192 <__cxa_begin_catch+0x24>
 8008186:	b10d      	cbz	r5, 800818c <__cxa_begin_catch+0x1e>
 8008188:	f7ff fe6e 	bl	8007e68 <_ZSt9terminatev>
 800818c:	6011      	str	r1, [r2, #0]
 800818e:	4628      	mov	r0, r5
 8008190:	bd38      	pop	{r3, r4, r5, pc}
 8008192:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	bfb4      	ite	lt
 800819a:	f1c3 0301 	rsblt	r3, r3, #1
 800819e:	3301      	addge	r3, #1
 80081a0:	f844 3c0c 	str.w	r3, [r4, #-12]
 80081a4:	6853      	ldr	r3, [r2, #4]
 80081a6:	428d      	cmp	r5, r1
 80081a8:	f103 33ff 	add.w	r3, r3, #4294967295
 80081ac:	6053      	str	r3, [r2, #4]
 80081ae:	4620      	mov	r0, r4
 80081b0:	bf1c      	itt	ne
 80081b2:	f844 5c10 	strne.w	r5, [r4, #-16]
 80081b6:	6011      	strne	r1, [r2, #0]
 80081b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80081ba:	f7f8 f9cb 	bl	8000554 <_Unwind_Complete>
 80081be:	e7e6      	b.n	800818e <__cxa_begin_catch+0x20>

080081c0 <abort>:
 80081c0:	b508      	push	{r3, lr}
 80081c2:	2006      	movs	r0, #6
 80081c4:	f000 f8b2 	bl	800832c <raise>
 80081c8:	2001      	movs	r0, #1
 80081ca:	f7fa f96d 	bl	80024a8 <_exit>
	...

080081d0 <__errno>:
 80081d0:	4b01      	ldr	r3, [pc, #4]	; (80081d8 <__errno+0x8>)
 80081d2:	6818      	ldr	r0, [r3, #0]
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	20000014 	.word	0x20000014

080081dc <__libc_init_array>:
 80081dc:	b570      	push	{r4, r5, r6, lr}
 80081de:	4d0d      	ldr	r5, [pc, #52]	; (8008214 <__libc_init_array+0x38>)
 80081e0:	4c0d      	ldr	r4, [pc, #52]	; (8008218 <__libc_init_array+0x3c>)
 80081e2:	1b64      	subs	r4, r4, r5
 80081e4:	10a4      	asrs	r4, r4, #2
 80081e6:	2600      	movs	r6, #0
 80081e8:	42a6      	cmp	r6, r4
 80081ea:	d109      	bne.n	8008200 <__libc_init_array+0x24>
 80081ec:	4d0b      	ldr	r5, [pc, #44]	; (800821c <__libc_init_array+0x40>)
 80081ee:	4c0c      	ldr	r4, [pc, #48]	; (8008220 <__libc_init_array+0x44>)
 80081f0:	f000 f8da 	bl	80083a8 <_init>
 80081f4:	1b64      	subs	r4, r4, r5
 80081f6:	10a4      	asrs	r4, r4, #2
 80081f8:	2600      	movs	r6, #0
 80081fa:	42a6      	cmp	r6, r4
 80081fc:	d105      	bne.n	800820a <__libc_init_array+0x2e>
 80081fe:	bd70      	pop	{r4, r5, r6, pc}
 8008200:	f855 3b04 	ldr.w	r3, [r5], #4
 8008204:	4798      	blx	r3
 8008206:	3601      	adds	r6, #1
 8008208:	e7ee      	b.n	80081e8 <__libc_init_array+0xc>
 800820a:	f855 3b04 	ldr.w	r3, [r5], #4
 800820e:	4798      	blx	r3
 8008210:	3601      	adds	r6, #1
 8008212:	e7f2      	b.n	80081fa <__libc_init_array+0x1e>
 8008214:	08008708 	.word	0x08008708
 8008218:	08008708 	.word	0x08008708
 800821c:	08008708 	.word	0x08008708
 8008220:	0800870c 	.word	0x0800870c

08008224 <free>:
 8008224:	4b02      	ldr	r3, [pc, #8]	; (8008230 <free+0xc>)
 8008226:	4601      	mov	r1, r0
 8008228:	6818      	ldr	r0, [r3, #0]
 800822a:	f000 b80b 	b.w	8008244 <_free_r>
 800822e:	bf00      	nop
 8008230:	20000014 	.word	0x20000014

08008234 <memset>:
 8008234:	4402      	add	r2, r0
 8008236:	4603      	mov	r3, r0
 8008238:	4293      	cmp	r3, r2
 800823a:	d100      	bne.n	800823e <memset+0xa>
 800823c:	4770      	bx	lr
 800823e:	f803 1b01 	strb.w	r1, [r3], #1
 8008242:	e7f9      	b.n	8008238 <memset+0x4>

08008244 <_free_r>:
 8008244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008246:	2900      	cmp	r1, #0
 8008248:	d044      	beq.n	80082d4 <_free_r+0x90>
 800824a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800824e:	9001      	str	r0, [sp, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	f1a1 0404 	sub.w	r4, r1, #4
 8008256:	bfb8      	it	lt
 8008258:	18e4      	addlt	r4, r4, r3
 800825a:	f000 f883 	bl	8008364 <__malloc_lock>
 800825e:	4a1e      	ldr	r2, [pc, #120]	; (80082d8 <_free_r+0x94>)
 8008260:	9801      	ldr	r0, [sp, #4]
 8008262:	6813      	ldr	r3, [r2, #0]
 8008264:	b933      	cbnz	r3, 8008274 <_free_r+0x30>
 8008266:	6063      	str	r3, [r4, #4]
 8008268:	6014      	str	r4, [r2, #0]
 800826a:	b003      	add	sp, #12
 800826c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008270:	f000 b87e 	b.w	8008370 <__malloc_unlock>
 8008274:	42a3      	cmp	r3, r4
 8008276:	d908      	bls.n	800828a <_free_r+0x46>
 8008278:	6825      	ldr	r5, [r4, #0]
 800827a:	1961      	adds	r1, r4, r5
 800827c:	428b      	cmp	r3, r1
 800827e:	bf01      	itttt	eq
 8008280:	6819      	ldreq	r1, [r3, #0]
 8008282:	685b      	ldreq	r3, [r3, #4]
 8008284:	1949      	addeq	r1, r1, r5
 8008286:	6021      	streq	r1, [r4, #0]
 8008288:	e7ed      	b.n	8008266 <_free_r+0x22>
 800828a:	461a      	mov	r2, r3
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	b10b      	cbz	r3, 8008294 <_free_r+0x50>
 8008290:	42a3      	cmp	r3, r4
 8008292:	d9fa      	bls.n	800828a <_free_r+0x46>
 8008294:	6811      	ldr	r1, [r2, #0]
 8008296:	1855      	adds	r5, r2, r1
 8008298:	42a5      	cmp	r5, r4
 800829a:	d10b      	bne.n	80082b4 <_free_r+0x70>
 800829c:	6824      	ldr	r4, [r4, #0]
 800829e:	4421      	add	r1, r4
 80082a0:	1854      	adds	r4, r2, r1
 80082a2:	42a3      	cmp	r3, r4
 80082a4:	6011      	str	r1, [r2, #0]
 80082a6:	d1e0      	bne.n	800826a <_free_r+0x26>
 80082a8:	681c      	ldr	r4, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	6053      	str	r3, [r2, #4]
 80082ae:	4421      	add	r1, r4
 80082b0:	6011      	str	r1, [r2, #0]
 80082b2:	e7da      	b.n	800826a <_free_r+0x26>
 80082b4:	d902      	bls.n	80082bc <_free_r+0x78>
 80082b6:	230c      	movs	r3, #12
 80082b8:	6003      	str	r3, [r0, #0]
 80082ba:	e7d6      	b.n	800826a <_free_r+0x26>
 80082bc:	6825      	ldr	r5, [r4, #0]
 80082be:	1961      	adds	r1, r4, r5
 80082c0:	428b      	cmp	r3, r1
 80082c2:	bf04      	itt	eq
 80082c4:	6819      	ldreq	r1, [r3, #0]
 80082c6:	685b      	ldreq	r3, [r3, #4]
 80082c8:	6063      	str	r3, [r4, #4]
 80082ca:	bf04      	itt	eq
 80082cc:	1949      	addeq	r1, r1, r5
 80082ce:	6021      	streq	r1, [r4, #0]
 80082d0:	6054      	str	r4, [r2, #4]
 80082d2:	e7ca      	b.n	800826a <_free_r+0x26>
 80082d4:	b003      	add	sp, #12
 80082d6:	bd30      	pop	{r4, r5, pc}
 80082d8:	20000278 	.word	0x20000278

080082dc <_raise_r>:
 80082dc:	291f      	cmp	r1, #31
 80082de:	b538      	push	{r3, r4, r5, lr}
 80082e0:	4604      	mov	r4, r0
 80082e2:	460d      	mov	r5, r1
 80082e4:	d904      	bls.n	80082f0 <_raise_r+0x14>
 80082e6:	2316      	movs	r3, #22
 80082e8:	6003      	str	r3, [r0, #0]
 80082ea:	f04f 30ff 	mov.w	r0, #4294967295
 80082ee:	bd38      	pop	{r3, r4, r5, pc}
 80082f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80082f2:	b112      	cbz	r2, 80082fa <_raise_r+0x1e>
 80082f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082f8:	b94b      	cbnz	r3, 800830e <_raise_r+0x32>
 80082fa:	4620      	mov	r0, r4
 80082fc:	f000 f830 	bl	8008360 <_getpid_r>
 8008300:	462a      	mov	r2, r5
 8008302:	4601      	mov	r1, r0
 8008304:	4620      	mov	r0, r4
 8008306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800830a:	f000 b817 	b.w	800833c <_kill_r>
 800830e:	2b01      	cmp	r3, #1
 8008310:	d00a      	beq.n	8008328 <_raise_r+0x4c>
 8008312:	1c59      	adds	r1, r3, #1
 8008314:	d103      	bne.n	800831e <_raise_r+0x42>
 8008316:	2316      	movs	r3, #22
 8008318:	6003      	str	r3, [r0, #0]
 800831a:	2001      	movs	r0, #1
 800831c:	e7e7      	b.n	80082ee <_raise_r+0x12>
 800831e:	2400      	movs	r4, #0
 8008320:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008324:	4628      	mov	r0, r5
 8008326:	4798      	blx	r3
 8008328:	2000      	movs	r0, #0
 800832a:	e7e0      	b.n	80082ee <_raise_r+0x12>

0800832c <raise>:
 800832c:	4b02      	ldr	r3, [pc, #8]	; (8008338 <raise+0xc>)
 800832e:	4601      	mov	r1, r0
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	f7ff bfd3 	b.w	80082dc <_raise_r>
 8008336:	bf00      	nop
 8008338:	20000014 	.word	0x20000014

0800833c <_kill_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	4d07      	ldr	r5, [pc, #28]	; (800835c <_kill_r+0x20>)
 8008340:	2300      	movs	r3, #0
 8008342:	4604      	mov	r4, r0
 8008344:	4608      	mov	r0, r1
 8008346:	4611      	mov	r1, r2
 8008348:	602b      	str	r3, [r5, #0]
 800834a:	f7fa f89d 	bl	8002488 <_kill>
 800834e:	1c43      	adds	r3, r0, #1
 8008350:	d102      	bne.n	8008358 <_kill_r+0x1c>
 8008352:	682b      	ldr	r3, [r5, #0]
 8008354:	b103      	cbz	r3, 8008358 <_kill_r+0x1c>
 8008356:	6023      	str	r3, [r4, #0]
 8008358:	bd38      	pop	{r3, r4, r5, pc}
 800835a:	bf00      	nop
 800835c:	2000027c 	.word	0x2000027c

08008360 <_getpid_r>:
 8008360:	f7fa b88a 	b.w	8002478 <_getpid>

08008364 <__malloc_lock>:
 8008364:	4801      	ldr	r0, [pc, #4]	; (800836c <__malloc_lock+0x8>)
 8008366:	f000 b809 	b.w	800837c <__retarget_lock_acquire_recursive>
 800836a:	bf00      	nop
 800836c:	20000280 	.word	0x20000280

08008370 <__malloc_unlock>:
 8008370:	4801      	ldr	r0, [pc, #4]	; (8008378 <__malloc_unlock+0x8>)
 8008372:	f000 b804 	b.w	800837e <__retarget_lock_release_recursive>
 8008376:	bf00      	nop
 8008378:	20000280 	.word	0x20000280

0800837c <__retarget_lock_acquire_recursive>:
 800837c:	4770      	bx	lr

0800837e <__retarget_lock_release_recursive>:
 800837e:	4770      	bx	lr

08008380 <_Unwind_GetDataRelBase>:
 8008380:	b508      	push	{r3, lr}
 8008382:	f7ff ff1d 	bl	80081c0 <abort>

08008386 <_Unwind_GetTextRelBase>:
 8008386:	b508      	push	{r3, lr}
 8008388:	f7ff fffa 	bl	8008380 <_Unwind_GetDataRelBase>

0800838c <memcpy>:
 800838c:	440a      	add	r2, r1
 800838e:	4291      	cmp	r1, r2
 8008390:	f100 33ff 	add.w	r3, r0, #4294967295
 8008394:	d100      	bne.n	8008398 <memcpy+0xc>
 8008396:	4770      	bx	lr
 8008398:	b510      	push	{r4, lr}
 800839a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800839e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083a2:	4291      	cmp	r1, r2
 80083a4:	d1f9      	bne.n	800839a <memcpy+0xe>
 80083a6:	bd10      	pop	{r4, pc}

080083a8 <_init>:
 80083a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083aa:	bf00      	nop
 80083ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ae:	bc08      	pop	{r3}
 80083b0:	469e      	mov	lr, r3
 80083b2:	4770      	bx	lr

080083b4 <_fini>:
 80083b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b6:	bf00      	nop
 80083b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ba:	bc08      	pop	{r3}
 80083bc:	469e      	mov	lr, r3
 80083be:	4770      	bx	lr
