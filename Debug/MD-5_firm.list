
MD-5_firm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007064  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080071ec  080071ec  000171ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000090  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000118  080072e8  080072e8  000172e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007400  08007400  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007400  08007400  00017400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007404  08007404  00017404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000220  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000290  20000290  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001180c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024e8  00000000  00000000  000318ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  00033d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000de8  00000000  00000000  00034c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000570d  00000000  00000000  00035a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011596  00000000  00000000  0003b14d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a905e  00000000  00000000  0004c6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f5741  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043f0  00000000  00000000  000f5794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080071d4 	.word	0x080071d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080071d4 	.word	0x080071d4

080001c8 <selfrel_offset31>:
 80001c8:	6803      	ldr	r3, [r0, #0]
 80001ca:	005a      	lsls	r2, r3, #1
 80001cc:	bf4c      	ite	mi
 80001ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80001d2:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80001d6:	4418      	add	r0, r3
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop

080001dc <search_EIT_table>:
 80001dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80001e0:	b329      	cbz	r1, 800022e <search_EIT_table+0x52>
 80001e2:	1e4f      	subs	r7, r1, #1
 80001e4:	4604      	mov	r4, r0
 80001e6:	4615      	mov	r5, r2
 80001e8:	463e      	mov	r6, r7
 80001ea:	f04f 0800 	mov.w	r8, #0
 80001ee:	eb08 0106 	add.w	r1, r8, r6
 80001f2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001f6:	1049      	asrs	r1, r1, #1
 80001f8:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 80001fc:	4648      	mov	r0, r9
 80001fe:	f7ff ffe3 	bl	80001c8 <selfrel_offset31>
 8000202:	4603      	mov	r3, r0
 8000204:	00c8      	lsls	r0, r1, #3
 8000206:	3008      	adds	r0, #8
 8000208:	428f      	cmp	r7, r1
 800020a:	4420      	add	r0, r4
 800020c:	d009      	beq.n	8000222 <search_EIT_table+0x46>
 800020e:	42ab      	cmp	r3, r5
 8000210:	d809      	bhi.n	8000226 <search_EIT_table+0x4a>
 8000212:	f7ff ffd9 	bl	80001c8 <selfrel_offset31>
 8000216:	3801      	subs	r0, #1
 8000218:	42a8      	cmp	r0, r5
 800021a:	d20a      	bcs.n	8000232 <search_EIT_table+0x56>
 800021c:	f101 0801 	add.w	r8, r1, #1
 8000220:	e7e5      	b.n	80001ee <search_EIT_table+0x12>
 8000222:	42ab      	cmp	r3, r5
 8000224:	d905      	bls.n	8000232 <search_EIT_table+0x56>
 8000226:	4588      	cmp	r8, r1
 8000228:	d001      	beq.n	800022e <search_EIT_table+0x52>
 800022a:	1e4e      	subs	r6, r1, #1
 800022c:	e7df      	b.n	80001ee <search_EIT_table+0x12>
 800022e:	f04f 0900 	mov.w	r9, #0
 8000232:	4648      	mov	r0, r9
 8000234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000238 <__gnu_unwind_get_pr_addr>:
 8000238:	2801      	cmp	r0, #1
 800023a:	d007      	beq.n	800024c <__gnu_unwind_get_pr_addr+0x14>
 800023c:	2802      	cmp	r0, #2
 800023e:	d007      	beq.n	8000250 <__gnu_unwind_get_pr_addr+0x18>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__gnu_unwind_get_pr_addr+0x1c>)
 8000242:	2800      	cmp	r0, #0
 8000244:	bf0c      	ite	eq
 8000246:	4618      	moveq	r0, r3
 8000248:	2000      	movne	r0, #0
 800024a:	4770      	bx	lr
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__gnu_unwind_get_pr_addr+0x20>)
 800024e:	4770      	bx	lr
 8000250:	4802      	ldr	r0, [pc, #8]	; (800025c <__gnu_unwind_get_pr_addr+0x24>)
 8000252:	4770      	bx	lr
 8000254:	08000911 	.word	0x08000911
 8000258:	08000915 	.word	0x08000915
 800025c:	08000919 	.word	0x08000919

08000260 <get_eit_entry>:
 8000260:	b530      	push	{r4, r5, lr}
 8000262:	4b23      	ldr	r3, [pc, #140]	; (80002f0 <get_eit_entry+0x90>)
 8000264:	b083      	sub	sp, #12
 8000266:	4604      	mov	r4, r0
 8000268:	1e8d      	subs	r5, r1, #2
 800026a:	b33b      	cbz	r3, 80002bc <get_eit_entry+0x5c>
 800026c:	a901      	add	r1, sp, #4
 800026e:	4628      	mov	r0, r5
 8000270:	f3af 8000 	nop.w
 8000274:	b1e8      	cbz	r0, 80002b2 <get_eit_entry+0x52>
 8000276:	9901      	ldr	r1, [sp, #4]
 8000278:	462a      	mov	r2, r5
 800027a:	f7ff ffaf 	bl	80001dc <search_EIT_table>
 800027e:	4601      	mov	r1, r0
 8000280:	b1b8      	cbz	r0, 80002b2 <get_eit_entry+0x52>
 8000282:	f7ff ffa1 	bl	80001c8 <selfrel_offset31>
 8000286:	684b      	ldr	r3, [r1, #4]
 8000288:	64a0      	str	r0, [r4, #72]	; 0x48
 800028a:	2b01      	cmp	r3, #1
 800028c:	d02c      	beq.n	80002e8 <get_eit_entry+0x88>
 800028e:	2b00      	cmp	r3, #0
 8000290:	f101 0004 	add.w	r0, r1, #4
 8000294:	db24      	blt.n	80002e0 <get_eit_entry+0x80>
 8000296:	f7ff ff97 	bl	80001c8 <selfrel_offset31>
 800029a:	2300      	movs	r3, #0
 800029c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80002a0:	6803      	ldr	r3, [r0, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	db11      	blt.n	80002ca <get_eit_entry+0x6a>
 80002a6:	f7ff ff8f 	bl	80001c8 <selfrel_offset31>
 80002aa:	6120      	str	r0, [r4, #16]
 80002ac:	2000      	movs	r0, #0
 80002ae:	b003      	add	sp, #12
 80002b0:	bd30      	pop	{r4, r5, pc}
 80002b2:	2300      	movs	r3, #0
 80002b4:	2009      	movs	r0, #9
 80002b6:	6123      	str	r3, [r4, #16]
 80002b8:	b003      	add	sp, #12
 80002ba:	bd30      	pop	{r4, r5, pc}
 80002bc:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <get_eit_entry+0x94>)
 80002be:	490e      	ldr	r1, [pc, #56]	; (80002f8 <get_eit_entry+0x98>)
 80002c0:	1ac9      	subs	r1, r1, r3
 80002c2:	10c9      	asrs	r1, r1, #3
 80002c4:	4618      	mov	r0, r3
 80002c6:	9101      	str	r1, [sp, #4]
 80002c8:	e7d6      	b.n	8000278 <get_eit_entry+0x18>
 80002ca:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80002ce:	f7ff ffb3 	bl	8000238 <__gnu_unwind_get_pr_addr>
 80002d2:	2800      	cmp	r0, #0
 80002d4:	6120      	str	r0, [r4, #16]
 80002d6:	bf14      	ite	ne
 80002d8:	2000      	movne	r0, #0
 80002da:	2009      	moveq	r0, #9
 80002dc:	b003      	add	sp, #12
 80002de:	bd30      	pop	{r4, r5, pc}
 80002e0:	2301      	movs	r3, #1
 80002e2:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80002e6:	e7db      	b.n	80002a0 <get_eit_entry+0x40>
 80002e8:	2300      	movs	r3, #0
 80002ea:	6123      	str	r3, [r4, #16]
 80002ec:	2005      	movs	r0, #5
 80002ee:	e7de      	b.n	80002ae <get_eit_entry+0x4e>
 80002f0:	00000000 	.word	0x00000000
 80002f4:	080072e8 	.word	0x080072e8
 80002f8:	08007400 	.word	0x08007400

080002fc <restore_non_core_regs>:
 80002fc:	6803      	ldr	r3, [r0, #0]
 80002fe:	07da      	lsls	r2, r3, #31
 8000300:	b510      	push	{r4, lr}
 8000302:	4604      	mov	r4, r0
 8000304:	d406      	bmi.n	8000314 <restore_non_core_regs+0x18>
 8000306:	079b      	lsls	r3, r3, #30
 8000308:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800030c:	d509      	bpl.n	8000322 <restore_non_core_regs+0x26>
 800030e:	f000 fc5b 	bl	8000bc8 <__gnu_Unwind_Restore_VFP_D>
 8000312:	6823      	ldr	r3, [r4, #0]
 8000314:	0759      	lsls	r1, r3, #29
 8000316:	d509      	bpl.n	800032c <restore_non_core_regs+0x30>
 8000318:	071a      	lsls	r2, r3, #28
 800031a:	d50e      	bpl.n	800033a <restore_non_core_regs+0x3e>
 800031c:	06db      	lsls	r3, r3, #27
 800031e:	d513      	bpl.n	8000348 <restore_non_core_regs+0x4c>
 8000320:	bd10      	pop	{r4, pc}
 8000322:	f000 fc49 	bl	8000bb8 <__gnu_Unwind_Restore_VFP>
 8000326:	6823      	ldr	r3, [r4, #0]
 8000328:	0759      	lsls	r1, r3, #29
 800032a:	d4f5      	bmi.n	8000318 <restore_non_core_regs+0x1c>
 800032c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000330:	f000 fc52 	bl	8000bd8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000334:	6823      	ldr	r3, [r4, #0]
 8000336:	071a      	lsls	r2, r3, #28
 8000338:	d4f0      	bmi.n	800031c <restore_non_core_regs+0x20>
 800033a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800033e:	f000 fc53 	bl	8000be8 <__gnu_Unwind_Restore_WMMXD>
 8000342:	6823      	ldr	r3, [r4, #0]
 8000344:	06db      	lsls	r3, r3, #27
 8000346:	d4eb      	bmi.n	8000320 <restore_non_core_regs+0x24>
 8000348:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800034c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000350:	f000 bc8e 	b.w	8000c70 <__gnu_Unwind_Restore_WMMXC>

08000354 <__gnu_unwind_24bit.constprop.0>:
 8000354:	2009      	movs	r0, #9
 8000356:	4770      	bx	lr

08000358 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8000358:	4603      	mov	r3, r0
 800035a:	6800      	ldr	r0, [r0, #0]
 800035c:	b100      	cbz	r0, 8000360 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 800035e:	4418      	add	r0, r3
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop

08000364 <_Unwind_DebugHook>:
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop

08000368 <unwind_phase2>:
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	4604      	mov	r4, r0
 800036c:	460e      	mov	r6, r1
 800036e:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000370:	4620      	mov	r0, r4
 8000372:	f7ff ff75 	bl	8000260 <get_eit_entry>
 8000376:	4605      	mov	r5, r0
 8000378:	b988      	cbnz	r0, 800039e <unwind_phase2+0x36>
 800037a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800037c:	6162      	str	r2, [r4, #20]
 800037e:	6923      	ldr	r3, [r4, #16]
 8000380:	4632      	mov	r2, r6
 8000382:	4621      	mov	r1, r4
 8000384:	2001      	movs	r0, #1
 8000386:	4798      	blx	r3
 8000388:	2808      	cmp	r0, #8
 800038a:	d0f0      	beq.n	800036e <unwind_phase2+0x6>
 800038c:	2807      	cmp	r0, #7
 800038e:	d106      	bne.n	800039e <unwind_phase2+0x36>
 8000390:	4628      	mov	r0, r5
 8000392:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000394:	f7ff ffe6 	bl	8000364 <_Unwind_DebugHook>
 8000398:	1d30      	adds	r0, r6, #4
 800039a:	f000 fc01 	bl	8000ba0 <__restore_core_regs>
 800039e:	f006 febf 	bl	8007120 <abort>
 80003a2:	bf00      	nop

080003a4 <unwind_phase2_forced>:
 80003a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003a8:	1d0d      	adds	r5, r1, #4
 80003aa:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80003ae:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80003b2:	4607      	mov	r7, r0
 80003b4:	4614      	mov	r4, r2
 80003b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003b8:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80003bc:	f10d 0c0c 	add.w	ip, sp, #12
 80003c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80003d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80003d4:	ae02      	add	r6, sp, #8
 80003d6:	f04f 0e00 	mov.w	lr, #0
 80003da:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80003de:	f8c6 e000 	str.w	lr, [r6]
 80003e2:	e020      	b.n	8000426 <unwind_phase2_forced+0x82>
 80003e4:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80003e6:	617b      	str	r3, [r7, #20]
 80003e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003ec:	4631      	mov	r1, r6
 80003ee:	a87a      	add	r0, sp, #488	; 0x1e8
 80003f0:	f006 fe9d 	bl	800712e <memcpy>
 80003f4:	693b      	ldr	r3, [r7, #16]
 80003f6:	aa7a      	add	r2, sp, #488	; 0x1e8
 80003f8:	4639      	mov	r1, r7
 80003fa:	4650      	mov	r0, sl
 80003fc:	4798      	blx	r3
 80003fe:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000400:	6473      	str	r3, [r6, #68]	; 0x44
 8000402:	4621      	mov	r1, r4
 8000404:	e9cd 6900 	strd	r6, r9, [sp]
 8000408:	4605      	mov	r5, r0
 800040a:	463b      	mov	r3, r7
 800040c:	463a      	mov	r2, r7
 800040e:	2001      	movs	r0, #1
 8000410:	47c0      	blx	r8
 8000412:	4604      	mov	r4, r0
 8000414:	b9e0      	cbnz	r0, 8000450 <unwind_phase2_forced+0xac>
 8000416:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800041a:	a97a      	add	r1, sp, #488	; 0x1e8
 800041c:	4630      	mov	r0, r6
 800041e:	f006 fe86 	bl	800712e <memcpy>
 8000422:	2d08      	cmp	r5, #8
 8000424:	d11a      	bne.n	800045c <unwind_phase2_forced+0xb8>
 8000426:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000428:	4638      	mov	r0, r7
 800042a:	f7ff ff19 	bl	8000260 <get_eit_entry>
 800042e:	3409      	adds	r4, #9
 8000430:	fa5f fa84 	uxtb.w	sl, r4
 8000434:	4605      	mov	r5, r0
 8000436:	2800      	cmp	r0, #0
 8000438:	d0d4      	beq.n	80003e4 <unwind_phase2_forced+0x40>
 800043a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800043c:	6473      	str	r3, [r6, #68]	; 0x44
 800043e:	463a      	mov	r2, r7
 8000440:	e9cd 6900 	strd	r6, r9, [sp]
 8000444:	463b      	mov	r3, r7
 8000446:	f04a 0110 	orr.w	r1, sl, #16
 800044a:	2001      	movs	r0, #1
 800044c:	47c0      	blx	r8
 800044e:	b100      	cbz	r0, 8000452 <unwind_phase2_forced+0xae>
 8000450:	2509      	movs	r5, #9
 8000452:	4628      	mov	r0, r5
 8000454:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045c:	2d07      	cmp	r5, #7
 800045e:	d1f7      	bne.n	8000450 <unwind_phase2_forced+0xac>
 8000460:	4620      	mov	r0, r4
 8000462:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000464:	f7ff ff7e 	bl	8000364 <_Unwind_DebugHook>
 8000468:	a803      	add	r0, sp, #12
 800046a:	f000 fb99 	bl	8000ba0 <__restore_core_regs>
 800046e:	bf00      	nop

08000470 <_Unwind_GetCFA>:
 8000470:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000472:	4770      	bx	lr

08000474 <__gnu_Unwind_RaiseException>:
 8000474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000476:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000478:	640b      	str	r3, [r1, #64]	; 0x40
 800047a:	f101 0c04 	add.w	ip, r1, #4
 800047e:	460e      	mov	r6, r1
 8000480:	4605      	mov	r5, r0
 8000482:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000486:	b0f9      	sub	sp, #484	; 0x1e4
 8000488:	ac01      	add	r4, sp, #4
 800048a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800048c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000492:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000498:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800049c:	f04f 37ff 	mov.w	r7, #4294967295
 80004a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80004a4:	9700      	str	r7, [sp, #0]
 80004a6:	e006      	b.n	80004b6 <__gnu_Unwind_RaiseException+0x42>
 80004a8:	692b      	ldr	r3, [r5, #16]
 80004aa:	466a      	mov	r2, sp
 80004ac:	4629      	mov	r1, r5
 80004ae:	4798      	blx	r3
 80004b0:	2808      	cmp	r0, #8
 80004b2:	4604      	mov	r4, r0
 80004b4:	d108      	bne.n	80004c8 <__gnu_Unwind_RaiseException+0x54>
 80004b6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80004b8:	4628      	mov	r0, r5
 80004ba:	f7ff fed1 	bl	8000260 <get_eit_entry>
 80004be:	2800      	cmp	r0, #0
 80004c0:	d0f2      	beq.n	80004a8 <__gnu_Unwind_RaiseException+0x34>
 80004c2:	2009      	movs	r0, #9
 80004c4:	b079      	add	sp, #484	; 0x1e4
 80004c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c8:	4668      	mov	r0, sp
 80004ca:	f7ff ff17 	bl	80002fc <restore_non_core_regs>
 80004ce:	2c06      	cmp	r4, #6
 80004d0:	d1f7      	bne.n	80004c2 <__gnu_Unwind_RaiseException+0x4e>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4628      	mov	r0, r5
 80004d6:	f7ff ff47 	bl	8000368 <unwind_phase2>
 80004da:	bf00      	nop

080004dc <__gnu_Unwind_ForcedUnwind>:
 80004dc:	60c1      	str	r1, [r0, #12]
 80004de:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004e0:	6182      	str	r2, [r0, #24]
 80004e2:	6419      	str	r1, [r3, #64]	; 0x40
 80004e4:	2200      	movs	r2, #0
 80004e6:	4619      	mov	r1, r3
 80004e8:	e75c      	b.n	80003a4 <unwind_phase2_forced>
 80004ea:	bf00      	nop

080004ec <__gnu_Unwind_Resume>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	68c6      	ldr	r6, [r0, #12]
 80004f0:	6943      	ldr	r3, [r0, #20]
 80004f2:	640b      	str	r3, [r1, #64]	; 0x40
 80004f4:	b9ae      	cbnz	r6, 8000522 <__gnu_Unwind_Resume+0x36>
 80004f6:	6903      	ldr	r3, [r0, #16]
 80004f8:	460a      	mov	r2, r1
 80004fa:	4604      	mov	r4, r0
 80004fc:	460d      	mov	r5, r1
 80004fe:	4601      	mov	r1, r0
 8000500:	2002      	movs	r0, #2
 8000502:	4798      	blx	r3
 8000504:	2807      	cmp	r0, #7
 8000506:	d005      	beq.n	8000514 <__gnu_Unwind_Resume+0x28>
 8000508:	2808      	cmp	r0, #8
 800050a:	d10f      	bne.n	800052c <__gnu_Unwind_Resume+0x40>
 800050c:	4629      	mov	r1, r5
 800050e:	4620      	mov	r0, r4
 8000510:	f7ff ff2a 	bl	8000368 <unwind_phase2>
 8000514:	4630      	mov	r0, r6
 8000516:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000518:	f7ff ff24 	bl	8000364 <_Unwind_DebugHook>
 800051c:	1d28      	adds	r0, r5, #4
 800051e:	f000 fb3f 	bl	8000ba0 <__restore_core_regs>
 8000522:	2201      	movs	r2, #1
 8000524:	f7ff ff3e 	bl	80003a4 <unwind_phase2_forced>
 8000528:	f006 fdfa 	bl	8007120 <abort>
 800052c:	f006 fdf8 	bl	8007120 <abort>

08000530 <__gnu_Unwind_Resume_or_Rethrow>:
 8000530:	68c2      	ldr	r2, [r0, #12]
 8000532:	b11a      	cbz	r2, 800053c <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000534:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000536:	640a      	str	r2, [r1, #64]	; 0x40
 8000538:	2200      	movs	r2, #0
 800053a:	e733      	b.n	80003a4 <unwind_phase2_forced>
 800053c:	e79a      	b.n	8000474 <__gnu_Unwind_RaiseException>
 800053e:	bf00      	nop

08000540 <_Unwind_Complete>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <_Unwind_DeleteException>:
 8000544:	6883      	ldr	r3, [r0, #8]
 8000546:	4601      	mov	r1, r0
 8000548:	b10b      	cbz	r3, 800054e <_Unwind_DeleteException+0xa>
 800054a:	2001      	movs	r0, #1
 800054c:	4718      	bx	r3
 800054e:	4770      	bx	lr

08000550 <_Unwind_VRS_Get>:
 8000550:	2901      	cmp	r1, #1
 8000552:	d012      	beq.n	800057a <_Unwind_VRS_Get+0x2a>
 8000554:	d809      	bhi.n	800056a <_Unwind_VRS_Get+0x1a>
 8000556:	b973      	cbnz	r3, 8000576 <_Unwind_VRS_Get+0x26>
 8000558:	2a0f      	cmp	r2, #15
 800055a:	d80c      	bhi.n	8000576 <_Unwind_VRS_Get+0x26>
 800055c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000560:	4618      	mov	r0, r3
 8000562:	6853      	ldr	r3, [r2, #4]
 8000564:	9a00      	ldr	r2, [sp, #0]
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4770      	bx	lr
 800056a:	3903      	subs	r1, #3
 800056c:	2901      	cmp	r1, #1
 800056e:	bf94      	ite	ls
 8000570:	2001      	movls	r0, #1
 8000572:	2002      	movhi	r0, #2
 8000574:	4770      	bx	lr
 8000576:	2002      	movs	r0, #2
 8000578:	4770      	bx	lr
 800057a:	4608      	mov	r0, r1
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <_Unwind_GetGR>:
 8000580:	b500      	push	{lr}
 8000582:	b085      	sub	sp, #20
 8000584:	460a      	mov	r2, r1
 8000586:	2300      	movs	r3, #0
 8000588:	a903      	add	r1, sp, #12
 800058a:	9100      	str	r1, [sp, #0]
 800058c:	4619      	mov	r1, r3
 800058e:	f7ff ffdf 	bl	8000550 <_Unwind_VRS_Get>
 8000592:	9803      	ldr	r0, [sp, #12]
 8000594:	b005      	add	sp, #20
 8000596:	f85d fb04 	ldr.w	pc, [sp], #4
 800059a:	bf00      	nop

0800059c <_Unwind_VRS_Set>:
 800059c:	2901      	cmp	r1, #1
 800059e:	d012      	beq.n	80005c6 <_Unwind_VRS_Set+0x2a>
 80005a0:	d809      	bhi.n	80005b6 <_Unwind_VRS_Set+0x1a>
 80005a2:	b973      	cbnz	r3, 80005c2 <_Unwind_VRS_Set+0x26>
 80005a4:	2a0f      	cmp	r2, #15
 80005a6:	d80c      	bhi.n	80005c2 <_Unwind_VRS_Set+0x26>
 80005a8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80005ac:	9a00      	ldr	r2, [sp, #0]
 80005ae:	6812      	ldr	r2, [r2, #0]
 80005b0:	6042      	str	r2, [r0, #4]
 80005b2:	4618      	mov	r0, r3
 80005b4:	4770      	bx	lr
 80005b6:	3903      	subs	r1, #3
 80005b8:	2901      	cmp	r1, #1
 80005ba:	bf94      	ite	ls
 80005bc:	2001      	movls	r0, #1
 80005be:	2002      	movhi	r0, #2
 80005c0:	4770      	bx	lr
 80005c2:	2002      	movs	r0, #2
 80005c4:	4770      	bx	lr
 80005c6:	4608      	mov	r0, r1
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <_Unwind_SetGR>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	2300      	movs	r3, #0
 80005d2:	ac03      	add	r4, sp, #12
 80005d4:	9203      	str	r2, [sp, #12]
 80005d6:	9400      	str	r4, [sp, #0]
 80005d8:	460a      	mov	r2, r1
 80005da:	4619      	mov	r1, r3
 80005dc:	f7ff ffde 	bl	800059c <_Unwind_VRS_Set>
 80005e0:	b004      	add	sp, #16
 80005e2:	bd10      	pop	{r4, pc}

080005e4 <__gnu_Unwind_Backtrace>:
 80005e4:	b570      	push	{r4, r5, r6, lr}
 80005e6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80005e8:	6413      	str	r3, [r2, #64]	; 0x40
 80005ea:	f102 0c04 	add.w	ip, r2, #4
 80005ee:	4605      	mov	r5, r0
 80005f0:	460c      	mov	r4, r1
 80005f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80005f6:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80005fa:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 80005fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000602:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000606:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800060a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800060e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000612:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000616:	f04f 36ff 	mov.w	r6, #4294967295
 800061a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800061e:	9616      	str	r6, [sp, #88]	; 0x58
 8000620:	e010      	b.n	8000644 <__gnu_Unwind_Backtrace+0x60>
 8000622:	f7ff ffd3 	bl	80005cc <_Unwind_SetGR>
 8000626:	4621      	mov	r1, r4
 8000628:	a816      	add	r0, sp, #88	; 0x58
 800062a:	47a8      	blx	r5
 800062c:	4603      	mov	r3, r0
 800062e:	aa16      	add	r2, sp, #88	; 0x58
 8000630:	4669      	mov	r1, sp
 8000632:	2008      	movs	r0, #8
 8000634:	b983      	cbnz	r3, 8000658 <__gnu_Unwind_Backtrace+0x74>
 8000636:	9b04      	ldr	r3, [sp, #16]
 8000638:	4798      	blx	r3
 800063a:	2805      	cmp	r0, #5
 800063c:	4606      	mov	r6, r0
 800063e:	d00c      	beq.n	800065a <__gnu_Unwind_Backtrace+0x76>
 8000640:	2809      	cmp	r0, #9
 8000642:	d009      	beq.n	8000658 <__gnu_Unwind_Backtrace+0x74>
 8000644:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000646:	4668      	mov	r0, sp
 8000648:	f7ff fe0a 	bl	8000260 <get_eit_entry>
 800064c:	4603      	mov	r3, r0
 800064e:	466a      	mov	r2, sp
 8000650:	210c      	movs	r1, #12
 8000652:	a816      	add	r0, sp, #88	; 0x58
 8000654:	2b00      	cmp	r3, #0
 8000656:	d0e4      	beq.n	8000622 <__gnu_Unwind_Backtrace+0x3e>
 8000658:	2609      	movs	r6, #9
 800065a:	a816      	add	r0, sp, #88	; 0x58
 800065c:	f7ff fe4e 	bl	80002fc <restore_non_core_regs>
 8000660:	4630      	mov	r0, r6
 8000662:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8000666:	bd70      	pop	{r4, r5, r6, pc}

08000668 <__gnu_unwind_pr_common>:
 8000668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800066c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800066e:	b089      	sub	sp, #36	; 0x24
 8000670:	461e      	mov	r6, r3
 8000672:	f854 3b04 	ldr.w	r3, [r4], #4
 8000676:	9406      	str	r4, [sp, #24]
 8000678:	460d      	mov	r5, r1
 800067a:	4617      	mov	r7, r2
 800067c:	f000 0803 	and.w	r8, r0, #3
 8000680:	2e00      	cmp	r6, #0
 8000682:	d079      	beq.n	8000778 <__gnu_unwind_pr_common+0x110>
 8000684:	0c1a      	lsrs	r2, r3, #16
 8000686:	041b      	lsls	r3, r3, #16
 8000688:	9305      	str	r3, [sp, #20]
 800068a:	f88d 201d 	strb.w	r2, [sp, #29]
 800068e:	2302      	movs	r3, #2
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000696:	f88d 301c 	strb.w	r3, [sp, #28]
 800069a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800069c:	f1b8 0f02 	cmp.w	r8, #2
 80006a0:	bf08      	it	eq
 80006a2:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80006a4:	f013 0301 	ands.w	r3, r3, #1
 80006a8:	d00c      	beq.n	80006c4 <__gnu_unwind_pr_common+0x5c>
 80006aa:	a905      	add	r1, sp, #20
 80006ac:	4638      	mov	r0, r7
 80006ae:	f000 fb79 	bl	8000da4 <__gnu_unwind_execute>
 80006b2:	b918      	cbnz	r0, 80006bc <__gnu_unwind_pr_common+0x54>
 80006b4:	2008      	movs	r0, #8
 80006b6:	b009      	add	sp, #36	; 0x24
 80006b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006bc:	2009      	movs	r0, #9
 80006be:	b009      	add	sp, #36	; 0x24
 80006c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006c4:	f8d4 a000 	ldr.w	sl, [r4]
 80006c8:	f1ba 0f00 	cmp.w	sl, #0
 80006cc:	d0ed      	beq.n	80006aa <__gnu_unwind_pr_common+0x42>
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	f000 0308 	and.w	r3, r0, #8
 80006d4:	9302      	str	r3, [sp, #8]
 80006d6:	2e02      	cmp	r6, #2
 80006d8:	d04a      	beq.n	8000770 <__gnu_unwind_pr_common+0x108>
 80006da:	f8b4 a000 	ldrh.w	sl, [r4]
 80006de:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80006e2:	3404      	adds	r4, #4
 80006e4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80006e6:	f029 0b01 	bic.w	fp, r9, #1
 80006ea:	210f      	movs	r1, #15
 80006ec:	4638      	mov	r0, r7
 80006ee:	449b      	add	fp, r3
 80006f0:	f7ff ff46 	bl	8000580 <_Unwind_GetGR>
 80006f4:	4583      	cmp	fp, r0
 80006f6:	d839      	bhi.n	800076c <__gnu_unwind_pr_common+0x104>
 80006f8:	f02a 0301 	bic.w	r3, sl, #1
 80006fc:	449b      	add	fp, r3
 80006fe:	4583      	cmp	fp, r0
 8000700:	bf94      	ite	ls
 8000702:	2000      	movls	r0, #0
 8000704:	2001      	movhi	r0, #1
 8000706:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	f00a 0a01 	and.w	sl, sl, #1
 8000712:	ea43 030a 	orr.w	r3, r3, sl
 8000716:	2b01      	cmp	r3, #1
 8000718:	d049      	beq.n	80007ae <__gnu_unwind_pr_common+0x146>
 800071a:	2b02      	cmp	r3, #2
 800071c:	d032      	beq.n	8000784 <__gnu_unwind_pr_common+0x11c>
 800071e:	2b00      	cmp	r3, #0
 8000720:	d1cc      	bne.n	80006bc <__gnu_unwind_pr_common+0x54>
 8000722:	f1b8 0f00 	cmp.w	r8, #0
 8000726:	d002      	beq.n	800072e <__gnu_unwind_pr_common+0xc6>
 8000728:	2800      	cmp	r0, #0
 800072a:	f040 80cd 	bne.w	80008c8 <__gnu_unwind_pr_common+0x260>
 800072e:	3404      	adds	r4, #4
 8000730:	f8d4 a000 	ldr.w	sl, [r4]
 8000734:	f1ba 0f00 	cmp.w	sl, #0
 8000738:	d1cd      	bne.n	80006d6 <__gnu_unwind_pr_common+0x6e>
 800073a:	a905      	add	r1, sp, #20
 800073c:	4638      	mov	r0, r7
 800073e:	f000 fb31 	bl	8000da4 <__gnu_unwind_execute>
 8000742:	2800      	cmp	r0, #0
 8000744:	d1ba      	bne.n	80006bc <__gnu_unwind_pr_common+0x54>
 8000746:	9b01      	ldr	r3, [sp, #4]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d0b3      	beq.n	80006b4 <__gnu_unwind_pr_common+0x4c>
 800074c:	210f      	movs	r1, #15
 800074e:	4638      	mov	r0, r7
 8000750:	f7ff ff16 	bl	8000580 <_Unwind_GetGR>
 8000754:	210e      	movs	r1, #14
 8000756:	4602      	mov	r2, r0
 8000758:	4638      	mov	r0, r7
 800075a:	f7ff ff37 	bl	80005cc <_Unwind_SetGR>
 800075e:	4638      	mov	r0, r7
 8000760:	4a6a      	ldr	r2, [pc, #424]	; (800090c <__gnu_unwind_pr_common+0x2a4>)
 8000762:	210f      	movs	r1, #15
 8000764:	f7ff ff32 	bl	80005cc <_Unwind_SetGR>
 8000768:	2007      	movs	r0, #7
 800076a:	e7a8      	b.n	80006be <__gnu_unwind_pr_common+0x56>
 800076c:	2000      	movs	r0, #0
 800076e:	e7ca      	b.n	8000706 <__gnu_unwind_pr_common+0x9e>
 8000770:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000774:	3408      	adds	r4, #8
 8000776:	e7b5      	b.n	80006e4 <__gnu_unwind_pr_common+0x7c>
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	9305      	str	r3, [sp, #20]
 800077c:	2303      	movs	r3, #3
 800077e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000782:	e78a      	b.n	800069a <__gnu_unwind_pr_common+0x32>
 8000784:	6823      	ldr	r3, [r4, #0]
 8000786:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800078a:	f1b8 0f00 	cmp.w	r8, #0
 800078e:	d145      	bne.n	800081c <__gnu_unwind_pr_common+0x1b4>
 8000790:	b128      	cbz	r0, 800079e <__gnu_unwind_pr_common+0x136>
 8000792:	9a02      	ldr	r2, [sp, #8]
 8000794:	2a00      	cmp	r2, #0
 8000796:	d05c      	beq.n	8000852 <__gnu_unwind_pr_common+0x1ea>
 8000798:	f1bb 0f00 	cmp.w	fp, #0
 800079c:	d074      	beq.n	8000888 <__gnu_unwind_pr_common+0x220>
 800079e:	2b00      	cmp	r3, #0
 80007a0:	da00      	bge.n	80007a4 <__gnu_unwind_pr_common+0x13c>
 80007a2:	3404      	adds	r4, #4
 80007a4:	f10b 0b01 	add.w	fp, fp, #1
 80007a8:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 80007ac:	e7c0      	b.n	8000730 <__gnu_unwind_pr_common+0xc8>
 80007ae:	f1b8 0f00 	cmp.w	r8, #0
 80007b2:	d119      	bne.n	80007e8 <__gnu_unwind_pr_common+0x180>
 80007b4:	b1b0      	cbz	r0, 80007e4 <__gnu_unwind_pr_common+0x17c>
 80007b6:	6863      	ldr	r3, [r4, #4]
 80007b8:	6822      	ldr	r2, [r4, #0]
 80007ba:	1c99      	adds	r1, r3, #2
 80007bc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80007c0:	f43f af7c 	beq.w	80006bc <__gnu_unwind_pr_common+0x54>
 80007c4:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80007c8:	3301      	adds	r3, #1
 80007ca:	9104      	str	r1, [sp, #16]
 80007cc:	f000 8090 	beq.w	80008f0 <__gnu_unwind_pr_common+0x288>
 80007d0:	1d20      	adds	r0, r4, #4
 80007d2:	f7ff fdc1 	bl	8000358 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80007d6:	ab04      	add	r3, sp, #16
 80007d8:	4601      	mov	r1, r0
 80007da:	4628      	mov	r0, r5
 80007dc:	f3af 8000 	nop.w
 80007e0:	2800      	cmp	r0, #0
 80007e2:	d15b      	bne.n	800089c <__gnu_unwind_pr_common+0x234>
 80007e4:	3408      	adds	r4, #8
 80007e6:	e7a3      	b.n	8000730 <__gnu_unwind_pr_common+0xc8>
 80007e8:	210d      	movs	r1, #13
 80007ea:	4638      	mov	r0, r7
 80007ec:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80007f0:	f7ff fec6 	bl	8000580 <_Unwind_GetGR>
 80007f4:	4581      	cmp	r9, r0
 80007f6:	d1f5      	bne.n	80007e4 <__gnu_unwind_pr_common+0x17c>
 80007f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80007fa:	429c      	cmp	r4, r3
 80007fc:	d1f2      	bne.n	80007e4 <__gnu_unwind_pr_common+0x17c>
 80007fe:	4620      	mov	r0, r4
 8000800:	f7ff fce2 	bl	80001c8 <selfrel_offset31>
 8000804:	210f      	movs	r1, #15
 8000806:	4602      	mov	r2, r0
 8000808:	4638      	mov	r0, r7
 800080a:	f7ff fedf 	bl	80005cc <_Unwind_SetGR>
 800080e:	4638      	mov	r0, r7
 8000810:	462a      	mov	r2, r5
 8000812:	2100      	movs	r1, #0
 8000814:	f7ff feda 	bl	80005cc <_Unwind_SetGR>
 8000818:	2007      	movs	r0, #7
 800081a:	e750      	b.n	80006be <__gnu_unwind_pr_common+0x56>
 800081c:	210d      	movs	r1, #13
 800081e:	4638      	mov	r0, r7
 8000820:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000824:	f7ff feac 	bl	8000580 <_Unwind_GetGR>
 8000828:	4581      	cmp	r9, r0
 800082a:	d001      	beq.n	8000830 <__gnu_unwind_pr_common+0x1c8>
 800082c:	6823      	ldr	r3, [r4, #0]
 800082e:	e7b6      	b.n	800079e <__gnu_unwind_pr_common+0x136>
 8000830:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000832:	429c      	cmp	r4, r3
 8000834:	d1fa      	bne.n	800082c <__gnu_unwind_pr_common+0x1c4>
 8000836:	2304      	movs	r3, #4
 8000838:	2200      	movs	r2, #0
 800083a:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 800083e:	18e3      	adds	r3, r4, r3
 8000840:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000844:	636b      	str	r3, [r5, #52]	; 0x34
 8000846:	6823      	ldr	r3, [r4, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	db59      	blt.n	8000900 <__gnu_unwind_pr_common+0x298>
 800084c:	2301      	movs	r3, #1
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	e7a8      	b.n	80007a4 <__gnu_unwind_pr_common+0x13c>
 8000852:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000856:	f8cd 800c 	str.w	r8, [sp, #12]
 800085a:	f104 0a04 	add.w	sl, r4, #4
 800085e:	46b0      	mov	r8, r6
 8000860:	4691      	mov	r9, r2
 8000862:	461e      	mov	r6, r3
 8000864:	e00e      	b.n	8000884 <__gnu_unwind_pr_common+0x21c>
 8000866:	4650      	mov	r0, sl
 8000868:	9604      	str	r6, [sp, #16]
 800086a:	f7ff fd75 	bl	8000358 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800086e:	2200      	movs	r2, #0
 8000870:	4601      	mov	r1, r0
 8000872:	ab04      	add	r3, sp, #16
 8000874:	4628      	mov	r0, r5
 8000876:	f109 0901 	add.w	r9, r9, #1
 800087a:	f10a 0a04 	add.w	sl, sl, #4
 800087e:	f3af 8000 	nop.w
 8000882:	b9e0      	cbnz	r0, 80008be <__gnu_unwind_pr_common+0x256>
 8000884:	45d9      	cmp	r9, fp
 8000886:	d1ee      	bne.n	8000866 <__gnu_unwind_pr_common+0x1fe>
 8000888:	210d      	movs	r1, #13
 800088a:	4638      	mov	r0, r7
 800088c:	f7ff fe78 	bl	8000580 <_Unwind_GetGR>
 8000890:	9b04      	ldr	r3, [sp, #16]
 8000892:	62ac      	str	r4, [r5, #40]	; 0x28
 8000894:	e9c5 0308 	strd	r0, r3, [r5, #32]
 8000898:	2006      	movs	r0, #6
 800089a:	e710      	b.n	80006be <__gnu_unwind_pr_common+0x56>
 800089c:	4681      	mov	r9, r0
 800089e:	210d      	movs	r1, #13
 80008a0:	4638      	mov	r0, r7
 80008a2:	f7ff fe6d 	bl	8000580 <_Unwind_GetGR>
 80008a6:	f1b9 0f02 	cmp.w	r9, #2
 80008aa:	6228      	str	r0, [r5, #32]
 80008ac:	d125      	bne.n	80008fa <__gnu_unwind_pr_common+0x292>
 80008ae:	462b      	mov	r3, r5
 80008b0:	9a04      	ldr	r2, [sp, #16]
 80008b2:	f843 2f2c 	str.w	r2, [r3, #44]!
 80008b6:	626b      	str	r3, [r5, #36]	; 0x24
 80008b8:	62ac      	str	r4, [r5, #40]	; 0x28
 80008ba:	2006      	movs	r0, #6
 80008bc:	e6ff      	b.n	80006be <__gnu_unwind_pr_common+0x56>
 80008be:	4646      	mov	r6, r8
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80008c6:	e76a      	b.n	800079e <__gnu_unwind_pr_common+0x136>
 80008c8:	4620      	mov	r0, r4
 80008ca:	f7ff fc7d 	bl	80001c8 <selfrel_offset31>
 80008ce:	3404      	adds	r4, #4
 80008d0:	4602      	mov	r2, r0
 80008d2:	63ac      	str	r4, [r5, #56]	; 0x38
 80008d4:	4628      	mov	r0, r5
 80008d6:	4614      	mov	r4, r2
 80008d8:	f3af 8000 	nop.w
 80008dc:	2800      	cmp	r0, #0
 80008de:	f43f aeed 	beq.w	80006bc <__gnu_unwind_pr_common+0x54>
 80008e2:	4638      	mov	r0, r7
 80008e4:	4622      	mov	r2, r4
 80008e6:	210f      	movs	r1, #15
 80008e8:	f7ff fe70 	bl	80005cc <_Unwind_SetGR>
 80008ec:	2007      	movs	r0, #7
 80008ee:	e6e6      	b.n	80006be <__gnu_unwind_pr_common+0x56>
 80008f0:	210d      	movs	r1, #13
 80008f2:	4638      	mov	r0, r7
 80008f4:	f7ff fe44 	bl	8000580 <_Unwind_GetGR>
 80008f8:	6228      	str	r0, [r5, #32]
 80008fa:	9b04      	ldr	r3, [sp, #16]
 80008fc:	626b      	str	r3, [r5, #36]	; 0x24
 80008fe:	e7db      	b.n	80008b8 <__gnu_unwind_pr_common+0x250>
 8000900:	f10b 0001 	add.w	r0, fp, #1
 8000904:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000908:	e77a      	b.n	8000800 <__gnu_unwind_pr_common+0x198>
 800090a:	bf00      	nop
 800090c:	00000000 	.word	0x00000000

08000910 <__aeabi_unwind_cpp_pr0>:
 8000910:	2300      	movs	r3, #0
 8000912:	e6a9      	b.n	8000668 <__gnu_unwind_pr_common>

08000914 <__aeabi_unwind_cpp_pr1>:
 8000914:	2301      	movs	r3, #1
 8000916:	e6a7      	b.n	8000668 <__gnu_unwind_pr_common>

08000918 <__aeabi_unwind_cpp_pr2>:
 8000918:	2302      	movs	r3, #2
 800091a:	e6a5      	b.n	8000668 <__gnu_unwind_pr_common>

0800091c <_Unwind_VRS_Pop>:
 800091c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000920:	4606      	mov	r6, r0
 8000922:	b0c3      	sub	sp, #268	; 0x10c
 8000924:	4615      	mov	r5, r2
 8000926:	461c      	mov	r4, r3
 8000928:	2904      	cmp	r1, #4
 800092a:	f200 80bf 	bhi.w	8000aac <_Unwind_VRS_Pop+0x190>
 800092e:	e8df f001 	tbb	[pc, r1]
 8000932:	579e      	.short	0x579e
 8000934:	2dbd      	.short	0x2dbd
 8000936:	03          	.byte	0x03
 8000937:	00          	.byte	0x00
 8000938:	2c00      	cmp	r4, #0
 800093a:	f040 80b7 	bne.w	8000aac <_Unwind_VRS_Pop+0x190>
 800093e:	2a10      	cmp	r2, #16
 8000940:	f200 80b4 	bhi.w	8000aac <_Unwind_VRS_Pop+0x190>
 8000944:	6803      	ldr	r3, [r0, #0]
 8000946:	06d8      	lsls	r0, r3, #27
 8000948:	f100 80f9 	bmi.w	8000b3e <_Unwind_VRS_Pop+0x222>
 800094c:	af20      	add	r7, sp, #128	; 0x80
 800094e:	4638      	mov	r0, r7
 8000950:	f000 f998 	bl	8000c84 <__gnu_Unwind_Save_WMMXC>
 8000954:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 8000956:	4639      	mov	r1, r7
 8000958:	2300      	movs	r3, #0
 800095a:	f04f 0c01 	mov.w	ip, #1
 800095e:	fa0c f203 	lsl.w	r2, ip, r3
 8000962:	422a      	tst	r2, r5
 8000964:	4620      	mov	r0, r4
 8000966:	f103 0301 	add.w	r3, r3, #1
 800096a:	d003      	beq.n	8000974 <_Unwind_VRS_Pop+0x58>
 800096c:	f850 2b04 	ldr.w	r2, [r0], #4
 8000970:	600a      	str	r2, [r1, #0]
 8000972:	4604      	mov	r4, r0
 8000974:	2b04      	cmp	r3, #4
 8000976:	f101 0104 	add.w	r1, r1, #4
 800097a:	d1f0      	bne.n	800095e <_Unwind_VRS_Pop+0x42>
 800097c:	4638      	mov	r0, r7
 800097e:	63b4      	str	r4, [r6, #56]	; 0x38
 8000980:	f000 f976 	bl	8000c70 <__gnu_Unwind_Restore_WMMXC>
 8000984:	2000      	movs	r0, #0
 8000986:	b043      	add	sp, #268	; 0x10c
 8000988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800098c:	2c03      	cmp	r4, #3
 800098e:	f040 808d 	bne.w	8000aac <_Unwind_VRS_Pop+0x190>
 8000992:	b294      	uxth	r4, r2
 8000994:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000998:	2b10      	cmp	r3, #16
 800099a:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800099e:	f200 8085 	bhi.w	8000aac <_Unwind_VRS_Pop+0x190>
 80009a2:	6803      	ldr	r3, [r0, #0]
 80009a4:	071f      	lsls	r7, r3, #28
 80009a6:	f100 80d2 	bmi.w	8000b4e <_Unwind_VRS_Pop+0x232>
 80009aa:	af20      	add	r7, sp, #128	; 0x80
 80009ac:	4638      	mov	r0, r7
 80009ae:	f000 f93d 	bl	8000c2c <__gnu_Unwind_Save_WMMXD>
 80009b2:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80009b4:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 80009b8:	b154      	cbz	r4, 80009d0 <_Unwind_VRS_Pop+0xb4>
 80009ba:	460b      	mov	r3, r1
 80009bc:	1ad0      	subs	r0, r2, r3
 80009be:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80009c2:	00e4      	lsls	r4, r4, #3
 80009c4:	581d      	ldr	r5, [r3, r0]
 80009c6:	f843 5b04 	str.w	r5, [r3], #4
 80009ca:	428b      	cmp	r3, r1
 80009cc:	d1fa      	bne.n	80009c4 <_Unwind_VRS_Pop+0xa8>
 80009ce:	4422      	add	r2, r4
 80009d0:	4638      	mov	r0, r7
 80009d2:	63b2      	str	r2, [r6, #56]	; 0x38
 80009d4:	f000 f908 	bl	8000be8 <__gnu_Unwind_Restore_WMMXD>
 80009d8:	2000      	movs	r0, #0
 80009da:	b043      	add	sp, #268	; 0x10c
 80009dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009e0:	2c01      	cmp	r4, #1
 80009e2:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80009e6:	b295      	uxth	r5, r2
 80009e8:	d05c      	beq.n	8000aa4 <_Unwind_VRS_Pop+0x188>
 80009ea:	2c05      	cmp	r4, #5
 80009ec:	d15e      	bne.n	8000aac <_Unwind_VRS_Pop+0x190>
 80009ee:	eb08 0905 	add.w	r9, r8, r5
 80009f2:	f1b9 0f20 	cmp.w	r9, #32
 80009f6:	d859      	bhi.n	8000aac <_Unwind_VRS_Pop+0x190>
 80009f8:	f1b8 0f0f 	cmp.w	r8, #15
 80009fc:	d979      	bls.n	8000af2 <_Unwind_VRS_Pop+0x1d6>
 80009fe:	46a9      	mov	r9, r5
 8000a00:	2d00      	cmp	r5, #0
 8000a02:	f040 808a 	bne.w	8000b1a <_Unwind_VRS_Pop+0x1fe>
 8000a06:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000a08:	b36d      	cbz	r5, 8000a66 <_Unwind_VRS_Pop+0x14a>
 8000a0a:	af20      	add	r7, sp, #128	; 0x80
 8000a0c:	f04f 0900 	mov.w	r9, #0
 8000a10:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000a14:	3f04      	subs	r7, #4
 8000a16:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000a1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8000a1e:	f847 1f04 	str.w	r1, [r7, #4]!
 8000a22:	42ab      	cmp	r3, r5
 8000a24:	d1f9      	bne.n	8000a1a <_Unwind_VRS_Pop+0xfe>
 8000a26:	f1b9 0f00 	cmp.w	r9, #0
 8000a2a:	d00f      	beq.n	8000a4c <_Unwind_VRS_Pop+0x130>
 8000a2c:	466f      	mov	r7, sp
 8000a2e:	4641      	mov	r1, r8
 8000a30:	2910      	cmp	r1, #16
 8000a32:	bf38      	it	cc
 8000a34:	2110      	movcc	r1, #16
 8000a36:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000a3a:	3984      	subs	r1, #132	; 0x84
 8000a3c:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000a40:	f853 0b04 	ldr.w	r0, [r3], #4
 8000a44:	f841 0f04 	str.w	r0, [r1, #4]!
 8000a48:	42ab      	cmp	r3, r5
 8000a4a:	d1f9      	bne.n	8000a40 <_Unwind_VRS_Pop+0x124>
 8000a4c:	2c01      	cmp	r4, #1
 8000a4e:	f000 8086 	beq.w	8000b5e <_Unwind_VRS_Pop+0x242>
 8000a52:	f1b8 0f0f 	cmp.w	r8, #15
 8000a56:	63b5      	str	r5, [r6, #56]	; 0x38
 8000a58:	d947      	bls.n	8000aea <_Unwind_VRS_Pop+0x1ce>
 8000a5a:	f1b9 0f00 	cmp.w	r9, #0
 8000a5e:	d002      	beq.n	8000a66 <_Unwind_VRS_Pop+0x14a>
 8000a60:	4668      	mov	r0, sp
 8000a62:	f000 f8b9 	bl	8000bd8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000a66:	2000      	movs	r0, #0
 8000a68:	b043      	add	sp, #268	; 0x10c
 8000a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a6e:	b9ec      	cbnz	r4, 8000aac <_Unwind_VRS_Pop+0x190>
 8000a70:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000a72:	4623      	mov	r3, r4
 8000a74:	fa1f fc82 	uxth.w	ip, r2
 8000a78:	2401      	movs	r4, #1
 8000a7a:	1d37      	adds	r7, r6, #4
 8000a7c:	fa04 f203 	lsl.w	r2, r4, r3
 8000a80:	ea12 0f0c 	tst.w	r2, ip
 8000a84:	4601      	mov	r1, r0
 8000a86:	d004      	beq.n	8000a92 <_Unwind_VRS_Pop+0x176>
 8000a88:	f851 2b04 	ldr.w	r2, [r1], #4
 8000a8c:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8000a90:	4608      	mov	r0, r1
 8000a92:	3301      	adds	r3, #1
 8000a94:	2b10      	cmp	r3, #16
 8000a96:	d1f1      	bne.n	8000a7c <_Unwind_VRS_Pop+0x160>
 8000a98:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
 8000a9c:	d1e3      	bne.n	8000a66 <_Unwind_VRS_Pop+0x14a>
 8000a9e:	63b0      	str	r0, [r6, #56]	; 0x38
 8000aa0:	4628      	mov	r0, r5
 8000aa2:	e004      	b.n	8000aae <_Unwind_VRS_Pop+0x192>
 8000aa4:	eb08 0305 	add.w	r3, r8, r5
 8000aa8:	2b10      	cmp	r3, #16
 8000aaa:	d903      	bls.n	8000ab4 <_Unwind_VRS_Pop+0x198>
 8000aac:	2002      	movs	r0, #2
 8000aae:	b043      	add	sp, #268	; 0x10c
 8000ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ab4:	f1b8 0f0f 	cmp.w	r8, #15
 8000ab8:	d8f8      	bhi.n	8000aac <_Unwind_VRS_Pop+0x190>
 8000aba:	6833      	ldr	r3, [r6, #0]
 8000abc:	07da      	lsls	r2, r3, #31
 8000abe:	d506      	bpl.n	8000ace <_Unwind_VRS_Pop+0x1b2>
 8000ac0:	4630      	mov	r0, r6
 8000ac2:	f023 0303 	bic.w	r3, r3, #3
 8000ac6:	f840 3b48 	str.w	r3, [r0], #72
 8000aca:	f000 f879 	bl	8000bc0 <__gnu_Unwind_Save_VFP>
 8000ace:	af20      	add	r7, sp, #128	; 0x80
 8000ad0:	4638      	mov	r0, r7
 8000ad2:	f000 f875 	bl	8000bc0 <__gnu_Unwind_Save_VFP>
 8000ad6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000ad8:	2d00      	cmp	r5, #0
 8000ada:	d197      	bne.n	8000a0c <_Unwind_VRS_Pop+0xf0>
 8000adc:	461d      	mov	r5, r3
 8000ade:	3504      	adds	r5, #4
 8000ae0:	63b5      	str	r5, [r6, #56]	; 0x38
 8000ae2:	4638      	mov	r0, r7
 8000ae4:	f000 f868 	bl	8000bb8 <__gnu_Unwind_Restore_VFP>
 8000ae8:	e7bd      	b.n	8000a66 <_Unwind_VRS_Pop+0x14a>
 8000aea:	a820      	add	r0, sp, #128	; 0x80
 8000aec:	f000 f86c 	bl	8000bc8 <__gnu_Unwind_Restore_VFP_D>
 8000af0:	e7b3      	b.n	8000a5a <_Unwind_VRS_Pop+0x13e>
 8000af2:	f1b9 0f10 	cmp.w	r9, #16
 8000af6:	d940      	bls.n	8000b7a <_Unwind_VRS_Pop+0x25e>
 8000af8:	f1a9 0910 	sub.w	r9, r9, #16
 8000afc:	6833      	ldr	r3, [r6, #0]
 8000afe:	07d9      	lsls	r1, r3, #31
 8000b00:	d508      	bpl.n	8000b14 <_Unwind_VRS_Pop+0x1f8>
 8000b02:	f023 0301 	bic.w	r3, r3, #1
 8000b06:	4630      	mov	r0, r6
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	f840 3b48 	str.w	r3, [r0], #72
 8000b10:	f000 f85e 	bl	8000bd0 <__gnu_Unwind_Save_VFP_D>
 8000b14:	f1b9 0f00 	cmp.w	r9, #0
 8000b18:	d032      	beq.n	8000b80 <_Unwind_VRS_Pop+0x264>
 8000b1a:	6833      	ldr	r3, [r6, #0]
 8000b1c:	075a      	lsls	r2, r3, #29
 8000b1e:	d420      	bmi.n	8000b62 <_Unwind_VRS_Pop+0x246>
 8000b20:	f1b8 0f0f 	cmp.w	r8, #15
 8000b24:	d925      	bls.n	8000b72 <_Unwind_VRS_Pop+0x256>
 8000b26:	466f      	mov	r7, sp
 8000b28:	4638      	mov	r0, r7
 8000b2a:	f1c8 0510 	rsb	r5, r8, #16
 8000b2e:	f000 f857 	bl	8000be0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b36:	f77f af7a 	ble.w	8000a2e <_Unwind_VRS_Pop+0x112>
 8000b3a:	af20      	add	r7, sp, #128	; 0x80
 8000b3c:	e768      	b.n	8000a10 <_Unwind_VRS_Pop+0xf4>
 8000b3e:	f023 0310 	bic.w	r3, r3, #16
 8000b42:	6033      	str	r3, [r6, #0]
 8000b44:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000b48:	f000 f89c 	bl	8000c84 <__gnu_Unwind_Save_WMMXC>
 8000b4c:	e6fe      	b.n	800094c <_Unwind_VRS_Pop+0x30>
 8000b4e:	f023 0308 	bic.w	r3, r3, #8
 8000b52:	6003      	str	r3, [r0, #0]
 8000b54:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000b58:	f000 f868 	bl	8000c2c <__gnu_Unwind_Save_WMMXD>
 8000b5c:	e725      	b.n	80009aa <_Unwind_VRS_Pop+0x8e>
 8000b5e:	af20      	add	r7, sp, #128	; 0x80
 8000b60:	e7bd      	b.n	8000ade <_Unwind_VRS_Pop+0x1c2>
 8000b62:	4630      	mov	r0, r6
 8000b64:	f023 0304 	bic.w	r3, r3, #4
 8000b68:	f840 3bd0 	str.w	r3, [r0], #208
 8000b6c:	f000 f838 	bl	8000be0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b70:	e7d6      	b.n	8000b20 <_Unwind_VRS_Pop+0x204>
 8000b72:	a820      	add	r0, sp, #128	; 0x80
 8000b74:	f000 f82c 	bl	8000bd0 <__gnu_Unwind_Save_VFP_D>
 8000b78:	e7d5      	b.n	8000b26 <_Unwind_VRS_Pop+0x20a>
 8000b7a:	f04f 0900 	mov.w	r9, #0
 8000b7e:	e7bd      	b.n	8000afc <_Unwind_VRS_Pop+0x1e0>
 8000b80:	f1b8 0f0f 	cmp.w	r8, #15
 8000b84:	f63f af3f 	bhi.w	8000a06 <_Unwind_VRS_Pop+0xea>
 8000b88:	af20      	add	r7, sp, #128	; 0x80
 8000b8a:	4638      	mov	r0, r7
 8000b8c:	f000 f820 	bl	8000bd0 <__gnu_Unwind_Save_VFP_D>
 8000b90:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	f47f af3a 	bne.w	8000a0c <_Unwind_VRS_Pop+0xf0>
 8000b98:	4638      	mov	r0, r7
 8000b9a:	f000 f815 	bl	8000bc8 <__gnu_Unwind_Restore_VFP_D>
 8000b9e:	e762      	b.n	8000a66 <_Unwind_VRS_Pop+0x14a>

08000ba0 <__restore_core_regs>:
 8000ba0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000ba4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000ba8:	469c      	mov	ip, r3
 8000baa:	46a6      	mov	lr, r4
 8000bac:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000bb0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000bb4:	46e5      	mov	sp, ip
 8000bb6:	bd00      	pop	{pc}

08000bb8 <__gnu_Unwind_Restore_VFP>:
 8000bb8:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__gnu_Unwind_Save_VFP>:
 8000bc0:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__gnu_Unwind_Restore_VFP_D>:
 8000bc8:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__gnu_Unwind_Save_VFP_D>:
 8000bd0:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000bd8:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000be0:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__gnu_Unwind_Restore_WMMXD>:
 8000be8:	ecf0 0102 	ldfe	f0, [r0], #8
 8000bec:	ecf0 1102 	ldfe	f1, [r0], #8
 8000bf0:	ecf0 2102 	ldfe	f2, [r0], #8
 8000bf4:	ecf0 3102 	ldfe	f3, [r0], #8
 8000bf8:	ecf0 4102 	ldfe	f4, [r0], #8
 8000bfc:	ecf0 5102 	ldfe	f5, [r0], #8
 8000c00:	ecf0 6102 	ldfe	f6, [r0], #8
 8000c04:	ecf0 7102 	ldfe	f7, [r0], #8
 8000c08:	ecf0 8102 	ldfp	f0, [r0], #8
 8000c0c:	ecf0 9102 	ldfp	f1, [r0], #8
 8000c10:	ecf0 a102 	ldfp	f2, [r0], #8
 8000c14:	ecf0 b102 	ldfp	f3, [r0], #8
 8000c18:	ecf0 c102 	ldfp	f4, [r0], #8
 8000c1c:	ecf0 d102 	ldfp	f5, [r0], #8
 8000c20:	ecf0 e102 	ldfp	f6, [r0], #8
 8000c24:	ecf0 f102 	ldfp	f7, [r0], #8
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__gnu_Unwind_Save_WMMXD>:
 8000c2c:	ece0 0102 	stfe	f0, [r0], #8
 8000c30:	ece0 1102 	stfe	f1, [r0], #8
 8000c34:	ece0 2102 	stfe	f2, [r0], #8
 8000c38:	ece0 3102 	stfe	f3, [r0], #8
 8000c3c:	ece0 4102 	stfe	f4, [r0], #8
 8000c40:	ece0 5102 	stfe	f5, [r0], #8
 8000c44:	ece0 6102 	stfe	f6, [r0], #8
 8000c48:	ece0 7102 	stfe	f7, [r0], #8
 8000c4c:	ece0 8102 	stfp	f0, [r0], #8
 8000c50:	ece0 9102 	stfp	f1, [r0], #8
 8000c54:	ece0 a102 	stfp	f2, [r0], #8
 8000c58:	ece0 b102 	stfp	f3, [r0], #8
 8000c5c:	ece0 c102 	stfp	f4, [r0], #8
 8000c60:	ece0 d102 	stfp	f5, [r0], #8
 8000c64:	ece0 e102 	stfp	f6, [r0], #8
 8000c68:	ece0 f102 	stfp	f7, [r0], #8
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop

08000c70 <__gnu_Unwind_Restore_WMMXC>:
 8000c70:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000c74:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000c78:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000c7c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop

08000c84 <__gnu_Unwind_Save_WMMXC>:
 8000c84:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000c88:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000c8c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000c90:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <_Unwind_RaiseException>:
 8000c98:	46ec      	mov	ip, sp
 8000c9a:	b500      	push	{lr}
 8000c9c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ca0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cac:	a901      	add	r1, sp, #4
 8000cae:	f7ff fbe1 	bl	8000474 <__gnu_Unwind_RaiseException>
 8000cb2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cb6:	b012      	add	sp, #72	; 0x48
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <_Unwind_Resume>:
 8000cbc:	46ec      	mov	ip, sp
 8000cbe:	b500      	push	{lr}
 8000cc0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cc4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cd0:	a901      	add	r1, sp, #4
 8000cd2:	f7ff fc0b 	bl	80004ec <__gnu_Unwind_Resume>
 8000cd6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cda:	b012      	add	sp, #72	; 0x48
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <_Unwind_Resume_or_Rethrow>:
 8000ce0:	46ec      	mov	ip, sp
 8000ce2:	b500      	push	{lr}
 8000ce4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ce8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cf4:	a901      	add	r1, sp, #4
 8000cf6:	f7ff fc1b 	bl	8000530 <__gnu_Unwind_Resume_or_Rethrow>
 8000cfa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cfe:	b012      	add	sp, #72	; 0x48
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <_Unwind_ForcedUnwind>:
 8000d04:	46ec      	mov	ip, sp
 8000d06:	b500      	push	{lr}
 8000d08:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d0c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d18:	ab01      	add	r3, sp, #4
 8000d1a:	f7ff fbdf 	bl	80004dc <__gnu_Unwind_ForcedUnwind>
 8000d1e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d22:	b012      	add	sp, #72	; 0x48
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <_Unwind_Backtrace>:
 8000d28:	46ec      	mov	ip, sp
 8000d2a:	b500      	push	{lr}
 8000d2c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000d30:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000d3c:	aa01      	add	r2, sp, #4
 8000d3e:	f7ff fc51 	bl	80005e4 <__gnu_Unwind_Backtrace>
 8000d42:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000d46:	b012      	add	sp, #72	; 0x48
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <next_unwind_byte>:
 8000d4c:	7a02      	ldrb	r2, [r0, #8]
 8000d4e:	4603      	mov	r3, r0
 8000d50:	b97a      	cbnz	r2, 8000d72 <next_unwind_byte+0x26>
 8000d52:	7a42      	ldrb	r2, [r0, #9]
 8000d54:	b1a2      	cbz	r2, 8000d80 <next_unwind_byte+0x34>
 8000d56:	6841      	ldr	r1, [r0, #4]
 8000d58:	3a01      	subs	r2, #1
 8000d5a:	b410      	push	{r4}
 8000d5c:	7242      	strb	r2, [r0, #9]
 8000d5e:	6808      	ldr	r0, [r1, #0]
 8000d60:	2203      	movs	r2, #3
 8000d62:	1d0c      	adds	r4, r1, #4
 8000d64:	721a      	strb	r2, [r3, #8]
 8000d66:	0202      	lsls	r2, r0, #8
 8000d68:	605c      	str	r4, [r3, #4]
 8000d6a:	0e00      	lsrs	r0, r0, #24
 8000d6c:	bc10      	pop	{r4}
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	4770      	bx	lr
 8000d72:	6800      	ldr	r0, [r0, #0]
 8000d74:	3a01      	subs	r2, #1
 8000d76:	721a      	strb	r2, [r3, #8]
 8000d78:	0202      	lsls	r2, r0, #8
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	0e00      	lsrs	r0, r0, #24
 8000d7e:	4770      	bx	lr
 8000d80:	20b0      	movs	r0, #176	; 0xb0
 8000d82:	4770      	bx	lr

08000d84 <_Unwind_GetGR.constprop.0>:
 8000d84:	b500      	push	{lr}
 8000d86:	b085      	sub	sp, #20
 8000d88:	2300      	movs	r3, #0
 8000d8a:	aa03      	add	r2, sp, #12
 8000d8c:	9200      	str	r2, [sp, #0]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	220c      	movs	r2, #12
 8000d92:	f7ff fbdd 	bl	8000550 <_Unwind_VRS_Get>
 8000d96:	9803      	ldr	r0, [sp, #12]
 8000d98:	b005      	add	sp, #20
 8000d9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d9e:	bf00      	nop

08000da0 <unwind_UCB_from_context>:
 8000da0:	e7f0      	b.n	8000d84 <_Unwind_GetGR.constprop.0>
 8000da2:	bf00      	nop

08000da4 <__gnu_unwind_execute>:
 8000da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000da8:	4605      	mov	r5, r0
 8000daa:	b085      	sub	sp, #20
 8000dac:	460e      	mov	r6, r1
 8000dae:	f04f 0800 	mov.w	r8, #0
 8000db2:	4630      	mov	r0, r6
 8000db4:	f7ff ffca 	bl	8000d4c <next_unwind_byte>
 8000db8:	28b0      	cmp	r0, #176	; 0xb0
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f000 80ba 	beq.w	8000f34 <__gnu_unwind_execute+0x190>
 8000dc0:	0607      	lsls	r7, r0, #24
 8000dc2:	d520      	bpl.n	8000e06 <__gnu_unwind_execute+0x62>
 8000dc4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000dc8:	2b80      	cmp	r3, #128	; 0x80
 8000dca:	d04d      	beq.n	8000e68 <__gnu_unwind_execute+0xc4>
 8000dcc:	2b90      	cmp	r3, #144	; 0x90
 8000dce:	d036      	beq.n	8000e3e <__gnu_unwind_execute+0x9a>
 8000dd0:	2ba0      	cmp	r3, #160	; 0xa0
 8000dd2:	d060      	beq.n	8000e96 <__gnu_unwind_execute+0xf2>
 8000dd4:	2bb0      	cmp	r3, #176	; 0xb0
 8000dd6:	d074      	beq.n	8000ec2 <__gnu_unwind_execute+0x11e>
 8000dd8:	2bc0      	cmp	r3, #192	; 0xc0
 8000dda:	f000 808b 	beq.w	8000ef4 <__gnu_unwind_execute+0x150>
 8000dde:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000de2:	2bd0      	cmp	r3, #208	; 0xd0
 8000de4:	d10b      	bne.n	8000dfe <__gnu_unwind_execute+0x5a>
 8000de6:	f000 0207 	and.w	r2, r0, #7
 8000dea:	3201      	adds	r2, #1
 8000dec:	2305      	movs	r3, #5
 8000dee:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000df2:	2101      	movs	r1, #1
 8000df4:	4628      	mov	r0, r5
 8000df6:	f7ff fd91 	bl	800091c <_Unwind_VRS_Pop>
 8000dfa:	2800      	cmp	r0, #0
 8000dfc:	d0d9      	beq.n	8000db2 <__gnu_unwind_execute+0xe>
 8000dfe:	2009      	movs	r0, #9
 8000e00:	b005      	add	sp, #20
 8000e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e06:	0083      	lsls	r3, r0, #2
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	1d1f      	adds	r7, r3, #4
 8000e0c:	f10d 090c 	add.w	r9, sp, #12
 8000e10:	2300      	movs	r3, #0
 8000e12:	4619      	mov	r1, r3
 8000e14:	f8cd 9000 	str.w	r9, [sp]
 8000e18:	220d      	movs	r2, #13
 8000e1a:	4628      	mov	r0, r5
 8000e1c:	f7ff fb98 	bl	8000550 <_Unwind_VRS_Get>
 8000e20:	9b03      	ldr	r3, [sp, #12]
 8000e22:	f8cd 9000 	str.w	r9, [sp]
 8000e26:	0660      	lsls	r0, r4, #25
 8000e28:	bf4c      	ite	mi
 8000e2a:	1bdf      	submi	r7, r3, r7
 8000e2c:	18ff      	addpl	r7, r7, r3
 8000e2e:	2300      	movs	r3, #0
 8000e30:	220d      	movs	r2, #13
 8000e32:	4619      	mov	r1, r3
 8000e34:	4628      	mov	r0, r5
 8000e36:	9703      	str	r7, [sp, #12]
 8000e38:	f7ff fbb0 	bl	800059c <_Unwind_VRS_Set>
 8000e3c:	e7b9      	b.n	8000db2 <__gnu_unwind_execute+0xe>
 8000e3e:	f000 030d 	and.w	r3, r0, #13
 8000e42:	2b0d      	cmp	r3, #13
 8000e44:	d0db      	beq.n	8000dfe <__gnu_unwind_execute+0x5a>
 8000e46:	af03      	add	r7, sp, #12
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f000 020f 	and.w	r2, r0, #15
 8000e4e:	4619      	mov	r1, r3
 8000e50:	9700      	str	r7, [sp, #0]
 8000e52:	4628      	mov	r0, r5
 8000e54:	f7ff fb7c 	bl	8000550 <_Unwind_VRS_Get>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	9700      	str	r7, [sp, #0]
 8000e5c:	220d      	movs	r2, #13
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4628      	mov	r0, r5
 8000e62:	f7ff fb9b 	bl	800059c <_Unwind_VRS_Set>
 8000e66:	e7a4      	b.n	8000db2 <__gnu_unwind_execute+0xe>
 8000e68:	4630      	mov	r0, r6
 8000e6a:	f7ff ff6f 	bl	8000d4c <next_unwind_byte>
 8000e6e:	0224      	lsls	r4, r4, #8
 8000e70:	4320      	orrs	r0, r4
 8000e72:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000e76:	d0c2      	beq.n	8000dfe <__gnu_unwind_execute+0x5a>
 8000e78:	0104      	lsls	r4, r0, #4
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	b2a2      	uxth	r2, r4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4628      	mov	r0, r5
 8000e82:	f7ff fd4b 	bl	800091c <_Unwind_VRS_Pop>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d1b9      	bne.n	8000dfe <__gnu_unwind_execute+0x5a>
 8000e8a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000e8e:	bf18      	it	ne
 8000e90:	f04f 0801 	movne.w	r8, #1
 8000e94:	e78d      	b.n	8000db2 <__gnu_unwind_execute+0xe>
 8000e96:	43c2      	mvns	r2, r0
 8000e98:	f002 0307 	and.w	r3, r2, #7
 8000e9c:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000ea0:	411a      	asrs	r2, r3
 8000ea2:	0701      	lsls	r1, r0, #28
 8000ea4:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	bf48      	it	mi
 8000eae:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4628      	mov	r0, r5
 8000eb6:	f7ff fd31 	bl	800091c <_Unwind_VRS_Pop>
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	f43f af79 	beq.w	8000db2 <__gnu_unwind_execute+0xe>
 8000ec0:	e79d      	b.n	8000dfe <__gnu_unwind_execute+0x5a>
 8000ec2:	28b1      	cmp	r0, #177	; 0xb1
 8000ec4:	d03b      	beq.n	8000f3e <__gnu_unwind_execute+0x19a>
 8000ec6:	28b2      	cmp	r0, #178	; 0xb2
 8000ec8:	f000 8093 	beq.w	8000ff2 <__gnu_unwind_execute+0x24e>
 8000ecc:	28b3      	cmp	r0, #179	; 0xb3
 8000ece:	d041      	beq.n	8000f54 <__gnu_unwind_execute+0x1b0>
 8000ed0:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000ed4:	2bb4      	cmp	r3, #180	; 0xb4
 8000ed6:	d092      	beq.n	8000dfe <__gnu_unwind_execute+0x5a>
 8000ed8:	f000 0207 	and.w	r2, r0, #7
 8000edc:	3201      	adds	r2, #1
 8000ede:	2301      	movs	r3, #1
 8000ee0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4628      	mov	r0, r5
 8000ee8:	f7ff fd18 	bl	800091c <_Unwind_VRS_Pop>
 8000eec:	2800      	cmp	r0, #0
 8000eee:	f43f af60 	beq.w	8000db2 <__gnu_unwind_execute+0xe>
 8000ef2:	e784      	b.n	8000dfe <__gnu_unwind_execute+0x5a>
 8000ef4:	28c6      	cmp	r0, #198	; 0xc6
 8000ef6:	d04a      	beq.n	8000f8e <__gnu_unwind_execute+0x1ea>
 8000ef8:	28c7      	cmp	r0, #199	; 0xc7
 8000efa:	d054      	beq.n	8000fa6 <__gnu_unwind_execute+0x202>
 8000efc:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000f00:	2bc0      	cmp	r3, #192	; 0xc0
 8000f02:	d063      	beq.n	8000fcc <__gnu_unwind_execute+0x228>
 8000f04:	28c8      	cmp	r0, #200	; 0xc8
 8000f06:	d068      	beq.n	8000fda <__gnu_unwind_execute+0x236>
 8000f08:	28c9      	cmp	r0, #201	; 0xc9
 8000f0a:	f47f af78 	bne.w	8000dfe <__gnu_unwind_execute+0x5a>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	f7ff ff1c 	bl	8000d4c <next_unwind_byte>
 8000f14:	0302      	lsls	r2, r0, #12
 8000f16:	f000 000f 	and.w	r0, r0, #15
 8000f1a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000f1e:	3001      	adds	r0, #1
 8000f20:	4302      	orrs	r2, r0
 8000f22:	2101      	movs	r1, #1
 8000f24:	2305      	movs	r3, #5
 8000f26:	4628      	mov	r0, r5
 8000f28:	f7ff fcf8 	bl	800091c <_Unwind_VRS_Pop>
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	f43f af40 	beq.w	8000db2 <__gnu_unwind_execute+0xe>
 8000f32:	e764      	b.n	8000dfe <__gnu_unwind_execute+0x5a>
 8000f34:	f1b8 0f00 	cmp.w	r8, #0
 8000f38:	d018      	beq.n	8000f6c <__gnu_unwind_execute+0x1c8>
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	e760      	b.n	8000e00 <__gnu_unwind_execute+0x5c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	f7ff ff04 	bl	8000d4c <next_unwind_byte>
 8000f44:	4602      	mov	r2, r0
 8000f46:	2800      	cmp	r0, #0
 8000f48:	f43f af59 	beq.w	8000dfe <__gnu_unwind_execute+0x5a>
 8000f4c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f50:	d0c8      	beq.n	8000ee4 <__gnu_unwind_execute+0x140>
 8000f52:	e754      	b.n	8000dfe <__gnu_unwind_execute+0x5a>
 8000f54:	4630      	mov	r0, r6
 8000f56:	f7ff fef9 	bl	8000d4c <next_unwind_byte>
 8000f5a:	0302      	lsls	r2, r0, #12
 8000f5c:	f000 030f 	and.w	r3, r0, #15
 8000f60:	3301      	adds	r3, #1
 8000f62:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000f66:	431a      	orrs	r2, r3
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e7bb      	b.n	8000ee4 <__gnu_unwind_execute+0x140>
 8000f6c:	ac03      	add	r4, sp, #12
 8000f6e:	4643      	mov	r3, r8
 8000f70:	220e      	movs	r2, #14
 8000f72:	4641      	mov	r1, r8
 8000f74:	9400      	str	r4, [sp, #0]
 8000f76:	4628      	mov	r0, r5
 8000f78:	f7ff faea 	bl	8000550 <_Unwind_VRS_Get>
 8000f7c:	9400      	str	r4, [sp, #0]
 8000f7e:	4643      	mov	r3, r8
 8000f80:	220f      	movs	r2, #15
 8000f82:	4641      	mov	r1, r8
 8000f84:	4628      	mov	r0, r5
 8000f86:	f7ff fb09 	bl	800059c <_Unwind_VRS_Set>
 8000f8a:	4640      	mov	r0, r8
 8000f8c:	e738      	b.n	8000e00 <__gnu_unwind_execute+0x5c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	f7ff fedc 	bl	8000d4c <next_unwind_byte>
 8000f94:	0302      	lsls	r2, r0, #12
 8000f96:	f000 030f 	and.w	r3, r0, #15
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e79e      	b.n	8000ee4 <__gnu_unwind_execute+0x140>
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	f7ff fed0 	bl	8000d4c <next_unwind_byte>
 8000fac:	4602      	mov	r2, r0
 8000fae:	2800      	cmp	r0, #0
 8000fb0:	f43f af25 	beq.w	8000dfe <__gnu_unwind_execute+0x5a>
 8000fb4:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fb8:	f47f af21 	bne.w	8000dfe <__gnu_unwind_execute+0x5a>
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	4628      	mov	r0, r5
 8000fc0:	f7ff fcac 	bl	800091c <_Unwind_VRS_Pop>
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	f43f aef4 	beq.w	8000db2 <__gnu_unwind_execute+0xe>
 8000fca:	e718      	b.n	8000dfe <__gnu_unwind_execute+0x5a>
 8000fcc:	f000 020f 	and.w	r2, r0, #15
 8000fd0:	3201      	adds	r2, #1
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000fd8:	e784      	b.n	8000ee4 <__gnu_unwind_execute+0x140>
 8000fda:	4630      	mov	r0, r6
 8000fdc:	f7ff feb6 	bl	8000d4c <next_unwind_byte>
 8000fe0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8000fe4:	f000 030f 	and.w	r3, r0, #15
 8000fe8:	3210      	adds	r2, #16
 8000fea:	3301      	adds	r3, #1
 8000fec:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8000ff0:	e797      	b.n	8000f22 <__gnu_unwind_execute+0x17e>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f10d 090c 	add.w	r9, sp, #12
 8000ff8:	220d      	movs	r2, #13
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f8cd 9000 	str.w	r9, [sp]
 8001000:	4628      	mov	r0, r5
 8001002:	f7ff faa5 	bl	8000550 <_Unwind_VRS_Get>
 8001006:	4630      	mov	r0, r6
 8001008:	f7ff fea0 	bl	8000d4c <next_unwind_byte>
 800100c:	0602      	lsls	r2, r0, #24
 800100e:	f04f 0402 	mov.w	r4, #2
 8001012:	d50c      	bpl.n	800102e <__gnu_unwind_execute+0x28a>
 8001014:	9b03      	ldr	r3, [sp, #12]
 8001016:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800101a:	40a0      	lsls	r0, r4
 800101c:	4418      	add	r0, r3
 800101e:	9003      	str	r0, [sp, #12]
 8001020:	4630      	mov	r0, r6
 8001022:	f7ff fe93 	bl	8000d4c <next_unwind_byte>
 8001026:	0603      	lsls	r3, r0, #24
 8001028:	f104 0407 	add.w	r4, r4, #7
 800102c:	d4f2      	bmi.n	8001014 <__gnu_unwind_execute+0x270>
 800102e:	9b03      	ldr	r3, [sp, #12]
 8001030:	f8cd 9000 	str.w	r9, [sp]
 8001034:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001038:	40a2      	lsls	r2, r4
 800103a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800103e:	441a      	add	r2, r3
 8001040:	2300      	movs	r3, #0
 8001042:	9203      	str	r2, [sp, #12]
 8001044:	4619      	mov	r1, r3
 8001046:	220d      	movs	r2, #13
 8001048:	4628      	mov	r0, r5
 800104a:	f7ff faa7 	bl	800059c <_Unwind_VRS_Set>
 800104e:	e6b0      	b.n	8000db2 <__gnu_unwind_execute+0xe>

08001050 <__gnu_unwind_frame>:
 8001050:	b510      	push	{r4, lr}
 8001052:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001054:	6853      	ldr	r3, [r2, #4]
 8001056:	b084      	sub	sp, #16
 8001058:	f04f 0c03 	mov.w	ip, #3
 800105c:	3208      	adds	r2, #8
 800105e:	021c      	lsls	r4, r3, #8
 8001060:	4608      	mov	r0, r1
 8001062:	0e1b      	lsrs	r3, r3, #24
 8001064:	a901      	add	r1, sp, #4
 8001066:	9401      	str	r4, [sp, #4]
 8001068:	9202      	str	r2, [sp, #8]
 800106a:	f88d c00c 	strb.w	ip, [sp, #12]
 800106e:	f88d 300d 	strb.w	r3, [sp, #13]
 8001072:	f7ff fe97 	bl	8000da4 <__gnu_unwind_execute>
 8001076:	b004      	add	sp, #16
 8001078:	bd10      	pop	{r4, pc}
 800107a:	bf00      	nop

0800107c <_Unwind_GetRegionStart>:
 800107c:	b508      	push	{r3, lr}
 800107e:	f7ff fe8f 	bl	8000da0 <unwind_UCB_from_context>
 8001082:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001084:	bd08      	pop	{r3, pc}
 8001086:	bf00      	nop

08001088 <_Unwind_GetLanguageSpecificData>:
 8001088:	b508      	push	{r3, lr}
 800108a:	f7ff fe89 	bl	8000da0 <unwind_UCB_from_context>
 800108e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001090:	79c3      	ldrb	r3, [r0, #7]
 8001092:	3302      	adds	r3, #2
 8001094:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001098:	bd08      	pop	{r3, pc}
 800109a:	bf00      	nop

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b098      	sub	sp, #96	; 0x60
 80010a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a2:	f000 ff9f 	bl	8001fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a6:	f000 f8b1 	bl	800120c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010aa:	f000 fb89 	bl	80017c0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80010ae:	f000 fb69 	bl	8001784 <_ZL11MX_DMA_Initv>
  MX_CAN_Init();
 80010b2:	f000 f919 	bl	80012e8 <_ZL11MX_CAN_Initv>
  MX_TIM1_Init();
 80010b6:	f000 f953 	bl	8001360 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 80010ba:	f000 fa05 	bl	80014c8 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80010be:	f000 fa9d 	bl	80015fc <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 80010c2:	f000 fb2b 	bl	800171c <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  setup_fillter_CAN();
 80010c6:	f000 fbc5 	bl	8001854 <_Z17setup_fillter_CANv>
  HAL_CAN_Start(&hcan);
 80010ca:	4847      	ldr	r0, [pc, #284]	; (80011e8 <main+0x14c>)
 80010cc:	f001 f9d9 	bl	8002482 <HAL_CAN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010d0:	2100      	movs	r1, #0
 80010d2:	4846      	ldr	r0, [pc, #280]	; (80011ec <main+0x150>)
 80010d4:	f003 fd10 	bl	8004af8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80010d8:	2100      	movs	r1, #0
 80010da:	4844      	ldr	r0, [pc, #272]	; (80011ec <main+0x150>)
 80010dc:	f005 fa74 	bl	80065c8 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80010e0:	2104      	movs	r1, #4
 80010e2:	4842      	ldr	r0, [pc, #264]	; (80011ec <main+0x150>)
 80010e4:	f003 fd08 	bl	8004af8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80010e8:	2104      	movs	r1, #4
 80010ea:	4840      	ldr	r0, [pc, #256]	; (80011ec <main+0x150>)
 80010ec:	f005 fa6c 	bl	80065c8 <HAL_TIMEx_PWMN_Start>

  ws2812::ws2812_double pixels(&htim3, TIM_CHANNEL_4, &hdma_tim3_ch4_up, 45, 22);
 80010f0:	f107 0010 	add.w	r0, r7, #16
 80010f4:	2316      	movs	r3, #22
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	232d      	movs	r3, #45	; 0x2d
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	4b3c      	ldr	r3, [pc, #240]	; (80011f0 <main+0x154>)
 80010fe:	220c      	movs	r2, #12
 8001100:	493c      	ldr	r1, [pc, #240]	; (80011f4 <main+0x158>)
 8001102:	f000 ff22 	bl	8001f4a <_ZN6ws281213ws2812_doubleC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>

  uint8_t hello[] = "hello";
 8001106:	4a3c      	ldr	r2, [pc, #240]	; (80011f8 <main+0x15c>)
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001110:	6018      	str	r0, [r3, #0]
 8001112:	3304      	adds	r3, #4
 8001114:	8019      	strh	r1, [r3, #0]
  uint8_t world[] = "world";
 8001116:	4a39      	ldr	r2, [pc, #228]	; (80011fc <main+0x160>)
 8001118:	463b      	mov	r3, r7
 800111a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800111e:	6018      	str	r0, [r3, #0]
 8001120:	3304      	adds	r3, #4
 8001122:	8019      	strh	r1, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart1, hello, 5, 1);
 8001124:	f107 0108 	add.w	r1, r7, #8
 8001128:	2301      	movs	r3, #1
 800112a:	2205      	movs	r2, #5
 800112c:	4834      	ldr	r0, [pc, #208]	; (8001200 <main+0x164>)
 800112e:	f005 fc4a 	bl	80069c6 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001132:	2120      	movs	r1, #32
 8001134:	4833      	ldr	r0, [pc, #204]	; (8001204 <main+0x168>)
 8001136:	f002 f87b 	bl	8003230 <HAL_GPIO_TogglePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1600);
 800113a:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <main+0x150>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001142:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 300);
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <main+0x150>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800114c:	639a      	str	r2, [r3, #56]	; 0x38
	  pixels.colors[0] = {32, 0, 0};
 800114e:	2320      	movs	r3, #32
 8001150:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001154:	2300      	movs	r3, #0
 8001156:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800115a:	2300      	movs	r3, #0
 800115c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	  pixels.colors[1] = {0, 32, 0};
 8001160:	2300      	movs	r3, #0
 8001162:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8001166:	2320      	movs	r3, #32
 8001168:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800116c:	2300      	movs	r3, #0
 800116e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	  pixels.rend();
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fec4 	bl	8001f04 <_ZN6ws281213ws2812_double4rendEv>
	  send_message_CAN();
 800117c:	f000 fba8 	bl	80018d0 <_Z16send_message_CANv>
	  HAL_Delay(1000);
 8001180:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001184:	f000 ff94 	bl	80020b0 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, world, 5, 1);
 8001188:	4639      	mov	r1, r7
 800118a:	2301      	movs	r3, #1
 800118c:	2205      	movs	r2, #5
 800118e:	481c      	ldr	r0, [pc, #112]	; (8001200 <main+0x164>)
 8001190:	f005 fc19 	bl	80069c6 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001194:	2120      	movs	r1, #32
 8001196:	481b      	ldr	r0, [pc, #108]	; (8001204 <main+0x168>)
 8001198:	f002 f84a 	bl	8003230 <HAL_GPIO_TogglePin>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 300);
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <main+0x150>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011a4:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1600);
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <main+0x150>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80011ae:	639a      	str	r2, [r3, #56]	; 0x38
	  pixels.colors[0] = {0, 0, 48};
 80011b0:	2300      	movs	r3, #0
 80011b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80011b6:	2300      	movs	r3, #0
 80011b8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 80011bc:	2330      	movs	r3, #48	; 0x30
 80011be:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	  pixels.colors[1] = {16, 16, 32};
 80011c2:	4a11      	ldr	r2, [pc, #68]	; (8001208 <main+0x16c>)
 80011c4:	f107 0352 	add.w	r3, r7, #82	; 0x52
 80011c8:	8811      	ldrh	r1, [r2, #0]
 80011ca:	7892      	ldrb	r2, [r2, #2]
 80011cc:	8019      	strh	r1, [r3, #0]
 80011ce:	709a      	strb	r2, [r3, #2]
	  pixels.rend();
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 fe95 	bl	8001f04 <_ZN6ws281213ws2812_double4rendEv>
	  send_usart1_CAN_mailbox();
 80011da:	f000 fbb3 	bl	8001944 <_Z23send_usart1_CAN_mailboxv>
	  HAL_Delay(1000);
 80011de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e2:	f000 ff65 	bl	80020b0 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, hello, 5, 1);
 80011e6:	e79d      	b.n	8001124 <main+0x88>
 80011e8:	2000008c 	.word	0x2000008c
 80011ec:	200000b4 	.word	0x200000b4
 80011f0:	20000198 	.word	0x20000198
 80011f4:	2000014c 	.word	0x2000014c
 80011f8:	080071ec 	.word	0x080071ec
 80011fc:	080071f4 	.word	0x080071f4
 8001200:	200001dc 	.word	0x200001dc
 8001204:	48000400 	.word	0x48000400
 8001208:	080071fc 	.word	0x080071fc

0800120c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b096      	sub	sp, #88	; 0x58
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001216:	2228      	movs	r2, #40	; 0x28
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f005 ff78 	bl	8007110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
 800123e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001240:	2301      	movs	r3, #1
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800124a:	2301      	movs	r3, #1
 800124c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800124e:	2301      	movs	r3, #1
 8001250:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001252:	2302      	movs	r3, #2
 8001254:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800125a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800125c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001260:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001262:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001266:	4618      	mov	r0, r3
 8001268:	f001 fffc 	bl	8003264 <HAL_RCC_OscConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	bf14      	ite	ne
 8001272:	2301      	movne	r3, #1
 8001274:	2300      	moveq	r3, #0
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 800127c:	f000 fb9a 	bl	80019b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001280:	230f      	movs	r3, #15
 8001282:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001284:	2302      	movs	r3, #2
 8001286:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800128c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	2102      	movs	r1, #2
 800129c:	4618      	mov	r0, r3
 800129e:	f003 f81f 	bl	80042e0 <HAL_RCC_ClockConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	bf14      	ite	ne
 80012a8:	2301      	movne	r3, #1
 80012aa:	2300      	moveq	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 80012b2:	f000 fb7f 	bl	80019b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 80012b6:	f241 0301 	movw	r3, #4097	; 0x1001
 80012ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4618      	mov	r0, r3
 80012c8:	f003 fa42 	bl	8004750 <HAL_RCCEx_PeriphCLKConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	bf14      	ite	ne
 80012d2:	2301      	movne	r3, #1
 80012d4:	2300      	moveq	r3, #0
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80012dc:	f000 fb6a 	bl	80019b4 <Error_Handler>
  }
}
 80012e0:	bf00      	nop
 80012e2:	3758      	adds	r7, #88	; 0x58
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_ZL11MX_CAN_Initv>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <_ZL11MX_CAN_Initv+0x70>)
 80012ee:	4a1b      	ldr	r2, [pc, #108]	; (800135c <_ZL11MX_CAN_Initv+0x74>)
 80012f0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <_ZL11MX_CAN_Initv+0x70>)
 80012f4:	2202      	movs	r2, #2
 80012f6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <_ZL11MX_CAN_Initv+0x70>)
 80012fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012fe:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001300:	4b15      	ldr	r3, [pc, #84]	; (8001358 <_ZL11MX_CAN_Initv+0x70>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <_ZL11MX_CAN_Initv+0x70>)
 8001308:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 800130c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <_ZL11MX_CAN_Initv+0x70>)
 8001310:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001314:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <_ZL11MX_CAN_Initv+0x70>)
 8001318:	2200      	movs	r2, #0
 800131a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <_ZL11MX_CAN_Initv+0x70>)
 800131e:	2200      	movs	r2, #0
 8001320:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <_ZL11MX_CAN_Initv+0x70>)
 8001324:	2200      	movs	r2, #0
 8001326:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <_ZL11MX_CAN_Initv+0x70>)
 800132a:	2200      	movs	r2, #0
 800132c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <_ZL11MX_CAN_Initv+0x70>)
 8001330:	2200      	movs	r2, #0
 8001332:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <_ZL11MX_CAN_Initv+0x70>)
 8001336:	2200      	movs	r2, #0
 8001338:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800133a:	4807      	ldr	r0, [pc, #28]	; (8001358 <_ZL11MX_CAN_Initv+0x70>)
 800133c:	f000 fedc 	bl	80020f8 <HAL_CAN_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	bf14      	ite	ne
 8001346:	2301      	movne	r3, #1
 8001348:	2300      	moveq	r3, #0
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <_ZL11MX_CAN_Initv+0x6c>
  {
    Error_Handler();
 8001350:	f000 fb30 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2000008c 	.word	0x2000008c
 800135c:	40006400 	.word	0x40006400

08001360 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b096      	sub	sp, #88	; 0x58
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001366:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001372:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]
 8001382:	615a      	str	r2, [r3, #20]
 8001384:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	222c      	movs	r2, #44	; 0x2c
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f005 febf 	bl	8007110 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001392:	4b4b      	ldr	r3, [pc, #300]	; (80014c0 <_ZL12MX_TIM1_Initv+0x160>)
 8001394:	4a4b      	ldr	r2, [pc, #300]	; (80014c4 <_ZL12MX_TIM1_Initv+0x164>)
 8001396:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001398:	4b49      	ldr	r3, [pc, #292]	; (80014c0 <_ZL12MX_TIM1_Initv+0x160>)
 800139a:	2200      	movs	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800139e:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <_ZL12MX_TIM1_Initv+0x160>)
 80013a0:	2220      	movs	r2, #32
 80013a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 80013a4:	4b46      	ldr	r3, [pc, #280]	; (80014c0 <_ZL12MX_TIM1_Initv+0x160>)
 80013a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ac:	4b44      	ldr	r3, [pc, #272]	; (80014c0 <_ZL12MX_TIM1_Initv+0x160>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013b2:	4b43      	ldr	r3, [pc, #268]	; (80014c0 <_ZL12MX_TIM1_Initv+0x160>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b8:	4b41      	ldr	r3, [pc, #260]	; (80014c0 <_ZL12MX_TIM1_Initv+0x160>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013be:	4840      	ldr	r0, [pc, #256]	; (80014c0 <_ZL12MX_TIM1_Initv+0x160>)
 80013c0:	f003 fb43 	bl	8004a4a <HAL_TIM_PWM_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	bf14      	ite	ne
 80013ca:	2301      	movne	r3, #1
 80013cc:	2300      	moveq	r3, #0
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <_ZL12MX_TIM1_Initv+0x78>
  {
    Error_Handler();
 80013d4:	f000 faee 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013e8:	4619      	mov	r1, r3
 80013ea:	4835      	ldr	r0, [pc, #212]	; (80014c0 <_ZL12MX_TIM1_Initv+0x160>)
 80013ec:	f005 f992 	bl	8006714 <HAL_TIMEx_MasterConfigSynchronization>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	bf14      	ite	ne
 80013f6:	2301      	movne	r3, #1
 80013f8:	2300      	moveq	r3, #0
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <_ZL12MX_TIM1_Initv+0xa4>
  {
    Error_Handler();
 8001400:	f000 fad8 	bl	80019b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001404:	2360      	movs	r3, #96	; 0x60
 8001406:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140c:	2300      	movs	r3, #0
 800140e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001410:	2300      	movs	r3, #0
 8001412:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001418:	2300      	movs	r3, #0
 800141a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800141c:	2300      	movs	r3, #0
 800141e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001420:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001424:	2200      	movs	r2, #0
 8001426:	4619      	mov	r1, r3
 8001428:	4825      	ldr	r0, [pc, #148]	; (80014c0 <_ZL12MX_TIM1_Initv+0x160>)
 800142a:	f004 f83b 	bl	80054a4 <HAL_TIM_PWM_ConfigChannel>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf14      	ite	ne
 8001434:	2301      	movne	r3, #1
 8001436:	2300      	moveq	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <_ZL12MX_TIM1_Initv+0xe2>
  {
    Error_Handler();
 800143e:	f000 fab9 	bl	80019b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001442:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001446:	2204      	movs	r2, #4
 8001448:	4619      	mov	r1, r3
 800144a:	481d      	ldr	r0, [pc, #116]	; (80014c0 <_ZL12MX_TIM1_Initv+0x160>)
 800144c:	f004 f82a 	bl	80054a4 <HAL_TIM_PWM_ConfigChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	bf14      	ite	ne
 8001456:	2301      	movne	r3, #1
 8001458:	2300      	moveq	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <_ZL12MX_TIM1_Initv+0x104>
  {
    Error_Handler();
 8001460:	f000 faa8 	bl	80019b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 16;
 8001470:	2310      	movs	r3, #16
 8001472:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001486:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	4619      	mov	r1, r3
 8001498:	4809      	ldr	r0, [pc, #36]	; (80014c0 <_ZL12MX_TIM1_Initv+0x160>)
 800149a:	f005 f9a9 	bl	80067f0 <HAL_TIMEx_ConfigBreakDeadTime>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf14      	ite	ne
 80014a4:	2301      	movne	r3, #1
 80014a6:	2300      	moveq	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <_ZL12MX_TIM1_Initv+0x152>
  {
    Error_Handler();
 80014ae:	f000 fa81 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014b2:	4803      	ldr	r0, [pc, #12]	; (80014c0 <_ZL12MX_TIM1_Initv+0x160>)
 80014b4:	f000 fb9c 	bl	8001bf0 <HAL_TIM_MspPostInit>

}
 80014b8:	bf00      	nop
 80014ba:	3758      	adds	r7, #88	; 0x58
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200000b4 	.word	0x200000b4
 80014c4:	40012c00 	.word	0x40012c00

080014c8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08c      	sub	sp, #48	; 0x30
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ec:	463b      	mov	r3, r7
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014f6:	4b40      	ldr	r3, [pc, #256]	; (80015f8 <_ZL12MX_TIM2_Initv+0x130>)
 80014f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014fe:	4b3e      	ldr	r3, [pc, #248]	; (80015f8 <_ZL12MX_TIM2_Initv+0x130>)
 8001500:	2200      	movs	r2, #0
 8001502:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001504:	4b3c      	ldr	r3, [pc, #240]	; (80015f8 <_ZL12MX_TIM2_Initv+0x130>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800150a:	4b3b      	ldr	r3, [pc, #236]	; (80015f8 <_ZL12MX_TIM2_Initv+0x130>)
 800150c:	f04f 32ff 	mov.w	r2, #4294967295
 8001510:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001512:	4b39      	ldr	r3, [pc, #228]	; (80015f8 <_ZL12MX_TIM2_Initv+0x130>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <_ZL12MX_TIM2_Initv+0x130>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800151e:	4836      	ldr	r0, [pc, #216]	; (80015f8 <_ZL12MX_TIM2_Initv+0x130>)
 8001520:	f003 fecc 	bl	80052bc <HAL_TIM_IC_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	bf14      	ite	ne
 800152a:	2301      	movne	r3, #1
 800152c:	2300      	moveq	r3, #0
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <_ZL12MX_TIM2_Initv+0x70>
  {
    Error_Handler();
 8001534:	f000 fa3e 	bl	80019b4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001538:	2304      	movs	r3, #4
 800153a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800153c:	2350      	movs	r3, #80	; 0x50
 800153e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	4829      	ldr	r0, [pc, #164]	; (80015f8 <_ZL12MX_TIM2_Initv+0x130>)
 8001554:	f004 f983 	bl	800585e <HAL_TIM_SlaveConfigSynchro>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	bf14      	ite	ne
 800155e:	2301      	movne	r3, #1
 8001560:	2300      	moveq	r3, #0
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <_ZL12MX_TIM2_Initv+0xa4>
  {
    Error_Handler();
 8001568:	f000 fa24 	bl	80019b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001570:	2301      	movs	r3, #1
 8001572:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2200      	movs	r2, #0
 8001582:	4619      	mov	r1, r3
 8001584:	481c      	ldr	r0, [pc, #112]	; (80015f8 <_ZL12MX_TIM2_Initv+0x130>)
 8001586:	f003 fef0 	bl	800536a <HAL_TIM_IC_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf14      	ite	ne
 8001590:	2301      	movne	r3, #1
 8001592:	2300      	moveq	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <_ZL12MX_TIM2_Initv+0xd6>
  {
    Error_Handler();
 800159a:	f000 fa0b 	bl	80019b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800159e:	2302      	movs	r3, #2
 80015a0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80015a2:	2302      	movs	r3, #2
 80015a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	2204      	movs	r2, #4
 80015ac:	4619      	mov	r1, r3
 80015ae:	4812      	ldr	r0, [pc, #72]	; (80015f8 <_ZL12MX_TIM2_Initv+0x130>)
 80015b0:	f003 fedb 	bl	800536a <HAL_TIM_IC_ConfigChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	bf14      	ite	ne
 80015ba:	2301      	movne	r3, #1
 80015bc:	2300      	moveq	r3, #0
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <_ZL12MX_TIM2_Initv+0x100>
  {
    Error_Handler();
 80015c4:	f000 f9f6 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d0:	463b      	mov	r3, r7
 80015d2:	4619      	mov	r1, r3
 80015d4:	4808      	ldr	r0, [pc, #32]	; (80015f8 <_ZL12MX_TIM2_Initv+0x130>)
 80015d6:	f005 f89d 	bl	8006714 <HAL_TIMEx_MasterConfigSynchronization>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	bf14      	ite	ne
 80015e0:	2301      	movne	r3, #1
 80015e2:	2300      	moveq	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <_ZL12MX_TIM2_Initv+0x126>
  {
    Error_Handler();
 80015ea:	f000 f9e3 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	3730      	adds	r7, #48	; 0x30
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000100 	.word	0x20000100

080015fc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08e      	sub	sp, #56	; 0x38
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800161c:	463b      	mov	r3, r7
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
 8001628:	611a      	str	r2, [r3, #16]
 800162a:	615a      	str	r2, [r3, #20]
 800162c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800162e:	4b39      	ldr	r3, [pc, #228]	; (8001714 <_ZL12MX_TIM3_Initv+0x118>)
 8001630:	4a39      	ldr	r2, [pc, #228]	; (8001718 <_ZL12MX_TIM3_Initv+0x11c>)
 8001632:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001634:	4b37      	ldr	r3, [pc, #220]	; (8001714 <_ZL12MX_TIM3_Initv+0x118>)
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163a:	4b36      	ldr	r3, [pc, #216]	; (8001714 <_ZL12MX_TIM3_Initv+0x118>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 8001640:	4b34      	ldr	r3, [pc, #208]	; (8001714 <_ZL12MX_TIM3_Initv+0x118>)
 8001642:	2259      	movs	r2, #89	; 0x59
 8001644:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b33      	ldr	r3, [pc, #204]	; (8001714 <_ZL12MX_TIM3_Initv+0x118>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b31      	ldr	r3, [pc, #196]	; (8001714 <_ZL12MX_TIM3_Initv+0x118>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001652:	4830      	ldr	r0, [pc, #192]	; (8001714 <_ZL12MX_TIM3_Initv+0x118>)
 8001654:	f003 f9a2 	bl	800499c <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	bf14      	ite	ne
 800165e:	2301      	movne	r3, #1
 8001660:	2300      	moveq	r3, #0
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8001668:	f000 f9a4 	bl	80019b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001676:	4619      	mov	r1, r3
 8001678:	4826      	ldr	r0, [pc, #152]	; (8001714 <_ZL12MX_TIM3_Initv+0x118>)
 800167a:	f004 f827 	bl	80056cc <HAL_TIM_ConfigClockSource>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf14      	ite	ne
 8001684:	2301      	movne	r3, #1
 8001686:	2300      	moveq	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 800168e:	f000 f991 	bl	80019b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001692:	4820      	ldr	r0, [pc, #128]	; (8001714 <_ZL12MX_TIM3_Initv+0x118>)
 8001694:	f003 f9d9 	bl	8004a4a <HAL_TIM_PWM_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	bf14      	ite	ne
 800169e:	2301      	movne	r3, #1
 80016a0:	2300      	moveq	r3, #0
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 80016a8:	f000 f984 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	4816      	ldr	r0, [pc, #88]	; (8001714 <_ZL12MX_TIM3_Initv+0x118>)
 80016bc:	f005 f82a 	bl	8006714 <HAL_TIMEx_MasterConfigSynchronization>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	bf14      	ite	ne
 80016c6:	2301      	movne	r3, #1
 80016c8:	2300      	moveq	r3, #0
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 80016d0:	f000 f970 	bl	80019b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d4:	2360      	movs	r3, #96	; 0x60
 80016d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016e4:	463b      	mov	r3, r7
 80016e6:	220c      	movs	r2, #12
 80016e8:	4619      	mov	r1, r3
 80016ea:	480a      	ldr	r0, [pc, #40]	; (8001714 <_ZL12MX_TIM3_Initv+0x118>)
 80016ec:	f003 feda 	bl	80054a4 <HAL_TIM_PWM_ConfigChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	bf14      	ite	ne
 80016f6:	2301      	movne	r3, #1
 80016f8:	2300      	moveq	r3, #0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8001700:	f000 f958 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001704:	4803      	ldr	r0, [pc, #12]	; (8001714 <_ZL12MX_TIM3_Initv+0x118>)
 8001706:	f000 fa73 	bl	8001bf0 <HAL_TIM_MspPostInit>

}
 800170a:	bf00      	nop
 800170c:	3738      	adds	r7, #56	; 0x38
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	2000014c 	.word	0x2000014c
 8001718:	40000400 	.word	0x40000400

0800171c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001722:	4a17      	ldr	r2, [pc, #92]	; (8001780 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001724:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800172c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <_ZL19MX_USART1_UART_Initv+0x60>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001742:	220c      	movs	r2, #12
 8001744:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <_ZL19MX_USART1_UART_Initv+0x60>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <_ZL19MX_USART1_UART_Initv+0x60>)
 800175a:	2200      	movs	r2, #0
 800175c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800175e:	4807      	ldr	r0, [pc, #28]	; (800177c <_ZL19MX_USART1_UART_Initv+0x60>)
 8001760:	f005 f8e3 	bl	800692a <HAL_UART_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	bf14      	ite	ne
 800176a:	2301      	movne	r3, #1
 800176c:	2300      	moveq	r3, #0
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8001774:	f000 f91e 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	200001dc 	.word	0x200001dc
 8001780:	40013800 	.word	0x40013800

08001784 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <_ZL11MX_DMA_Initv+0x38>)
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <_ZL11MX_DMA_Initv+0x38>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6153      	str	r3, [r2, #20]
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <_ZL11MX_DMA_Initv+0x38>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	200d      	movs	r0, #13
 80017a8:	f001 f9ad 	bl	8002b06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80017ac:	200d      	movs	r0, #13
 80017ae:	f001 f9c6 	bl	8002b3e <HAL_NVIC_EnableIRQ>

}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000

080017c0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017d6:	4b1d      	ldr	r3, [pc, #116]	; (800184c <_ZL12MX_GPIO_Initv+0x8c>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	4a1c      	ldr	r2, [pc, #112]	; (800184c <_ZL12MX_GPIO_Initv+0x8c>)
 80017dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017e0:	6153      	str	r3, [r2, #20]
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <_ZL12MX_GPIO_Initv+0x8c>)
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <_ZL12MX_GPIO_Initv+0x8c>)
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	4a16      	ldr	r2, [pc, #88]	; (800184c <_ZL12MX_GPIO_Initv+0x8c>)
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	6153      	str	r3, [r2, #20]
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <_ZL12MX_GPIO_Initv+0x8c>)
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <_ZL12MX_GPIO_Initv+0x8c>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	4a10      	ldr	r2, [pc, #64]	; (800184c <_ZL12MX_GPIO_Initv+0x8c>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001810:	6153      	str	r3, [r2, #20]
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <_ZL12MX_GPIO_Initv+0x8c>)
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISABLE_GPIO_Port, DISABLE_Pin, GPIO_PIN_RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	2120      	movs	r1, #32
 8001822:	480b      	ldr	r0, [pc, #44]	; (8001850 <_ZL12MX_GPIO_Initv+0x90>)
 8001824:	f001 fcec 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISABLE_Pin */
  GPIO_InitStruct.Pin = DISABLE_Pin;
 8001828:	2320      	movs	r3, #32
 800182a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182c:	2301      	movs	r3, #1
 800182e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISABLE_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	4619      	mov	r1, r3
 800183e:	4804      	ldr	r0, [pc, #16]	; (8001850 <_ZL12MX_GPIO_Initv+0x90>)
 8001840:	f001 fb6c 	bl	8002f1c <HAL_GPIO_Init>

}
 8001844:	bf00      	nop
 8001846:	3720      	adds	r7, #32
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000
 8001850:	48000400 	.word	0x48000400

08001854 <_Z17setup_fillter_CANv>:

/* USER CODE BEGIN 4 */

void setup_fillter_CAN(){
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
	uint16_t filterID[4] = {0x000, 0x200, 0x400, 0x500};
 800185a:	4a1a      	ldr	r2, [pc, #104]	; (80018c4 <_Z17setup_fillter_CANv+0x70>)
 800185c:	463b      	mov	r3, r7
 800185e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001862:	e883 0003 	stmia.w	r3, {r0, r1}

	filter.FilterIdHigh         = filterID[0] << 5;                        // フィルターID(上�?16ビッ�?)
 8001866:	883b      	ldrh	r3, [r7, #0]
 8001868:	015b      	lsls	r3, r3, #5
 800186a:	461a      	mov	r2, r3
 800186c:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <_Z17setup_fillter_CANv+0x74>)
 800186e:	601a      	str	r2, [r3, #0]
	filter.FilterIdLow          = filterID[1] << 5;                        // フィルターID(下�?16ビッ�?)
 8001870:	887b      	ldrh	r3, [r7, #2]
 8001872:	015b      	lsls	r3, r3, #5
 8001874:	461a      	mov	r2, r3
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <_Z17setup_fillter_CANv+0x74>)
 8001878:	605a      	str	r2, [r3, #4]
	filter.FilterMaskIdHigh     = filterID[2] << 5;                        // フィルターマスク(上�?16ビッ�?)
 800187a:	88bb      	ldrh	r3, [r7, #4]
 800187c:	015b      	lsls	r3, r3, #5
 800187e:	461a      	mov	r2, r3
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <_Z17setup_fillter_CANv+0x74>)
 8001882:	609a      	str	r2, [r3, #8]
	filter.FilterMaskIdLow      = filterID[3] << 5;                        // フィルターマスク(下�?16ビッ�?)
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	015b      	lsls	r3, r3, #5
 8001888:	461a      	mov	r2, r3
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <_Z17setup_fillter_CANv+0x74>)
 800188c:	60da      	str	r2, [r3, #12]
	filter.FilterScale          = CAN_FILTERSCALE_16BIT;    // フィルタースケール
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <_Z17setup_fillter_CANv+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	61da      	str	r2, [r3, #28]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <_Z17setup_fillter_CANv+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
	filter.FilterBank           = 0;                        // フィルターバンクNo
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <_Z17setup_fillter_CANv+0x74>)
 800189c:	2200      	movs	r2, #0
 800189e:	615a      	str	r2, [r3, #20]
	filter.FilterMode           = CAN_FILTERMODE_IDLIST;    // フィルターモー�?
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <_Z17setup_fillter_CANv+0x74>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	619a      	str	r2, [r3, #24]
	filter.SlaveStartFilterBank = 0;                       // スレーブCANの開始フィルターバンクNo
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <_Z17setup_fillter_CANv+0x74>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	625a      	str	r2, [r3, #36]	; 0x24
	filter.FilterActivation     = ENABLE;                   // フィルター無効?��有効
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <_Z17setup_fillter_CANv+0x74>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	621a      	str	r2, [r3, #32]
	HAL_CAN_ConfigFilter(&hcan, &filter);
 80018b2:	4905      	ldr	r1, [pc, #20]	; (80018c8 <_Z17setup_fillter_CANv+0x74>)
 80018b4:	4805      	ldr	r0, [pc, #20]	; (80018cc <_Z17setup_fillter_CANv+0x78>)
 80018b6:	f000 fd1a 	bl	80022ee <HAL_CAN_ConfigFilter>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	08007200 	.word	0x08007200
 80018c8:	20000260 	.word	0x20000260
 80018cc:	2000008c 	.word	0x2000008c

080018d0 <_Z16send_message_CANv>:

int send_message_CAN(){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	uint8_t TxData[8];
	if(0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80018d6:	481a      	ldr	r0, [pc, #104]	; (8001940 <_Z16send_message_CANv+0x70>)
 80018d8:	f000 fef2 	bl	80026c0 <HAL_CAN_GetTxMailboxesFreeLevel>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	bf14      	ite	ne
 80018e2:	2301      	movne	r3, #1
 80018e4:	2300      	moveq	r3, #0
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d024      	beq.n	8001936 <_Z16send_message_CANv+0x66>
	    TxHeader.StdId = 0x000;                 // CAN ID
 80018ec:	2300      	movs	r3, #0
 80018ee:	613b      	str	r3, [r7, #16]
	    TxHeader.RTR = CAN_RTR_DATA;            // フレー�?タイプ�?��?ータフレー�?
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
	    TxHeader.IDE = CAN_ID_STD;              // 標準ID(11?��ﾞｯ?�?)
 80018f4:	2300      	movs	r3, #0
 80018f6:	61bb      	str	r3, [r7, #24]
	    TxHeader.DLC = 8;                       // �?ータ長は8バイトに
 80018f8:	2308      	movs	r3, #8
 80018fa:	623b      	str	r3, [r7, #32]
	    TxHeader.TransmitGlobalTime = DISABLE;  // ???
 80018fc:	2300      	movs	r3, #0
 80018fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    TxData[0] = 0x11;
 8001902:	2311      	movs	r3, #17
 8001904:	713b      	strb	r3, [r7, #4]
	    TxData[1] = 0x22;
 8001906:	2322      	movs	r3, #34	; 0x22
 8001908:	717b      	strb	r3, [r7, #5]
	    TxData[2] = 0x33;
 800190a:	2333      	movs	r3, #51	; 0x33
 800190c:	71bb      	strb	r3, [r7, #6]
	    TxData[3] = 0x44;
 800190e:	2344      	movs	r3, #68	; 0x44
 8001910:	71fb      	strb	r3, [r7, #7]
	    TxData[4] = 0x55;
 8001912:	2355      	movs	r3, #85	; 0x55
 8001914:	723b      	strb	r3, [r7, #8]
	    TxData[5] = 0x66;
 8001916:	2366      	movs	r3, #102	; 0x66
 8001918:	727b      	strb	r3, [r7, #9]
	    TxData[6] = 0x77;
 800191a:	2377      	movs	r3, #119	; 0x77
 800191c:	72bb      	strb	r3, [r7, #10]
	    TxData[7] = 0x88;
 800191e:	2388      	movs	r3, #136	; 0x88
 8001920:	72fb      	strb	r3, [r7, #11]
	    HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	1d3a      	adds	r2, r7, #4
 8001928:	f107 0110 	add.w	r1, r7, #16
 800192c:	4804      	ldr	r0, [pc, #16]	; (8001940 <_Z16send_message_CANv+0x70>)
 800192e:	f000 fdec 	bl	800250a <HAL_CAN_AddTxMessage>
	    return 0;
 8001932:	2300      	movs	r3, #0
 8001934:	e000      	b.n	8001938 <_Z16send_message_CANv+0x68>
	}
	return 1;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	3728      	adds	r7, #40	; 0x28
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	2000008c 	.word	0x2000008c

08001944 <_Z23send_usart1_CAN_mailboxv>:

void send_usart1_CAN_mailbox(){
 8001944:	b580      	push	{r7, lr}
 8001946:	b08c      	sub	sp, #48	; 0x30
 8001948:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef RxHeader;
	uint32_t id;
	uint32_t dlc;
	uint8_t RxData[] = "nnnnnnnn";
 800194a:	4a16      	ldr	r2, [pc, #88]	; (80019a4 <_Z23send_usart1_CAN_mailboxv+0x60>)
 800194c:	463b      	mov	r3, r7
 800194e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001950:	c303      	stmia	r3!, {r0, r1}
 8001952:	701a      	strb	r2, [r3, #0]
	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8001954:	463b      	mov	r3, r7
 8001956:	f107 020c 	add.w	r2, r7, #12
 800195a:	2100      	movs	r1, #0
 800195c:	4812      	ldr	r0, [pc, #72]	; (80019a8 <_Z23send_usart1_CAN_mailboxv+0x64>)
 800195e:	f000 fee4 	bl	800272a <HAL_CAN_GetRxMessage>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	bf0c      	ite	eq
 8001968:	2301      	moveq	r3, #1
 800196a:	2300      	movne	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00e      	beq.n	8001990 <_Z23send_usart1_CAN_mailboxv+0x4c>
	{
		id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;     // ID
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <_Z23send_usart1_CAN_mailboxv+0x38>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	e000      	b.n	800197e <_Z23send_usart1_CAN_mailboxv+0x3a>
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
		dlc = RxHeader.DLC;
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
		HAL_UART_Transmit(&huart1, (uint8_t*)"Received", 8, 1);
 8001984:	2301      	movs	r3, #1
 8001986:	2208      	movs	r2, #8
 8001988:	4908      	ldr	r1, [pc, #32]	; (80019ac <_Z23send_usart1_CAN_mailboxv+0x68>)
 800198a:	4809      	ldr	r0, [pc, #36]	; (80019b0 <_Z23send_usart1_CAN_mailboxv+0x6c>)
 800198c:	f005 f81b 	bl	80069c6 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart1, RxData, 8, 1);
 8001990:	4639      	mov	r1, r7
 8001992:	2301      	movs	r3, #1
 8001994:	2208      	movs	r2, #8
 8001996:	4806      	ldr	r0, [pc, #24]	; (80019b0 <_Z23send_usart1_CAN_mailboxv+0x6c>)
 8001998:	f005 f815 	bl	80069c6 <HAL_UART_Transmit>
}
 800199c:	bf00      	nop
 800199e:	3730      	adds	r7, #48	; 0x30
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	08007214 	.word	0x08007214
 80019a8:	2000008c 	.word	0x2000008c
 80019ac:	08007208 	.word	0x08007208
 80019b0:	200001dc 	.word	0x200001dc

080019b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b8:	b672      	cpsid	i
}
 80019ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019bc:	e7fe      	b.n	80019bc <Error_Handler+0x8>
	...

080019c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_MspInit+0x44>)
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <HAL_MspInit+0x44>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6193      	str	r3, [r2, #24]
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_MspInit+0x44>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_MspInit+0x44>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <HAL_MspInit+0x44>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e8:	61d3      	str	r3, [r2, #28]
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_MspInit+0x44>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000

08001a08 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a18      	ldr	r2, [pc, #96]	; (8001a88 <HAL_CAN_MspInit+0x80>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d129      	bne.n	8001a7e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a2a:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <HAL_CAN_MspInit+0x84>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a17      	ldr	r2, [pc, #92]	; (8001a8c <HAL_CAN_MspInit+0x84>)
 8001a30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a34:	61d3      	str	r3, [r2, #28]
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <HAL_CAN_MspInit+0x84>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_CAN_MspInit+0x84>)
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	4a11      	ldr	r2, [pc, #68]	; (8001a8c <HAL_CAN_MspInit+0x84>)
 8001a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4c:	6153      	str	r3, [r2, #20]
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <HAL_CAN_MspInit+0x84>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a5a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001a6c:	2309      	movs	r3, #9
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7a:	f001 fa4f 	bl	8002f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001a7e:	bf00      	nop
 8001a80:	3728      	adds	r7, #40	; 0x28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40006400 	.word	0x40006400
 8001a8c:	40021000 	.word	0x40021000

08001a90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <HAL_TIM_PWM_MspInit+0x38>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d10b      	bne.n	8001aba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_TIM_PWM_MspInit+0x3c>)
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	4a09      	ldr	r2, [pc, #36]	; (8001acc <HAL_TIM_PWM_MspInit+0x3c>)
 8001aa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aac:	6193      	str	r3, [r2, #24]
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <HAL_TIM_PWM_MspInit+0x3c>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40012c00 	.word	0x40012c00
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af0:	d128      	bne.n	8001b44 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <HAL_TIM_IC_MspInit+0x7c>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	4a15      	ldr	r2, [pc, #84]	; (8001b4c <HAL_TIM_IC_MspInit+0x7c>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	61d3      	str	r3, [r2, #28]
 8001afe:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <HAL_TIM_IC_MspInit+0x7c>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HAL_TIM_IC_MspInit+0x7c>)
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	4a0f      	ldr	r2, [pc, #60]	; (8001b4c <HAL_TIM_IC_MspInit+0x7c>)
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b14:	6153      	str	r3, [r2, #20]
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_TIM_IC_MspInit+0x7c>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b22:	2320      	movs	r3, #32
 8001b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b32:	2301      	movs	r3, #1
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b40:	f001 f9ec 	bl	8002f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b44:	bf00      	nop
 8001b46:	3728      	adds	r7, #40	; 0x28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40021000 	.word	0x40021000

08001b50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a20      	ldr	r2, [pc, #128]	; (8001be0 <HAL_TIM_Base_MspInit+0x90>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d139      	bne.n	8001bd6 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b62:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <HAL_TIM_Base_MspInit+0x94>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	4a1f      	ldr	r2, [pc, #124]	; (8001be4 <HAL_TIM_Base_MspInit+0x94>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	61d3      	str	r3, [r2, #28]
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <HAL_TIM_Base_MspInit+0x94>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_TIM_Base_MspInit+0x98>)
 8001b7c:	4a1b      	ldr	r2, [pc, #108]	; (8001bec <HAL_TIM_Base_MspInit+0x9c>)
 8001b7e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_TIM_Base_MspInit+0x98>)
 8001b82:	2210      	movs	r2, #16
 8001b84:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_TIM_Base_MspInit+0x98>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <HAL_TIM_Base_MspInit+0x98>)
 8001b8e:	2280      	movs	r2, #128	; 0x80
 8001b90:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_TIM_Base_MspInit+0x98>)
 8001b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b98:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <HAL_TIM_Base_MspInit+0x98>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_TIM_Base_MspInit+0x98>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <HAL_TIM_Base_MspInit+0x98>)
 8001ba8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001bac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001bae:	480e      	ldr	r0, [pc, #56]	; (8001be8 <HAL_TIM_Base_MspInit+0x98>)
 8001bb0:	f000 ffdf 	bl	8002b72 <HAL_DMA_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001bba:	f7ff fefb 	bl	80019b4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a09      	ldr	r2, [pc, #36]	; (8001be8 <HAL_TIM_Base_MspInit+0x98>)
 8001bc2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bc4:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <HAL_TIM_Base_MspInit+0x98>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a06      	ldr	r2, [pc, #24]	; (8001be8 <HAL_TIM_Base_MspInit+0x98>)
 8001bce:	621a      	str	r2, [r3, #32]
 8001bd0:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <HAL_TIM_Base_MspInit+0x98>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40000400 	.word	0x40000400
 8001be4:	40021000 	.word	0x40021000
 8001be8:	20000198 	.word	0x20000198
 8001bec:	40020030 	.word	0x40020030

08001bf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a31      	ldr	r2, [pc, #196]	; (8001cd4 <HAL_TIM_MspPostInit+0xe4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d13a      	bne.n	8001c88 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <HAL_TIM_MspPostInit+0xe8>)
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	4a30      	ldr	r2, [pc, #192]	; (8001cd8 <HAL_TIM_MspPostInit+0xe8>)
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c1c:	6153      	str	r3, [r2, #20]
 8001c1e:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <HAL_TIM_MspPostInit+0xe8>)
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2a:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <HAL_TIM_MspPostInit+0xe8>)
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	4a2a      	ldr	r2, [pc, #168]	; (8001cd8 <HAL_TIM_MspPostInit+0xe8>)
 8001c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c34:	6153      	str	r3, [r2, #20]
 8001c36:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_TIM_MspPostInit+0xe8>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001c42:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001c54:	2306      	movs	r3, #6
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c62:	f001 f95b 	bl	8002f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c66:	2301      	movs	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001c76:	2306      	movs	r3, #6
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4816      	ldr	r0, [pc, #88]	; (8001cdc <HAL_TIM_MspPostInit+0xec>)
 8001c82:	f001 f94b 	bl	8002f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c86:	e020      	b.n	8001cca <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM3)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <HAL_TIM_MspPostInit+0xf0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d11b      	bne.n	8001cca <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_TIM_MspPostInit+0xe8>)
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	4a10      	ldr	r2, [pc, #64]	; (8001cd8 <HAL_TIM_MspPostInit+0xe8>)
 8001c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c9c:	6153      	str	r3, [r2, #20]
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <HAL_TIM_MspPostInit+0xe8>)
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001caa:	2302      	movs	r3, #2
 8001cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4805      	ldr	r0, [pc, #20]	; (8001cdc <HAL_TIM_MspPostInit+0xec>)
 8001cc6:	f001 f929 	bl	8002f1c <HAL_GPIO_Init>
}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	; 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40012c00 	.word	0x40012c00
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	48000400 	.word	0x48000400
 8001ce0:	40000400 	.word	0x40000400

08001ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a17      	ldr	r2, [pc, #92]	; (8001d60 <HAL_UART_MspInit+0x7c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d127      	bne.n	8001d56 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_UART_MspInit+0x80>)
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	4a16      	ldr	r2, [pc, #88]	; (8001d64 <HAL_UART_MspInit+0x80>)
 8001d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d10:	6193      	str	r3, [r2, #24]
 8001d12:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <HAL_UART_MspInit+0x80>)
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_UART_MspInit+0x80>)
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <HAL_UART_MspInit+0x80>)
 8001d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d28:	6153      	str	r3, [r2, #20]
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_UART_MspInit+0x80>)
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d36:	23c0      	movs	r3, #192	; 0xc0
 8001d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d46:	2307      	movs	r3, #7
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4805      	ldr	r0, [pc, #20]	; (8001d68 <HAL_UART_MspInit+0x84>)
 8001d52:	f001 f8e3 	bl	8002f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d56:	bf00      	nop
 8001d58:	3728      	adds	r7, #40	; 0x28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40013800 	.word	0x40013800
 8001d64:	40021000 	.word	0x40021000
 8001d68:	48000400 	.word	0x48000400

08001d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <NMI_Handler+0x4>

08001d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d76:	e7fe      	b.n	8001d76 <HardFault_Handler+0x4>

08001d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <MemManage_Handler+0x4>

08001d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d82:	e7fe      	b.n	8001d82 <BusFault_Handler+0x4>

08001d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <UsageFault_Handler+0x4>

08001d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db8:	f000 f95a 	bl	8002070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <DMA1_Channel3_IRQHandler+0x10>)
 8001dc6:	f000 ffb8 	bl	8002d3a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000198 	.word	0x20000198

08001dd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
	return 1;
 8001dd8:	2301      	movs	r3, #1
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_kill>:

int _kill(int pid, int sig)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dee:	f005 f965 	bl	80070bc <__errno>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2216      	movs	r2, #22
 8001df6:	601a      	str	r2, [r3, #0]
	return -1;
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_exit>:

void _exit (int status)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ffe7 	bl	8001de4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e16:	e7fe      	b.n	8001e16 <_exit+0x12>

08001e18 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <SystemInit+0x20>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <SystemInit+0x20>)
 8001e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <_ZN6ws281213ws2812_double19update_write_bufferEv>:

#include "ws2812double.h"

namespace ws2812 {

void ws2812_double::update_write_buffer(){
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < pixel_num; i++){
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d854      	bhi.n	8001ef8 <_ZN6ws281213ws2812_double19update_write_bufferEv+0xbc>
		for(uint8_t j = 0; j < color_num; j++){
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73bb      	strb	r3, [r7, #14]
 8001e52:	7bbb      	ldrb	r3, [r7, #14]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d84b      	bhi.n	8001ef0 <_ZN6ws281213ws2812_double19update_write_bufferEv+0xb4>
			uint8_t color = 	(j == 0) ? ws2812_double::colors[i].green
 8001e58:	7bbb      	ldrb	r3, [r7, #14]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d108      	bne.n	8001e70 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x34>
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	440b      	add	r3, r1
 8001e6a:	3340      	adds	r3, #64	; 0x40
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	e018      	b.n	8001ea2 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x66>
 8001e70:	7bbb      	ldrb	r3, [r7, #14]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d108      	bne.n	8001e88 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x4c>
							: 	(j == 1) ? ws2812_double::colors[i].red
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? ws2812_double::colors[i].green
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	440b      	add	r3, r1
 8001e82:	333f      	adds	r3, #63	; 0x3f
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	e00c      	b.n	8001ea2 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x66>
 8001e88:	7bbb      	ldrb	r3, [r7, #14]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d108      	bne.n	8001ea0 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x64>
							: 	(j == 2) ? ws2812_double::colors[i].blue : 0;
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
			uint8_t color = 	(j == 0) ? ws2812_double::colors[i].green
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	440b      	add	r3, r1
 8001e9a:	3341      	adds	r3, #65	; 0x41
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	e000      	b.n	8001ea2 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x66>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	733b      	strb	r3, [r7, #12]
			for(uint8_t k = 0; k < byte; k++){
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	737b      	strb	r3, [r7, #13]
 8001ea8:	7b7b      	ldrb	r3, [r7, #13]
 8001eaa:	2b07      	cmp	r3, #7
 8001eac:	d81c      	bhi.n	8001ee8 <_ZN6ws281213ws2812_double19update_write_bufferEv+0xac>
				ws2812_double::write_buffer[(i * color_num + j) * byte + k] = ((color & (0x80 >> k)) > 0) ? ws2812_double::high : ws2812_double::low;
 8001eae:	7b3a      	ldrb	r2, [r7, #12]
 8001eb0:	7b7b      	ldrb	r3, [r7, #13]
 8001eb2:	2180      	movs	r1, #128	; 0x80
 8001eb4:	fa41 f303 	asr.w	r3, r1, r3
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	dd02      	ble.n	8001ec4 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x88>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7b1a      	ldrb	r2, [r3, #12]
 8001ec2:	e001      	b.n	8001ec8 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x8c>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7b5a      	ldrb	r2, [r3, #13]
 8001ec8:	7bf9      	ldrb	r1, [r7, #15]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4419      	add	r1, r3
 8001ed0:	7bbb      	ldrb	r3, [r7, #14]
 8001ed2:	440b      	add	r3, r1
 8001ed4:	00d9      	lsls	r1, r3, #3
 8001ed6:	7b7b      	ldrb	r3, [r7, #13]
 8001ed8:	440b      	add	r3, r1
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	440b      	add	r3, r1
 8001ede:	739a      	strb	r2, [r3, #14]
			for(uint8_t k = 0; k < byte; k++){
 8001ee0:	7b7b      	ldrb	r3, [r7, #13]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	737b      	strb	r3, [r7, #13]
 8001ee6:	e7df      	b.n	8001ea8 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x6c>
		for(uint8_t j = 0; j < color_num; j++){
 8001ee8:	7bbb      	ldrb	r3, [r7, #14]
 8001eea:	3301      	adds	r3, #1
 8001eec:	73bb      	strb	r3, [r7, #14]
 8001eee:	e7b0      	b.n	8001e52 <_ZN6ws281213ws2812_double19update_write_bufferEv+0x16>
	for(uint8_t i = 0; i < pixel_num; i++){
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	e7a7      	b.n	8001e48 <_ZN6ws281213ws2812_double19update_write_bufferEv+0xc>
			}
		}
	}
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <_ZN6ws281213ws2812_double4rendEv>:

void ws2812_double::rend(){
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	update_write_buffer();
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff95 	bl	8001e3c <_ZN6ws281213ws2812_double19update_write_bufferEv>
	if(ws2812_double::hdma->State != HAL_DMA_STATE_READY) {
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d007      	beq.n	8001f2e <_ZN6ws281213ws2812_double4rendEv+0x2a>
    	HAL_TIM_PWM_Stop_DMA(ws2812_double::htim, ws2812_double::Channel);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	4619      	mov	r1, r3
 8001f28:	4610      	mov	r0, r2
 8001f2a:	f003 f8d7 	bl	80050dc <HAL_TIM_PWM_Stop_DMA>
  	}
	HAL_TIM_PWM_Start_DMA(ws2812_double::htim, ws2812_double::Channel, (uint32_t*)ws2812_double::write_buffer, data_len + reset_bit);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6859      	ldr	r1, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f103 020e 	add.w	r2, r3, #14
 8001f3c:	2331      	movs	r3, #49	; 0x31
 8001f3e:	f002 fec7 	bl	8004cd0 <HAL_TIM_PWM_Start_DMA>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <_ZN6ws281213ws2812_doubleC1EP17TIM_HandleTypeDefmP19__DMA_HandleTypeDefhh>:

ws2812_double::ws2812_double(TIM_HandleTypeDef *htim, uint32_t Channel, DMA_HandleTypeDef *hdma, uint8_t high_level_pulse_len, uint8_t low_level_pulse_len) {
 8001f4a:	b480      	push	{r7}
 8001f4c:	b085      	sub	sp, #20
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	333f      	adds	r3, #63	; 0x3f
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	809a      	strh	r2, [r3, #4]
	// TODO Auto-generated constructor stub
	ws2812_double::htim = htim;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	601a      	str	r2, [r3, #0]
	ws2812_double::Channel = Channel;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	605a      	str	r2, [r3, #4]
	ws2812_double::hdma = hdma;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	609a      	str	r2, [r3, #8]
	ws2812_double::high = high_level_pulse_len;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	7e3a      	ldrb	r2, [r7, #24]
 8001f78:	731a      	strb	r2, [r3, #12]
	ws2812_double::low = low_level_pulse_len;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	7f3a      	ldrb	r2, [r7, #28]
 8001f7e:	735a      	strb	r2, [r3, #13]
}
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f94:	480d      	ldr	r0, [pc, #52]	; (8001fcc <LoopForever+0x6>)
  ldr r1, =_edata
 8001f96:	490e      	ldr	r1, [pc, #56]	; (8001fd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f98:	4a0e      	ldr	r2, [pc, #56]	; (8001fd4 <LoopForever+0xe>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f9c:	e002      	b.n	8001fa4 <LoopCopyDataInit>

08001f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa2:	3304      	adds	r3, #4

08001fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa8:	d3f9      	bcc.n	8001f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001faa:	4a0b      	ldr	r2, [pc, #44]	; (8001fd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fac:	4c0b      	ldr	r4, [pc, #44]	; (8001fdc <LoopForever+0x16>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb0:	e001      	b.n	8001fb6 <LoopFillZerobss>

08001fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb4:	3204      	adds	r2, #4

08001fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb8:	d3fb      	bcc.n	8001fb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fba:	f7ff ff2d 	bl	8001e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fbe:	f005 f883 	bl	80070c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fc2:	f7ff f86b 	bl	800109c <main>

08001fc6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fc6:	e7fe      	b.n	8001fc6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fc8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001fd4:	08007408 	.word	0x08007408
  ldr r2, =_sbss
 8001fd8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001fdc:	20000290 	.word	0x20000290

08001fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fe0:	e7fe      	b.n	8001fe0 <ADC1_2_IRQHandler>
	...

08001fe4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <HAL_Init+0x28>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a07      	ldr	r2, [pc, #28]	; (800200c <HAL_Init+0x28>)
 8001fee:	f043 0310 	orr.w	r3, r3, #16
 8001ff2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff4:	2003      	movs	r0, #3
 8001ff6:	f000 fd7b 	bl	8002af0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ffa:	200f      	movs	r0, #15
 8001ffc:	f000 f808 	bl	8002010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002000:	f7ff fcde 	bl	80019c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40022000 	.word	0x40022000

08002010 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_InitTick+0x54>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_InitTick+0x58>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002026:	fbb3 f3f1 	udiv	r3, r3, r1
 800202a:	fbb2 f3f3 	udiv	r3, r2, r3
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fd93 	bl	8002b5a <HAL_SYSTICK_Config>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e00e      	b.n	800205c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b0f      	cmp	r3, #15
 8002042:	d80a      	bhi.n	800205a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002044:	2200      	movs	r2, #0
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	f000 fd5b 	bl	8002b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002050:	4a06      	ldr	r2, [pc, #24]	; (800206c <HAL_InitTick+0x5c>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	e000      	b.n	800205c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000000 	.word	0x20000000
 8002068:	20000008 	.word	0x20000008
 800206c:	20000004 	.word	0x20000004

08002070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_IncTick+0x20>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_IncTick+0x24>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4413      	add	r3, r2
 8002080:	4a04      	ldr	r2, [pc, #16]	; (8002094 <HAL_IncTick+0x24>)
 8002082:	6013      	str	r3, [r2, #0]
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000008 	.word	0x20000008
 8002094:	20000288 	.word	0x20000288

08002098 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return uwTick;  
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <HAL_GetTick+0x14>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000288 	.word	0x20000288

080020b0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b8:	f7ff ffee 	bl	8002098 <HAL_GetTick>
 80020bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d005      	beq.n	80020d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_Delay+0x44>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4413      	add	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80020d6:	bf00      	nop
 80020d8:	f7ff ffde 	bl	8002098 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d8f7      	bhi.n	80020d8 <HAL_Delay+0x28>
  {
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000008 	.word	0x20000008

080020f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e0ed      	b.n	80022e6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d102      	bne.n	800211c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff fc76 	bl	8001a08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800212c:	f7ff ffb4 	bl	8002098 <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002132:	e012      	b.n	800215a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002134:	f7ff ffb0 	bl	8002098 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b0a      	cmp	r3, #10
 8002140:	d90b      	bls.n	800215a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2205      	movs	r2, #5
 8002152:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e0c5      	b.n	80022e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0e5      	beq.n	8002134 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0202 	bic.w	r2, r2, #2
 8002176:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002178:	f7ff ff8e 	bl	8002098 <HAL_GetTick>
 800217c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800217e:	e012      	b.n	80021a6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002180:	f7ff ff8a 	bl	8002098 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b0a      	cmp	r3, #10
 800218c:	d90b      	bls.n	80021a6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2205      	movs	r2, #5
 800219e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e09f      	b.n	80022e6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1e5      	bne.n	8002180 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	7e1b      	ldrb	r3, [r3, #24]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d108      	bne.n	80021ce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e007      	b.n	80021de <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	7e5b      	ldrb	r3, [r3, #25]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d108      	bne.n	80021f8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e007      	b.n	8002208 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002206:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7e9b      	ldrb	r3, [r3, #26]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d108      	bne.n	8002222 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0220 	orr.w	r2, r2, #32
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e007      	b.n	8002232 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0220 	bic.w	r2, r2, #32
 8002230:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7edb      	ldrb	r3, [r3, #27]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d108      	bne.n	800224c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0210 	bic.w	r2, r2, #16
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	e007      	b.n	800225c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0210 	orr.w	r2, r2, #16
 800225a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7f1b      	ldrb	r3, [r3, #28]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d108      	bne.n	8002276 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0208 	orr.w	r2, r2, #8
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	e007      	b.n	8002286 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0208 	bic.w	r2, r2, #8
 8002284:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	7f5b      	ldrb	r3, [r3, #29]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d108      	bne.n	80022a0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0204 	orr.w	r2, r2, #4
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e007      	b.n	80022b0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0204 	bic.w	r2, r2, #4
 80022ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	ea42 0103 	orr.w	r1, r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	1e5a      	subs	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b087      	sub	sp, #28
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002304:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d003      	beq.n	8002314 <HAL_CAN_ConfigFilter+0x26>
 800230c:	7cfb      	ldrb	r3, [r7, #19]
 800230e:	2b02      	cmp	r3, #2
 8002310:	f040 80aa 	bne.w	8002468 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800231a:	f043 0201 	orr.w	r2, r3, #1
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	f003 031f 	and.w	r3, r3, #31
 800232c:	2201      	movs	r2, #1
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	43db      	mvns	r3, r3
 800233e:	401a      	ands	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d123      	bne.n	8002396 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	43db      	mvns	r3, r3
 8002358:	401a      	ands	r2, r3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002370:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	3248      	adds	r2, #72	; 0x48
 8002376:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800238a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800238c:	6979      	ldr	r1, [r7, #20]
 800238e:	3348      	adds	r3, #72	; 0x48
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	440b      	add	r3, r1
 8002394:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d122      	bne.n	80023e4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	431a      	orrs	r2, r3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	3248      	adds	r2, #72	; 0x48
 80023c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023da:	6979      	ldr	r1, [r7, #20]
 80023dc:	3348      	adds	r3, #72	; 0x48
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	440b      	add	r3, r1
 80023e2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d109      	bne.n	8002400 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	401a      	ands	r2, r3
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80023fe:	e007      	b.n	8002410 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	431a      	orrs	r2, r3
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d109      	bne.n	800242c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	43db      	mvns	r3, r3
 8002422:	401a      	ands	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800242a:	e007      	b.n	800243c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	431a      	orrs	r2, r3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d107      	bne.n	8002454 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	431a      	orrs	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800245a:	f023 0201 	bic.w	r2, r3, #1
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	e006      	b.n	8002476 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
  }
}
 8002476:	4618      	mov	r0, r3
 8002478:	371c      	adds	r7, #28
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b01      	cmp	r3, #1
 8002494:	d12e      	bne.n	80024f4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2202      	movs	r2, #2
 800249a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0201 	bic.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024ae:	f7ff fdf3 	bl	8002098 <HAL_GetTick>
 80024b2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024b4:	e012      	b.n	80024dc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024b6:	f7ff fdef 	bl	8002098 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b0a      	cmp	r3, #10
 80024c2:	d90b      	bls.n	80024dc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2205      	movs	r2, #5
 80024d4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e012      	b.n	8002502 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1e5      	bne.n	80024b6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	e006      	b.n	8002502 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
  }
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800250a:	b480      	push	{r7}
 800250c:	b089      	sub	sp, #36	; 0x24
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800251e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002528:	7ffb      	ldrb	r3, [r7, #31]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d003      	beq.n	8002536 <HAL_CAN_AddTxMessage+0x2c>
 800252e:	7ffb      	ldrb	r3, [r7, #31]
 8002530:	2b02      	cmp	r3, #2
 8002532:	f040 80b8 	bne.w	80026a6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002546:	2b00      	cmp	r3, #0
 8002548:	d105      	bne.n	8002556 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80a0 	beq.w	8002696 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	0e1b      	lsrs	r3, r3, #24
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d907      	bls.n	8002576 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e09e      	b.n	80026b4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002576:	2201      	movs	r2, #1
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	409a      	lsls	r2, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10d      	bne.n	80025a4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002592:	68f9      	ldr	r1, [r7, #12]
 8002594:	6809      	ldr	r1, [r1, #0]
 8002596:	431a      	orrs	r2, r3
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3318      	adds	r3, #24
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	440b      	add	r3, r1
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	e00f      	b.n	80025c4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025ae:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025b4:	68f9      	ldr	r1, [r7, #12]
 80025b6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80025b8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	3318      	adds	r3, #24
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	440b      	add	r3, r1
 80025c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6819      	ldr	r1, [r3, #0]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	3318      	adds	r3, #24
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	440b      	add	r3, r1
 80025d4:	3304      	adds	r3, #4
 80025d6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	7d1b      	ldrb	r3, [r3, #20]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d111      	bne.n	8002604 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	3318      	adds	r3, #24
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	4413      	add	r3, r2
 80025ec:	3304      	adds	r3, #4
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	6811      	ldr	r1, [r2, #0]
 80025f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	3318      	adds	r3, #24
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	440b      	add	r3, r1
 8002600:	3304      	adds	r3, #4
 8002602:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3307      	adds	r3, #7
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	061a      	lsls	r2, r3, #24
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3306      	adds	r3, #6
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	041b      	lsls	r3, r3, #16
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3305      	adds	r3, #5
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	4313      	orrs	r3, r2
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	3204      	adds	r2, #4
 8002624:	7812      	ldrb	r2, [r2, #0]
 8002626:	4610      	mov	r0, r2
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	6811      	ldr	r1, [r2, #0]
 800262c:	ea43 0200 	orr.w	r2, r3, r0
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	440b      	add	r3, r1
 8002636:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800263a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3303      	adds	r3, #3
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	061a      	lsls	r2, r3, #24
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3302      	adds	r3, #2
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	041b      	lsls	r3, r3, #16
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3301      	adds	r3, #1
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	021b      	lsls	r3, r3, #8
 8002656:	4313      	orrs	r3, r2
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	7812      	ldrb	r2, [r2, #0]
 800265c:	4610      	mov	r0, r2
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	6811      	ldr	r1, [r2, #0]
 8002662:	ea43 0200 	orr.w	r2, r3, r0
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	440b      	add	r3, r1
 800266c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002670:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	3318      	adds	r3, #24
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	4413      	add	r3, r2
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	6811      	ldr	r1, [r2, #0]
 8002684:	f043 0201 	orr.w	r2, r3, #1
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	3318      	adds	r3, #24
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	440b      	add	r3, r1
 8002690:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	e00e      	b.n	80026b4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e006      	b.n	80026b4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
  }
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3724      	adds	r7, #36	; 0x24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80026d4:	7afb      	ldrb	r3, [r7, #11]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d002      	beq.n	80026e0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80026da:	7afb      	ldrb	r3, [r7, #11]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d11d      	bne.n	800271c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	3301      	adds	r3, #1
 80026f2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3301      	adds	r3, #1
 8002706:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	3301      	adds	r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800271c:	68fb      	ldr	r3, [r7, #12]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800272a:	b480      	push	{r7}
 800272c:	b087      	sub	sp, #28
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800273e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002740:	7dfb      	ldrb	r3, [r7, #23]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d003      	beq.n	800274e <HAL_CAN_GetRxMessage+0x24>
 8002746:	7dfb      	ldrb	r3, [r7, #23]
 8002748:	2b02      	cmp	r3, #2
 800274a:	f040 80f3 	bne.w	8002934 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10e      	bne.n	8002772 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d116      	bne.n	8002790 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e0e7      	b.n	8002942 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d107      	bne.n	8002790 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0d8      	b.n	8002942 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	331b      	adds	r3, #27
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	4413      	add	r3, r2
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0204 	and.w	r2, r3, #4
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10c      	bne.n	80027c8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	331b      	adds	r3, #27
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	4413      	add	r3, r2
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	0d5b      	lsrs	r3, r3, #21
 80027be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	e00b      	b.n	80027e0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	331b      	adds	r3, #27
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	4413      	add	r3, r2
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	08db      	lsrs	r3, r3, #3
 80027d8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	331b      	adds	r3, #27
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	4413      	add	r3, r2
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0202 	and.w	r2, r3, #2
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	331b      	adds	r3, #27
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	4413      	add	r3, r2
 8002802:	3304      	adds	r3, #4
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 020f 	and.w	r2, r3, #15
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	331b      	adds	r3, #27
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	4413      	add	r3, r2
 800281a:	3304      	adds	r3, #4
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	0a1b      	lsrs	r3, r3, #8
 8002820:	b2da      	uxtb	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	331b      	adds	r3, #27
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	4413      	add	r3, r2
 8002832:	3304      	adds	r3, #4
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	0c1b      	lsrs	r3, r3, #16
 8002838:	b29a      	uxth	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	4413      	add	r3, r2
 8002848:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	b2da      	uxtb	r2, r3
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	4413      	add	r3, r2
 800285e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0a1a      	lsrs	r2, r3, #8
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	3301      	adds	r3, #1
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	4413      	add	r3, r2
 8002878:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	0c1a      	lsrs	r2, r3, #16
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	3302      	adds	r3, #2
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	4413      	add	r3, r2
 8002892:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	0e1a      	lsrs	r2, r3, #24
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	3303      	adds	r3, #3
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	3304      	adds	r3, #4
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	0a1a      	lsrs	r2, r3, #8
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	3305      	adds	r3, #5
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	4413      	add	r3, r2
 80028de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	0c1a      	lsrs	r2, r3, #16
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	3306      	adds	r3, #6
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	0e1a      	lsrs	r2, r3, #24
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	3307      	adds	r3, #7
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d108      	bne.n	8002920 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 0220 	orr.w	r2, r2, #32
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	e007      	b.n	8002930 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0220 	orr.w	r2, r2, #32
 800292e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	e006      	b.n	8002942 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
  }
}
 8002942:	4618      	mov	r0, r3
 8002944:	371c      	adds	r7, #28
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <__NVIC_SetPriorityGrouping+0x44>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800296c:	4013      	ands	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800297c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002982:	4a04      	ldr	r2, [pc, #16]	; (8002994 <__NVIC_SetPriorityGrouping+0x44>)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	60d3      	str	r3, [r2, #12]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <__NVIC_GetPriorityGrouping+0x18>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	f003 0307 	and.w	r3, r3, #7
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	db0b      	blt.n	80029de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	f003 021f 	and.w	r2, r3, #31
 80029cc:	4907      	ldr	r1, [pc, #28]	; (80029ec <__NVIC_EnableIRQ+0x38>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	2001      	movs	r0, #1
 80029d6:	fa00 f202 	lsl.w	r2, r0, r2
 80029da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000e100 	.word	0xe000e100

080029f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	6039      	str	r1, [r7, #0]
 80029fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	db0a      	blt.n	8002a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	490c      	ldr	r1, [pc, #48]	; (8002a3c <__NVIC_SetPriority+0x4c>)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	440b      	add	r3, r1
 8002a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a18:	e00a      	b.n	8002a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4908      	ldr	r1, [pc, #32]	; (8002a40 <__NVIC_SetPriority+0x50>)
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	3b04      	subs	r3, #4
 8002a28:	0112      	lsls	r2, r2, #4
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	761a      	strb	r2, [r3, #24]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000e100 	.word	0xe000e100
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f1c3 0307 	rsb	r3, r3, #7
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	bf28      	it	cs
 8002a62:	2304      	movcs	r3, #4
 8002a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d902      	bls.n	8002a74 <NVIC_EncodePriority+0x30>
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3b03      	subs	r3, #3
 8002a72:	e000      	b.n	8002a76 <NVIC_EncodePriority+0x32>
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43da      	mvns	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	401a      	ands	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	43d9      	mvns	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9c:	4313      	orrs	r3, r2
         );
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3724      	adds	r7, #36	; 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002abc:	d301      	bcc.n	8002ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00f      	b.n	8002ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <SysTick_Config+0x40>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aca:	210f      	movs	r1, #15
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	f7ff ff8e 	bl	80029f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <SysTick_Config+0x40>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ada:	4b04      	ldr	r3, [pc, #16]	; (8002aec <SysTick_Config+0x40>)
 8002adc:	2207      	movs	r2, #7
 8002ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	e000e010 	.word	0xe000e010

08002af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ff29 	bl	8002950 <__NVIC_SetPriorityGrouping>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b18:	f7ff ff3e 	bl	8002998 <__NVIC_GetPriorityGrouping>
 8002b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	6978      	ldr	r0, [r7, #20]
 8002b24:	f7ff ff8e 	bl	8002a44 <NVIC_EncodePriority>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff5d 	bl	80029f0 <__NVIC_SetPriority>
}
 8002b36:	bf00      	nop
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	4603      	mov	r3, r0
 8002b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff31 	bl	80029b4 <__NVIC_EnableIRQ>
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff ffa2 	bl	8002aac <SysTick_Config>
 8002b68:	4603      	mov	r3, r0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e037      	b.n	8002bf8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ba2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f97e 	bl	8002edc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}  
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_DMA_Start_IT+0x20>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e04a      	b.n	8002cb6 <HAL_DMA_Start_IT+0xb6>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d13a      	bne.n	8002ca8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2202      	movs	r2, #2
 8002c36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f912 	bl	8002e80 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 020e 	orr.w	r2, r2, #14
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	e00f      	b.n	8002c96 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 020a 	orr.w	r2, r2, #10
 8002c84:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0204 	bic.w	r2, r2, #4
 8002c94:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0201 	orr.w	r2, r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	e005      	b.n	8002cb4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d005      	beq.n	8002ce0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
 8002cde:	e027      	b.n	8002d30 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 020e 	bic.w	r2, r2, #14
 8002cee:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	2101      	movs	r1, #1
 8002d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	4798      	blx	r3
    } 
  }
  return status;
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	2204      	movs	r2, #4
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d024      	beq.n	8002dac <HAL_DMA_IRQHandler+0x72>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01f      	beq.n	8002dac <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d107      	bne.n	8002d8a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0204 	bic.w	r2, r2, #4
 8002d88:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d92:	2104      	movs	r1, #4
 8002d94:	fa01 f202 	lsl.w	r2, r1, r2
 8002d98:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d06a      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002daa:	e065      	b.n	8002e78 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	2202      	movs	r2, #2
 8002db2:	409a      	lsls	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d02c      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xdc>
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d027      	beq.n	8002e16 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10b      	bne.n	8002dec <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 020a 	bic.w	r2, r2, #10
 8002de2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df4:	2102      	movs	r1, #2
 8002df6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfa:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d035      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002e14:	e030      	b.n	8002e78 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	2208      	movs	r2, #8
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d028      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x13e>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d023      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 020e 	bic.w	r2, r2, #14
 8002e3e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e48:	2101      	movs	r1, #1
 8002e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d004      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	4798      	blx	r3
    }
  }
}  
 8002e76:	e7ff      	b.n	8002e78 <HAL_DMA_IRQHandler+0x13e>
 8002e78:	bf00      	nop
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	2101      	movs	r1, #1
 8002e98:	fa01 f202 	lsl.w	r2, r1, r2
 8002e9c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b10      	cmp	r3, #16
 8002eac:	d108      	bne.n	8002ec0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ebe:	e007      	b.n	8002ed0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	60da      	str	r2, [r3, #12]
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <DMA_CalcBaseAndBitshift+0x34>)
 8002eec:	4413      	add	r3, r2
 8002eee:	4a09      	ldr	r2, [pc, #36]	; (8002f14 <DMA_CalcBaseAndBitshift+0x38>)
 8002ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	009a      	lsls	r2, r3, #2
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a06      	ldr	r2, [pc, #24]	; (8002f18 <DMA_CalcBaseAndBitshift+0x3c>)
 8002f00:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	bffdfff8 	.word	0xbffdfff8
 8002f14:	cccccccd 	.word	0xcccccccd
 8002f18:	40020000 	.word	0x40020000

08002f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f2a:	e14e      	b.n	80031ca <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	2101      	movs	r1, #1
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	fa01 f303 	lsl.w	r3, r1, r3
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8140 	beq.w	80031c4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d005      	beq.n	8002f5c <HAL_GPIO_Init+0x40>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d130      	bne.n	8002fbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2203      	movs	r2, #3
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4013      	ands	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f92:	2201      	movs	r2, #1
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	f003 0201 	and.w	r2, r3, #1
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d017      	beq.n	8002ffa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d123      	bne.n	800304e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	08da      	lsrs	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3208      	adds	r2, #8
 800300e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003012:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	220f      	movs	r2, #15
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4013      	ands	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	08da      	lsrs	r2, r3, #3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3208      	adds	r2, #8
 8003048:	6939      	ldr	r1, [r7, #16]
 800304a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	2203      	movs	r2, #3
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4013      	ands	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 0203 	and.w	r2, r3, #3
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 809a 	beq.w	80031c4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003090:	4b55      	ldr	r3, [pc, #340]	; (80031e8 <HAL_GPIO_Init+0x2cc>)
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	4a54      	ldr	r2, [pc, #336]	; (80031e8 <HAL_GPIO_Init+0x2cc>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	6193      	str	r3, [r2, #24]
 800309c:	4b52      	ldr	r3, [pc, #328]	; (80031e8 <HAL_GPIO_Init+0x2cc>)
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030a8:	4a50      	ldr	r2, [pc, #320]	; (80031ec <HAL_GPIO_Init+0x2d0>)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	089b      	lsrs	r3, r3, #2
 80030ae:	3302      	adds	r3, #2
 80030b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	220f      	movs	r2, #15
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030d2:	d013      	beq.n	80030fc <HAL_GPIO_Init+0x1e0>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a46      	ldr	r2, [pc, #280]	; (80031f0 <HAL_GPIO_Init+0x2d4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00d      	beq.n	80030f8 <HAL_GPIO_Init+0x1dc>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a45      	ldr	r2, [pc, #276]	; (80031f4 <HAL_GPIO_Init+0x2d8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d007      	beq.n	80030f4 <HAL_GPIO_Init+0x1d8>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a44      	ldr	r2, [pc, #272]	; (80031f8 <HAL_GPIO_Init+0x2dc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d101      	bne.n	80030f0 <HAL_GPIO_Init+0x1d4>
 80030ec:	2303      	movs	r3, #3
 80030ee:	e006      	b.n	80030fe <HAL_GPIO_Init+0x1e2>
 80030f0:	2305      	movs	r3, #5
 80030f2:	e004      	b.n	80030fe <HAL_GPIO_Init+0x1e2>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e002      	b.n	80030fe <HAL_GPIO_Init+0x1e2>
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <HAL_GPIO_Init+0x1e2>
 80030fc:	2300      	movs	r3, #0
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	f002 0203 	and.w	r2, r2, #3
 8003104:	0092      	lsls	r2, r2, #2
 8003106:	4093      	lsls	r3, r2
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800310e:	4937      	ldr	r1, [pc, #220]	; (80031ec <HAL_GPIO_Init+0x2d0>)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	3302      	adds	r3, #2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800311c:	4b37      	ldr	r3, [pc, #220]	; (80031fc <HAL_GPIO_Init+0x2e0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	43db      	mvns	r3, r3
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4013      	ands	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003140:	4a2e      	ldr	r2, [pc, #184]	; (80031fc <HAL_GPIO_Init+0x2e0>)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003146:	4b2d      	ldr	r3, [pc, #180]	; (80031fc <HAL_GPIO_Init+0x2e0>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	43db      	mvns	r3, r3
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4013      	ands	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800316a:	4a24      	ldr	r2, [pc, #144]	; (80031fc <HAL_GPIO_Init+0x2e0>)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003170:	4b22      	ldr	r3, [pc, #136]	; (80031fc <HAL_GPIO_Init+0x2e0>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	43db      	mvns	r3, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4013      	ands	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003194:	4a19      	ldr	r2, [pc, #100]	; (80031fc <HAL_GPIO_Init+0x2e0>)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800319a:	4b18      	ldr	r3, [pc, #96]	; (80031fc <HAL_GPIO_Init+0x2e0>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80031be:	4a0f      	ldr	r2, [pc, #60]	; (80031fc <HAL_GPIO_Init+0x2e0>)
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	3301      	adds	r3, #1
 80031c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f47f aea9 	bne.w	8002f2c <HAL_GPIO_Init+0x10>
  }
}
 80031da:	bf00      	nop
 80031dc:	bf00      	nop
 80031de:	371c      	adds	r7, #28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40010000 	.word	0x40010000
 80031f0:	48000400 	.word	0x48000400
 80031f4:	48000800 	.word	0x48000800
 80031f8:	48000c00 	.word	0x48000c00
 80031fc:	40010400 	.word	0x40010400

08003200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	807b      	strh	r3, [r7, #2]
 800320c:	4613      	mov	r3, r2
 800320e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003210:	787b      	ldrb	r3, [r7, #1]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003216:	887a      	ldrh	r2, [r7, #2]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800321c:	e002      	b.n	8003224 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800321e:	887a      	ldrh	r2, [r7, #2]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003242:	887a      	ldrh	r2, [r7, #2]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4013      	ands	r3, r2
 8003248:	041a      	lsls	r2, r3, #16
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	43d9      	mvns	r1, r3
 800324e:	887b      	ldrh	r3, [r7, #2]
 8003250:	400b      	ands	r3, r1
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	619a      	str	r2, [r3, #24]
}
 8003258:	bf00      	nop
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800326a:	af00      	add	r7, sp, #0
 800326c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003270:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003274:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d102      	bne.n	800328a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	f001 b823 	b.w	80042d0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800328a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 817d 	beq.w	800359a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032a0:	4bbc      	ldr	r3, [pc, #752]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 030c 	and.w	r3, r3, #12
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d00c      	beq.n	80032c6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032ac:	4bb9      	ldr	r3, [pc, #740]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 030c 	and.w	r3, r3, #12
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d15c      	bne.n	8003372 <HAL_RCC_OscConfig+0x10e>
 80032b8:	4bb6      	ldr	r3, [pc, #728]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c4:	d155      	bne.n	8003372 <HAL_RCC_OscConfig+0x10e>
 80032c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032da:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032de:	fab3 f383 	clz	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	095b      	lsrs	r3, r3, #5
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d102      	bne.n	80032f8 <HAL_RCC_OscConfig+0x94>
 80032f2:	4ba8      	ldr	r3, [pc, #672]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	e015      	b.n	8003324 <HAL_RCC_OscConfig+0xc0>
 80032f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032fc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003300:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003304:	fa93 f3a3 	rbit	r3, r3
 8003308:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800330c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003310:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003314:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003318:	fa93 f3a3 	rbit	r3, r3
 800331c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003320:	4b9c      	ldr	r3, [pc, #624]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003328:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800332c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003330:	fa92 f2a2 	rbit	r2, r2
 8003334:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003338:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800333c:	fab2 f282 	clz	r2, r2
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	f042 0220 	orr.w	r2, r2, #32
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	f002 021f 	and.w	r2, r2, #31
 800334c:	2101      	movs	r1, #1
 800334e:	fa01 f202 	lsl.w	r2, r1, r2
 8003352:	4013      	ands	r3, r2
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 811f 	beq.w	8003598 <HAL_RCC_OscConfig+0x334>
 800335a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f040 8116 	bne.w	8003598 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	f000 bfaf 	b.w	80042d0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003376:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003382:	d106      	bne.n	8003392 <HAL_RCC_OscConfig+0x12e>
 8003384:	4b83      	ldr	r3, [pc, #524]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a82      	ldr	r2, [pc, #520]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 800338a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	e036      	b.n	8003400 <HAL_RCC_OscConfig+0x19c>
 8003392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003396:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0x158>
 80033a2:	4b7c      	ldr	r3, [pc, #496]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a7b      	ldr	r2, [pc, #492]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 80033a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	4b79      	ldr	r3, [pc, #484]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a78      	ldr	r2, [pc, #480]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 80033b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e021      	b.n	8003400 <HAL_RCC_OscConfig+0x19c>
 80033bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x184>
 80033ce:	4b71      	ldr	r3, [pc, #452]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a70      	ldr	r2, [pc, #448]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 80033d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4b6e      	ldr	r3, [pc, #440]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a6d      	ldr	r2, [pc, #436]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e00b      	b.n	8003400 <HAL_RCC_OscConfig+0x19c>
 80033e8:	4b6a      	ldr	r3, [pc, #424]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a69      	ldr	r2, [pc, #420]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 80033ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4b67      	ldr	r3, [pc, #412]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a66      	ldr	r2, [pc, #408]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 80033fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003400:	4b64      	ldr	r3, [pc, #400]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	f023 020f 	bic.w	r2, r3, #15
 8003408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	495f      	ldr	r1, [pc, #380]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 8003416:	4313      	orrs	r3, r2
 8003418:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800341a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d059      	beq.n	80034de <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342a:	f7fe fe35 	bl	8002098 <HAL_GetTick>
 800342e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	e00a      	b.n	800344a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003434:	f7fe fe30 	bl	8002098 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b64      	cmp	r3, #100	; 0x64
 8003442:	d902      	bls.n	800344a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	f000 bf43 	b.w	80042d0 <HAL_RCC_OscConfig+0x106c>
 800344a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800344e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003452:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003456:	fa93 f3a3 	rbit	r3, r3
 800345a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800345e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003462:	fab3 f383 	clz	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	b2db      	uxtb	r3, r3
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b01      	cmp	r3, #1
 8003474:	d102      	bne.n	800347c <HAL_RCC_OscConfig+0x218>
 8003476:	4b47      	ldr	r3, [pc, #284]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	e015      	b.n	80034a8 <HAL_RCC_OscConfig+0x244>
 800347c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003480:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003490:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003494:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003498:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800349c:	fa93 f3a3 	rbit	r3, r3
 80034a0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80034a4:	4b3b      	ldr	r3, [pc, #236]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034ac:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80034b0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80034b4:	fa92 f2a2 	rbit	r2, r2
 80034b8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80034bc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80034c0:	fab2 f282 	clz	r2, r2
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	f042 0220 	orr.w	r2, r2, #32
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	f002 021f 	and.w	r2, r2, #31
 80034d0:	2101      	movs	r1, #1
 80034d2:	fa01 f202 	lsl.w	r2, r1, r2
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0ab      	beq.n	8003434 <HAL_RCC_OscConfig+0x1d0>
 80034dc:	e05d      	b.n	800359a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034de:	f7fe fddb 	bl	8002098 <HAL_GetTick>
 80034e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e8:	f7fe fdd6 	bl	8002098 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b64      	cmp	r3, #100	; 0x64
 80034f6:	d902      	bls.n	80034fe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	f000 bee9 	b.w	80042d0 <HAL_RCC_OscConfig+0x106c>
 80034fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003502:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003506:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800350a:	fa93 f3a3 	rbit	r3, r3
 800350e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003512:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003516:	fab3 f383 	clz	r3, r3
 800351a:	b2db      	uxtb	r3, r3
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b01      	cmp	r3, #1
 8003528:	d102      	bne.n	8003530 <HAL_RCC_OscConfig+0x2cc>
 800352a:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	e015      	b.n	800355c <HAL_RCC_OscConfig+0x2f8>
 8003530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003534:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003548:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800354c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003550:	fa93 f3a3 	rbit	r3, r3
 8003554:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003558:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <HAL_RCC_OscConfig+0x330>)
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003560:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003564:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003568:	fa92 f2a2 	rbit	r2, r2
 800356c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003570:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003574:	fab2 f282 	clz	r2, r2
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	f042 0220 	orr.w	r2, r2, #32
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	f002 021f 	and.w	r2, r2, #31
 8003584:	2101      	movs	r1, #1
 8003586:	fa01 f202 	lsl.w	r2, r1, r2
 800358a:	4013      	ands	r3, r2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1ab      	bne.n	80034e8 <HAL_RCC_OscConfig+0x284>
 8003590:	e003      	b.n	800359a <HAL_RCC_OscConfig+0x336>
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800359a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 817d 	beq.w	80038aa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035b0:	4ba6      	ldr	r3, [pc, #664]	; (800384c <HAL_RCC_OscConfig+0x5e8>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 030c 	and.w	r3, r3, #12
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00b      	beq.n	80035d4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035bc:	4ba3      	ldr	r3, [pc, #652]	; (800384c <HAL_RCC_OscConfig+0x5e8>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 030c 	and.w	r3, r3, #12
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d172      	bne.n	80036ae <HAL_RCC_OscConfig+0x44a>
 80035c8:	4ba0      	ldr	r3, [pc, #640]	; (800384c <HAL_RCC_OscConfig+0x5e8>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d16c      	bne.n	80036ae <HAL_RCC_OscConfig+0x44a>
 80035d4:	2302      	movs	r3, #2
 80035d6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80035de:	fa93 f3a3 	rbit	r3, r3
 80035e2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80035e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d102      	bne.n	8003604 <HAL_RCC_OscConfig+0x3a0>
 80035fe:	4b93      	ldr	r3, [pc, #588]	; (800384c <HAL_RCC_OscConfig+0x5e8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	e013      	b.n	800362c <HAL_RCC_OscConfig+0x3c8>
 8003604:	2302      	movs	r3, #2
 8003606:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800360e:	fa93 f3a3 	rbit	r3, r3
 8003612:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003616:	2302      	movs	r3, #2
 8003618:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800361c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003628:	4b88      	ldr	r3, [pc, #544]	; (800384c <HAL_RCC_OscConfig+0x5e8>)
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	2202      	movs	r2, #2
 800362e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003632:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003636:	fa92 f2a2 	rbit	r2, r2
 800363a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800363e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003642:	fab2 f282 	clz	r2, r2
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	f042 0220 	orr.w	r2, r2, #32
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	f002 021f 	and.w	r2, r2, #31
 8003652:	2101      	movs	r1, #1
 8003654:	fa01 f202 	lsl.w	r2, r1, r2
 8003658:	4013      	ands	r3, r2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_RCC_OscConfig+0x410>
 800365e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003662:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d002      	beq.n	8003674 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	f000 be2e 	b.w	80042d0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003674:	4b75      	ldr	r3, [pc, #468]	; (800384c <HAL_RCC_OscConfig+0x5e8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800367c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003680:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	21f8      	movs	r1, #248	; 0xf8
 800368a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003692:	fa91 f1a1 	rbit	r1, r1
 8003696:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800369a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800369e:	fab1 f181 	clz	r1, r1
 80036a2:	b2c9      	uxtb	r1, r1
 80036a4:	408b      	lsls	r3, r1
 80036a6:	4969      	ldr	r1, [pc, #420]	; (800384c <HAL_RCC_OscConfig+0x5e8>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ac:	e0fd      	b.n	80038aa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 8088 	beq.w	80037d0 <HAL_RCC_OscConfig+0x56c>
 80036c0:	2301      	movs	r3, #1
 80036c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80036d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036d6:	fab3 f383 	clz	r3, r3
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	461a      	mov	r2, r3
 80036e8:	2301      	movs	r3, #1
 80036ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7fe fcd4 	bl	8002098 <HAL_GetTick>
 80036f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f4:	e00a      	b.n	800370c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f6:	f7fe fccf 	bl	8002098 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d902      	bls.n	800370c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	f000 bde2 	b.w	80042d0 <HAL_RCC_OscConfig+0x106c>
 800370c:	2302      	movs	r3, #2
 800370e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800371e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003722:	fab3 f383 	clz	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d102      	bne.n	800373c <HAL_RCC_OscConfig+0x4d8>
 8003736:	4b45      	ldr	r3, [pc, #276]	; (800384c <HAL_RCC_OscConfig+0x5e8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	e013      	b.n	8003764 <HAL_RCC_OscConfig+0x500>
 800373c:	2302      	movs	r3, #2
 800373e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800374e:	2302      	movs	r3, #2
 8003750:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003754:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003760:	4b3a      	ldr	r3, [pc, #232]	; (800384c <HAL_RCC_OscConfig+0x5e8>)
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	2202      	movs	r2, #2
 8003766:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800376a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800376e:	fa92 f2a2 	rbit	r2, r2
 8003772:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003776:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800377a:	fab2 f282 	clz	r2, r2
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	f042 0220 	orr.w	r2, r2, #32
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	f002 021f 	and.w	r2, r2, #31
 800378a:	2101      	movs	r1, #1
 800378c:	fa01 f202 	lsl.w	r2, r1, r2
 8003790:	4013      	ands	r3, r2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0af      	beq.n	80036f6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003796:	4b2d      	ldr	r3, [pc, #180]	; (800384c <HAL_RCC_OscConfig+0x5e8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800379e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	21f8      	movs	r1, #248	; 0xf8
 80037ac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80037b4:	fa91 f1a1 	rbit	r1, r1
 80037b8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80037bc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80037c0:	fab1 f181 	clz	r1, r1
 80037c4:	b2c9      	uxtb	r1, r1
 80037c6:	408b      	lsls	r3, r1
 80037c8:	4920      	ldr	r1, [pc, #128]	; (800384c <HAL_RCC_OscConfig+0x5e8>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]
 80037ce:	e06c      	b.n	80038aa <HAL_RCC_OscConfig+0x646>
 80037d0:	2301      	movs	r3, #1
 80037d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80037e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e6:	fab3 f383 	clz	r3, r3
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	461a      	mov	r2, r3
 80037f8:	2300      	movs	r3, #0
 80037fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fc:	f7fe fc4c 	bl	8002098 <HAL_GetTick>
 8003800:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003804:	e00a      	b.n	800381c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003806:	f7fe fc47 	bl	8002098 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d902      	bls.n	800381c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	f000 bd5a 	b.w	80042d0 <HAL_RCC_OscConfig+0x106c>
 800381c:	2302      	movs	r3, #2
 800381e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003826:	fa93 f3a3 	rbit	r3, r3
 800382a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800382e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003832:	fab3 f383 	clz	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b01      	cmp	r3, #1
 8003844:	d104      	bne.n	8003850 <HAL_RCC_OscConfig+0x5ec>
 8003846:	4b01      	ldr	r3, [pc, #4]	; (800384c <HAL_RCC_OscConfig+0x5e8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	e015      	b.n	8003878 <HAL_RCC_OscConfig+0x614>
 800384c:	40021000 	.word	0x40021000
 8003850:	2302      	movs	r3, #2
 8003852:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003856:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800385a:	fa93 f3a3 	rbit	r3, r3
 800385e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003862:	2302      	movs	r3, #2
 8003864:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003868:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800386c:	fa93 f3a3 	rbit	r3, r3
 8003870:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003874:	4bc8      	ldr	r3, [pc, #800]	; (8003b98 <HAL_RCC_OscConfig+0x934>)
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	2202      	movs	r2, #2
 800387a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800387e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003882:	fa92 f2a2 	rbit	r2, r2
 8003886:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800388a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800388e:	fab2 f282 	clz	r2, r2
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	f042 0220 	orr.w	r2, r2, #32
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	f002 021f 	and.w	r2, r2, #31
 800389e:	2101      	movs	r1, #1
 80038a0:	fa01 f202 	lsl.w	r2, r1, r2
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1ad      	bne.n	8003806 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 8110 	beq.w	8003ae0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d079      	beq.n	80039c4 <HAL_RCC_OscConfig+0x760>
 80038d0:	2301      	movs	r3, #1
 80038d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038da:	fa93 f3a3 	rbit	r3, r3
 80038de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80038e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	4bab      	ldr	r3, [pc, #684]	; (8003b9c <HAL_RCC_OscConfig+0x938>)
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	461a      	mov	r2, r3
 80038f6:	2301      	movs	r3, #1
 80038f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fa:	f7fe fbcd 	bl	8002098 <HAL_GetTick>
 80038fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003902:	e00a      	b.n	800391a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003904:	f7fe fbc8 	bl	8002098 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d902      	bls.n	800391a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	f000 bcdb 	b.w	80042d0 <HAL_RCC_OscConfig+0x106c>
 800391a:	2302      	movs	r3, #2
 800391c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003924:	fa93 f3a3 	rbit	r3, r3
 8003928:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800392c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003930:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003934:	2202      	movs	r2, #2
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	fa93 f2a3 	rbit	r2, r3
 8003946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003958:	2202      	movs	r2, #2
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	fa93 f2a3 	rbit	r2, r3
 800396a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003972:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003974:	4b88      	ldr	r3, [pc, #544]	; (8003b98 <HAL_RCC_OscConfig+0x934>)
 8003976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003980:	2102      	movs	r1, #2
 8003982:	6019      	str	r1, [r3, #0]
 8003984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003988:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	fa93 f1a3 	rbit	r1, r3
 8003992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003996:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800399a:	6019      	str	r1, [r3, #0]
  return result;
 800399c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	fab3 f383 	clz	r3, r3
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f003 031f 	and.w	r3, r3, #31
 80039b6:	2101      	movs	r1, #1
 80039b8:	fa01 f303 	lsl.w	r3, r1, r3
 80039bc:	4013      	ands	r3, r2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0a0      	beq.n	8003904 <HAL_RCC_OscConfig+0x6a0>
 80039c2:	e08d      	b.n	8003ae0 <HAL_RCC_OscConfig+0x87c>
 80039c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80039cc:	2201      	movs	r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	fa93 f2a3 	rbit	r2, r3
 80039de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80039e6:	601a      	str	r2, [r3, #0]
  return result;
 80039e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80039f0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f2:	fab3 f383 	clz	r3, r3
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	4b68      	ldr	r3, [pc, #416]	; (8003b9c <HAL_RCC_OscConfig+0x938>)
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	461a      	mov	r2, r3
 8003a02:	2300      	movs	r3, #0
 8003a04:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a06:	f7fe fb47 	bl	8002098 <HAL_GetTick>
 8003a0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a0e:	e00a      	b.n	8003a26 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a10:	f7fe fb42 	bl	8002098 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d902      	bls.n	8003a26 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	f000 bc55 	b.w	80042d0 <HAL_RCC_OscConfig+0x106c>
 8003a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a2e:	2202      	movs	r2, #2
 8003a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a36:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	fa93 f2a3 	rbit	r2, r3
 8003a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a44:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a52:	2202      	movs	r2, #2
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	fa93 f2a3 	rbit	r2, r3
 8003a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a76:	2202      	movs	r2, #2
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	fa93 f2a3 	rbit	r2, r3
 8003a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a8c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003a90:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a92:	4b41      	ldr	r3, [pc, #260]	; (8003b98 <HAL_RCC_OscConfig+0x934>)
 8003a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003a9e:	2102      	movs	r1, #2
 8003aa0:	6019      	str	r1, [r3, #0]
 8003aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	fa93 f1a3 	rbit	r1, r3
 8003ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ab8:	6019      	str	r1, [r3, #0]
  return result;
 8003aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003abe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	fab3 f383 	clz	r3, r3
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d197      	bne.n	8003a10 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 81a1 	beq.w	8003e38 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003af6:	2300      	movs	r3, #0
 8003af8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afc:	4b26      	ldr	r3, [pc, #152]	; (8003b98 <HAL_RCC_OscConfig+0x934>)
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d116      	bne.n	8003b36 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b08:	4b23      	ldr	r3, [pc, #140]	; (8003b98 <HAL_RCC_OscConfig+0x934>)
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	4a22      	ldr	r2, [pc, #136]	; (8003b98 <HAL_RCC_OscConfig+0x934>)
 8003b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b12:	61d3      	str	r3, [r2, #28]
 8003b14:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <HAL_RCC_OscConfig+0x934>)
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b20:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003b2e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b30:	2301      	movs	r3, #1
 8003b32:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b36:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <HAL_RCC_OscConfig+0x93c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d11a      	bne.n	8003b78 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b42:	4b17      	ldr	r3, [pc, #92]	; (8003ba0 <HAL_RCC_OscConfig+0x93c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a16      	ldr	r2, [pc, #88]	; (8003ba0 <HAL_RCC_OscConfig+0x93c>)
 8003b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b4e:	f7fe faa3 	bl	8002098 <HAL_GetTick>
 8003b52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b56:	e009      	b.n	8003b6c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b58:	f7fe fa9e 	bl	8002098 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b64      	cmp	r3, #100	; 0x64
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e3b1      	b.n	80042d0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <HAL_RCC_OscConfig+0x93c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0ef      	beq.n	8003b58 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d10d      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x940>
 8003b88:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <HAL_RCC_OscConfig+0x934>)
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	4a02      	ldr	r2, [pc, #8]	; (8003b98 <HAL_RCC_OscConfig+0x934>)
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	6213      	str	r3, [r2, #32]
 8003b94:	e03c      	b.n	8003c10 <HAL_RCC_OscConfig+0x9ac>
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	10908120 	.word	0x10908120
 8003ba0:	40007000 	.word	0x40007000
 8003ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10c      	bne.n	8003bce <HAL_RCC_OscConfig+0x96a>
 8003bb4:	4bc1      	ldr	r3, [pc, #772]	; (8003ebc <HAL_RCC_OscConfig+0xc58>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	4ac0      	ldr	r2, [pc, #768]	; (8003ebc <HAL_RCC_OscConfig+0xc58>)
 8003bba:	f023 0301 	bic.w	r3, r3, #1
 8003bbe:	6213      	str	r3, [r2, #32]
 8003bc0:	4bbe      	ldr	r3, [pc, #760]	; (8003ebc <HAL_RCC_OscConfig+0xc58>)
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	4abd      	ldr	r2, [pc, #756]	; (8003ebc <HAL_RCC_OscConfig+0xc58>)
 8003bc6:	f023 0304 	bic.w	r3, r3, #4
 8003bca:	6213      	str	r3, [r2, #32]
 8003bcc:	e020      	b.n	8003c10 <HAL_RCC_OscConfig+0x9ac>
 8003bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	2b05      	cmp	r3, #5
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x994>
 8003bde:	4bb7      	ldr	r3, [pc, #732]	; (8003ebc <HAL_RCC_OscConfig+0xc58>)
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	4ab6      	ldr	r2, [pc, #728]	; (8003ebc <HAL_RCC_OscConfig+0xc58>)
 8003be4:	f043 0304 	orr.w	r3, r3, #4
 8003be8:	6213      	str	r3, [r2, #32]
 8003bea:	4bb4      	ldr	r3, [pc, #720]	; (8003ebc <HAL_RCC_OscConfig+0xc58>)
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	4ab3      	ldr	r2, [pc, #716]	; (8003ebc <HAL_RCC_OscConfig+0xc58>)
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	6213      	str	r3, [r2, #32]
 8003bf6:	e00b      	b.n	8003c10 <HAL_RCC_OscConfig+0x9ac>
 8003bf8:	4bb0      	ldr	r3, [pc, #704]	; (8003ebc <HAL_RCC_OscConfig+0xc58>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	4aaf      	ldr	r2, [pc, #700]	; (8003ebc <HAL_RCC_OscConfig+0xc58>)
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	6213      	str	r3, [r2, #32]
 8003c04:	4bad      	ldr	r3, [pc, #692]	; (8003ebc <HAL_RCC_OscConfig+0xc58>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	4aac      	ldr	r2, [pc, #688]	; (8003ebc <HAL_RCC_OscConfig+0xc58>)
 8003c0a:	f023 0304 	bic.w	r3, r3, #4
 8003c0e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8081 	beq.w	8003d24 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c22:	f7fe fa39 	bl	8002098 <HAL_GetTick>
 8003c26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2a:	e00b      	b.n	8003c44 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c2c:	f7fe fa34 	bl	8002098 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e345      	b.n	80042d0 <HAL_RCC_OscConfig+0x106c>
 8003c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c48:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c54:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	fa93 f2a3 	rbit	r2, r3
 8003c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c6c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003c70:	2202      	movs	r2, #2
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c78:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	fa93 f2a3 	rbit	r2, r3
 8003c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c86:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003c8a:	601a      	str	r2, [r3, #0]
  return result;
 8003c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c90:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003c94:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c96:	fab3 f383 	clz	r3, r3
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	095b      	lsrs	r3, r3, #5
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	f043 0302 	orr.w	r3, r3, #2
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d102      	bne.n	8003cb0 <HAL_RCC_OscConfig+0xa4c>
 8003caa:	4b84      	ldr	r3, [pc, #528]	; (8003ebc <HAL_RCC_OscConfig+0xc58>)
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	e013      	b.n	8003cd8 <HAL_RCC_OscConfig+0xa74>
 8003cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003cb8:	2202      	movs	r2, #2
 8003cba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	fa93 f2a3 	rbit	r2, r3
 8003cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	4b79      	ldr	r3, [pc, #484]	; (8003ebc <HAL_RCC_OscConfig+0xc58>)
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cdc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	6011      	str	r1, [r2, #0]
 8003ce4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ce8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003cec:	6812      	ldr	r2, [r2, #0]
 8003cee:	fa92 f1a2 	rbit	r1, r2
 8003cf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cf6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003cfa:	6011      	str	r1, [r2, #0]
  return result;
 8003cfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d00:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	fab2 f282 	clz	r2, r2
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	f002 021f 	and.w	r2, r2, #31
 8003d16:	2101      	movs	r1, #1
 8003d18:	fa01 f202 	lsl.w	r2, r1, r2
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d084      	beq.n	8003c2c <HAL_RCC_OscConfig+0x9c8>
 8003d22:	e07f      	b.n	8003e24 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d24:	f7fe f9b8 	bl	8002098 <HAL_GetTick>
 8003d28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2c:	e00b      	b.n	8003d46 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d2e:	f7fe f9b3 	bl	8002098 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e2c4      	b.n	80042d0 <HAL_RCC_OscConfig+0x106c>
 8003d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d4a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003d4e:	2202      	movs	r2, #2
 8003d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d56:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	fa93 f2a3 	rbit	r2, r3
 8003d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d64:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d6e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003d72:	2202      	movs	r2, #2
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	fa93 f2a3 	rbit	r2, r3
 8003d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d88:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003d8c:	601a      	str	r2, [r3, #0]
  return result;
 8003d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d92:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003d96:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d98:	fab3 f383 	clz	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	f043 0302 	orr.w	r3, r3, #2
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d102      	bne.n	8003db2 <HAL_RCC_OscConfig+0xb4e>
 8003dac:	4b43      	ldr	r3, [pc, #268]	; (8003ebc <HAL_RCC_OscConfig+0xc58>)
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	e013      	b.n	8003dda <HAL_RCC_OscConfig+0xb76>
 8003db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003dba:	2202      	movs	r2, #2
 8003dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	fa93 f2a3 	rbit	r2, r3
 8003dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	4b39      	ldr	r3, [pc, #228]	; (8003ebc <HAL_RCC_OscConfig+0xc58>)
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dde:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003de2:	2102      	movs	r1, #2
 8003de4:	6011      	str	r1, [r2, #0]
 8003de6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	fa92 f1a2 	rbit	r1, r2
 8003df4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003df8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003dfc:	6011      	str	r1, [r2, #0]
  return result;
 8003dfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e02:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	fab2 f282 	clz	r2, r2
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	f002 021f 	and.w	r2, r2, #31
 8003e18:	2101      	movs	r1, #1
 8003e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d184      	bne.n	8003d2e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e24:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d105      	bne.n	8003e38 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e2c:	4b23      	ldr	r3, [pc, #140]	; (8003ebc <HAL_RCC_OscConfig+0xc58>)
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	4a22      	ldr	r2, [pc, #136]	; (8003ebc <HAL_RCC_OscConfig+0xc58>)
 8003e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e36:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 8242 	beq.w	80042ce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e4a:	4b1c      	ldr	r3, [pc, #112]	; (8003ebc <HAL_RCC_OscConfig+0xc58>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f003 030c 	and.w	r3, r3, #12
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	f000 8213 	beq.w	800427e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	f040 8162 	bne.w	800412e <HAL_RCC_OscConfig+0xeca>
 8003e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e6e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003e72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e7c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	fa93 f2a3 	rbit	r2, r3
 8003e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003e8e:	601a      	str	r2, [r3, #0]
  return result;
 8003e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e94:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003e98:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e9a:	fab3 f383 	clz	r3, r3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ea4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	461a      	mov	r2, r3
 8003eac:	2300      	movs	r3, #0
 8003eae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7fe f8f2 	bl	8002098 <HAL_GetTick>
 8003eb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb8:	e00c      	b.n	8003ed4 <HAL_RCC_OscConfig+0xc70>
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fe f8ea 	bl	8002098 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e1fd      	b.n	80042d0 <HAL_RCC_OscConfig+0x106c>
 8003ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003edc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ee0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	fa93 f2a3 	rbit	r2, r3
 8003ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003ef8:	601a      	str	r2, [r3, #0]
  return result;
 8003efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f04:	fab3 f383 	clz	r3, r3
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d102      	bne.n	8003f1e <HAL_RCC_OscConfig+0xcba>
 8003f18:	4bb0      	ldr	r3, [pc, #704]	; (80041dc <HAL_RCC_OscConfig+0xf78>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	e027      	b.n	8003f6e <HAL_RCC_OscConfig+0xd0a>
 8003f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f22:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f30:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	fa93 f2a3 	rbit	r2, r3
 8003f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f48:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003f4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f56:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	fa93 f2a3 	rbit	r2, r3
 8003f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f64:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	4b9c      	ldr	r3, [pc, #624]	; (80041dc <HAL_RCC_OscConfig+0xf78>)
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f72:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003f76:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f7a:	6011      	str	r1, [r2, #0]
 8003f7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f80:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003f84:	6812      	ldr	r2, [r2, #0]
 8003f86:	fa92 f1a2 	rbit	r1, r2
 8003f8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f8e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003f92:	6011      	str	r1, [r2, #0]
  return result;
 8003f94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f98:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	fab2 f282 	clz	r2, r2
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	f042 0220 	orr.w	r2, r2, #32
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	f002 021f 	and.w	r2, r2, #31
 8003fae:	2101      	movs	r1, #1
 8003fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d182      	bne.n	8003ec0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fba:	4b88      	ldr	r3, [pc, #544]	; (80041dc <HAL_RCC_OscConfig+0xf78>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	430b      	orrs	r3, r1
 8003fdc:	497f      	ldr	r1, [pc, #508]	; (80041dc <HAL_RCC_OscConfig+0xf78>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	604b      	str	r3, [r1, #4]
 8003fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003fea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	fa93 f2a3 	rbit	r2, r3
 8003ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004002:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004006:	601a      	str	r2, [r3, #0]
  return result;
 8004008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004010:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800401c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	461a      	mov	r2, r3
 8004024:	2301      	movs	r3, #1
 8004026:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004028:	f7fe f836 	bl	8002098 <HAL_GetTick>
 800402c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004030:	e009      	b.n	8004046 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004032:	f7fe f831 	bl	8002098 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e144      	b.n	80042d0 <HAL_RCC_OscConfig+0x106c>
 8004046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800404a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800404e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004052:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004058:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	fa93 f2a3 	rbit	r2, r3
 8004062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004066:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800406a:	601a      	str	r2, [r3, #0]
  return result;
 800406c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004070:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004074:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004076:	fab3 f383 	clz	r3, r3
 800407a:	b2db      	uxtb	r3, r3
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b01      	cmp	r3, #1
 8004088:	d102      	bne.n	8004090 <HAL_RCC_OscConfig+0xe2c>
 800408a:	4b54      	ldr	r3, [pc, #336]	; (80041dc <HAL_RCC_OscConfig+0xf78>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	e027      	b.n	80040e0 <HAL_RCC_OscConfig+0xe7c>
 8004090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004094:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004098:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800409c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	fa93 f2a3 	rbit	r2, r3
 80040ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80040be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	fa93 f2a3 	rbit	r2, r3
 80040d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	4b3f      	ldr	r3, [pc, #252]	; (80041dc <HAL_RCC_OscConfig+0xf78>)
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040e4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80040e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040ec:	6011      	str	r1, [r2, #0]
 80040ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040f2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	fa92 f1a2 	rbit	r1, r2
 80040fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004100:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004104:	6011      	str	r1, [r2, #0]
  return result;
 8004106:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800410a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	fab2 f282 	clz	r2, r2
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	f042 0220 	orr.w	r2, r2, #32
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	f002 021f 	and.w	r2, r2, #31
 8004120:	2101      	movs	r1, #1
 8004122:	fa01 f202 	lsl.w	r2, r1, r2
 8004126:	4013      	ands	r3, r2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d082      	beq.n	8004032 <HAL_RCC_OscConfig+0xdce>
 800412c:	e0cf      	b.n	80042ce <HAL_RCC_OscConfig+0x106a>
 800412e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004132:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004136:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800413a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004140:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	fa93 f2a3 	rbit	r2, r3
 800414a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800414e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004152:	601a      	str	r2, [r3, #0]
  return result;
 8004154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004158:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800415c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004168:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	461a      	mov	r2, r3
 8004170:	2300      	movs	r3, #0
 8004172:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004174:	f7fd ff90 	bl	8002098 <HAL_GetTick>
 8004178:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800417c:	e009      	b.n	8004192 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800417e:	f7fd ff8b 	bl	8002098 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e09e      	b.n	80042d0 <HAL_RCC_OscConfig+0x106c>
 8004192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004196:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800419a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800419e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	fa93 f2a3 	rbit	r2, r3
 80041ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80041b6:	601a      	str	r2, [r3, #0]
  return result;
 80041b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041bc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80041c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c2:	fab3 f383 	clz	r3, r3
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d104      	bne.n	80041e0 <HAL_RCC_OscConfig+0xf7c>
 80041d6:	4b01      	ldr	r3, [pc, #4]	; (80041dc <HAL_RCC_OscConfig+0xf78>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	e029      	b.n	8004230 <HAL_RCC_OscConfig+0xfcc>
 80041dc:	40021000 	.word	0x40021000
 80041e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80041e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	fa93 f2a3 	rbit	r2, r3
 80041fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004200:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800420a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800420e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004218:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	fa93 f2a3 	rbit	r2, r3
 8004222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004226:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	4b2b      	ldr	r3, [pc, #172]	; (80042dc <HAL_RCC_OscConfig+0x1078>)
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004234:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004238:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800423c:	6011      	str	r1, [r2, #0]
 800423e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004242:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004246:	6812      	ldr	r2, [r2, #0]
 8004248:	fa92 f1a2 	rbit	r1, r2
 800424c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004250:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004254:	6011      	str	r1, [r2, #0]
  return result;
 8004256:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800425a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	fab2 f282 	clz	r2, r2
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	f042 0220 	orr.w	r2, r2, #32
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	f002 021f 	and.w	r2, r2, #31
 8004270:	2101      	movs	r1, #1
 8004272:	fa01 f202 	lsl.w	r2, r1, r2
 8004276:	4013      	ands	r3, r2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d180      	bne.n	800417e <HAL_RCC_OscConfig+0xf1a>
 800427c:	e027      	b.n	80042ce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800427e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004282:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e01e      	b.n	80042d0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004292:	4b12      	ldr	r3, [pc, #72]	; (80042dc <HAL_RCC_OscConfig+0x1078>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800429a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800429e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d10b      	bne.n	80042ca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80042b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80042b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d001      	beq.n	80042ce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40021000 	.word	0x40021000

080042e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b09e      	sub	sp, #120	; 0x78
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e162      	b.n	80045be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042f8:	4b90      	ldr	r3, [pc, #576]	; (800453c <HAL_RCC_ClockConfig+0x25c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d910      	bls.n	8004328 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004306:	4b8d      	ldr	r3, [pc, #564]	; (800453c <HAL_RCC_ClockConfig+0x25c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 0207 	bic.w	r2, r3, #7
 800430e:	498b      	ldr	r1, [pc, #556]	; (800453c <HAL_RCC_ClockConfig+0x25c>)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	4313      	orrs	r3, r2
 8004314:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004316:	4b89      	ldr	r3, [pc, #548]	; (800453c <HAL_RCC_ClockConfig+0x25c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d001      	beq.n	8004328 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e14a      	b.n	80045be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004334:	4b82      	ldr	r3, [pc, #520]	; (8004540 <HAL_RCC_ClockConfig+0x260>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	497f      	ldr	r1, [pc, #508]	; (8004540 <HAL_RCC_ClockConfig+0x260>)
 8004342:	4313      	orrs	r3, r2
 8004344:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 80dc 	beq.w	800450c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d13c      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xf6>
 800435c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004360:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004364:	fa93 f3a3 	rbit	r3, r3
 8004368:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800436a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436c:	fab3 f383 	clz	r3, r3
 8004370:	b2db      	uxtb	r3, r3
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	b2db      	uxtb	r3, r3
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	d102      	bne.n	8004386 <HAL_RCC_ClockConfig+0xa6>
 8004380:	4b6f      	ldr	r3, [pc, #444]	; (8004540 <HAL_RCC_ClockConfig+0x260>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	e00f      	b.n	80043a6 <HAL_RCC_ClockConfig+0xc6>
 8004386:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800438a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800438e:	fa93 f3a3 	rbit	r3, r3
 8004392:	667b      	str	r3, [r7, #100]	; 0x64
 8004394:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004398:	663b      	str	r3, [r7, #96]	; 0x60
 800439a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800439c:	fa93 f3a3 	rbit	r3, r3
 80043a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043a2:	4b67      	ldr	r3, [pc, #412]	; (8004540 <HAL_RCC_ClockConfig+0x260>)
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80043ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043ae:	fa92 f2a2 	rbit	r2, r2
 80043b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80043b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043b6:	fab2 f282 	clz	r2, r2
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	f042 0220 	orr.w	r2, r2, #32
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	f002 021f 	and.w	r2, r2, #31
 80043c6:	2101      	movs	r1, #1
 80043c8:	fa01 f202 	lsl.w	r2, r1, r2
 80043cc:	4013      	ands	r3, r2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d17b      	bne.n	80044ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e0f3      	b.n	80045be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d13c      	bne.n	8004458 <HAL_RCC_ClockConfig+0x178>
 80043de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e6:	fa93 f3a3 	rbit	r3, r3
 80043ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80043ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ee:	fab3 f383 	clz	r3, r3
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	095b      	lsrs	r3, r3, #5
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	f043 0301 	orr.w	r3, r3, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d102      	bne.n	8004408 <HAL_RCC_ClockConfig+0x128>
 8004402:	4b4f      	ldr	r3, [pc, #316]	; (8004540 <HAL_RCC_ClockConfig+0x260>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	e00f      	b.n	8004428 <HAL_RCC_ClockConfig+0x148>
 8004408:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800440c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004410:	fa93 f3a3 	rbit	r3, r3
 8004414:	647b      	str	r3, [r7, #68]	; 0x44
 8004416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800441a:	643b      	str	r3, [r7, #64]	; 0x40
 800441c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800441e:	fa93 f3a3 	rbit	r3, r3
 8004422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004424:	4b46      	ldr	r3, [pc, #280]	; (8004540 <HAL_RCC_ClockConfig+0x260>)
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800442c:	63ba      	str	r2, [r7, #56]	; 0x38
 800442e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004430:	fa92 f2a2 	rbit	r2, r2
 8004434:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004438:	fab2 f282 	clz	r2, r2
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	f042 0220 	orr.w	r2, r2, #32
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	f002 021f 	and.w	r2, r2, #31
 8004448:	2101      	movs	r1, #1
 800444a:	fa01 f202 	lsl.w	r2, r1, r2
 800444e:	4013      	ands	r3, r2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d13a      	bne.n	80044ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0b2      	b.n	80045be <HAL_RCC_ClockConfig+0x2de>
 8004458:	2302      	movs	r3, #2
 800445a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	fa93 f3a3 	rbit	r3, r3
 8004462:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004466:	fab3 f383 	clz	r3, r3
 800446a:	b2db      	uxtb	r3, r3
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	b2db      	uxtb	r3, r3
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b01      	cmp	r3, #1
 8004478:	d102      	bne.n	8004480 <HAL_RCC_ClockConfig+0x1a0>
 800447a:	4b31      	ldr	r3, [pc, #196]	; (8004540 <HAL_RCC_ClockConfig+0x260>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	e00d      	b.n	800449c <HAL_RCC_ClockConfig+0x1bc>
 8004480:	2302      	movs	r3, #2
 8004482:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004486:	fa93 f3a3 	rbit	r3, r3
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
 800448c:	2302      	movs	r3, #2
 800448e:	623b      	str	r3, [r7, #32]
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	fa93 f3a3 	rbit	r3, r3
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	4b29      	ldr	r3, [pc, #164]	; (8004540 <HAL_RCC_ClockConfig+0x260>)
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	2202      	movs	r2, #2
 800449e:	61ba      	str	r2, [r7, #24]
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	fa92 f2a2 	rbit	r2, r2
 80044a6:	617a      	str	r2, [r7, #20]
  return result;
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	fab2 f282 	clz	r2, r2
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	f042 0220 	orr.w	r2, r2, #32
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	f002 021f 	and.w	r2, r2, #31
 80044ba:	2101      	movs	r1, #1
 80044bc:	fa01 f202 	lsl.w	r2, r1, r2
 80044c0:	4013      	ands	r3, r2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e079      	b.n	80045be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ca:	4b1d      	ldr	r3, [pc, #116]	; (8004540 <HAL_RCC_ClockConfig+0x260>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f023 0203 	bic.w	r2, r3, #3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	491a      	ldr	r1, [pc, #104]	; (8004540 <HAL_RCC_ClockConfig+0x260>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044dc:	f7fd fddc 	bl	8002098 <HAL_GetTick>
 80044e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e2:	e00a      	b.n	80044fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e4:	f7fd fdd8 	bl	8002098 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e061      	b.n	80045be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fa:	4b11      	ldr	r3, [pc, #68]	; (8004540 <HAL_RCC_ClockConfig+0x260>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f003 020c 	and.w	r2, r3, #12
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	429a      	cmp	r2, r3
 800450a:	d1eb      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800450c:	4b0b      	ldr	r3, [pc, #44]	; (800453c <HAL_RCC_ClockConfig+0x25c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d214      	bcs.n	8004544 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451a:	4b08      	ldr	r3, [pc, #32]	; (800453c <HAL_RCC_ClockConfig+0x25c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f023 0207 	bic.w	r2, r3, #7
 8004522:	4906      	ldr	r1, [pc, #24]	; (800453c <HAL_RCC_ClockConfig+0x25c>)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	4313      	orrs	r3, r2
 8004528:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452a:	4b04      	ldr	r3, [pc, #16]	; (800453c <HAL_RCC_ClockConfig+0x25c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d005      	beq.n	8004544 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e040      	b.n	80045be <HAL_RCC_ClockConfig+0x2de>
 800453c:	40022000 	.word	0x40022000
 8004540:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d008      	beq.n	8004562 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004550:	4b1d      	ldr	r3, [pc, #116]	; (80045c8 <HAL_RCC_ClockConfig+0x2e8>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	491a      	ldr	r1, [pc, #104]	; (80045c8 <HAL_RCC_ClockConfig+0x2e8>)
 800455e:	4313      	orrs	r3, r2
 8004560:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800456e:	4b16      	ldr	r3, [pc, #88]	; (80045c8 <HAL_RCC_ClockConfig+0x2e8>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4912      	ldr	r1, [pc, #72]	; (80045c8 <HAL_RCC_ClockConfig+0x2e8>)
 800457e:	4313      	orrs	r3, r2
 8004580:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004582:	f000 f829 	bl	80045d8 <HAL_RCC_GetSysClockFreq>
 8004586:	4601      	mov	r1, r0
 8004588:	4b0f      	ldr	r3, [pc, #60]	; (80045c8 <HAL_RCC_ClockConfig+0x2e8>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004590:	22f0      	movs	r2, #240	; 0xf0
 8004592:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	fa92 f2a2 	rbit	r2, r2
 800459a:	60fa      	str	r2, [r7, #12]
  return result;
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	fab2 f282 	clz	r2, r2
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	40d3      	lsrs	r3, r2
 80045a6:	4a09      	ldr	r2, [pc, #36]	; (80045cc <HAL_RCC_ClockConfig+0x2ec>)
 80045a8:	5cd3      	ldrb	r3, [r2, r3]
 80045aa:	fa21 f303 	lsr.w	r3, r1, r3
 80045ae:	4a08      	ldr	r2, [pc, #32]	; (80045d0 <HAL_RCC_ClockConfig+0x2f0>)
 80045b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80045b2:	4b08      	ldr	r3, [pc, #32]	; (80045d4 <HAL_RCC_ClockConfig+0x2f4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fd fd2a 	bl	8002010 <HAL_InitTick>
  
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3778      	adds	r7, #120	; 0x78
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40021000 	.word	0x40021000
 80045cc:	08007220 	.word	0x08007220
 80045d0:	20000000 	.word	0x20000000
 80045d4:	20000004 	.word	0x20000004

080045d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	b08b      	sub	sp, #44	; 0x2c
 80045dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
 80045e2:	2300      	movs	r3, #0
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	2300      	movs	r3, #0
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80045f2:	4b29      	ldr	r3, [pc, #164]	; (8004698 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d002      	beq.n	8004608 <HAL_RCC_GetSysClockFreq+0x30>
 8004602:	2b08      	cmp	r3, #8
 8004604:	d003      	beq.n	800460e <HAL_RCC_GetSysClockFreq+0x36>
 8004606:	e03c      	b.n	8004682 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004608:	4b24      	ldr	r3, [pc, #144]	; (800469c <HAL_RCC_GetSysClockFreq+0xc4>)
 800460a:	623b      	str	r3, [r7, #32]
      break;
 800460c:	e03c      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004614:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004618:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	fa92 f2a2 	rbit	r2, r2
 8004620:	607a      	str	r2, [r7, #4]
  return result;
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	fab2 f282 	clz	r2, r2
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	40d3      	lsrs	r3, r2
 800462c:	4a1c      	ldr	r2, [pc, #112]	; (80046a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800462e:	5cd3      	ldrb	r3, [r2, r3]
 8004630:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004632:	4b19      	ldr	r3, [pc, #100]	; (8004698 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	220f      	movs	r2, #15
 800463c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	fa92 f2a2 	rbit	r2, r2
 8004644:	60fa      	str	r2, [r7, #12]
  return result;
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	fab2 f282 	clz	r2, r2
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	40d3      	lsrs	r3, r2
 8004650:	4a14      	ldr	r2, [pc, #80]	; (80046a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004652:	5cd3      	ldrb	r3, [r2, r3]
 8004654:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d008      	beq.n	8004672 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004660:	4a0e      	ldr	r2, [pc, #56]	; (800469c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	fbb2 f2f3 	udiv	r2, r2, r3
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
 8004670:	e004      	b.n	800467c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	4a0c      	ldr	r2, [pc, #48]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004676:	fb02 f303 	mul.w	r3, r2, r3
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	623b      	str	r3, [r7, #32]
      break;
 8004680:	e002      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004682:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8004684:	623b      	str	r3, [r7, #32]
      break;
 8004686:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004688:	6a3b      	ldr	r3, [r7, #32]
}
 800468a:	4618      	mov	r0, r3
 800468c:	372c      	adds	r7, #44	; 0x2c
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40021000 	.word	0x40021000
 800469c:	00f42400 	.word	0x00f42400
 80046a0:	08007238 	.word	0x08007238
 80046a4:	08007248 	.word	0x08007248
 80046a8:	003d0900 	.word	0x003d0900
 80046ac:	007a1200 	.word	0x007a1200

080046b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b4:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046b6:	681b      	ldr	r3, [r3, #0]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	20000000 	.word	0x20000000

080046c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80046ce:	f7ff ffef 	bl	80046b0 <HAL_RCC_GetHCLKFreq>
 80046d2:	4601      	mov	r1, r0
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80046e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	fa92 f2a2 	rbit	r2, r2
 80046e8:	603a      	str	r2, [r7, #0]
  return result;
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	fab2 f282 	clz	r2, r2
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	40d3      	lsrs	r3, r2
 80046f4:	4a04      	ldr	r2, [pc, #16]	; (8004708 <HAL_RCC_GetPCLK1Freq+0x40>)
 80046f6:	5cd3      	ldrb	r3, [r2, r3]
 80046f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40021000 	.word	0x40021000
 8004708:	08007230 	.word	0x08007230

0800470c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004712:	f7ff ffcd 	bl	80046b0 <HAL_RCC_GetHCLKFreq>
 8004716:	4601      	mov	r1, r0
 8004718:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004720:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004724:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	fa92 f2a2 	rbit	r2, r2
 800472c:	603a      	str	r2, [r7, #0]
  return result;
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	fab2 f282 	clz	r2, r2
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	40d3      	lsrs	r3, r2
 8004738:	4a04      	ldr	r2, [pc, #16]	; (800474c <HAL_RCC_GetPCLK2Freq+0x40>)
 800473a:	5cd3      	ldrb	r3, [r2, r3]
 800473c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004740:	4618      	mov	r0, r3
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40021000 	.word	0x40021000
 800474c:	08007230 	.word	0x08007230

08004750 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b092      	sub	sp, #72	; 0x48
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004760:	2300      	movs	r3, #0
 8004762:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 80cd 	beq.w	800490e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004774:	4b86      	ldr	r3, [pc, #536]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10e      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004780:	4b83      	ldr	r3, [pc, #524]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	4a82      	ldr	r2, [pc, #520]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800478a:	61d3      	str	r3, [r2, #28]
 800478c:	4b80      	ldr	r3, [pc, #512]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004798:	2301      	movs	r3, #1
 800479a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479e:	4b7d      	ldr	r3, [pc, #500]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d118      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047aa:	4b7a      	ldr	r3, [pc, #488]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a79      	ldr	r2, [pc, #484]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80047b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047b6:	f7fd fc6f 	bl	8002098 <HAL_GetTick>
 80047ba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047bc:	e008      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047be:	f7fd fc6b 	bl	8002098 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b64      	cmp	r3, #100	; 0x64
 80047ca:	d901      	bls.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e0db      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d0:	4b70      	ldr	r3, [pc, #448]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f0      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047dc:	4b6c      	ldr	r3, [pc, #432]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d07d      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d076      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047fa:	4b65      	ldr	r3, [pc, #404]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004804:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004808:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	fa93 f3a3 	rbit	r3, r3
 8004810:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004814:	fab3 f383 	clz	r3, r3
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	4b5e      	ldr	r3, [pc, #376]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800481e:	4413      	add	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	461a      	mov	r2, r3
 8004824:	2301      	movs	r3, #1
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800482c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004830:	fa93 f3a3 	rbit	r3, r3
 8004834:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004838:	fab3 f383 	clz	r3, r3
 800483c:	b2db      	uxtb	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	4b55      	ldr	r3, [pc, #340]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	461a      	mov	r2, r3
 8004848:	2300      	movs	r3, #0
 800484a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800484c:	4a50      	ldr	r2, [pc, #320]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800484e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004850:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d045      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485c:	f7fd fc1c 	bl	8002098 <HAL_GetTick>
 8004860:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004862:	e00a      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004864:	f7fd fc18 	bl	8002098 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e086      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800487a:	2302      	movs	r3, #2
 800487c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	fa93 f3a3 	rbit	r3, r3
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
 8004886:	2302      	movs	r3, #2
 8004888:	623b      	str	r3, [r7, #32]
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	fa93 f3a3 	rbit	r3, r3
 8004890:	61fb      	str	r3, [r7, #28]
  return result;
 8004892:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004894:	fab3 f383 	clz	r3, r3
 8004898:	b2db      	uxtb	r3, r3
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	b2db      	uxtb	r3, r3
 800489e:	f043 0302 	orr.w	r3, r3, #2
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d102      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80048a8:	4b39      	ldr	r3, [pc, #228]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	e007      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80048ae:	2302      	movs	r3, #2
 80048b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	fa93 f3a3 	rbit	r3, r3
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	4b35      	ldr	r3, [pc, #212]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	2202      	movs	r2, #2
 80048c0:	613a      	str	r2, [r7, #16]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	fa92 f2a2 	rbit	r2, r2
 80048c8:	60fa      	str	r2, [r7, #12]
  return result;
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	fab2 f282 	clz	r2, r2
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	f002 021f 	and.w	r2, r2, #31
 80048dc:	2101      	movs	r1, #1
 80048de:	fa01 f202 	lsl.w	r2, r1, r2
 80048e2:	4013      	ands	r3, r2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0bd      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80048e8:	4b29      	ldr	r3, [pc, #164]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	4926      	ldr	r1, [pc, #152]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d105      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004902:	4b23      	ldr	r3, [pc, #140]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	4a22      	ldr	r2, [pc, #136]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800490c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d008      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800491a:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	f023 0203 	bic.w	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	491a      	ldr	r1, [pc, #104]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004928:	4313      	orrs	r3, r2
 800492a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0320 	and.w	r3, r3, #32
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004938:	4b15      	ldr	r3, [pc, #84]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	f023 0210 	bic.w	r2, r3, #16
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	4912      	ldr	r1, [pc, #72]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004946:	4313      	orrs	r3, r2
 8004948:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004956:	4b0e      	ldr	r3, [pc, #56]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	490b      	ldr	r1, [pc, #44]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004964:	4313      	orrs	r3, r2
 8004966:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004974:	4b06      	ldr	r3, [pc, #24]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004978:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	4903      	ldr	r1, [pc, #12]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004982:	4313      	orrs	r3, r2
 8004984:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3748      	adds	r7, #72	; 0x48
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40021000 	.word	0x40021000
 8004994:	40007000 	.word	0x40007000
 8004998:	10908100 	.word	0x10908100

0800499c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e049      	b.n	8004a42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fd f8c4 	bl	8001b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3304      	adds	r3, #4
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f001 f870 	bl	8005ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e049      	b.n	8004af0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d106      	bne.n	8004a76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7fd f80d 	bl	8001a90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	3304      	adds	r3, #4
 8004a86:	4619      	mov	r1, r3
 8004a88:	4610      	mov	r0, r2
 8004a8a:	f001 f819 	bl	8005ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d109      	bne.n	8004b1c <HAL_TIM_PWM_Start+0x24>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	bf14      	ite	ne
 8004b14:	2301      	movne	r3, #1
 8004b16:	2300      	moveq	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	e03c      	b.n	8004b96 <HAL_TIM_PWM_Start+0x9e>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d109      	bne.n	8004b36 <HAL_TIM_PWM_Start+0x3e>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	bf14      	ite	ne
 8004b2e:	2301      	movne	r3, #1
 8004b30:	2300      	moveq	r3, #0
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	e02f      	b.n	8004b96 <HAL_TIM_PWM_Start+0x9e>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d109      	bne.n	8004b50 <HAL_TIM_PWM_Start+0x58>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	bf14      	ite	ne
 8004b48:	2301      	movne	r3, #1
 8004b4a:	2300      	moveq	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	e022      	b.n	8004b96 <HAL_TIM_PWM_Start+0x9e>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2b0c      	cmp	r3, #12
 8004b54:	d109      	bne.n	8004b6a <HAL_TIM_PWM_Start+0x72>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	bf14      	ite	ne
 8004b62:	2301      	movne	r3, #1
 8004b64:	2300      	moveq	r3, #0
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	e015      	b.n	8004b96 <HAL_TIM_PWM_Start+0x9e>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b10      	cmp	r3, #16
 8004b6e:	d109      	bne.n	8004b84 <HAL_TIM_PWM_Start+0x8c>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	bf14      	ite	ne
 8004b7c:	2301      	movne	r3, #1
 8004b7e:	2300      	moveq	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	e008      	b.n	8004b96 <HAL_TIM_PWM_Start+0x9e>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	bf14      	ite	ne
 8004b90:	2301      	movne	r3, #1
 8004b92:	2300      	moveq	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e088      	b.n	8004cb0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d104      	bne.n	8004bae <HAL_TIM_PWM_Start+0xb6>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bac:	e023      	b.n	8004bf6 <HAL_TIM_PWM_Start+0xfe>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d104      	bne.n	8004bbe <HAL_TIM_PWM_Start+0xc6>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bbc:	e01b      	b.n	8004bf6 <HAL_TIM_PWM_Start+0xfe>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d104      	bne.n	8004bce <HAL_TIM_PWM_Start+0xd6>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bcc:	e013      	b.n	8004bf6 <HAL_TIM_PWM_Start+0xfe>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b0c      	cmp	r3, #12
 8004bd2:	d104      	bne.n	8004bde <HAL_TIM_PWM_Start+0xe6>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bdc:	e00b      	b.n	8004bf6 <HAL_TIM_PWM_Start+0xfe>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b10      	cmp	r3, #16
 8004be2:	d104      	bne.n	8004bee <HAL_TIM_PWM_Start+0xf6>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bec:	e003      	b.n	8004bf6 <HAL_TIM_PWM_Start+0xfe>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	6839      	ldr	r1, [r7, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f001 fcbc 	bl	800657c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a2b      	ldr	r2, [pc, #172]	; (8004cb8 <HAL_TIM_PWM_Start+0x1c0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00e      	beq.n	8004c2c <HAL_TIM_PWM_Start+0x134>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a2a      	ldr	r2, [pc, #168]	; (8004cbc <HAL_TIM_PWM_Start+0x1c4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d009      	beq.n	8004c2c <HAL_TIM_PWM_Start+0x134>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a28      	ldr	r2, [pc, #160]	; (8004cc0 <HAL_TIM_PWM_Start+0x1c8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d004      	beq.n	8004c2c <HAL_TIM_PWM_Start+0x134>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a27      	ldr	r2, [pc, #156]	; (8004cc4 <HAL_TIM_PWM_Start+0x1cc>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d101      	bne.n	8004c30 <HAL_TIM_PWM_Start+0x138>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e000      	b.n	8004c32 <HAL_TIM_PWM_Start+0x13a>
 8004c30:	2300      	movs	r3, #0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d007      	beq.n	8004c46 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1b      	ldr	r2, [pc, #108]	; (8004cb8 <HAL_TIM_PWM_Start+0x1c0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00e      	beq.n	8004c6e <HAL_TIM_PWM_Start+0x176>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c58:	d009      	beq.n	8004c6e <HAL_TIM_PWM_Start+0x176>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1a      	ldr	r2, [pc, #104]	; (8004cc8 <HAL_TIM_PWM_Start+0x1d0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d004      	beq.n	8004c6e <HAL_TIM_PWM_Start+0x176>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a14      	ldr	r2, [pc, #80]	; (8004cbc <HAL_TIM_PWM_Start+0x1c4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d115      	bne.n	8004c9a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	4b15      	ldr	r3, [pc, #84]	; (8004ccc <HAL_TIM_PWM_Start+0x1d4>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b06      	cmp	r3, #6
 8004c7e:	d015      	beq.n	8004cac <HAL_TIM_PWM_Start+0x1b4>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c86:	d011      	beq.n	8004cac <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c98:	e008      	b.n	8004cac <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0201 	orr.w	r2, r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	e000      	b.n	8004cae <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40012c00 	.word	0x40012c00
 8004cbc:	40014000 	.word	0x40014000
 8004cc0:	40014400 	.word	0x40014400
 8004cc4:	40014800 	.word	0x40014800
 8004cc8:	40000400 	.word	0x40000400
 8004ccc:	00010007 	.word	0x00010007

08004cd0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d109      	bne.n	8004cfc <HAL_TIM_PWM_Start_DMA+0x2c>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	bf0c      	ite	eq
 8004cf4:	2301      	moveq	r3, #1
 8004cf6:	2300      	movne	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	e03c      	b.n	8004d76 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d109      	bne.n	8004d16 <HAL_TIM_PWM_Start_DMA+0x46>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	bf0c      	ite	eq
 8004d0e:	2301      	moveq	r3, #1
 8004d10:	2300      	movne	r3, #0
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	e02f      	b.n	8004d76 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d109      	bne.n	8004d30 <HAL_TIM_PWM_Start_DMA+0x60>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	bf0c      	ite	eq
 8004d28:	2301      	moveq	r3, #1
 8004d2a:	2300      	movne	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	e022      	b.n	8004d76 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b0c      	cmp	r3, #12
 8004d34:	d109      	bne.n	8004d4a <HAL_TIM_PWM_Start_DMA+0x7a>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	bf0c      	ite	eq
 8004d42:	2301      	moveq	r3, #1
 8004d44:	2300      	movne	r3, #0
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	e015      	b.n	8004d76 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b10      	cmp	r3, #16
 8004d4e:	d109      	bne.n	8004d64 <HAL_TIM_PWM_Start_DMA+0x94>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	bf0c      	ite	eq
 8004d5c:	2301      	moveq	r3, #1
 8004d5e:	2300      	movne	r3, #0
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	e008      	b.n	8004d76 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	bf0c      	ite	eq
 8004d70:	2301      	moveq	r3, #1
 8004d72:	2300      	movne	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e197      	b.n	80050ae <HAL_TIM_PWM_Start_DMA+0x3de>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d109      	bne.n	8004d98 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	bf0c      	ite	eq
 8004d90:	2301      	moveq	r3, #1
 8004d92:	2300      	movne	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	e03c      	b.n	8004e12 <HAL_TIM_PWM_Start_DMA+0x142>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d109      	bne.n	8004db2 <HAL_TIM_PWM_Start_DMA+0xe2>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	bf0c      	ite	eq
 8004daa:	2301      	moveq	r3, #1
 8004dac:	2300      	movne	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	e02f      	b.n	8004e12 <HAL_TIM_PWM_Start_DMA+0x142>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d109      	bne.n	8004dcc <HAL_TIM_PWM_Start_DMA+0xfc>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	bf0c      	ite	eq
 8004dc4:	2301      	moveq	r3, #1
 8004dc6:	2300      	movne	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	e022      	b.n	8004e12 <HAL_TIM_PWM_Start_DMA+0x142>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b0c      	cmp	r3, #12
 8004dd0:	d109      	bne.n	8004de6 <HAL_TIM_PWM_Start_DMA+0x116>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	bf0c      	ite	eq
 8004dde:	2301      	moveq	r3, #1
 8004de0:	2300      	movne	r3, #0
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	e015      	b.n	8004e12 <HAL_TIM_PWM_Start_DMA+0x142>
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b10      	cmp	r3, #16
 8004dea:	d109      	bne.n	8004e00 <HAL_TIM_PWM_Start_DMA+0x130>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	bf0c      	ite	eq
 8004df8:	2301      	moveq	r3, #1
 8004dfa:	2300      	movne	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	e008      	b.n	8004e12 <HAL_TIM_PWM_Start_DMA+0x142>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	bf0c      	ite	eq
 8004e0c:	2301      	moveq	r3, #1
 8004e0e:	2300      	movne	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d034      	beq.n	8004e80 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d104      	bne.n	8004e26 <HAL_TIM_PWM_Start_DMA+0x156>
 8004e1c:	887b      	ldrh	r3, [r7, #2]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e143      	b.n	80050ae <HAL_TIM_PWM_Start_DMA+0x3de>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d104      	bne.n	8004e36 <HAL_TIM_PWM_Start_DMA+0x166>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e34:	e026      	b.n	8004e84 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d104      	bne.n	8004e46 <HAL_TIM_PWM_Start_DMA+0x176>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e44:	e01e      	b.n	8004e84 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d104      	bne.n	8004e56 <HAL_TIM_PWM_Start_DMA+0x186>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e54:	e016      	b.n	8004e84 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b0c      	cmp	r3, #12
 8004e5a:	d104      	bne.n	8004e66 <HAL_TIM_PWM_Start_DMA+0x196>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e64:	e00e      	b.n	8004e84 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b10      	cmp	r3, #16
 8004e6a:	d104      	bne.n	8004e76 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e74:	e006      	b.n	8004e84 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2202      	movs	r2, #2
 8004e7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e7e:	e001      	b.n	8004e84 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e114      	b.n	80050ae <HAL_TIM_PWM_Start_DMA+0x3de>
  }

  switch (Channel)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b0c      	cmp	r3, #12
 8004e88:	f200 80ae 	bhi.w	8004fe8 <HAL_TIM_PWM_Start_DMA+0x318>
 8004e8c:	a201      	add	r2, pc, #4	; (adr r2, 8004e94 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8004e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e92:	bf00      	nop
 8004e94:	08004ec9 	.word	0x08004ec9
 8004e98:	08004fe9 	.word	0x08004fe9
 8004e9c:	08004fe9 	.word	0x08004fe9
 8004ea0:	08004fe9 	.word	0x08004fe9
 8004ea4:	08004f11 	.word	0x08004f11
 8004ea8:	08004fe9 	.word	0x08004fe9
 8004eac:	08004fe9 	.word	0x08004fe9
 8004eb0:	08004fe9 	.word	0x08004fe9
 8004eb4:	08004f59 	.word	0x08004f59
 8004eb8:	08004fe9 	.word	0x08004fe9
 8004ebc:	08004fe9 	.word	0x08004fe9
 8004ec0:	08004fe9 	.word	0x08004fe9
 8004ec4:	08004fa1 	.word	0x08004fa1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	4a7a      	ldr	r2, [pc, #488]	; (80050b8 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004ece:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	4a79      	ldr	r2, [pc, #484]	; (80050bc <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004ed6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	4a78      	ldr	r2, [pc, #480]	; (80050c0 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8004ede:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3334      	adds	r3, #52	; 0x34
 8004eec:	461a      	mov	r2, r3
 8004eee:	887b      	ldrh	r3, [r7, #2]
 8004ef0:	f7fd fe86 	bl	8002c00 <HAL_DMA_Start_IT>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e0d7      	b.n	80050ae <HAL_TIM_PWM_Start_DMA+0x3de>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f0c:	60da      	str	r2, [r3, #12]
      break;
 8004f0e:	e06e      	b.n	8004fee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f14:	4a68      	ldr	r2, [pc, #416]	; (80050b8 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004f16:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	4a67      	ldr	r2, [pc, #412]	; (80050bc <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004f1e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f24:	4a66      	ldr	r2, [pc, #408]	; (80050c0 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3338      	adds	r3, #56	; 0x38
 8004f34:	461a      	mov	r2, r3
 8004f36:	887b      	ldrh	r3, [r7, #2]
 8004f38:	f7fd fe62 	bl	8002c00 <HAL_DMA_Start_IT>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e0b3      	b.n	80050ae <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f54:	60da      	str	r2, [r3, #12]
      break;
 8004f56:	e04a      	b.n	8004fee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	4a56      	ldr	r2, [pc, #344]	; (80050b8 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004f5e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	4a55      	ldr	r2, [pc, #340]	; (80050bc <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004f66:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	4a54      	ldr	r2, [pc, #336]	; (80050c0 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8004f6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	333c      	adds	r3, #60	; 0x3c
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	887b      	ldrh	r3, [r7, #2]
 8004f80:	f7fd fe3e 	bl	8002c00 <HAL_DMA_Start_IT>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e08f      	b.n	80050ae <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f9c:	60da      	str	r2, [r3, #12]
      break;
 8004f9e:	e026      	b.n	8004fee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	4a44      	ldr	r2, [pc, #272]	; (80050b8 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004fa6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fac:	4a43      	ldr	r2, [pc, #268]	; (80050bc <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004fae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb4:	4a42      	ldr	r2, [pc, #264]	; (80050c0 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8004fb6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3340      	adds	r3, #64	; 0x40
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	887b      	ldrh	r3, [r7, #2]
 8004fc8:	f7fd fe1a 	bl	8002c00 <HAL_DMA_Start_IT>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e06b      	b.n	80050ae <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fe4:	60da      	str	r2, [r3, #12]
      break;
 8004fe6:	e002      	b.n	8004fee <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	75fb      	strb	r3, [r7, #23]
      break;
 8004fec:	bf00      	nop
  }

  if (status == HAL_OK)
 8004fee:	7dfb      	ldrb	r3, [r7, #23]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d15b      	bne.n	80050ac <HAL_TIM_PWM_Start_DMA+0x3dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f001 fabd 	bl	800657c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a2f      	ldr	r2, [pc, #188]	; (80050c4 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00e      	beq.n	800502a <HAL_TIM_PWM_Start_DMA+0x35a>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a2d      	ldr	r2, [pc, #180]	; (80050c8 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d009      	beq.n	800502a <HAL_TIM_PWM_Start_DMA+0x35a>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a2c      	ldr	r2, [pc, #176]	; (80050cc <HAL_TIM_PWM_Start_DMA+0x3fc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d004      	beq.n	800502a <HAL_TIM_PWM_Start_DMA+0x35a>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a2a      	ldr	r2, [pc, #168]	; (80050d0 <HAL_TIM_PWM_Start_DMA+0x400>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d101      	bne.n	800502e <HAL_TIM_PWM_Start_DMA+0x35e>
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <HAL_TIM_PWM_Start_DMA+0x360>
 800502e:	2300      	movs	r3, #0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005042:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a1e      	ldr	r2, [pc, #120]	; (80050c4 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00e      	beq.n	800506c <HAL_TIM_PWM_Start_DMA+0x39c>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005056:	d009      	beq.n	800506c <HAL_TIM_PWM_Start_DMA+0x39c>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1d      	ldr	r2, [pc, #116]	; (80050d4 <HAL_TIM_PWM_Start_DMA+0x404>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d004      	beq.n	800506c <HAL_TIM_PWM_Start_DMA+0x39c>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a18      	ldr	r2, [pc, #96]	; (80050c8 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d115      	bne.n	8005098 <HAL_TIM_PWM_Start_DMA+0x3c8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	4b19      	ldr	r3, [pc, #100]	; (80050d8 <HAL_TIM_PWM_Start_DMA+0x408>)
 8005074:	4013      	ands	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	2b06      	cmp	r3, #6
 800507c:	d015      	beq.n	80050aa <HAL_TIM_PWM_Start_DMA+0x3da>
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005084:	d011      	beq.n	80050aa <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        __HAL_TIM_ENABLE(htim);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 0201 	orr.w	r2, r2, #1
 8005094:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005096:	e008      	b.n	80050aa <HAL_TIM_PWM_Start_DMA+0x3da>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	e000      	b.n	80050ac <HAL_TIM_PWM_Start_DMA+0x3dc>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050aa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80050ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	080059b1 	.word	0x080059b1
 80050bc:	08005a59 	.word	0x08005a59
 80050c0:	0800591f 	.word	0x0800591f
 80050c4:	40012c00 	.word	0x40012c00
 80050c8:	40014000 	.word	0x40014000
 80050cc:	40014400 	.word	0x40014400
 80050d0:	40014800 	.word	0x40014800
 80050d4:	40000400 	.word	0x40000400
 80050d8:	00010007 	.word	0x00010007

080050dc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b0c      	cmp	r3, #12
 80050ee:	d855      	bhi.n	800519c <HAL_TIM_PWM_Stop_DMA+0xc0>
 80050f0:	a201      	add	r2, pc, #4	; (adr r2, 80050f8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80050f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f6:	bf00      	nop
 80050f8:	0800512d 	.word	0x0800512d
 80050fc:	0800519d 	.word	0x0800519d
 8005100:	0800519d 	.word	0x0800519d
 8005104:	0800519d 	.word	0x0800519d
 8005108:	08005149 	.word	0x08005149
 800510c:	0800519d 	.word	0x0800519d
 8005110:	0800519d 	.word	0x0800519d
 8005114:	0800519d 	.word	0x0800519d
 8005118:	08005165 	.word	0x08005165
 800511c:	0800519d 	.word	0x0800519d
 8005120:	0800519d 	.word	0x0800519d
 8005124:	0800519d 	.word	0x0800519d
 8005128:	08005181 	.word	0x08005181
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800513a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	4618      	mov	r0, r3
 8005142:	f7fd fdbc 	bl	8002cbe <HAL_DMA_Abort_IT>
      break;
 8005146:	e02c      	b.n	80051a2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005156:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515c:	4618      	mov	r0, r3
 800515e:	f7fd fdae 	bl	8002cbe <HAL_DMA_Abort_IT>
      break;
 8005162:	e01e      	b.n	80051a2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005172:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005178:	4618      	mov	r0, r3
 800517a:	f7fd fda0 	bl	8002cbe <HAL_DMA_Abort_IT>
      break;
 800517e:	e010      	b.n	80051a2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800518e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	4618      	mov	r0, r3
 8005196:	f7fd fd92 	bl	8002cbe <HAL_DMA_Abort_IT>
      break;
 800519a:	e002      	b.n	80051a2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	73fb      	strb	r3, [r7, #15]
      break;
 80051a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d17b      	bne.n	80052a0 <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2200      	movs	r2, #0
 80051ae:	6839      	ldr	r1, [r7, #0]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f001 f9e3 	bl	800657c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a3c      	ldr	r2, [pc, #240]	; (80052ac <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00e      	beq.n	80051de <HAL_TIM_PWM_Stop_DMA+0x102>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a3a      	ldr	r2, [pc, #232]	; (80052b0 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d009      	beq.n	80051de <HAL_TIM_PWM_Stop_DMA+0x102>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a39      	ldr	r2, [pc, #228]	; (80052b4 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d004      	beq.n	80051de <HAL_TIM_PWM_Stop_DMA+0x102>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a37      	ldr	r2, [pc, #220]	; (80052b8 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d101      	bne.n	80051e2 <HAL_TIM_PWM_Stop_DMA+0x106>
 80051de:	2301      	movs	r3, #1
 80051e0:	e000      	b.n	80051e4 <HAL_TIM_PWM_Stop_DMA+0x108>
 80051e2:	2300      	movs	r3, #0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d017      	beq.n	8005218 <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6a1a      	ldr	r2, [r3, #32]
 80051ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80051f2:	4013      	ands	r3, r2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10f      	bne.n	8005218 <HAL_TIM_PWM_Stop_DMA+0x13c>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6a1a      	ldr	r2, [r3, #32]
 80051fe:	f240 4344 	movw	r3, #1092	; 0x444
 8005202:	4013      	ands	r3, r2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d107      	bne.n	8005218 <HAL_TIM_PWM_Stop_DMA+0x13c>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005216:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6a1a      	ldr	r2, [r3, #32]
 800521e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005222:	4013      	ands	r3, r2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10f      	bne.n	8005248 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6a1a      	ldr	r2, [r3, #32]
 800522e:	f240 4344 	movw	r3, #1092	; 0x444
 8005232:	4013      	ands	r3, r2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d107      	bne.n	8005248 <HAL_TIM_PWM_Stop_DMA+0x16c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0201 	bic.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d104      	bne.n	8005258 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005256:	e023      	b.n	80052a0 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2b04      	cmp	r3, #4
 800525c:	d104      	bne.n	8005268 <HAL_TIM_PWM_Stop_DMA+0x18c>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005266:	e01b      	b.n	80052a0 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2b08      	cmp	r3, #8
 800526c:	d104      	bne.n	8005278 <HAL_TIM_PWM_Stop_DMA+0x19c>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005276:	e013      	b.n	80052a0 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2b0c      	cmp	r3, #12
 800527c:	d104      	bne.n	8005288 <HAL_TIM_PWM_Stop_DMA+0x1ac>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005286:	e00b      	b.n	80052a0 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2b10      	cmp	r3, #16
 800528c:	d104      	bne.n	8005298 <HAL_TIM_PWM_Stop_DMA+0x1bc>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005296:	e003      	b.n	80052a0 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40012c00 	.word	0x40012c00
 80052b0:	40014000 	.word	0x40014000
 80052b4:	40014400 	.word	0x40014400
 80052b8:	40014800 	.word	0x40014800

080052bc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e049      	b.n	8005362 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7fc fbf4 	bl	8001ad0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3304      	adds	r3, #4
 80052f8:	4619      	mov	r1, r3
 80052fa:	4610      	mov	r0, r2
 80052fc:	f000 fbe0 	bl	8005ac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b086      	sub	sp, #24
 800536e:	af00      	add	r7, sp, #0
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005384:	2302      	movs	r3, #2
 8005386:	e088      	b.n	800549a <HAL_TIM_IC_ConfigChannel+0x130>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d11b      	bne.n	80053ce <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	6819      	ldr	r1, [r3, #0]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f000 ff3d 	bl	8006224 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699a      	ldr	r2, [r3, #24]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 020c 	bic.w	r2, r2, #12
 80053b8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6999      	ldr	r1, [r3, #24]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	619a      	str	r2, [r3, #24]
 80053cc:	e060      	b.n	8005490 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d11c      	bne.n	800540e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6818      	ldr	r0, [r3, #0]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	6819      	ldr	r1, [r3, #0]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f000 ffa9 	bl	800633a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80053f6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6999      	ldr	r1, [r3, #24]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	021a      	lsls	r2, r3, #8
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	619a      	str	r2, [r3, #24]
 800540c:	e040      	b.n	8005490 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b08      	cmp	r3, #8
 8005412:	d11b      	bne.n	800544c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	6819      	ldr	r1, [r3, #0]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f000 fff6 	bl	8006414 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	69da      	ldr	r2, [r3, #28]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 020c 	bic.w	r2, r2, #12
 8005436:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69d9      	ldr	r1, [r3, #28]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	61da      	str	r2, [r3, #28]
 800544a:	e021      	b.n	8005490 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b0c      	cmp	r3, #12
 8005450:	d11c      	bne.n	800548c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	6819      	ldr	r1, [r3, #0]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f001 f813 	bl	800648c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69da      	ldr	r2, [r3, #28]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005474:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69d9      	ldr	r1, [r3, #28]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	021a      	lsls	r2, r3, #8
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	61da      	str	r2, [r3, #28]
 800548a:	e001      	b.n	8005490 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005498:	7dfb      	ldrb	r3, [r7, #23]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054be:	2302      	movs	r3, #2
 80054c0:	e0ff      	b.n	80056c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b14      	cmp	r3, #20
 80054ce:	f200 80f0 	bhi.w	80056b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054d2:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	0800552d 	.word	0x0800552d
 80054dc:	080056b3 	.word	0x080056b3
 80054e0:	080056b3 	.word	0x080056b3
 80054e4:	080056b3 	.word	0x080056b3
 80054e8:	0800556d 	.word	0x0800556d
 80054ec:	080056b3 	.word	0x080056b3
 80054f0:	080056b3 	.word	0x080056b3
 80054f4:	080056b3 	.word	0x080056b3
 80054f8:	080055af 	.word	0x080055af
 80054fc:	080056b3 	.word	0x080056b3
 8005500:	080056b3 	.word	0x080056b3
 8005504:	080056b3 	.word	0x080056b3
 8005508:	080055ef 	.word	0x080055ef
 800550c:	080056b3 	.word	0x080056b3
 8005510:	080056b3 	.word	0x080056b3
 8005514:	080056b3 	.word	0x080056b3
 8005518:	08005631 	.word	0x08005631
 800551c:	080056b3 	.word	0x080056b3
 8005520:	080056b3 	.word	0x080056b3
 8005524:	080056b3 	.word	0x080056b3
 8005528:	08005671 	.word	0x08005671
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fb3c 	bl	8005bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0208 	orr.w	r2, r2, #8
 8005546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0204 	bic.w	r2, r2, #4
 8005556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6999      	ldr	r1, [r3, #24]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	619a      	str	r2, [r3, #24]
      break;
 800556a:	e0a5      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fba2 	bl	8005cbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6999      	ldr	r1, [r3, #24]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	021a      	lsls	r2, r3, #8
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	619a      	str	r2, [r3, #24]
      break;
 80055ac:	e084      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fc01 	bl	8005dbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0208 	orr.w	r2, r2, #8
 80055c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0204 	bic.w	r2, r2, #4
 80055d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69d9      	ldr	r1, [r3, #28]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	61da      	str	r2, [r3, #28]
      break;
 80055ec:	e064      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fc5f 	bl	8005eb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69da      	ldr	r2, [r3, #28]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69d9      	ldr	r1, [r3, #28]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	021a      	lsls	r2, r3, #8
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	61da      	str	r2, [r3, #28]
      break;
 800562e:	e043      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fca2 	bl	8005f80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0208 	orr.w	r2, r2, #8
 800564a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0204 	bic.w	r2, r2, #4
 800565a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	691a      	ldr	r2, [r3, #16]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800566e:	e023      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fce0 	bl	800603c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800568a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800569a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	021a      	lsls	r2, r3, #8
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056b0:	e002      	b.n	80056b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	75fb      	strb	r3, [r7, #23]
      break;
 80056b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop

080056cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_TIM_ConfigClockSource+0x1c>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e0b6      	b.n	8005856 <HAL_TIM_ConfigClockSource+0x18a>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005706:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800570a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005724:	d03e      	beq.n	80057a4 <HAL_TIM_ConfigClockSource+0xd8>
 8005726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572a:	f200 8087 	bhi.w	800583c <HAL_TIM_ConfigClockSource+0x170>
 800572e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005732:	f000 8086 	beq.w	8005842 <HAL_TIM_ConfigClockSource+0x176>
 8005736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800573a:	d87f      	bhi.n	800583c <HAL_TIM_ConfigClockSource+0x170>
 800573c:	2b70      	cmp	r3, #112	; 0x70
 800573e:	d01a      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0xaa>
 8005740:	2b70      	cmp	r3, #112	; 0x70
 8005742:	d87b      	bhi.n	800583c <HAL_TIM_ConfigClockSource+0x170>
 8005744:	2b60      	cmp	r3, #96	; 0x60
 8005746:	d050      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0x11e>
 8005748:	2b60      	cmp	r3, #96	; 0x60
 800574a:	d877      	bhi.n	800583c <HAL_TIM_ConfigClockSource+0x170>
 800574c:	2b50      	cmp	r3, #80	; 0x50
 800574e:	d03c      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0xfe>
 8005750:	2b50      	cmp	r3, #80	; 0x50
 8005752:	d873      	bhi.n	800583c <HAL_TIM_ConfigClockSource+0x170>
 8005754:	2b40      	cmp	r3, #64	; 0x40
 8005756:	d058      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x13e>
 8005758:	2b40      	cmp	r3, #64	; 0x40
 800575a:	d86f      	bhi.n	800583c <HAL_TIM_ConfigClockSource+0x170>
 800575c:	2b30      	cmp	r3, #48	; 0x30
 800575e:	d064      	beq.n	800582a <HAL_TIM_ConfigClockSource+0x15e>
 8005760:	2b30      	cmp	r3, #48	; 0x30
 8005762:	d86b      	bhi.n	800583c <HAL_TIM_ConfigClockSource+0x170>
 8005764:	2b20      	cmp	r3, #32
 8005766:	d060      	beq.n	800582a <HAL_TIM_ConfigClockSource+0x15e>
 8005768:	2b20      	cmp	r3, #32
 800576a:	d867      	bhi.n	800583c <HAL_TIM_ConfigClockSource+0x170>
 800576c:	2b00      	cmp	r3, #0
 800576e:	d05c      	beq.n	800582a <HAL_TIM_ConfigClockSource+0x15e>
 8005770:	2b10      	cmp	r3, #16
 8005772:	d05a      	beq.n	800582a <HAL_TIM_ConfigClockSource+0x15e>
 8005774:	e062      	b.n	800583c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	6899      	ldr	r1, [r3, #8]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f000 fed9 	bl	800653c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005798:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	609a      	str	r2, [r3, #8]
      break;
 80057a2:	e04f      	b.n	8005844 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6818      	ldr	r0, [r3, #0]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	6899      	ldr	r1, [r3, #8]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f000 fec2 	bl	800653c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057c6:	609a      	str	r2, [r3, #8]
      break;
 80057c8:	e03c      	b.n	8005844 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6859      	ldr	r1, [r3, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	461a      	mov	r2, r3
 80057d8:	f000 fd80 	bl	80062dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2150      	movs	r1, #80	; 0x50
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fe8f 	bl	8006506 <TIM_ITRx_SetConfig>
      break;
 80057e8:	e02c      	b.n	8005844 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	6859      	ldr	r1, [r3, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f000 fddc 	bl	80063b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2160      	movs	r1, #96	; 0x60
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fe7f 	bl	8006506 <TIM_ITRx_SetConfig>
      break;
 8005808:	e01c      	b.n	8005844 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	6859      	ldr	r1, [r3, #4]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	461a      	mov	r2, r3
 8005818:	f000 fd60 	bl	80062dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2140      	movs	r1, #64	; 0x40
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fe6f 	bl	8006506 <TIM_ITRx_SetConfig>
      break;
 8005828:	e00c      	b.n	8005844 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4619      	mov	r1, r3
 8005834:	4610      	mov	r0, r2
 8005836:	f000 fe66 	bl	8006506 <TIM_ITRx_SetConfig>
      break;
 800583a:	e003      	b.n	8005844 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	73fb      	strb	r3, [r7, #15]
      break;
 8005840:	e000      	b.n	8005844 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005842:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005854:	7bfb      	ldrb	r3, [r7, #15]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b082      	sub	sp, #8
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005872:	2302      	movs	r3, #2
 8005874:	e031      	b.n	80058da <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2202      	movs	r2, #2
 8005882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005886:	6839      	ldr	r1, [r7, #0]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fc37 	bl	80060fc <TIM_SlaveTimer_SetConfig>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d009      	beq.n	80058a8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e018      	b.n	80058da <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058c6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80058fe:	bf00      	nop
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005912:	bf00      	nop
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	429a      	cmp	r2, r3
 8005934:	d107      	bne.n	8005946 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2201      	movs	r2, #1
 800593a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005944:	e02a      	b.n	800599c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	429a      	cmp	r2, r3
 800594e:	d107      	bne.n	8005960 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2202      	movs	r2, #2
 8005954:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800595e:	e01d      	b.n	800599c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	429a      	cmp	r2, r3
 8005968:	d107      	bne.n	800597a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2204      	movs	r2, #4
 800596e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005978:	e010      	b.n	800599c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	429a      	cmp	r2, r3
 8005982:	d107      	bne.n	8005994 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2208      	movs	r2, #8
 8005988:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005992:	e003      	b.n	800599c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f7ff ffb4 	bl	800590a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	771a      	strb	r2, [r3, #28]
}
 80059a8:	bf00      	nop
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d10b      	bne.n	80059e0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d136      	bne.n	8005a44 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059de:	e031      	b.n	8005a44 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d10b      	bne.n	8005a02 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2202      	movs	r2, #2
 80059ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d125      	bne.n	8005a44 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a00:	e020      	b.n	8005a44 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d10b      	bne.n	8005a24 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2204      	movs	r2, #4
 8005a10:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d114      	bne.n	8005a44 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a22:	e00f      	b.n	8005a44 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d10a      	bne.n	8005a44 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2208      	movs	r2, #8
 8005a32:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d103      	bne.n	8005a44 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f7ff ff4c 	bl	80058e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	771a      	strb	r2, [r3, #28]
}
 8005a50:	bf00      	nop
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d103      	bne.n	8005a78 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	771a      	strb	r2, [r3, #28]
 8005a76:	e019      	b.n	8005aac <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d103      	bne.n	8005a8a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2202      	movs	r2, #2
 8005a86:	771a      	strb	r2, [r3, #28]
 8005a88:	e010      	b.n	8005aac <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d103      	bne.n	8005a9c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2204      	movs	r2, #4
 8005a98:	771a      	strb	r2, [r3, #28]
 8005a9a:	e007      	b.n	8005aac <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d102      	bne.n	8005aac <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f7ff ff22 	bl	80058f6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	771a      	strb	r2, [r3, #28]
}
 8005ab8:	bf00      	nop
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a32      	ldr	r2, [pc, #200]	; (8005b9c <TIM_Base_SetConfig+0xdc>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d007      	beq.n	8005ae8 <TIM_Base_SetConfig+0x28>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ade:	d003      	beq.n	8005ae8 <TIM_Base_SetConfig+0x28>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a2f      	ldr	r2, [pc, #188]	; (8005ba0 <TIM_Base_SetConfig+0xe0>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d108      	bne.n	8005afa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a27      	ldr	r2, [pc, #156]	; (8005b9c <TIM_Base_SetConfig+0xdc>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d013      	beq.n	8005b2a <TIM_Base_SetConfig+0x6a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b08:	d00f      	beq.n	8005b2a <TIM_Base_SetConfig+0x6a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a24      	ldr	r2, [pc, #144]	; (8005ba0 <TIM_Base_SetConfig+0xe0>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00b      	beq.n	8005b2a <TIM_Base_SetConfig+0x6a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a23      	ldr	r2, [pc, #140]	; (8005ba4 <TIM_Base_SetConfig+0xe4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d007      	beq.n	8005b2a <TIM_Base_SetConfig+0x6a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a22      	ldr	r2, [pc, #136]	; (8005ba8 <TIM_Base_SetConfig+0xe8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d003      	beq.n	8005b2a <TIM_Base_SetConfig+0x6a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a21      	ldr	r2, [pc, #132]	; (8005bac <TIM_Base_SetConfig+0xec>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d108      	bne.n	8005b3c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a0e      	ldr	r2, [pc, #56]	; (8005b9c <TIM_Base_SetConfig+0xdc>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00b      	beq.n	8005b80 <TIM_Base_SetConfig+0xc0>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a0e      	ldr	r2, [pc, #56]	; (8005ba4 <TIM_Base_SetConfig+0xe4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d007      	beq.n	8005b80 <TIM_Base_SetConfig+0xc0>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a0d      	ldr	r2, [pc, #52]	; (8005ba8 <TIM_Base_SetConfig+0xe8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d003      	beq.n	8005b80 <TIM_Base_SetConfig+0xc0>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a0c      	ldr	r2, [pc, #48]	; (8005bac <TIM_Base_SetConfig+0xec>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d103      	bne.n	8005b88 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	691a      	ldr	r2, [r3, #16]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	615a      	str	r2, [r3, #20]
}
 8005b8e:	bf00      	nop
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	40012c00 	.word	0x40012c00
 8005ba0:	40000400 	.word	0x40000400
 8005ba4:	40014000 	.word	0x40014000
 8005ba8:	40014400 	.word	0x40014400
 8005bac:	40014800 	.word	0x40014800

08005bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	f023 0201 	bic.w	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0303 	bic.w	r3, r3, #3
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f023 0302 	bic.w	r3, r3, #2
 8005bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a28      	ldr	r2, [pc, #160]	; (8005cac <TIM_OC1_SetConfig+0xfc>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d00b      	beq.n	8005c28 <TIM_OC1_SetConfig+0x78>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a27      	ldr	r2, [pc, #156]	; (8005cb0 <TIM_OC1_SetConfig+0x100>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d007      	beq.n	8005c28 <TIM_OC1_SetConfig+0x78>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a26      	ldr	r2, [pc, #152]	; (8005cb4 <TIM_OC1_SetConfig+0x104>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d003      	beq.n	8005c28 <TIM_OC1_SetConfig+0x78>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a25      	ldr	r2, [pc, #148]	; (8005cb8 <TIM_OC1_SetConfig+0x108>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d10c      	bne.n	8005c42 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f023 0308 	bic.w	r3, r3, #8
 8005c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f023 0304 	bic.w	r3, r3, #4
 8005c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a19      	ldr	r2, [pc, #100]	; (8005cac <TIM_OC1_SetConfig+0xfc>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00b      	beq.n	8005c62 <TIM_OC1_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a18      	ldr	r2, [pc, #96]	; (8005cb0 <TIM_OC1_SetConfig+0x100>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d007      	beq.n	8005c62 <TIM_OC1_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a17      	ldr	r2, [pc, #92]	; (8005cb4 <TIM_OC1_SetConfig+0x104>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d003      	beq.n	8005c62 <TIM_OC1_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a16      	ldr	r2, [pc, #88]	; (8005cb8 <TIM_OC1_SetConfig+0x108>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d111      	bne.n	8005c86 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	621a      	str	r2, [r3, #32]
}
 8005ca0:	bf00      	nop
 8005ca2:	371c      	adds	r7, #28
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	40014400 	.word	0x40014400
 8005cb8:	40014800 	.word	0x40014800

08005cbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	f023 0210 	bic.w	r2, r3, #16
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	021b      	lsls	r3, r3, #8
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f023 0320 	bic.w	r3, r3, #32
 8005d0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a24      	ldr	r2, [pc, #144]	; (8005dac <TIM_OC2_SetConfig+0xf0>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d10d      	bne.n	8005d3c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a1b      	ldr	r2, [pc, #108]	; (8005dac <TIM_OC2_SetConfig+0xf0>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d00b      	beq.n	8005d5c <TIM_OC2_SetConfig+0xa0>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a1a      	ldr	r2, [pc, #104]	; (8005db0 <TIM_OC2_SetConfig+0xf4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d007      	beq.n	8005d5c <TIM_OC2_SetConfig+0xa0>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a19      	ldr	r2, [pc, #100]	; (8005db4 <TIM_OC2_SetConfig+0xf8>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d003      	beq.n	8005d5c <TIM_OC2_SetConfig+0xa0>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a18      	ldr	r2, [pc, #96]	; (8005db8 <TIM_OC2_SetConfig+0xfc>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d113      	bne.n	8005d84 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d62:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d6a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	621a      	str	r2, [r3, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	40012c00 	.word	0x40012c00
 8005db0:	40014000 	.word	0x40014000
 8005db4:	40014400 	.word	0x40014400
 8005db8:	40014800 	.word	0x40014800

08005dbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f023 0303 	bic.w	r3, r3, #3
 8005df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	021b      	lsls	r3, r3, #8
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a23      	ldr	r2, [pc, #140]	; (8005ea8 <TIM_OC3_SetConfig+0xec>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d10d      	bne.n	8005e3a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e38:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a1a      	ldr	r2, [pc, #104]	; (8005ea8 <TIM_OC3_SetConfig+0xec>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d00b      	beq.n	8005e5a <TIM_OC3_SetConfig+0x9e>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a19      	ldr	r2, [pc, #100]	; (8005eac <TIM_OC3_SetConfig+0xf0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d007      	beq.n	8005e5a <TIM_OC3_SetConfig+0x9e>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a18      	ldr	r2, [pc, #96]	; (8005eb0 <TIM_OC3_SetConfig+0xf4>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d003      	beq.n	8005e5a <TIM_OC3_SetConfig+0x9e>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a17      	ldr	r2, [pc, #92]	; (8005eb4 <TIM_OC3_SetConfig+0xf8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d113      	bne.n	8005e82 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	011b      	lsls	r3, r3, #4
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	011b      	lsls	r3, r3, #4
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	621a      	str	r2, [r3, #32]
}
 8005e9c:	bf00      	nop
 8005e9e:	371c      	adds	r7, #28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	40012c00 	.word	0x40012c00
 8005eac:	40014000 	.word	0x40014000
 8005eb0:	40014400 	.word	0x40014400
 8005eb4:	40014800 	.word	0x40014800

08005eb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	021b      	lsls	r3, r3, #8
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	031b      	lsls	r3, r3, #12
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a16      	ldr	r2, [pc, #88]	; (8005f70 <TIM_OC4_SetConfig+0xb8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d00b      	beq.n	8005f34 <TIM_OC4_SetConfig+0x7c>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a15      	ldr	r2, [pc, #84]	; (8005f74 <TIM_OC4_SetConfig+0xbc>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d007      	beq.n	8005f34 <TIM_OC4_SetConfig+0x7c>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a14      	ldr	r2, [pc, #80]	; (8005f78 <TIM_OC4_SetConfig+0xc0>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d003      	beq.n	8005f34 <TIM_OC4_SetConfig+0x7c>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a13      	ldr	r2, [pc, #76]	; (8005f7c <TIM_OC4_SetConfig+0xc4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d109      	bne.n	8005f48 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	019b      	lsls	r3, r3, #6
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	621a      	str	r2, [r3, #32]
}
 8005f62:	bf00      	nop
 8005f64:	371c      	adds	r7, #28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40012c00 	.word	0x40012c00
 8005f74:	40014000 	.word	0x40014000
 8005f78:	40014400 	.word	0x40014400
 8005f7c:	40014800 	.word	0x40014800

08005f80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005fc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	041b      	lsls	r3, r3, #16
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a15      	ldr	r2, [pc, #84]	; (800602c <TIM_OC5_SetConfig+0xac>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00b      	beq.n	8005ff2 <TIM_OC5_SetConfig+0x72>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a14      	ldr	r2, [pc, #80]	; (8006030 <TIM_OC5_SetConfig+0xb0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d007      	beq.n	8005ff2 <TIM_OC5_SetConfig+0x72>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a13      	ldr	r2, [pc, #76]	; (8006034 <TIM_OC5_SetConfig+0xb4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d003      	beq.n	8005ff2 <TIM_OC5_SetConfig+0x72>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a12      	ldr	r2, [pc, #72]	; (8006038 <TIM_OC5_SetConfig+0xb8>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d109      	bne.n	8006006 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	021b      	lsls	r3, r3, #8
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	4313      	orrs	r3, r2
 8006004:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	621a      	str	r2, [r3, #32]
}
 8006020:	bf00      	nop
 8006022:	371c      	adds	r7, #28
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	40012c00 	.word	0x40012c00
 8006030:	40014000 	.word	0x40014000
 8006034:	40014400 	.word	0x40014400
 8006038:	40014800 	.word	0x40014800

0800603c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800606a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800606e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	021b      	lsls	r3, r3, #8
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4313      	orrs	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006082:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	051b      	lsls	r3, r3, #20
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a16      	ldr	r2, [pc, #88]	; (80060ec <TIM_OC6_SetConfig+0xb0>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d00b      	beq.n	80060b0 <TIM_OC6_SetConfig+0x74>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a15      	ldr	r2, [pc, #84]	; (80060f0 <TIM_OC6_SetConfig+0xb4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d007      	beq.n	80060b0 <TIM_OC6_SetConfig+0x74>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a14      	ldr	r2, [pc, #80]	; (80060f4 <TIM_OC6_SetConfig+0xb8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d003      	beq.n	80060b0 <TIM_OC6_SetConfig+0x74>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a13      	ldr	r2, [pc, #76]	; (80060f8 <TIM_OC6_SetConfig+0xbc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d109      	bne.n	80060c4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	029b      	lsls	r3, r3, #10
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	621a      	str	r2, [r3, #32]
}
 80060de:	bf00      	nop
 80060e0:	371c      	adds	r7, #28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	40012c00 	.word	0x40012c00
 80060f0:	40014000 	.word	0x40014000
 80060f4:	40014400 	.word	0x40014400
 80060f8:	40014800 	.word	0x40014800

080060fc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006118:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800612a:	f023 0307 	bic.w	r3, r3, #7
 800612e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	4313      	orrs	r3, r2
 8006138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	2b70      	cmp	r3, #112	; 0x70
 8006148:	d01a      	beq.n	8006180 <TIM_SlaveTimer_SetConfig+0x84>
 800614a:	2b70      	cmp	r3, #112	; 0x70
 800614c:	d860      	bhi.n	8006210 <TIM_SlaveTimer_SetConfig+0x114>
 800614e:	2b60      	cmp	r3, #96	; 0x60
 8006150:	d054      	beq.n	80061fc <TIM_SlaveTimer_SetConfig+0x100>
 8006152:	2b60      	cmp	r3, #96	; 0x60
 8006154:	d85c      	bhi.n	8006210 <TIM_SlaveTimer_SetConfig+0x114>
 8006156:	2b50      	cmp	r3, #80	; 0x50
 8006158:	d046      	beq.n	80061e8 <TIM_SlaveTimer_SetConfig+0xec>
 800615a:	2b50      	cmp	r3, #80	; 0x50
 800615c:	d858      	bhi.n	8006210 <TIM_SlaveTimer_SetConfig+0x114>
 800615e:	2b40      	cmp	r3, #64	; 0x40
 8006160:	d019      	beq.n	8006196 <TIM_SlaveTimer_SetConfig+0x9a>
 8006162:	2b40      	cmp	r3, #64	; 0x40
 8006164:	d854      	bhi.n	8006210 <TIM_SlaveTimer_SetConfig+0x114>
 8006166:	2b30      	cmp	r3, #48	; 0x30
 8006168:	d055      	beq.n	8006216 <TIM_SlaveTimer_SetConfig+0x11a>
 800616a:	2b30      	cmp	r3, #48	; 0x30
 800616c:	d850      	bhi.n	8006210 <TIM_SlaveTimer_SetConfig+0x114>
 800616e:	2b20      	cmp	r3, #32
 8006170:	d051      	beq.n	8006216 <TIM_SlaveTimer_SetConfig+0x11a>
 8006172:	2b20      	cmp	r3, #32
 8006174:	d84c      	bhi.n	8006210 <TIM_SlaveTimer_SetConfig+0x114>
 8006176:	2b00      	cmp	r3, #0
 8006178:	d04d      	beq.n	8006216 <TIM_SlaveTimer_SetConfig+0x11a>
 800617a:	2b10      	cmp	r3, #16
 800617c:	d04b      	beq.n	8006216 <TIM_SlaveTimer_SetConfig+0x11a>
 800617e:	e047      	b.n	8006210 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6818      	ldr	r0, [r3, #0]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	68d9      	ldr	r1, [r3, #12]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	f000 f9d4 	bl	800653c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006194:	e040      	b.n	8006218 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b05      	cmp	r3, #5
 800619c:	d101      	bne.n	80061a2 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e03b      	b.n	800621a <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6a1a      	ldr	r2, [r3, #32]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0201 	bic.w	r2, r2, #1
 80061b8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061c8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	621a      	str	r2, [r3, #32]
      break;
 80061e6:	e017      	b.n	8006218 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6818      	ldr	r0, [r3, #0]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	6899      	ldr	r1, [r3, #8]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	461a      	mov	r2, r3
 80061f6:	f000 f871 	bl	80062dc <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80061fa:	e00d      	b.n	8006218 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6818      	ldr	r0, [r3, #0]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	6899      	ldr	r1, [r3, #8]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	461a      	mov	r2, r3
 800620a:	f000 f8d3 	bl	80063b4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800620e:	e003      	b.n	8006218 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	75fb      	strb	r3, [r7, #23]
      break;
 8006214:	e000      	b.n	8006218 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8006216:	bf00      	nop
  }

  return status;
 8006218:	7dfb      	ldrb	r3, [r7, #23]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
	...

08006224 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006224:	b480      	push	{r7}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
 8006230:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	f023 0201 	bic.w	r2, r3, #1
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4a20      	ldr	r2, [pc, #128]	; (80062d0 <TIM_TI1_SetConfig+0xac>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00b      	beq.n	800626a <TIM_TI1_SetConfig+0x46>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006258:	d007      	beq.n	800626a <TIM_TI1_SetConfig+0x46>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4a1d      	ldr	r2, [pc, #116]	; (80062d4 <TIM_TI1_SetConfig+0xb0>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d003      	beq.n	800626a <TIM_TI1_SetConfig+0x46>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4a1c      	ldr	r2, [pc, #112]	; (80062d8 <TIM_TI1_SetConfig+0xb4>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d101      	bne.n	800626e <TIM_TI1_SetConfig+0x4a>
 800626a:	2301      	movs	r3, #1
 800626c:	e000      	b.n	8006270 <TIM_TI1_SetConfig+0x4c>
 800626e:	2300      	movs	r3, #0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d008      	beq.n	8006286 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f023 0303 	bic.w	r3, r3, #3
 800627a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4313      	orrs	r3, r2
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	e003      	b.n	800628e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f043 0301 	orr.w	r3, r3, #1
 800628c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006294:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	b2db      	uxtb	r3, r3
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f023 030a 	bic.w	r3, r3, #10
 80062a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f003 030a 	and.w	r3, r3, #10
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	621a      	str	r2, [r3, #32]
}
 80062c2:	bf00      	nop
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40012c00 	.word	0x40012c00
 80062d4:	40000400 	.word	0x40000400
 80062d8:	40014000 	.word	0x40014000

080062dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	f023 0201 	bic.w	r2, r3, #1
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	011b      	lsls	r3, r3, #4
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f023 030a 	bic.w	r3, r3, #10
 8006318:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	4313      	orrs	r3, r2
 8006320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	621a      	str	r2, [r3, #32]
}
 800632e:	bf00      	nop
 8006330:	371c      	adds	r7, #28
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800633a:	b480      	push	{r7}
 800633c:	b087      	sub	sp, #28
 800633e:	af00      	add	r7, sp, #0
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	607a      	str	r2, [r7, #4]
 8006346:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	f023 0210 	bic.w	r2, r3, #16
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006366:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	021b      	lsls	r3, r3, #8
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006378:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	031b      	lsls	r3, r3, #12
 800637e:	b29b      	uxth	r3, r3
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	4313      	orrs	r3, r2
 8006384:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800638c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	621a      	str	r2, [r3, #32]
}
 80063a8:	bf00      	nop
 80063aa:	371c      	adds	r7, #28
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a1b      	ldr	r3, [r3, #32]
 80063c4:	f023 0210 	bic.w	r2, r3, #16
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	031b      	lsls	r3, r3, #12
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	011b      	lsls	r3, r3, #4
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	621a      	str	r2, [r3, #32]
}
 8006408:	bf00      	nop
 800640a:	371c      	adds	r7, #28
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f023 0303 	bic.w	r3, r3, #3
 8006440:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4313      	orrs	r3, r2
 8006448:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006450:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	b2db      	uxtb	r3, r3
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	4313      	orrs	r3, r2
 800645c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006464:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	021b      	lsls	r3, r3, #8
 800646a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	621a      	str	r2, [r3, #32]
}
 8006480:	bf00      	nop
 8006482:	371c      	adds	r7, #28
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	021b      	lsls	r3, r3, #8
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	031b      	lsls	r3, r3, #12
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80064de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	031b      	lsls	r3, r3, #12
 80064e4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	621a      	str	r2, [r3, #32]
}
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006506:	b480      	push	{r7}
 8006508:	b085      	sub	sp, #20
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	f043 0307 	orr.w	r3, r3, #7
 8006528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	609a      	str	r2, [r3, #8]
}
 8006530:	bf00      	nop
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	021a      	lsls	r2, r3, #8
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	431a      	orrs	r2, r3
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4313      	orrs	r3, r2
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	4313      	orrs	r3, r2
 8006568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	609a      	str	r2, [r3, #8]
}
 8006570:	bf00      	nop
 8006572:	371c      	adds	r7, #28
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f003 031f 	and.w	r3, r3, #31
 800658e:	2201      	movs	r2, #1
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6a1a      	ldr	r2, [r3, #32]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	43db      	mvns	r3, r3
 800659e:	401a      	ands	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a1a      	ldr	r2, [r3, #32]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f003 031f 	and.w	r3, r3, #31
 80065ae:	6879      	ldr	r1, [r7, #4]
 80065b0:	fa01 f303 	lsl.w	r3, r1, r3
 80065b4:	431a      	orrs	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	621a      	str	r2, [r3, #32]
}
 80065ba:	bf00      	nop
 80065bc:	371c      	adds	r7, #28
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
	...

080065c8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d109      	bne.n	80065ec <HAL_TIMEx_PWMN_Start+0x24>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	bf14      	ite	ne
 80065e4:	2301      	movne	r3, #1
 80065e6:	2300      	moveq	r3, #0
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	e022      	b.n	8006632 <HAL_TIMEx_PWMN_Start+0x6a>
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d109      	bne.n	8006606 <HAL_TIMEx_PWMN_Start+0x3e>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	bf14      	ite	ne
 80065fe:	2301      	movne	r3, #1
 8006600:	2300      	moveq	r3, #0
 8006602:	b2db      	uxtb	r3, r3
 8006604:	e015      	b.n	8006632 <HAL_TIMEx_PWMN_Start+0x6a>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b08      	cmp	r3, #8
 800660a:	d109      	bne.n	8006620 <HAL_TIMEx_PWMN_Start+0x58>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b01      	cmp	r3, #1
 8006616:	bf14      	ite	ne
 8006618:	2301      	movne	r3, #1
 800661a:	2300      	moveq	r3, #0
 800661c:	b2db      	uxtb	r3, r3
 800661e:	e008      	b.n	8006632 <HAL_TIMEx_PWMN_Start+0x6a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b01      	cmp	r3, #1
 800662a:	bf14      	ite	ne
 800662c:	2301      	movne	r3, #1
 800662e:	2300      	moveq	r3, #0
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e05f      	b.n	80066fa <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <HAL_TIMEx_PWMN_Start+0x82>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006648:	e013      	b.n	8006672 <HAL_TIMEx_PWMN_Start+0xaa>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b04      	cmp	r3, #4
 800664e:	d104      	bne.n	800665a <HAL_TIMEx_PWMN_Start+0x92>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006658:	e00b      	b.n	8006672 <HAL_TIMEx_PWMN_Start+0xaa>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b08      	cmp	r3, #8
 800665e:	d104      	bne.n	800666a <HAL_TIMEx_PWMN_Start+0xa2>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006668:	e003      	b.n	8006672 <HAL_TIMEx_PWMN_Start+0xaa>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2202      	movs	r2, #2
 800666e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2204      	movs	r2, #4
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	4618      	mov	r0, r3
 800667c:	f000 f930 	bl	80068e0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800668e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a1b      	ldr	r2, [pc, #108]	; (8006704 <HAL_TIMEx_PWMN_Start+0x13c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d00e      	beq.n	80066b8 <HAL_TIMEx_PWMN_Start+0xf0>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a2:	d009      	beq.n	80066b8 <HAL_TIMEx_PWMN_Start+0xf0>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a17      	ldr	r2, [pc, #92]	; (8006708 <HAL_TIMEx_PWMN_Start+0x140>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d004      	beq.n	80066b8 <HAL_TIMEx_PWMN_Start+0xf0>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a16      	ldr	r2, [pc, #88]	; (800670c <HAL_TIMEx_PWMN_Start+0x144>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d115      	bne.n	80066e4 <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	4b14      	ldr	r3, [pc, #80]	; (8006710 <HAL_TIMEx_PWMN_Start+0x148>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b06      	cmp	r3, #6
 80066c8:	d015      	beq.n	80066f6 <HAL_TIMEx_PWMN_Start+0x12e>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d0:	d011      	beq.n	80066f6 <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f042 0201 	orr.w	r2, r2, #1
 80066e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e2:	e008      	b.n	80066f6 <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0201 	orr.w	r2, r2, #1
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	e000      	b.n	80066f8 <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	40012c00 	.word	0x40012c00
 8006708:	40000400 	.word	0x40000400
 800670c:	40014000 	.word	0x40014000
 8006710:	00010007 	.word	0x00010007

08006714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006724:	2b01      	cmp	r3, #1
 8006726:	d101      	bne.n	800672c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006728:	2302      	movs	r3, #2
 800672a:	e054      	b.n	80067d6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a24      	ldr	r2, [pc, #144]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d108      	bne.n	8006768 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800675c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a17      	ldr	r2, [pc, #92]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d00e      	beq.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006794:	d009      	beq.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a13      	ldr	r2, [pc, #76]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d004      	beq.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a11      	ldr	r2, [pc, #68]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d10c      	bne.n	80067c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40012c00 	.word	0x40012c00
 80067e8:	40000400 	.word	0x40000400
 80067ec:	40014000 	.word	0x40014000

080067f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006804:	2b01      	cmp	r3, #1
 8006806:	d101      	bne.n	800680c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006808:	2302      	movs	r3, #2
 800680a:	e060      	b.n	80068ce <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	4313      	orrs	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	041b      	lsls	r3, r3, #16
 8006882:	4313      	orrs	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a14      	ldr	r2, [pc, #80]	; (80068dc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d115      	bne.n	80068bc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689a:	051b      	lsls	r3, r3, #20
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	40012c00 	.word	0x40012c00

080068e0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f003 031f 	and.w	r3, r3, #31
 80068f2:	2204      	movs	r2, #4
 80068f4:	fa02 f303 	lsl.w	r3, r2, r3
 80068f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6a1a      	ldr	r2, [r3, #32]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	43db      	mvns	r3, r3
 8006902:	401a      	ands	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a1a      	ldr	r2, [r3, #32]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f003 031f 	and.w	r3, r3, #31
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	fa01 f303 	lsl.w	r3, r1, r3
 8006918:	431a      	orrs	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	621a      	str	r2, [r3, #32]
}
 800691e:	bf00      	nop
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e040      	b.n	80069be <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006940:	2b00      	cmp	r3, #0
 8006942:	d106      	bne.n	8006952 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7fb f9c9 	bl	8001ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2224      	movs	r2, #36	; 0x24
 8006956:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0201 	bic.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f8c1 	bl	8006af0 <UART_SetConfig>
 800696e:	4603      	mov	r3, r0
 8006970:	2b01      	cmp	r3, #1
 8006972:	d101      	bne.n	8006978 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e022      	b.n	80069be <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f9eb 	bl	8006d5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006994:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f042 0201 	orr.w	r2, r2, #1
 80069b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fa72 	bl	8006ea0 <UART_CheckIdleState>
 80069bc:	4603      	mov	r3, r0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b08a      	sub	sp, #40	; 0x28
 80069ca:	af02      	add	r7, sp, #8
 80069cc:	60f8      	str	r0, [r7, #12]
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	603b      	str	r3, [r7, #0]
 80069d2:	4613      	mov	r3, r2
 80069d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069da:	2b20      	cmp	r3, #32
 80069dc:	f040 8082 	bne.w	8006ae4 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <HAL_UART_Transmit+0x26>
 80069e6:	88fb      	ldrh	r3, [r7, #6]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e07a      	b.n	8006ae6 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d101      	bne.n	80069fe <HAL_UART_Transmit+0x38>
 80069fa:	2302      	movs	r3, #2
 80069fc:	e073      	b.n	8006ae6 <HAL_UART_Transmit+0x120>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2221      	movs	r2, #33	; 0x21
 8006a12:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a14:	f7fb fb40 	bl	8002098 <HAL_GetTick>
 8006a18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	88fa      	ldrh	r2, [r7, #6]
 8006a1e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	88fa      	ldrh	r2, [r7, #6]
 8006a26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a32:	d108      	bne.n	8006a46 <HAL_UART_Transmit+0x80>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d104      	bne.n	8006a46 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	61bb      	str	r3, [r7, #24]
 8006a44:	e003      	b.n	8006a4e <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006a56:	e02d      	b.n	8006ab4 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	2180      	movs	r1, #128	; 0x80
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 fa65 	bl	8006f32 <UART_WaitOnFlagUntilTimeout>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e039      	b.n	8006ae6 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10b      	bne.n	8006a90 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	881a      	ldrh	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a84:	b292      	uxth	r2, r2
 8006a86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	3302      	adds	r3, #2
 8006a8c:	61bb      	str	r3, [r7, #24]
 8006a8e:	e008      	b.n	8006aa2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	781a      	ldrb	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	b292      	uxth	r2, r2
 8006a9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1cb      	bne.n	8006a58 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2140      	movs	r1, #64	; 0x40
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 fa31 	bl	8006f32 <UART_WaitOnFlagUntilTimeout>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e005      	b.n	8006ae6 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2220      	movs	r2, #32
 8006ade:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	e000      	b.n	8006ae6 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006ae4:	2302      	movs	r3, #2
  }
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3720      	adds	r7, #32
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b088      	sub	sp, #32
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689a      	ldr	r2, [r3, #8]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	431a      	orrs	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	4b8a      	ldr	r3, [pc, #552]	; (8006d44 <UART_SetConfig+0x254>)
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6812      	ldr	r2, [r2, #0]
 8006b22:	6979      	ldr	r1, [r7, #20]
 8006b24:	430b      	orrs	r3, r1
 8006b26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a78      	ldr	r2, [pc, #480]	; (8006d48 <UART_SetConfig+0x258>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d120      	bne.n	8006bae <UART_SetConfig+0xbe>
 8006b6c:	4b77      	ldr	r3, [pc, #476]	; (8006d4c <UART_SetConfig+0x25c>)
 8006b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b70:	f003 0303 	and.w	r3, r3, #3
 8006b74:	2b03      	cmp	r3, #3
 8006b76:	d817      	bhi.n	8006ba8 <UART_SetConfig+0xb8>
 8006b78:	a201      	add	r2, pc, #4	; (adr r2, 8006b80 <UART_SetConfig+0x90>)
 8006b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7e:	bf00      	nop
 8006b80:	08006b91 	.word	0x08006b91
 8006b84:	08006b9d 	.word	0x08006b9d
 8006b88:	08006ba3 	.word	0x08006ba3
 8006b8c:	08006b97 	.word	0x08006b97
 8006b90:	2300      	movs	r3, #0
 8006b92:	77fb      	strb	r3, [r7, #31]
 8006b94:	e01d      	b.n	8006bd2 <UART_SetConfig+0xe2>
 8006b96:	2302      	movs	r3, #2
 8006b98:	77fb      	strb	r3, [r7, #31]
 8006b9a:	e01a      	b.n	8006bd2 <UART_SetConfig+0xe2>
 8006b9c:	2304      	movs	r3, #4
 8006b9e:	77fb      	strb	r3, [r7, #31]
 8006ba0:	e017      	b.n	8006bd2 <UART_SetConfig+0xe2>
 8006ba2:	2308      	movs	r3, #8
 8006ba4:	77fb      	strb	r3, [r7, #31]
 8006ba6:	e014      	b.n	8006bd2 <UART_SetConfig+0xe2>
 8006ba8:	2310      	movs	r3, #16
 8006baa:	77fb      	strb	r3, [r7, #31]
 8006bac:	e011      	b.n	8006bd2 <UART_SetConfig+0xe2>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a67      	ldr	r2, [pc, #412]	; (8006d50 <UART_SetConfig+0x260>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d102      	bne.n	8006bbe <UART_SetConfig+0xce>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	77fb      	strb	r3, [r7, #31]
 8006bbc:	e009      	b.n	8006bd2 <UART_SetConfig+0xe2>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a64      	ldr	r2, [pc, #400]	; (8006d54 <UART_SetConfig+0x264>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d102      	bne.n	8006bce <UART_SetConfig+0xde>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	77fb      	strb	r3, [r7, #31]
 8006bcc:	e001      	b.n	8006bd2 <UART_SetConfig+0xe2>
 8006bce:	2310      	movs	r3, #16
 8006bd0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bda:	d15b      	bne.n	8006c94 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8006bdc:	7ffb      	ldrb	r3, [r7, #31]
 8006bde:	2b08      	cmp	r3, #8
 8006be0:	d827      	bhi.n	8006c32 <UART_SetConfig+0x142>
 8006be2:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <UART_SetConfig+0xf8>)
 8006be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be8:	08006c0d 	.word	0x08006c0d
 8006bec:	08006c15 	.word	0x08006c15
 8006bf0:	08006c1d 	.word	0x08006c1d
 8006bf4:	08006c33 	.word	0x08006c33
 8006bf8:	08006c23 	.word	0x08006c23
 8006bfc:	08006c33 	.word	0x08006c33
 8006c00:	08006c33 	.word	0x08006c33
 8006c04:	08006c33 	.word	0x08006c33
 8006c08:	08006c2b 	.word	0x08006c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c0c:	f7fd fd5c 	bl	80046c8 <HAL_RCC_GetPCLK1Freq>
 8006c10:	61b8      	str	r0, [r7, #24]
        break;
 8006c12:	e013      	b.n	8006c3c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c14:	f7fd fd7a 	bl	800470c <HAL_RCC_GetPCLK2Freq>
 8006c18:	61b8      	str	r0, [r7, #24]
        break;
 8006c1a:	e00f      	b.n	8006c3c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c1c:	4b4e      	ldr	r3, [pc, #312]	; (8006d58 <UART_SetConfig+0x268>)
 8006c1e:	61bb      	str	r3, [r7, #24]
        break;
 8006c20:	e00c      	b.n	8006c3c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c22:	f7fd fcd9 	bl	80045d8 <HAL_RCC_GetSysClockFreq>
 8006c26:	61b8      	str	r0, [r7, #24]
        break;
 8006c28:	e008      	b.n	8006c3c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c2e:	61bb      	str	r3, [r7, #24]
        break;
 8006c30:	e004      	b.n	8006c3c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	77bb      	strb	r3, [r7, #30]
        break;
 8006c3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d074      	beq.n	8006d2c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	005a      	lsls	r2, r3, #1
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	085b      	lsrs	r3, r3, #1
 8006c4c:	441a      	add	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	2b0f      	cmp	r3, #15
 8006c5e:	d916      	bls.n	8006c8e <UART_SetConfig+0x19e>
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c66:	d212      	bcs.n	8006c8e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	f023 030f 	bic.w	r3, r3, #15
 8006c70:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	085b      	lsrs	r3, r3, #1
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	f003 0307 	and.w	r3, r3, #7
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	89fb      	ldrh	r3, [r7, #14]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	89fa      	ldrh	r2, [r7, #14]
 8006c8a:	60da      	str	r2, [r3, #12]
 8006c8c:	e04e      	b.n	8006d2c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	77bb      	strb	r3, [r7, #30]
 8006c92:	e04b      	b.n	8006d2c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c94:	7ffb      	ldrb	r3, [r7, #31]
 8006c96:	2b08      	cmp	r3, #8
 8006c98:	d827      	bhi.n	8006cea <UART_SetConfig+0x1fa>
 8006c9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ca0 <UART_SetConfig+0x1b0>)
 8006c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca0:	08006cc5 	.word	0x08006cc5
 8006ca4:	08006ccd 	.word	0x08006ccd
 8006ca8:	08006cd5 	.word	0x08006cd5
 8006cac:	08006ceb 	.word	0x08006ceb
 8006cb0:	08006cdb 	.word	0x08006cdb
 8006cb4:	08006ceb 	.word	0x08006ceb
 8006cb8:	08006ceb 	.word	0x08006ceb
 8006cbc:	08006ceb 	.word	0x08006ceb
 8006cc0:	08006ce3 	.word	0x08006ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cc4:	f7fd fd00 	bl	80046c8 <HAL_RCC_GetPCLK1Freq>
 8006cc8:	61b8      	str	r0, [r7, #24]
        break;
 8006cca:	e013      	b.n	8006cf4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ccc:	f7fd fd1e 	bl	800470c <HAL_RCC_GetPCLK2Freq>
 8006cd0:	61b8      	str	r0, [r7, #24]
        break;
 8006cd2:	e00f      	b.n	8006cf4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cd4:	4b20      	ldr	r3, [pc, #128]	; (8006d58 <UART_SetConfig+0x268>)
 8006cd6:	61bb      	str	r3, [r7, #24]
        break;
 8006cd8:	e00c      	b.n	8006cf4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cda:	f7fd fc7d 	bl	80045d8 <HAL_RCC_GetSysClockFreq>
 8006cde:	61b8      	str	r0, [r7, #24]
        break;
 8006ce0:	e008      	b.n	8006cf4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ce6:	61bb      	str	r3, [r7, #24]
        break;
 8006ce8:	e004      	b.n	8006cf4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	77bb      	strb	r3, [r7, #30]
        break;
 8006cf2:	bf00      	nop
    }

    if (pclk != 0U)
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d018      	beq.n	8006d2c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	085a      	lsrs	r2, r3, #1
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	441a      	add	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	2b0f      	cmp	r3, #15
 8006d14:	d908      	bls.n	8006d28 <UART_SetConfig+0x238>
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d1c:	d204      	bcs.n	8006d28 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	60da      	str	r2, [r3, #12]
 8006d26:	e001      	b.n	8006d2c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006d38:	7fbb      	ldrb	r3, [r7, #30]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3720      	adds	r7, #32
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	efff69f3 	.word	0xefff69f3
 8006d48:	40013800 	.word	0x40013800
 8006d4c:	40021000 	.word	0x40021000
 8006d50:	40004400 	.word	0x40004400
 8006d54:	40004800 	.word	0x40004800
 8006d58:	007a1200 	.word	0x007a1200

08006d5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00a      	beq.n	8006d86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00a      	beq.n	8006da8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	430a      	orrs	r2, r1
 8006da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00a      	beq.n	8006dca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	f003 0308 	and.w	r3, r3, #8
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	430a      	orrs	r2, r1
 8006dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00a      	beq.n	8006e0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	f003 0320 	and.w	r3, r3, #32
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00a      	beq.n	8006e30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d01a      	beq.n	8006e72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e5a:	d10a      	bne.n	8006e72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00a      	beq.n	8006e94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	430a      	orrs	r2, r1
 8006e92:	605a      	str	r2, [r3, #4]
  }
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af02      	add	r7, sp, #8
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006eb0:	f7fb f8f2 	bl	8002098 <HAL_GetTick>
 8006eb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0308 	and.w	r3, r3, #8
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d10e      	bne.n	8006ee2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ec4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f82d 	bl	8006f32 <UART_WaitOnFlagUntilTimeout>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e023      	b.n	8006f2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b04      	cmp	r3, #4
 8006eee:	d10e      	bne.n	8006f0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ef0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f817 	bl	8006f32 <UART_WaitOnFlagUntilTimeout>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e00d      	b.n	8006f2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2220      	movs	r2, #32
 8006f12:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2220      	movs	r2, #32
 8006f18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b09c      	sub	sp, #112	; 0x70
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	60f8      	str	r0, [r7, #12]
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	603b      	str	r3, [r7, #0]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f42:	e0a5      	b.n	8007090 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4a:	f000 80a1 	beq.w	8007090 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f4e:	f7fb f8a3 	bl	8002098 <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d302      	bcc.n	8006f64 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d13e      	bne.n	8006fe2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f6c:	e853 3f00 	ldrex	r3, [r3]
 8006f70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f78:	667b      	str	r3, [r7, #100]	; 0x64
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f84:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f8a:	e841 2300 	strex	r3, r2, [r1]
 8006f8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1e6      	bne.n	8006f64 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa0:	e853 3f00 	ldrex	r3, [r3]
 8006fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa8:	f023 0301 	bic.w	r3, r3, #1
 8006fac:	663b      	str	r3, [r7, #96]	; 0x60
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3308      	adds	r3, #8
 8006fb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fb6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fb8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fbe:	e841 2300 	strex	r3, r2, [r1]
 8006fc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1e5      	bne.n	8006f96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e067      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d04f      	beq.n	8007090 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ffe:	d147      	bne.n	8007090 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007008:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007012:	e853 3f00 	ldrex	r3, [r3]
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800701e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	461a      	mov	r2, r3
 8007026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007028:	637b      	str	r3, [r7, #52]	; 0x34
 800702a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800702e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007030:	e841 2300 	strex	r3, r2, [r1]
 8007034:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e6      	bne.n	800700a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3308      	adds	r3, #8
 8007042:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	e853 3f00 	ldrex	r3, [r3]
 800704a:	613b      	str	r3, [r7, #16]
   return(result);
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	f023 0301 	bic.w	r3, r3, #1
 8007052:	66bb      	str	r3, [r7, #104]	; 0x68
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3308      	adds	r3, #8
 800705a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800705c:	623a      	str	r2, [r7, #32]
 800705e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	69f9      	ldr	r1, [r7, #28]
 8007062:	6a3a      	ldr	r2, [r7, #32]
 8007064:	e841 2300 	strex	r3, r2, [r1]
 8007068:	61bb      	str	r3, [r7, #24]
   return(result);
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1e5      	bne.n	800703c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2220      	movs	r2, #32
 8007074:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2220      	movs	r2, #32
 800707a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2220      	movs	r2, #32
 8007080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e010      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69da      	ldr	r2, [r3, #28]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	4013      	ands	r3, r2
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	429a      	cmp	r2, r3
 800709e:	bf0c      	ite	eq
 80070a0:	2301      	moveq	r3, #1
 80070a2:	2300      	movne	r3, #0
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	461a      	mov	r2, r3
 80070a8:	79fb      	ldrb	r3, [r7, #7]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	f43f af4a 	beq.w	8006f44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3770      	adds	r7, #112	; 0x70
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <__errno>:
 80070bc:	4b01      	ldr	r3, [pc, #4]	; (80070c4 <__errno+0x8>)
 80070be:	6818      	ldr	r0, [r3, #0]
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	2000000c 	.word	0x2000000c

080070c8 <__libc_init_array>:
 80070c8:	b570      	push	{r4, r5, r6, lr}
 80070ca:	4d0d      	ldr	r5, [pc, #52]	; (8007100 <__libc_init_array+0x38>)
 80070cc:	4c0d      	ldr	r4, [pc, #52]	; (8007104 <__libc_init_array+0x3c>)
 80070ce:	1b64      	subs	r4, r4, r5
 80070d0:	10a4      	asrs	r4, r4, #2
 80070d2:	2600      	movs	r6, #0
 80070d4:	42a6      	cmp	r6, r4
 80070d6:	d109      	bne.n	80070ec <__libc_init_array+0x24>
 80070d8:	4d0b      	ldr	r5, [pc, #44]	; (8007108 <__libc_init_array+0x40>)
 80070da:	4c0c      	ldr	r4, [pc, #48]	; (800710c <__libc_init_array+0x44>)
 80070dc:	f000 f87a 	bl	80071d4 <_init>
 80070e0:	1b64      	subs	r4, r4, r5
 80070e2:	10a4      	asrs	r4, r4, #2
 80070e4:	2600      	movs	r6, #0
 80070e6:	42a6      	cmp	r6, r4
 80070e8:	d105      	bne.n	80070f6 <__libc_init_array+0x2e>
 80070ea:	bd70      	pop	{r4, r5, r6, pc}
 80070ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80070f0:	4798      	blx	r3
 80070f2:	3601      	adds	r6, #1
 80070f4:	e7ee      	b.n	80070d4 <__libc_init_array+0xc>
 80070f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070fa:	4798      	blx	r3
 80070fc:	3601      	adds	r6, #1
 80070fe:	e7f2      	b.n	80070e6 <__libc_init_array+0x1e>
 8007100:	08007400 	.word	0x08007400
 8007104:	08007400 	.word	0x08007400
 8007108:	08007400 	.word	0x08007400
 800710c:	08007404 	.word	0x08007404

08007110 <memset>:
 8007110:	4402      	add	r2, r0
 8007112:	4603      	mov	r3, r0
 8007114:	4293      	cmp	r3, r2
 8007116:	d100      	bne.n	800711a <memset+0xa>
 8007118:	4770      	bx	lr
 800711a:	f803 1b01 	strb.w	r1, [r3], #1
 800711e:	e7f9      	b.n	8007114 <memset+0x4>

08007120 <abort>:
 8007120:	b508      	push	{r3, lr}
 8007122:	2006      	movs	r0, #6
 8007124:	f000 f83a 	bl	800719c <raise>
 8007128:	2001      	movs	r0, #1
 800712a:	f7fa fe6b 	bl	8001e04 <_exit>

0800712e <memcpy>:
 800712e:	440a      	add	r2, r1
 8007130:	4291      	cmp	r1, r2
 8007132:	f100 33ff 	add.w	r3, r0, #4294967295
 8007136:	d100      	bne.n	800713a <memcpy+0xc>
 8007138:	4770      	bx	lr
 800713a:	b510      	push	{r4, lr}
 800713c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007140:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007144:	4291      	cmp	r1, r2
 8007146:	d1f9      	bne.n	800713c <memcpy+0xe>
 8007148:	bd10      	pop	{r4, pc}

0800714a <_raise_r>:
 800714a:	291f      	cmp	r1, #31
 800714c:	b538      	push	{r3, r4, r5, lr}
 800714e:	4604      	mov	r4, r0
 8007150:	460d      	mov	r5, r1
 8007152:	d904      	bls.n	800715e <_raise_r+0x14>
 8007154:	2316      	movs	r3, #22
 8007156:	6003      	str	r3, [r0, #0]
 8007158:	f04f 30ff 	mov.w	r0, #4294967295
 800715c:	bd38      	pop	{r3, r4, r5, pc}
 800715e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007160:	b112      	cbz	r2, 8007168 <_raise_r+0x1e>
 8007162:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007166:	b94b      	cbnz	r3, 800717c <_raise_r+0x32>
 8007168:	4620      	mov	r0, r4
 800716a:	f000 f831 	bl	80071d0 <_getpid_r>
 800716e:	462a      	mov	r2, r5
 8007170:	4601      	mov	r1, r0
 8007172:	4620      	mov	r0, r4
 8007174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007178:	f000 b818 	b.w	80071ac <_kill_r>
 800717c:	2b01      	cmp	r3, #1
 800717e:	d00a      	beq.n	8007196 <_raise_r+0x4c>
 8007180:	1c59      	adds	r1, r3, #1
 8007182:	d103      	bne.n	800718c <_raise_r+0x42>
 8007184:	2316      	movs	r3, #22
 8007186:	6003      	str	r3, [r0, #0]
 8007188:	2001      	movs	r0, #1
 800718a:	e7e7      	b.n	800715c <_raise_r+0x12>
 800718c:	2400      	movs	r4, #0
 800718e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007192:	4628      	mov	r0, r5
 8007194:	4798      	blx	r3
 8007196:	2000      	movs	r0, #0
 8007198:	e7e0      	b.n	800715c <_raise_r+0x12>
	...

0800719c <raise>:
 800719c:	4b02      	ldr	r3, [pc, #8]	; (80071a8 <raise+0xc>)
 800719e:	4601      	mov	r1, r0
 80071a0:	6818      	ldr	r0, [r3, #0]
 80071a2:	f7ff bfd2 	b.w	800714a <_raise_r>
 80071a6:	bf00      	nop
 80071a8:	2000000c 	.word	0x2000000c

080071ac <_kill_r>:
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	4d07      	ldr	r5, [pc, #28]	; (80071cc <_kill_r+0x20>)
 80071b0:	2300      	movs	r3, #0
 80071b2:	4604      	mov	r4, r0
 80071b4:	4608      	mov	r0, r1
 80071b6:	4611      	mov	r1, r2
 80071b8:	602b      	str	r3, [r5, #0]
 80071ba:	f7fa fe13 	bl	8001de4 <_kill>
 80071be:	1c43      	adds	r3, r0, #1
 80071c0:	d102      	bne.n	80071c8 <_kill_r+0x1c>
 80071c2:	682b      	ldr	r3, [r5, #0]
 80071c4:	b103      	cbz	r3, 80071c8 <_kill_r+0x1c>
 80071c6:	6023      	str	r3, [r4, #0]
 80071c8:	bd38      	pop	{r3, r4, r5, pc}
 80071ca:	bf00      	nop
 80071cc:	2000028c 	.word	0x2000028c

080071d0 <_getpid_r>:
 80071d0:	f7fa be00 	b.w	8001dd4 <_getpid>

080071d4 <_init>:
 80071d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d6:	bf00      	nop
 80071d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071da:	bc08      	pop	{r3}
 80071dc:	469e      	mov	lr, r3
 80071de:	4770      	bx	lr

080071e0 <_fini>:
 80071e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e2:	bf00      	nop
 80071e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071e6:	bc08      	pop	{r3}
 80071e8:	469e      	mov	lr, r3
 80071ea:	4770      	bx	lr
